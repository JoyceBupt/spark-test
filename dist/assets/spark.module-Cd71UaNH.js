(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const s of i)if(s.type==="childList")for(const a of s.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function e(i){const s={};return i.integrity&&(s.integrity=i.integrity),i.referrerPolicy&&(s.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?s.credentials="include":i.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(i){if(i.ep)return;i.ep=!0;const s=e(i);fetch(i.href,s)}})();/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const Ar="177",il=0,_r=1,sl=2,ko=1,al=2,yn=3,Yn=0,Te=1,rn=2,Pn=0,lA=1,Mr=2,vr=3,br=4,rl=5,nA=100,ol=101,cl=102,ll=103,gl=104,hl=200,ul=201,dl=202,Il=203,aa=204,ra=205,El=206,pl=207,fl=208,Bl=209,Cl=210,Ql=211,ml=212,yl=213,xl=214,oa=0,ca=1,la=2,LA=3,ga=4,ha=5,ua=6,da=7,Uo=0,wl=1,Sl=2,Hn=0,Dl=1,_l=2,Ml=3,vl=4,bl=5,Rl=6,Fl=7,Lo=300,GA=301,PA=302,Ia=303,Ea=304,gs=306,pa=1e3,iA=1001,fa=1002,ye=1003,Nl=1004,Ci=1005,on=1006,Cs=1007,sA=1008,Tl=1008,Le=1009,Go=1010,Po=1011,ai=1012,ir=1013,ke=1014,wn=1015,ui=1016,sr=1017,ar=1018,ri=1020,Ho=35902,zo=1021,Yo=1022,me=1023,oi=1026,ci=1027,Oo=1028,rr=1029,Jo=1030,hs=1031,Dn=1033,Ki=33776,Wi=33777,Xi=33778,Zi=33779,Ba=35840,Ca=35841,Qa=35842,ma=35843,ya=36196,xa=37492,wa=37496,Sa=37808,Da=37809,_a=37810,Ma=37811,va=37812,ba=37813,Ra=37814,Fa=37815,Na=37816,Ta=37817,ka=37818,Ua=37819,La=37820,Ga=37821,ji=36492,Pa=36494,Ha=36495,qo=36283,za=36284,Ya=36285,Oa=36286,kl=3200,Ul=3201,Vo=0,Ll=1,Ln="",Ne="srgb",HA="srgb-linear",is="linear",ee="srgb",IA=7680,Rr=519,Gl=512,Pl=513,Hl=514,Ko=515,zl=516,Yl=517,Ol=518,Jl=519,Fr=35044,ql=35048,ss="300 es",Sn=2e3,as=2001;class OA{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[t]===void 0&&(n[t]=[]),n[t].indexOf(e)===-1&&n[t].push(e)}hasEventListener(t,e){const n=this._listeners;return n===void 0?!1:n[t]!==void 0&&n[t].indexOf(e)!==-1}removeEventListener(t,e){const n=this._listeners;if(n===void 0)return;const i=n[t];if(i!==void 0){const s=i.indexOf(e);s!==-1&&i.splice(s,1)}}dispatchEvent(t){const e=this._listeners;if(e===void 0)return;const n=e[t.type];if(n!==void 0){t.target=this;const i=n.slice(0);for(let s=0,a=i.length;s<a;s++)i[s].call(this,t);t.target=null}}}const we=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],Qs=Math.PI/180,Ja=180/Math.PI;function di(){const A=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(we[A&255]+we[A>>8&255]+we[A>>16&255]+we[A>>24&255]+"-"+we[t&255]+we[t>>8&255]+"-"+we[t>>16&15|64]+we[t>>24&255]+"-"+we[e&63|128]+we[e>>8&255]+"-"+we[e>>16&255]+we[e>>24&255]+we[n&255]+we[n>>8&255]+we[n>>16&255]+we[n>>24&255]).toLowerCase()}function Jt(A,t,e){return Math.max(t,Math.min(e,A))}function Vl(A,t){return(A%t+t)%t}function ms(A,t,e){return(1-e)*A+e*t}function KA(A,t){switch(t.constructor){case Float32Array:return A;case Uint32Array:return A/4294967295;case Uint16Array:return A/65535;case Uint8Array:return A/255;case Int32Array:return Math.max(A/2147483647,-1);case Int16Array:return Math.max(A/32767,-1);case Int8Array:return Math.max(A/127,-1);default:throw new Error("Invalid component type.")}}function Fe(A,t){switch(t.constructor){case Float32Array:return A;case Uint32Array:return Math.round(A*4294967295);case Uint16Array:return Math.round(A*65535);case Uint8Array:return Math.round(A*255);case Int32Array:return Math.round(A*2147483647);case Int16Array:return Math.round(A*32767);case Int8Array:return Math.round(A*127);default:throw new Error("Invalid component type.")}}class Xt{constructor(t=0,e=0){Xt.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Jt(this.x,t.x,e.x),this.y=Jt(this.y,t.y,e.y),this}clampScalar(t,e){return this.x=Jt(this.x,t,e),this.y=Jt(this.y,t,e),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Jt(n,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Jt(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),s=this.x-t.x,a=this.y-t.y;return this.x=s*n-a*i+t.x,this.y=s*i+a*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class fe{constructor(t=0,e=0,n=0,i=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=i}static slerpFlat(t,e,n,i,s,a,r){let o=n[i+0],c=n[i+1],g=n[i+2],l=n[i+3];const h=s[a+0],d=s[a+1],E=s[a+2],f=s[a+3];if(r===0){t[e+0]=o,t[e+1]=c,t[e+2]=g,t[e+3]=l;return}if(r===1){t[e+0]=h,t[e+1]=d,t[e+2]=E,t[e+3]=f;return}if(l!==f||o!==h||c!==d||g!==E){let I=1-r;const u=o*h+c*d+g*E+l*f,x=u>=0?1:-1,Q=1-u*u;if(Q>Number.EPSILON){const M=Math.sqrt(Q),S=Math.atan2(M,u*x);I=Math.sin(I*S)/M,r=Math.sin(r*S)/M}const m=r*x;if(o=o*I+h*m,c=c*I+d*m,g=g*I+E*m,l=l*I+f*m,I===1-r){const M=1/Math.sqrt(o*o+c*c+g*g+l*l);o*=M,c*=M,g*=M,l*=M}}t[e]=o,t[e+1]=c,t[e+2]=g,t[e+3]=l}static multiplyQuaternionsFlat(t,e,n,i,s,a){const r=n[i],o=n[i+1],c=n[i+2],g=n[i+3],l=s[a],h=s[a+1],d=s[a+2],E=s[a+3];return t[e]=r*E+g*l+o*d-c*h,t[e+1]=o*E+g*h+c*l-r*d,t[e+2]=c*E+g*d+r*h-o*l,t[e+3]=g*E-r*l-o*h-c*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const n=t._x,i=t._y,s=t._z,a=t._order,r=Math.cos,o=Math.sin,c=r(n/2),g=r(i/2),l=r(s/2),h=o(n/2),d=o(i/2),E=o(s/2);switch(a){case"XYZ":this._x=h*g*l+c*d*E,this._y=c*d*l-h*g*E,this._z=c*g*E+h*d*l,this._w=c*g*l-h*d*E;break;case"YXZ":this._x=h*g*l+c*d*E,this._y=c*d*l-h*g*E,this._z=c*g*E-h*d*l,this._w=c*g*l+h*d*E;break;case"ZXY":this._x=h*g*l-c*d*E,this._y=c*d*l+h*g*E,this._z=c*g*E+h*d*l,this._w=c*g*l-h*d*E;break;case"ZYX":this._x=h*g*l-c*d*E,this._y=c*d*l+h*g*E,this._z=c*g*E-h*d*l,this._w=c*g*l+h*d*E;break;case"YZX":this._x=h*g*l+c*d*E,this._y=c*d*l+h*g*E,this._z=c*g*E-h*d*l,this._w=c*g*l-h*d*E;break;case"XZY":this._x=h*g*l-c*d*E,this._y=c*d*l-h*g*E,this._z=c*g*E+h*d*l,this._w=c*g*l+h*d*E;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],s=e[8],a=e[1],r=e[5],o=e[9],c=e[2],g=e[6],l=e[10],h=n+r+l;if(h>0){const d=.5/Math.sqrt(h+1);this._w=.25/d,this._x=(g-o)*d,this._y=(s-c)*d,this._z=(a-i)*d}else if(n>r&&n>l){const d=2*Math.sqrt(1+n-r-l);this._w=(g-o)/d,this._x=.25*d,this._y=(i+a)/d,this._z=(s+c)/d}else if(r>l){const d=2*Math.sqrt(1+r-n-l);this._w=(s-c)/d,this._x=(i+a)/d,this._y=.25*d,this._z=(o+g)/d}else{const d=2*Math.sqrt(1+l-n-r);this._w=(a-i)/d,this._x=(s+c)/d,this._y=(o+g)/d,this._z=.25*d}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Jt(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(n===0)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,s=t._z,a=t._w,r=e._x,o=e._y,c=e._z,g=e._w;return this._x=n*g+a*r+i*c-s*o,this._y=i*g+a*o+s*r-n*c,this._z=s*g+a*c+n*o-i*r,this._w=a*g-n*r-i*o-s*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const n=this._x,i=this._y,s=this._z,a=this._w;let r=a*t._w+n*t._x+i*t._y+s*t._z;if(r<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,r=-r):this.copy(t),r>=1)return this._w=a,this._x=n,this._y=i,this._z=s,this;const o=1-r*r;if(o<=Number.EPSILON){const d=1-e;return this._w=d*a+e*this._w,this._x=d*n+e*this._x,this._y=d*i+e*this._y,this._z=d*s+e*this._z,this.normalize(),this}const c=Math.sqrt(o),g=Math.atan2(c,r),l=Math.sin((1-e)*g)/c,h=Math.sin(e*g)/c;return this._w=a*l+this._w*h,this._x=n*l+this._x*h,this._y=i*l+this._y*h,this._z=s*l+this._z*h,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),s=Math.sqrt(n);return this.set(i*Math.sin(t),i*Math.cos(t),s*Math.sin(e),s*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class b{constructor(t=0,e=0,n=0){b.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return n===void 0&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(Nr.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(Nr.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[3]*n+s[6]*i,this.y=s[1]*e+s[4]*n+s[7]*i,this.z=s[2]*e+s[5]*n+s[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=t.elements,a=1/(s[3]*e+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*e+s[4]*n+s[8]*i+s[12])*a,this.y=(s[1]*e+s[5]*n+s[9]*i+s[13])*a,this.z=(s[2]*e+s[6]*n+s[10]*i+s[14])*a,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,s=t.x,a=t.y,r=t.z,o=t.w,c=2*(a*i-r*n),g=2*(r*e-s*i),l=2*(s*n-a*e);return this.x=e+o*c+a*l-r*g,this.y=n+o*g+r*c-s*l,this.z=i+o*l+s*g-a*c,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*i,this.y=s[1]*e+s[5]*n+s[9]*i,this.z=s[2]*e+s[6]*n+s[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Jt(this.x,t.x,e.x),this.y=Jt(this.y,t.y,e.y),this.z=Jt(this.z,t.z,e.z),this}clampScalar(t,e){return this.x=Jt(this.x,t,e),this.y=Jt(this.y,t,e),this.z=Jt(this.z,t,e),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Jt(n,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,s=t.z,a=e.x,r=e.y,o=e.z;return this.x=i*o-s*r,this.y=s*a-n*o,this.z=n*r-i*a,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return ys.copy(this).projectOnVector(t),this.sub(ys)}reflect(t){return this.sub(ys.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Jt(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,n=Math.sqrt(1-e*e);return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const ys=new b,Nr=new fe;class Tt{constructor(t,e,n,i,s,a,r,o,c){Tt.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,a,r,o,c)}set(t,e,n,i,s,a,r,o,c){const g=this.elements;return g[0]=t,g[1]=i,g[2]=r,g[3]=e,g[4]=s,g[5]=o,g[6]=n,g[7]=a,g[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,a=n[0],r=n[3],o=n[6],c=n[1],g=n[4],l=n[7],h=n[2],d=n[5],E=n[8],f=i[0],I=i[3],u=i[6],x=i[1],Q=i[4],m=i[7],M=i[2],S=i[5],D=i[8];return s[0]=a*f+r*x+o*M,s[3]=a*I+r*Q+o*S,s[6]=a*u+r*m+o*D,s[1]=c*f+g*x+l*M,s[4]=c*I+g*Q+l*S,s[7]=c*u+g*m+l*D,s[2]=h*f+d*x+E*M,s[5]=h*I+d*Q+E*S,s[8]=h*u+d*m+E*D,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],a=t[4],r=t[5],o=t[6],c=t[7],g=t[8];return e*a*g-e*r*c-n*s*g+n*r*o+i*s*c-i*a*o}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],a=t[4],r=t[5],o=t[6],c=t[7],g=t[8],l=g*a-r*c,h=r*o-g*s,d=c*s-a*o,E=e*l+n*h+i*d;if(E===0)return this.set(0,0,0,0,0,0,0,0,0);const f=1/E;return t[0]=l*f,t[1]=(i*c-g*n)*f,t[2]=(r*n-i*a)*f,t[3]=h*f,t[4]=(g*e-i*o)*f,t[5]=(i*s-r*e)*f,t[6]=d*f,t[7]=(n*o-c*e)*f,t[8]=(a*e-n*s)*f,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,s,a,r){const o=Math.cos(s),c=Math.sin(s);return this.set(n*o,n*c,-n*(o*a+c*r)+a+t,-i*c,i*o,-i*(-c*a+o*r)+r+e,0,0,1),this}scale(t,e){return this.premultiply(xs.makeScale(t,e)),this}rotate(t){return this.premultiply(xs.makeRotation(-t)),this}translate(t,e){return this.premultiply(xs.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<9;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const xs=new Tt;function Wo(A){for(let t=A.length-1;t>=0;--t)if(A[t]>=65535)return!0;return!1}function rs(A){return document.createElementNS("http://www.w3.org/1999/xhtml",A)}function Kl(){const A=rs("canvas");return A.style.display="block",A}const Tr={};function TA(A){A in Tr||(Tr[A]=!0,console.warn(A))}function Wl(A,t,e){return new Promise(function(n,i){function s(){switch(A.clientWaitSync(t,A.SYNC_FLUSH_COMMANDS_BIT,0)){case A.WAIT_FAILED:i();break;case A.TIMEOUT_EXPIRED:setTimeout(s,e);break;default:n()}}setTimeout(s,e)})}function Xl(A){const t=A.elements;t[2]=.5*t[2]+.5*t[3],t[6]=.5*t[6]+.5*t[7],t[10]=.5*t[10]+.5*t[11],t[14]=.5*t[14]+.5*t[15]}function Zl(A){const t=A.elements;t[11]===-1?(t[10]=-t[10]-1,t[14]=-t[14]):(t[10]=-t[10],t[14]=-t[14]+1)}const kr=new Tt().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),Ur=new Tt().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function jl(){const A={enabled:!0,workingColorSpace:HA,spaces:{},convert:function(i,s,a){return this.enabled===!1||s===a||!s||!a||(this.spaces[s].transfer===ee&&(i.r=_n(i.r),i.g=_n(i.g),i.b=_n(i.b)),this.spaces[s].primaries!==this.spaces[a].primaries&&(i.applyMatrix3(this.spaces[s].toXYZ),i.applyMatrix3(this.spaces[a].fromXYZ)),this.spaces[a].transfer===ee&&(i.r=kA(i.r),i.g=kA(i.g),i.b=kA(i.b))),i},workingToColorSpace:function(i,s){return this.convert(i,this.workingColorSpace,s)},colorSpaceToWorking:function(i,s){return this.convert(i,s,this.workingColorSpace)},getPrimaries:function(i){return this.spaces[i].primaries},getTransfer:function(i){return i===Ln?is:this.spaces[i].transfer},getLuminanceCoefficients:function(i,s=this.workingColorSpace){return i.fromArray(this.spaces[s].luminanceCoefficients)},define:function(i){Object.assign(this.spaces,i)},_getMatrix:function(i,s,a){return i.copy(this.spaces[s].toXYZ).multiply(this.spaces[a].fromXYZ)},_getDrawingBufferColorSpace:function(i){return this.spaces[i].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(i=this.workingColorSpace){return this.spaces[i].workingColorSpaceConfig.unpackColorSpace},fromWorkingColorSpace:function(i,s){return TA("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."),A.workingToColorSpace(i,s)},toWorkingColorSpace:function(i,s){return TA("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."),A.colorSpaceToWorking(i,s)}},t=[.64,.33,.3,.6,.15,.06],e=[.2126,.7152,.0722],n=[.3127,.329];return A.define({[HA]:{primaries:t,whitePoint:n,transfer:is,toXYZ:kr,fromXYZ:Ur,luminanceCoefficients:e,workingColorSpaceConfig:{unpackColorSpace:Ne},outputColorSpaceConfig:{drawingBufferColorSpace:Ne}},[Ne]:{primaries:t,whitePoint:n,transfer:ee,toXYZ:kr,fromXYZ:Ur,luminanceCoefficients:e,outputColorSpaceConfig:{drawingBufferColorSpace:Ne}}}),A}const Wt=jl();function _n(A){return A<.04045?A*.0773993808:Math.pow(A*.9478672986+.0521327014,2.4)}function kA(A){return A<.0031308?A*12.92:1.055*Math.pow(A,.41666)-.055}let EA;class $l{static getDataURL(t,e="image/png"){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let n;if(t instanceof HTMLCanvasElement)n=t;else{EA===void 0&&(EA=rs("canvas")),EA.width=t.width,EA.height=t.height;const i=EA.getContext("2d");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),n=EA}return n.toDataURL(e)}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=rs("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),s=i.data;for(let a=0;a<s.length;a++)s[a]=_n(s[a]/255)*255;return n.putImageData(i,0,0),e}else if(t.data){const e=t.data.slice(0);for(let n=0;n<e.length;n++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[n]=Math.floor(_n(e[n]/255)*255):e[n]=_n(e[n]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let tg=0;class or{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:tg++}),this.uuid=di(),this.data=t,this.dataReady=!0,this.version=0}getSize(t){const e=this.data;return e instanceof HTMLVideoElement?t.set(e.videoWidth,e.videoHeight):e!==null?t.set(e.width,e.height,e.depth||0):t.set(0,0,0),t}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let s;if(Array.isArray(i)){s=[];for(let a=0,r=i.length;a<r;a++)i[a].isDataTexture?s.push(ws(i[a].image)):s.push(ws(i[a]))}else s=ws(i);n.url=s}return e||(t.images[this.uuid]=n),n}}function ws(A){return typeof HTMLImageElement<"u"&&A instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&A instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&A instanceof ImageBitmap?$l.getDataURL(A):A.data?{data:Array.from(A.data),width:A.width,height:A.height,type:A.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let eg=0;const Ss=new b;class De extends OA{constructor(t=De.DEFAULT_IMAGE,e=De.DEFAULT_MAPPING,n=iA,i=iA,s=on,a=sA,r=me,o=Le,c=De.DEFAULT_ANISOTROPY,g=Ln){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:eg++}),this.uuid=di(),this.name="",this.source=new or(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=a,this.anisotropy=c,this.format=r,this.internalFormat=null,this.type=o,this.offset=new Xt(0,0),this.repeat=new Xt(1,1),this.center=new Xt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Tt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=g,this.userData={},this.updateRanges=[],this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.isArrayTexture=!!(t&&t.depth&&t.depth>1),this.pmremVersion=0}get width(){return this.source.getSize(Ss).x}get height(){return this.source.getSize(Ss).y}get depth(){return this.source.getSize(Ss).z}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.renderTarget=t.renderTarget,this.isRenderTargetTexture=t.isRenderTargetTexture,this.isArrayTexture=t.isArrayTexture,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}setValues(t){for(const e in t){const n=t[e];if(n===void 0){console.warn(`THREE.Texture.setValues(): parameter '${e}' has value of undefined.`);continue}const i=this[e];if(i===void 0){console.warn(`THREE.Texture.setValues(): property '${e}' does not exist.`);continue}i&&n&&i.isVector2&&n.isVector2||i&&n&&i.isVector3&&n.isVector3||i&&n&&i.isMatrix3&&n.isMatrix3?i.copy(n):this[e]=n}}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const n={metadata:{version:4.7,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==Lo)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case pa:t.x=t.x-Math.floor(t.x);break;case iA:t.x=t.x<0?0:1;break;case fa:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case pa:t.y=t.y-Math.floor(t.y);break;case iA:t.y=t.y<0?0:1;break;case fa:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}}De.DEFAULT_IMAGE=null;De.DEFAULT_MAPPING=Lo;De.DEFAULT_ANISOTROPY=1;class te{constructor(t=0,e=0,n=0,i=1){te.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,s=this.w,a=t.elements;return this.x=a[0]*e+a[4]*n+a[8]*i+a[12]*s,this.y=a[1]*e+a[5]*n+a[9]*i+a[13]*s,this.z=a[2]*e+a[6]*n+a[10]*i+a[14]*s,this.w=a[3]*e+a[7]*n+a[11]*i+a[15]*s,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,s;const o=t.elements,c=o[0],g=o[4],l=o[8],h=o[1],d=o[5],E=o[9],f=o[2],I=o[6],u=o[10];if(Math.abs(g-h)<.01&&Math.abs(l-f)<.01&&Math.abs(E-I)<.01){if(Math.abs(g+h)<.1&&Math.abs(l+f)<.1&&Math.abs(E+I)<.1&&Math.abs(c+d+u-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const Q=(c+1)/2,m=(d+1)/2,M=(u+1)/2,S=(g+h)/4,D=(l+f)/4,T=(E+I)/4;return Q>m&&Q>M?Q<.01?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(Q),i=S/n,s=D/n):m>M?m<.01?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(m),n=S/i,s=T/i):M<.01?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(M),n=D/s,i=T/s),this.set(n,i,s,e),this}let x=Math.sqrt((I-E)*(I-E)+(l-f)*(l-f)+(h-g)*(h-g));return Math.abs(x)<.001&&(x=1),this.x=(I-E)/x,this.y=(l-f)/x,this.z=(h-g)/x,this.w=Math.acos((c+d+u-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Jt(this.x,t.x,e.x),this.y=Jt(this.y,t.y,e.y),this.z=Jt(this.z,t.z,e.z),this.w=Jt(this.w,t.w,e.w),this}clampScalar(t,e){return this.x=Jt(this.x,t,e),this.y=Jt(this.y,t,e),this.z=Jt(this.z,t,e),this.w=Jt(this.w,t,e),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Jt(n,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class ng extends OA{constructor(t=1,e=1,n={}){super(),n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:on,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1,depth:1,multiview:!1},n),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=n.depth,this.scissor=new te(0,0,t,e),this.scissorTest=!1,this.viewport=new te(0,0,t,e);const i={width:t,height:e,depth:n.depth},s=new De(i);this.textures=[];const a=n.count;for(let r=0;r<a;r++)this.textures[r]=s.clone(),this.textures[r].isRenderTargetTexture=!0,this.textures[r].renderTarget=this;this._setTextureOptions(n),this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=n.depthTexture,this.samples=n.samples,this.multiview=n.multiview}_setTextureOptions(t={}){const e={minFilter:on,generateMipmaps:!1,flipY:!1,internalFormat:null};t.mapping!==void 0&&(e.mapping=t.mapping),t.wrapS!==void 0&&(e.wrapS=t.wrapS),t.wrapT!==void 0&&(e.wrapT=t.wrapT),t.wrapR!==void 0&&(e.wrapR=t.wrapR),t.magFilter!==void 0&&(e.magFilter=t.magFilter),t.minFilter!==void 0&&(e.minFilter=t.minFilter),t.format!==void 0&&(e.format=t.format),t.type!==void 0&&(e.type=t.type),t.anisotropy!==void 0&&(e.anisotropy=t.anisotropy),t.colorSpace!==void 0&&(e.colorSpace=t.colorSpace),t.flipY!==void 0&&(e.flipY=t.flipY),t.generateMipmaps!==void 0&&(e.generateMipmaps=t.generateMipmaps),t.internalFormat!==void 0&&(e.internalFormat=t.internalFormat);for(let n=0;n<this.textures.length;n++)this.textures[n].setValues(e)}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}set depthTexture(t){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),t!==null&&(t.renderTarget=this),this._depthTexture=t}get depthTexture(){return this._depthTexture}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,s=this.textures.length;i<s;i++)this.textures[i].image.width=t,this.textures[i].image.height=e,this.textures[i].image.depth=n,this.textures[i].isArrayTexture=this.textures[i].image.depth>1;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let e=0,n=t.textures.length;e<n;e++){this.textures[e]=t.textures[e].clone(),this.textures[e].isRenderTargetTexture=!0,this.textures[e].renderTarget=this;const i=Object.assign({},t.textures[e].image);this.textures[e].source=new or(i)}return this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class ln extends ng{constructor(t=1,e=1,n={}){super(t,e,n),this.isWebGLRenderTarget=!0}}class cn extends De{constructor(t=null,e=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=ye,this.minFilter=ye,this.wrapR=iA,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class Xo extends ln{constructor(t=1,e=1,n=1,i={}){super(t,e,i),this.isWebGLArrayRenderTarget=!0,this.depth=n,this.texture=new cn(null,t,e,n),this._setTextureOptions(i),this.texture.isRenderTargetTexture=!0}}class Ag extends De{constructor(t=null,e=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=ye,this.minFilter=ye,this.wrapR=iA,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class uA{constructor(t=new b(1/0,1/0,1/0),e=new b(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e+=3)this.expandByPoint(tn.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,n=t.count;e<n;e++)this.expandByPoint(tn.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=tn.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(n!==void 0){const s=n.getAttribute("position");if(e===!0&&s!==void 0&&t.isInstancedMesh!==!0)for(let a=0,r=s.count;a<r;a++)t.isMesh===!0?t.getVertexPosition(a,tn):tn.fromBufferAttribute(s,a),tn.applyMatrix4(t.matrixWorld),this.expandByPoint(tn);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),Qi.copy(t.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),Qi.copy(n.boundingBox)),Qi.applyMatrix4(t.matrixWorld),this.union(Qi)}const i=t.children;for(let s=0,a=i.length;s<a;s++)this.expandByObject(i[s],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,tn),tn.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(WA),mi.subVectors(this.max,WA),pA.subVectors(t.a,WA),fA.subVectors(t.b,WA),BA.subVectors(t.c,WA),bn.subVectors(fA,pA),Rn.subVectors(BA,fA),Kn.subVectors(pA,BA);let e=[0,-bn.z,bn.y,0,-Rn.z,Rn.y,0,-Kn.z,Kn.y,bn.z,0,-bn.x,Rn.z,0,-Rn.x,Kn.z,0,-Kn.x,-bn.y,bn.x,0,-Rn.y,Rn.x,0,-Kn.y,Kn.x,0];return!Ds(e,pA,fA,BA,mi)||(e=[1,0,0,0,1,0,0,0,1],!Ds(e,pA,fA,BA,mi))?!1:(yi.crossVectors(bn,Rn),e=[yi.x,yi.y,yi.z],Ds(e,pA,fA,BA,mi))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,tn).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(tn).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(fn[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),fn[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),fn[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),fn[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),fn[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),fn[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),fn[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),fn[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(fn),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}toJSON(){return{min:this.min.toArray(),max:this.max.toArray()}}fromJSON(t){return this.min.fromArray(t.min),this.max.fromArray(t.max),this}}const fn=[new b,new b,new b,new b,new b,new b,new b,new b],tn=new b,Qi=new uA,pA=new b,fA=new b,BA=new b,bn=new b,Rn=new b,Kn=new b,WA=new b,mi=new b,yi=new b,Wn=new b;function Ds(A,t,e,n,i){for(let s=0,a=A.length-3;s<=a;s+=3){Wn.fromArray(A,s);const r=i.x*Math.abs(Wn.x)+i.y*Math.abs(Wn.y)+i.z*Math.abs(Wn.z),o=t.dot(Wn),c=e.dot(Wn),g=n.dot(Wn);if(Math.max(-Math.max(o,c,g),Math.min(o,c,g))>r)return!1}return!0}const ig=new uA,XA=new b,_s=new b;class cr{constructor(t=new b,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;e!==void 0?n.copy(e):ig.setFromPoints(t).getCenter(n);let i=0;for(let s=0,a=t.length;s<a;s++)i=Math.max(i,n.distanceToSquared(t[s]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;XA.subVectors(t,this.center);const e=XA.lengthSq();if(e>this.radius*this.radius){const n=Math.sqrt(e),i=(n-this.radius)*.5;this.center.addScaledVector(XA,i/n),this.radius+=i}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(_s.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(XA.copy(t.center).add(_s)),this.expandByPoint(XA.copy(t.center).sub(_s))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}toJSON(){return{radius:this.radius,center:this.center.toArray()}}fromJSON(t){return this.radius=t.radius,this.center.fromArray(t.center),this}}const Bn=new b,Ms=new b,xi=new b,Fn=new b,vs=new b,wi=new b,bs=new b;class sg{constructor(t=new b,e=new b(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Bn)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=Bn.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Bn.copy(this.origin).addScaledVector(this.direction,e),Bn.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){Ms.copy(t).add(e).multiplyScalar(.5),xi.copy(e).sub(t).normalize(),Fn.copy(this.origin).sub(Ms);const s=t.distanceTo(e)*.5,a=-this.direction.dot(xi),r=Fn.dot(this.direction),o=-Fn.dot(xi),c=Fn.lengthSq(),g=Math.abs(1-a*a);let l,h,d,E;if(g>0)if(l=a*o-r,h=a*r-o,E=s*g,l>=0)if(h>=-E)if(h<=E){const f=1/g;l*=f,h*=f,d=l*(l+a*h+2*r)+h*(a*l+h+2*o)+c}else h=s,l=Math.max(0,-(a*h+r)),d=-l*l+h*(h+2*o)+c;else h=-s,l=Math.max(0,-(a*h+r)),d=-l*l+h*(h+2*o)+c;else h<=-E?(l=Math.max(0,-(-a*s+r)),h=l>0?-s:Math.min(Math.max(-s,-o),s),d=-l*l+h*(h+2*o)+c):h<=E?(l=0,h=Math.min(Math.max(-s,-o),s),d=h*(h+2*o)+c):(l=Math.max(0,-(a*s+r)),h=l>0?s:Math.min(Math.max(-s,-o),s),d=-l*l+h*(h+2*o)+c);else h=a>0?-s:s,l=Math.max(0,-(a*h+r)),d=-l*l+h*(h+2*o)+c;return n&&n.copy(this.origin).addScaledVector(this.direction,l),i&&i.copy(Ms).addScaledVector(xi,h),d}intersectSphere(t,e){Bn.subVectors(t.center,this.origin);const n=Bn.dot(this.direction),i=Bn.dot(Bn)-n*n,s=t.radius*t.radius;if(i>s)return null;const a=Math.sqrt(s-i),r=n-a,o=n+a;return o<0?null:r<0?this.at(o,e):this.at(r,e)}intersectsSphere(t){return t.radius<0?!1:this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return n===null?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,s,a,r,o;const c=1/this.direction.x,g=1/this.direction.y,l=1/this.direction.z,h=this.origin;return c>=0?(n=(t.min.x-h.x)*c,i=(t.max.x-h.x)*c):(n=(t.max.x-h.x)*c,i=(t.min.x-h.x)*c),g>=0?(s=(t.min.y-h.y)*g,a=(t.max.y-h.y)*g):(s=(t.max.y-h.y)*g,a=(t.min.y-h.y)*g),n>a||s>i||((s>n||isNaN(n))&&(n=s),(a<i||isNaN(i))&&(i=a),l>=0?(r=(t.min.z-h.z)*l,o=(t.max.z-h.z)*l):(r=(t.max.z-h.z)*l,o=(t.min.z-h.z)*l),n>o||r>i)||((r>n||n!==n)&&(n=r),(o<i||i!==i)&&(i=o),i<0)?null:this.at(n>=0?n:i,e)}intersectsBox(t){return this.intersectBox(t,Bn)!==null}intersectTriangle(t,e,n,i,s){vs.subVectors(e,t),wi.subVectors(n,t),bs.crossVectors(vs,wi);let a=this.direction.dot(bs),r;if(a>0){if(i)return null;r=1}else if(a<0)r=-1,a=-a;else return null;Fn.subVectors(this.origin,t);const o=r*this.direction.dot(wi.crossVectors(Fn,wi));if(o<0)return null;const c=r*this.direction.dot(vs.cross(Fn));if(c<0||o+c>a)return null;const g=-r*Fn.dot(bs);return g<0?null:this.at(g/a,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class ne{constructor(t,e,n,i,s,a,r,o,c,g,l,h,d,E,f,I){ne.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,n,i,s,a,r,o,c,g,l,h,d,E,f,I)}set(t,e,n,i,s,a,r,o,c,g,l,h,d,E,f,I){const u=this.elements;return u[0]=t,u[4]=e,u[8]=n,u[12]=i,u[1]=s,u[5]=a,u[9]=r,u[13]=o,u[2]=c,u[6]=g,u[10]=l,u[14]=h,u[3]=d,u[7]=E,u[11]=f,u[15]=I,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new ne().fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/CA.setFromMatrixColumn(t,0).length(),s=1/CA.setFromMatrixColumn(t,1).length(),a=1/CA.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*s,e[5]=n[5]*s,e[6]=n[6]*s,e[7]=0,e[8]=n[8]*a,e[9]=n[9]*a,e[10]=n[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,i=t.y,s=t.z,a=Math.cos(n),r=Math.sin(n),o=Math.cos(i),c=Math.sin(i),g=Math.cos(s),l=Math.sin(s);if(t.order==="XYZ"){const h=a*g,d=a*l,E=r*g,f=r*l;e[0]=o*g,e[4]=-o*l,e[8]=c,e[1]=d+E*c,e[5]=h-f*c,e[9]=-r*o,e[2]=f-h*c,e[6]=E+d*c,e[10]=a*o}else if(t.order==="YXZ"){const h=o*g,d=o*l,E=c*g,f=c*l;e[0]=h+f*r,e[4]=E*r-d,e[8]=a*c,e[1]=a*l,e[5]=a*g,e[9]=-r,e[2]=d*r-E,e[6]=f+h*r,e[10]=a*o}else if(t.order==="ZXY"){const h=o*g,d=o*l,E=c*g,f=c*l;e[0]=h-f*r,e[4]=-a*l,e[8]=E+d*r,e[1]=d+E*r,e[5]=a*g,e[9]=f-h*r,e[2]=-a*c,e[6]=r,e[10]=a*o}else if(t.order==="ZYX"){const h=a*g,d=a*l,E=r*g,f=r*l;e[0]=o*g,e[4]=E*c-d,e[8]=h*c+f,e[1]=o*l,e[5]=f*c+h,e[9]=d*c-E,e[2]=-c,e[6]=r*o,e[10]=a*o}else if(t.order==="YZX"){const h=a*o,d=a*c,E=r*o,f=r*c;e[0]=o*g,e[4]=f-h*l,e[8]=E*l+d,e[1]=l,e[5]=a*g,e[9]=-r*g,e[2]=-c*g,e[6]=d*l+E,e[10]=h-f*l}else if(t.order==="XZY"){const h=a*o,d=a*c,E=r*o,f=r*c;e[0]=o*g,e[4]=-l,e[8]=c*g,e[1]=h*l+f,e[5]=a*g,e[9]=d*l-E,e[2]=E*l-d,e[6]=r*g,e[10]=f*l+h}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(ag,t,rg)}lookAt(t,e,n){const i=this.elements;return He.subVectors(t,e),He.lengthSq()===0&&(He.z=1),He.normalize(),Nn.crossVectors(n,He),Nn.lengthSq()===0&&(Math.abs(n.z)===1?He.x+=1e-4:He.z+=1e-4,He.normalize(),Nn.crossVectors(n,He)),Nn.normalize(),Si.crossVectors(He,Nn),i[0]=Nn.x,i[4]=Si.x,i[8]=He.x,i[1]=Nn.y,i[5]=Si.y,i[9]=He.y,i[2]=Nn.z,i[6]=Si.z,i[10]=He.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,s=this.elements,a=n[0],r=n[4],o=n[8],c=n[12],g=n[1],l=n[5],h=n[9],d=n[13],E=n[2],f=n[6],I=n[10],u=n[14],x=n[3],Q=n[7],m=n[11],M=n[15],S=i[0],D=i[4],T=i[8],y=i[12],C=i[1],v=i[5],z=i[9],U=i[13],Y=i[2],K=i[6],H=i[10],X=i[14],P=i[3],At=i[7],rt=i[11],It=i[15];return s[0]=a*S+r*C+o*Y+c*P,s[4]=a*D+r*v+o*K+c*At,s[8]=a*T+r*z+o*H+c*rt,s[12]=a*y+r*U+o*X+c*It,s[1]=g*S+l*C+h*Y+d*P,s[5]=g*D+l*v+h*K+d*At,s[9]=g*T+l*z+h*H+d*rt,s[13]=g*y+l*U+h*X+d*It,s[2]=E*S+f*C+I*Y+u*P,s[6]=E*D+f*v+I*K+u*At,s[10]=E*T+f*z+I*H+u*rt,s[14]=E*y+f*U+I*X+u*It,s[3]=x*S+Q*C+m*Y+M*P,s[7]=x*D+Q*v+m*K+M*At,s[11]=x*T+Q*z+m*H+M*rt,s[15]=x*y+Q*U+m*X+M*It,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],s=t[12],a=t[1],r=t[5],o=t[9],c=t[13],g=t[2],l=t[6],h=t[10],d=t[14],E=t[3],f=t[7],I=t[11],u=t[15];return E*(+s*o*l-i*c*l-s*r*h+n*c*h+i*r*d-n*o*d)+f*(+e*o*d-e*c*h+s*a*h-i*a*d+i*c*g-s*o*g)+I*(+e*c*l-e*r*d-s*a*l+n*a*d+s*r*g-n*c*g)+u*(-i*r*g-e*o*l+e*r*h+i*a*l-n*a*h+n*o*g)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],s=t[3],a=t[4],r=t[5],o=t[6],c=t[7],g=t[8],l=t[9],h=t[10],d=t[11],E=t[12],f=t[13],I=t[14],u=t[15],x=l*I*c-f*h*c+f*o*d-r*I*d-l*o*u+r*h*u,Q=E*h*c-g*I*c-E*o*d+a*I*d+g*o*u-a*h*u,m=g*f*c-E*l*c+E*r*d-a*f*d-g*r*u+a*l*u,M=E*l*o-g*f*o-E*r*h+a*f*h+g*r*I-a*l*I,S=e*x+n*Q+i*m+s*M;if(S===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const D=1/S;return t[0]=x*D,t[1]=(f*h*s-l*I*s-f*i*d+n*I*d+l*i*u-n*h*u)*D,t[2]=(r*I*s-f*o*s+f*i*c-n*I*c-r*i*u+n*o*u)*D,t[3]=(l*o*s-r*h*s-l*i*c+n*h*c+r*i*d-n*o*d)*D,t[4]=Q*D,t[5]=(g*I*s-E*h*s+E*i*d-e*I*d-g*i*u+e*h*u)*D,t[6]=(E*o*s-a*I*s-E*i*c+e*I*c+a*i*u-e*o*u)*D,t[7]=(a*h*s-g*o*s+g*i*c-e*h*c-a*i*d+e*o*d)*D,t[8]=m*D,t[9]=(E*l*s-g*f*s-E*n*d+e*f*d+g*n*u-e*l*u)*D,t[10]=(a*f*s-E*r*s+E*n*c-e*f*c-a*n*u+e*r*u)*D,t[11]=(g*r*s-a*l*s-g*n*c+e*l*c+a*n*d-e*r*d)*D,t[12]=M*D,t[13]=(g*f*i-E*l*i+E*n*h-e*f*h-g*n*I+e*l*I)*D,t[14]=(E*r*i-a*f*i-E*n*o+e*f*o+a*n*I-e*r*I)*D,t[15]=(a*l*i-g*r*i+g*n*o-e*l*o-a*n*h+e*r*h)*D,this}scale(t){const e=this.elements,n=t.x,i=t.y,s=t.z;return e[0]*=n,e[4]*=i,e[8]*=s,e[1]*=n,e[5]*=i,e[9]*=s,e[2]*=n,e[6]*=i,e[10]*=s,e[3]*=n,e[7]*=i,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),s=1-n,a=t.x,r=t.y,o=t.z,c=s*a,g=s*r;return this.set(c*a+n,c*r-i*o,c*o+i*r,0,c*r+i*o,g*r+n,g*o-i*a,0,c*o-i*r,g*o+i*a,s*o*o+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,s,a){return this.set(1,n,s,0,t,1,a,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,s=e._x,a=e._y,r=e._z,o=e._w,c=s+s,g=a+a,l=r+r,h=s*c,d=s*g,E=s*l,f=a*g,I=a*l,u=r*l,x=o*c,Q=o*g,m=o*l,M=n.x,S=n.y,D=n.z;return i[0]=(1-(f+u))*M,i[1]=(d+m)*M,i[2]=(E-Q)*M,i[3]=0,i[4]=(d-m)*S,i[5]=(1-(h+u))*S,i[6]=(I+x)*S,i[7]=0,i[8]=(E+Q)*D,i[9]=(I-x)*D,i[10]=(1-(h+f))*D,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let s=CA.set(i[0],i[1],i[2]).length();const a=CA.set(i[4],i[5],i[6]).length(),r=CA.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),t.x=i[12],t.y=i[13],t.z=i[14],en.copy(this);const c=1/s,g=1/a,l=1/r;return en.elements[0]*=c,en.elements[1]*=c,en.elements[2]*=c,en.elements[4]*=g,en.elements[5]*=g,en.elements[6]*=g,en.elements[8]*=l,en.elements[9]*=l,en.elements[10]*=l,e.setFromRotationMatrix(en),n.x=s,n.y=a,n.z=r,this}makePerspective(t,e,n,i,s,a,r=Sn){const o=this.elements,c=2*s/(e-t),g=2*s/(n-i),l=(e+t)/(e-t),h=(n+i)/(n-i);let d,E;if(r===Sn)d=-(a+s)/(a-s),E=-2*a*s/(a-s);else if(r===as)d=-a/(a-s),E=-a*s/(a-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+r);return o[0]=c,o[4]=0,o[8]=l,o[12]=0,o[1]=0,o[5]=g,o[9]=h,o[13]=0,o[2]=0,o[6]=0,o[10]=d,o[14]=E,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(t,e,n,i,s,a,r=Sn){const o=this.elements,c=1/(e-t),g=1/(n-i),l=1/(a-s),h=(e+t)*c,d=(n+i)*g;let E,f;if(r===Sn)E=(a+s)*l,f=-2*l;else if(r===as)E=s*l,f=-1*l;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+r);return o[0]=2*c,o[4]=0,o[8]=0,o[12]=-h,o[1]=0,o[5]=2*g,o[9]=0,o[13]=-d,o[2]=0,o[6]=0,o[10]=f,o[14]=-E,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<16;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}const CA=new b,en=new ne,ag=new b(0,0,0),rg=new b(1,1,1),Nn=new b,Si=new b,He=new b,Lr=new ne,Gr=new fe;class gn{constructor(t=0,e=0,n=0,i=gn.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,s=i[0],a=i[4],r=i[8],o=i[1],c=i[5],g=i[9],l=i[2],h=i[6],d=i[10];switch(e){case"XYZ":this._y=Math.asin(Jt(r,-1,1)),Math.abs(r)<.9999999?(this._x=Math.atan2(-g,d),this._z=Math.atan2(-a,s)):(this._x=Math.atan2(h,c),this._z=0);break;case"YXZ":this._x=Math.asin(-Jt(g,-1,1)),Math.abs(g)<.9999999?(this._y=Math.atan2(r,d),this._z=Math.atan2(o,c)):(this._y=Math.atan2(-l,s),this._z=0);break;case"ZXY":this._x=Math.asin(Jt(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(-l,d),this._z=Math.atan2(-a,c)):(this._y=0,this._z=Math.atan2(o,s));break;case"ZYX":this._y=Math.asin(-Jt(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(h,d),this._z=Math.atan2(o,s)):(this._x=0,this._z=Math.atan2(-a,c));break;case"YZX":this._z=Math.asin(Jt(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-g,c),this._y=Math.atan2(-l,s)):(this._x=0,this._y=Math.atan2(r,d));break;case"XZY":this._z=Math.asin(-Jt(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(h,c),this._y=Math.atan2(r,s)):(this._x=Math.atan2(-g,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,n===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return Lr.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Lr,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return Gr.setFromEuler(this),this.setFromQuaternion(Gr,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}gn.DEFAULT_ORDER="XYZ";class Zo{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let og=0;const Pr=new b,QA=new fe,Cn=new ne,Di=new b,ZA=new b,cg=new b,lg=new fe,Hr=new b(1,0,0),zr=new b(0,1,0),Yr=new b(0,0,1),Or={type:"added"},gg={type:"removed"},mA={type:"childadded",child:null},Rs={type:"childremoved",child:null};class _e extends OA{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:og++}),this.uuid=di(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=_e.DEFAULT_UP.clone();const t=new b,e=new gn,n=new fe,i=new b(1,1,1);function s(){n.setFromEuler(e,!1)}function a(){e.setFromQuaternion(n,void 0,!1)}e._onChange(s),n._onChange(a),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new ne},normalMatrix:{value:new Tt}}),this.matrix=new ne,this.matrixWorld=new ne,this.matrixAutoUpdate=_e.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=_e.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Zo,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.customDepthMaterial=void 0,this.customDistanceMaterial=void 0,this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return QA.setFromAxisAngle(t,e),this.quaternion.multiply(QA),this}rotateOnWorldAxis(t,e){return QA.setFromAxisAngle(t,e),this.quaternion.premultiply(QA),this}rotateX(t){return this.rotateOnAxis(Hr,t)}rotateY(t){return this.rotateOnAxis(zr,t)}rotateZ(t){return this.rotateOnAxis(Yr,t)}translateOnAxis(t,e){return Pr.copy(t).applyQuaternion(this.quaternion),this.position.add(Pr.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(Hr,t)}translateY(t){return this.translateOnAxis(zr,t)}translateZ(t){return this.translateOnAxis(Yr,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Cn.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?Di.copy(t):Di.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),ZA.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Cn.lookAt(ZA,Di,this.up):Cn.lookAt(Di,ZA,this.up),this.quaternion.setFromRotationMatrix(Cn),i&&(Cn.extractRotation(i.matrixWorld),QA.setFromRotationMatrix(Cn),this.quaternion.premultiply(QA.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(Or),mA.child=t,this.dispatchEvent(mA),mA.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(gg),Rs.child=t,this.dispatchEvent(Rs),Rs.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),Cn.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),Cn.multiply(t.parent.matrixWorld)),t.applyMatrix4(Cn),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(Or),mA.child=t,this.dispatchEvent(mA),mA.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const a=this.children[n].getObjectByProperty(t,e);if(a!==void 0)return a}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const i=this.children;for(let s=0,a=i.length;s<a;s++)i[s].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ZA,t,cg),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ZA,lg,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(t===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const i=this.children;for(let s=0,a=i.length;s<a;s++)i[s].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.7,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.geometryInfo=this._geometryInfo.map(r=>({...r,boundingBox:r.boundingBox?r.boundingBox.toJSON():void 0,boundingSphere:r.boundingSphere?r.boundingSphere.toJSON():void 0})),i.instanceInfo=this._instanceInfo.map(r=>({...r})),i.availableInstanceIds=this._availableInstanceIds.slice(),i.availableGeometryIds=this._availableGeometryIds.slice(),i.nextIndexStart=this._nextIndexStart,i.nextVertexStart=this._nextVertexStart,i.geometryCount=this._geometryCount,i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.matricesTexture=this._matricesTexture.toJSON(t),i.indirectTexture=this._indirectTexture.toJSON(t),this._colorsTexture!==null&&(i.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(i.boundingSphere=this.boundingSphere.toJSON()),this.boundingBox!==null&&(i.boundingBox=this.boundingBox.toJSON()));function s(r,o){return r[o.uuid]===void 0&&(r[o.uuid]=o.toJSON(t)),o.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(t.geometries,this.geometry);const r=this.geometry.parameters;if(r!==void 0&&r.shapes!==void 0){const o=r.shapes;if(Array.isArray(o))for(let c=0,g=o.length;c<g;c++){const l=o[c];s(t.shapes,l)}else s(t.shapes,o)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const r=[];for(let o=0,c=this.material.length;o<c;o++)r.push(s(t.materials,this.material[o]));i.material=r}else i.material=s(t.materials,this.material);if(this.children.length>0){i.children=[];for(let r=0;r<this.children.length;r++)i.children.push(this.children[r].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let r=0;r<this.animations.length;r++){const o=this.animations[r];i.animations.push(s(t.animations,o))}}if(e){const r=a(t.geometries),o=a(t.materials),c=a(t.textures),g=a(t.images),l=a(t.shapes),h=a(t.skeletons),d=a(t.animations),E=a(t.nodes);r.length>0&&(n.geometries=r),o.length>0&&(n.materials=o),c.length>0&&(n.textures=c),g.length>0&&(n.images=g),l.length>0&&(n.shapes=l),h.length>0&&(n.skeletons=h),d.length>0&&(n.animations=d),E.length>0&&(n.nodes=E)}return n.object=i,n;function a(r){const o=[];for(const c in r){const g=r[c];delete g.metadata,o.push(g)}return o}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let n=0;n<t.children.length;n++){const i=t.children[n];this.add(i.clone())}return this}}_e.DEFAULT_UP=new b(0,1,0);_e.DEFAULT_MATRIX_AUTO_UPDATE=!0;_e.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const nn=new b,Qn=new b,Fs=new b,mn=new b,yA=new b,xA=new b,Jr=new b,Ns=new b,Ts=new b,ks=new b,Us=new te,Ls=new te,Gs=new te;class sn{constructor(t=new b,e=new b,n=new b){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),nn.subVectors(t,e),i.cross(nn);const s=i.lengthSq();return s>0?i.multiplyScalar(1/Math.sqrt(s)):i.set(0,0,0)}static getBarycoord(t,e,n,i,s){nn.subVectors(i,e),Qn.subVectors(n,e),Fs.subVectors(t,e);const a=nn.dot(nn),r=nn.dot(Qn),o=nn.dot(Fs),c=Qn.dot(Qn),g=Qn.dot(Fs),l=a*c-r*r;if(l===0)return s.set(0,0,0),null;const h=1/l,d=(c*o-r*g)*h,E=(a*g-r*o)*h;return s.set(1-d-E,E,d)}static containsPoint(t,e,n,i){return this.getBarycoord(t,e,n,i,mn)===null?!1:mn.x>=0&&mn.y>=0&&mn.x+mn.y<=1}static getInterpolation(t,e,n,i,s,a,r,o){return this.getBarycoord(t,e,n,i,mn)===null?(o.x=0,o.y=0,"z"in o&&(o.z=0),"w"in o&&(o.w=0),null):(o.setScalar(0),o.addScaledVector(s,mn.x),o.addScaledVector(a,mn.y),o.addScaledVector(r,mn.z),o)}static getInterpolatedAttribute(t,e,n,i,s,a){return Us.setScalar(0),Ls.setScalar(0),Gs.setScalar(0),Us.fromBufferAttribute(t,e),Ls.fromBufferAttribute(t,n),Gs.fromBufferAttribute(t,i),a.setScalar(0),a.addScaledVector(Us,s.x),a.addScaledVector(Ls,s.y),a.addScaledVector(Gs,s.z),a}static isFrontFacing(t,e,n,i){return nn.subVectors(n,e),Qn.subVectors(t,e),nn.cross(Qn).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,n,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,i),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return nn.subVectors(this.c,this.b),Qn.subVectors(this.a,this.b),nn.cross(Qn).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return sn.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return sn.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,n,i,s){return sn.getInterpolation(t,this.a,this.b,this.c,e,n,i,s)}containsPoint(t){return sn.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return sn.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,s=this.c;let a,r;yA.subVectors(i,n),xA.subVectors(s,n),Ns.subVectors(t,n);const o=yA.dot(Ns),c=xA.dot(Ns);if(o<=0&&c<=0)return e.copy(n);Ts.subVectors(t,i);const g=yA.dot(Ts),l=xA.dot(Ts);if(g>=0&&l<=g)return e.copy(i);const h=o*l-g*c;if(h<=0&&o>=0&&g<=0)return a=o/(o-g),e.copy(n).addScaledVector(yA,a);ks.subVectors(t,s);const d=yA.dot(ks),E=xA.dot(ks);if(E>=0&&d<=E)return e.copy(s);const f=d*c-o*E;if(f<=0&&c>=0&&E<=0)return r=c/(c-E),e.copy(n).addScaledVector(xA,r);const I=g*E-d*l;if(I<=0&&l-g>=0&&d-E>=0)return Jr.subVectors(s,i),r=(l-g)/(l-g+(d-E)),e.copy(i).addScaledVector(Jr,r);const u=1/(I+f+h);return a=f*u,r=h*u,e.copy(n).addScaledVector(yA,a).addScaledVector(xA,r)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const jo={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Tn={h:0,s:0,l:0},_i={h:0,s:0,l:0};function Ps(A,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?A+(t-A)*6*e:e<1/2?t:e<2/3?A+(t-A)*6*(2/3-e):A}class Ht{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(e===void 0&&n===void 0){const i=t;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=Ne){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,Wt.colorSpaceToWorking(this,e),this}setRGB(t,e,n,i=Wt.workingColorSpace){return this.r=t,this.g=e,this.b=n,Wt.colorSpaceToWorking(this,i),this}setHSL(t,e,n,i=Wt.workingColorSpace){if(t=Vl(t,1),e=Jt(e,0,1),n=Jt(n,0,1),e===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+e):n+e-n*e,a=2*n-s;this.r=Ps(a,s,t+1/3),this.g=Ps(a,s,t),this.b=Ps(a,s,t-1/3)}return Wt.colorSpaceToWorking(this,i),this}setStyle(t,e=Ne){function n(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let s;const a=i[1],r=i[2];switch(a){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))return n(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,e);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))return n(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,e);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))return n(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=i[1],a=s.length;if(a===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,e);if(a===6)return this.setHex(parseInt(s,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=Ne){const n=jo[t.toLowerCase()];return n!==void 0?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=_n(t.r),this.g=_n(t.g),this.b=_n(t.b),this}copyLinearToSRGB(t){return this.r=kA(t.r),this.g=kA(t.g),this.b=kA(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=Ne){return Wt.workingToColorSpace(Se.copy(this),t),Math.round(Jt(Se.r*255,0,255))*65536+Math.round(Jt(Se.g*255,0,255))*256+Math.round(Jt(Se.b*255,0,255))}getHexString(t=Ne){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=Wt.workingColorSpace){Wt.workingToColorSpace(Se.copy(this),e);const n=Se.r,i=Se.g,s=Se.b,a=Math.max(n,i,s),r=Math.min(n,i,s);let o,c;const g=(r+a)/2;if(r===a)o=0,c=0;else{const l=a-r;switch(c=g<=.5?l/(a+r):l/(2-a-r),a){case n:o=(i-s)/l+(i<s?6:0);break;case i:o=(s-n)/l+2;break;case s:o=(n-i)/l+4;break}o/=6}return t.h=o,t.s=c,t.l=g,t}getRGB(t,e=Wt.workingColorSpace){return Wt.workingToColorSpace(Se.copy(this),e),t.r=Se.r,t.g=Se.g,t.b=Se.b,t}getStyle(t=Ne){Wt.workingToColorSpace(Se.copy(this),t);const e=Se.r,n=Se.g,i=Se.b;return t!==Ne?`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(t,e,n){return this.getHSL(Tn),this.setHSL(Tn.h+t,Tn.s+e,Tn.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(Tn),t.getHSL(_i);const n=ms(Tn.h,_i.h,e),i=ms(Tn.s,_i.s,e),s=ms(Tn.l,_i.l,e);return this.setHSL(n,i,s),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,i=this.b,s=t.elements;return this.r=s[0]*e+s[3]*n+s[6]*i,this.g=s[1]*e+s[4]*n+s[7]*i,this.b=s[2]*e+s[5]*n+s[8]*i,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Se=new Ht;Ht.NAMES=jo;let hg=0;class Ii extends OA{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:hg++}),this.uuid=di(),this.name="",this.type="Material",this.blending=lA,this.side=Yn,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=aa,this.blendDst=ra,this.blendEquation=nA,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Ht(0,0,0),this.blendAlpha=0,this.depthFunc=LA,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Rr,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=IA,this.stencilZFail=IA,this.stencilZPass=IA,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.allowOverride=!0,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const n=t[e];if(n===void 0){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const i=this[e];if(i===void 0){console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const n={metadata:{version:4.7,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==lA&&(n.blending=this.blending),this.side!==Yn&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==aa&&(n.blendSrc=this.blendSrc),this.blendDst!==ra&&(n.blendDst=this.blendDst),this.blendEquation!==nA&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==LA&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==Rr&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==IA&&(n.stencilFail=this.stencilFail),this.stencilZFail!==IA&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==IA&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function i(s){const a=[];for(const r in s){const o=s[r];delete o.metadata,a.push(o)}return a}if(e){const s=i(t.textures),a=i(t.images);s.length>0&&(n.textures=s),a.length>0&&(n.images=a)}return n}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(e!==null){const i=e.length;n=new Array(i);for(let s=0;s!==i;++s)n[s]=e[s].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}}class $o extends Ii{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Ht(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new gn,this.combine=Uo,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const ge=new b,Mi=new Xt;let ug=0;class qe{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:ug++}),this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=n,this.usage=Fr,this.updateRanges=[],this.gpuType=wn,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,n=this.count;e<n;e++)Mi.fromBufferAttribute(this,e),Mi.applyMatrix3(t),this.setXY(e,Mi.x,Mi.y);else if(this.itemSize===3)for(let e=0,n=this.count;e<n;e++)ge.fromBufferAttribute(this,e),ge.applyMatrix3(t),this.setXYZ(e,ge.x,ge.y,ge.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)ge.fromBufferAttribute(this,e),ge.applyMatrix4(t),this.setXYZ(e,ge.x,ge.y,ge.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)ge.fromBufferAttribute(this,e),ge.applyNormalMatrix(t),this.setXYZ(e,ge.x,ge.y,ge.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)ge.fromBufferAttribute(this,e),ge.transformDirection(t),this.setXYZ(e,ge.x,ge.y,ge.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=KA(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=Fe(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=KA(e,this.array)),e}setX(t,e){return this.normalized&&(e=Fe(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=KA(e,this.array)),e}setY(t,e){return this.normalized&&(e=Fe(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=KA(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Fe(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=KA(e,this.array)),e}setW(t,e){return this.normalized&&(e=Fe(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=Fe(e,this.array),n=Fe(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=Fe(e,this.array),n=Fe(n,this.array),i=Fe(i,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,s){return t*=this.itemSize,this.normalized&&(e=Fe(e,this.array),n=Fe(n,this.array),i=Fe(i,this.array),s=Fe(s,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==Fr&&(t.usage=this.usage),t}}class tc extends qe{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class ec extends qe{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class gA extends qe{constructor(t,e,n){super(new Float32Array(t),e,n)}}let dg=0;const We=new ne,Hs=new _e,wA=new b,ze=new uA,jA=new uA,pe=new b;class On extends OA{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:dg++}),this.uuid=di(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(Wo(t)?ec:tc)(t,1):this.index=t,this}setIndirect(t){return this.indirect=t,this}getIndirect(){return this.indirect}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const s=new Tt().getNormalMatrix(t);n.applyNormalMatrix(s),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(t),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return We.makeRotationFromQuaternion(t),this.applyMatrix4(We),this}rotateX(t){return We.makeRotationX(t),this.applyMatrix4(We),this}rotateY(t){return We.makeRotationY(t),this.applyMatrix4(We),this}rotateZ(t){return We.makeRotationZ(t),this.applyMatrix4(We),this}translate(t,e,n){return We.makeTranslation(t,e,n),this.applyMatrix4(We),this}scale(t,e,n){return We.makeScale(t,e,n),this.applyMatrix4(We),this}lookAt(t){return Hs.lookAt(t),Hs.updateMatrix(),this.applyMatrix4(Hs.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(wA).negate(),this.translate(wA.x,wA.y,wA.z),this}setFromPoints(t){const e=this.getAttribute("position");if(e===void 0){const n=[];for(let i=0,s=t.length;i<s;i++){const a=t[i];n.push(a.x,a.y,a.z||0)}this.setAttribute("position",new gA(n,3))}else{const n=Math.min(t.length,e.count);for(let i=0;i<n;i++){const s=t[i];e.setXYZ(i,s.x,s.y,s.z||0)}t.length>e.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),e.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new uA);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new b(-1/0,-1/0,-1/0),new b(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let n=0,i=e.length;n<i;n++){const s=e[n];ze.setFromBufferAttribute(s),this.morphTargetsRelative?(pe.addVectors(this.boundingBox.min,ze.min),this.boundingBox.expandByPoint(pe),pe.addVectors(this.boundingBox.max,ze.max),this.boundingBox.expandByPoint(pe)):(this.boundingBox.expandByPoint(ze.min),this.boundingBox.expandByPoint(ze.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new cr);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new b,1/0);return}if(t){const n=this.boundingSphere.center;if(ze.setFromBufferAttribute(t),e)for(let s=0,a=e.length;s<a;s++){const r=e[s];jA.setFromBufferAttribute(r),this.morphTargetsRelative?(pe.addVectors(ze.min,jA.min),ze.expandByPoint(pe),pe.addVectors(ze.max,jA.max),ze.expandByPoint(pe)):(ze.expandByPoint(jA.min),ze.expandByPoint(jA.max))}ze.getCenter(n);let i=0;for(let s=0,a=t.count;s<a;s++)pe.fromBufferAttribute(t,s),i=Math.max(i,n.distanceToSquared(pe));if(e)for(let s=0,a=e.length;s<a;s++){const r=e[s],o=this.morphTargetsRelative;for(let c=0,g=r.count;c<g;c++)pe.fromBufferAttribute(r,c),o&&(wA.fromBufferAttribute(t,c),pe.add(wA)),i=Math.max(i,n.distanceToSquared(pe))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.position,i=e.normal,s=e.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new qe(new Float32Array(4*n.count),4));const a=this.getAttribute("tangent"),r=[],o=[];for(let T=0;T<n.count;T++)r[T]=new b,o[T]=new b;const c=new b,g=new b,l=new b,h=new Xt,d=new Xt,E=new Xt,f=new b,I=new b;function u(T,y,C){c.fromBufferAttribute(n,T),g.fromBufferAttribute(n,y),l.fromBufferAttribute(n,C),h.fromBufferAttribute(s,T),d.fromBufferAttribute(s,y),E.fromBufferAttribute(s,C),g.sub(c),l.sub(c),d.sub(h),E.sub(h);const v=1/(d.x*E.y-E.x*d.y);isFinite(v)&&(f.copy(g).multiplyScalar(E.y).addScaledVector(l,-d.y).multiplyScalar(v),I.copy(l).multiplyScalar(d.x).addScaledVector(g,-E.x).multiplyScalar(v),r[T].add(f),r[y].add(f),r[C].add(f),o[T].add(I),o[y].add(I),o[C].add(I))}let x=this.groups;x.length===0&&(x=[{start:0,count:t.count}]);for(let T=0,y=x.length;T<y;++T){const C=x[T],v=C.start,z=C.count;for(let U=v,Y=v+z;U<Y;U+=3)u(t.getX(U+0),t.getX(U+1),t.getX(U+2))}const Q=new b,m=new b,M=new b,S=new b;function D(T){M.fromBufferAttribute(i,T),S.copy(M);const y=r[T];Q.copy(y),Q.sub(M.multiplyScalar(M.dot(y))).normalize(),m.crossVectors(S,y);const v=m.dot(o[T])<0?-1:1;a.setXYZW(T,Q.x,Q.y,Q.z,v)}for(let T=0,y=x.length;T<y;++T){const C=x[T],v=C.start,z=C.count;for(let U=v,Y=v+z;U<Y;U+=3)D(t.getX(U+0)),D(t.getX(U+1)),D(t.getX(U+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new qe(new Float32Array(e.count*3),3),this.setAttribute("normal",n);else for(let h=0,d=n.count;h<d;h++)n.setXYZ(h,0,0,0);const i=new b,s=new b,a=new b,r=new b,o=new b,c=new b,g=new b,l=new b;if(t)for(let h=0,d=t.count;h<d;h+=3){const E=t.getX(h+0),f=t.getX(h+1),I=t.getX(h+2);i.fromBufferAttribute(e,E),s.fromBufferAttribute(e,f),a.fromBufferAttribute(e,I),g.subVectors(a,s),l.subVectors(i,s),g.cross(l),r.fromBufferAttribute(n,E),o.fromBufferAttribute(n,f),c.fromBufferAttribute(n,I),r.add(g),o.add(g),c.add(g),n.setXYZ(E,r.x,r.y,r.z),n.setXYZ(f,o.x,o.y,o.z),n.setXYZ(I,c.x,c.y,c.z)}else for(let h=0,d=e.count;h<d;h+=3)i.fromBufferAttribute(e,h+0),s.fromBufferAttribute(e,h+1),a.fromBufferAttribute(e,h+2),g.subVectors(a,s),l.subVectors(i,s),g.cross(l),n.setXYZ(h+0,g.x,g.y,g.z),n.setXYZ(h+1,g.x,g.y,g.z),n.setXYZ(h+2,g.x,g.y,g.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)pe.fromBufferAttribute(t,e),pe.normalize(),t.setXYZ(e,pe.x,pe.y,pe.z)}toNonIndexed(){function t(r,o){const c=r.array,g=r.itemSize,l=r.normalized,h=new c.constructor(o.length*g);let d=0,E=0;for(let f=0,I=o.length;f<I;f++){r.isInterleavedBufferAttribute?d=o[f]*r.data.stride+r.offset:d=o[f]*g;for(let u=0;u<g;u++)h[E++]=c[d++]}return new qe(h,g,l)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new On,n=this.index.array,i=this.attributes;for(const r in i){const o=i[r],c=t(o,n);e.setAttribute(r,c)}const s=this.morphAttributes;for(const r in s){const o=[],c=s[r];for(let g=0,l=c.length;g<l;g++){const h=c[g],d=t(h,n);o.push(d)}e.morphAttributes[r]=o}e.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let r=0,o=a.length;r<o;r++){const c=a[r];e.addGroup(c.start,c.count,c.materialIndex)}return e}toJSON(){const t={metadata:{version:4.7,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const o=this.parameters;for(const c in o)o[c]!==void 0&&(t[c]=o[c]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const o in n){const c=n[o];t.data.attributes[o]=c.toJSON(t.data)}const i={};let s=!1;for(const o in this.morphAttributes){const c=this.morphAttributes[o],g=[];for(let l=0,h=c.length;l<h;l++){const d=c[l];g.push(d.toJSON(t.data))}g.length>0&&(i[o]=g,s=!0)}s&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(t.data.groups=JSON.parse(JSON.stringify(a)));const r=this.boundingSphere;return r!==null&&(t.data.boundingSphere=r.toJSON()),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;n!==null&&this.setIndex(n.clone());const i=t.attributes;for(const c in i){const g=i[c];this.setAttribute(c,g.clone(e))}const s=t.morphAttributes;for(const c in s){const g=[],l=s[c];for(let h=0,d=l.length;h<d;h++)g.push(l[h].clone(e));this.morphAttributes[c]=g}this.morphTargetsRelative=t.morphTargetsRelative;const a=t.groups;for(let c=0,g=a.length;c<g;c++){const l=a[c];this.addGroup(l.start,l.count,l.materialIndex)}const r=t.boundingBox;r!==null&&(this.boundingBox=r.clone());const o=t.boundingSphere;return o!==null&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const qr=new ne,Xn=new sg,vi=new cr,Vr=new b,bi=new b,Ri=new b,Fi=new b,zs=new b,Ni=new b,Kr=new b,Ti=new b;class Je extends _e{constructor(t=new On,e=new $o){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.count=1,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const i=e[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,a=i.length;s<a;s++){const r=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[r]=s}}}}getVertexPosition(t,e){const n=this.geometry,i=n.attributes.position,s=n.morphAttributes.position,a=n.morphTargetsRelative;e.fromBufferAttribute(i,t);const r=this.morphTargetInfluences;if(s&&r){Ni.set(0,0,0);for(let o=0,c=s.length;o<c;o++){const g=r[o],l=s[o];g!==0&&(zs.fromBufferAttribute(l,t),a?Ni.addScaledVector(zs,g):Ni.addScaledVector(zs.sub(e),g))}e.add(Ni)}return e}raycast(t,e){const n=this.geometry,i=this.material,s=this.matrixWorld;i!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),vi.copy(n.boundingSphere),vi.applyMatrix4(s),Xn.copy(t.ray).recast(t.near),!(vi.containsPoint(Xn.origin)===!1&&(Xn.intersectSphere(vi,Vr)===null||Xn.origin.distanceToSquared(Vr)>(t.far-t.near)**2))&&(qr.copy(s).invert(),Xn.copy(t.ray).applyMatrix4(qr),!(n.boundingBox!==null&&Xn.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(t,e,Xn)))}_computeIntersections(t,e,n){let i;const s=this.geometry,a=this.material,r=s.index,o=s.attributes.position,c=s.attributes.uv,g=s.attributes.uv1,l=s.attributes.normal,h=s.groups,d=s.drawRange;if(r!==null)if(Array.isArray(a))for(let E=0,f=h.length;E<f;E++){const I=h[E],u=a[I.materialIndex],x=Math.max(I.start,d.start),Q=Math.min(r.count,Math.min(I.start+I.count,d.start+d.count));for(let m=x,M=Q;m<M;m+=3){const S=r.getX(m),D=r.getX(m+1),T=r.getX(m+2);i=ki(this,u,t,n,c,g,l,S,D,T),i&&(i.faceIndex=Math.floor(m/3),i.face.materialIndex=I.materialIndex,e.push(i))}}else{const E=Math.max(0,d.start),f=Math.min(r.count,d.start+d.count);for(let I=E,u=f;I<u;I+=3){const x=r.getX(I),Q=r.getX(I+1),m=r.getX(I+2);i=ki(this,a,t,n,c,g,l,x,Q,m),i&&(i.faceIndex=Math.floor(I/3),e.push(i))}}else if(o!==void 0)if(Array.isArray(a))for(let E=0,f=h.length;E<f;E++){const I=h[E],u=a[I.materialIndex],x=Math.max(I.start,d.start),Q=Math.min(o.count,Math.min(I.start+I.count,d.start+d.count));for(let m=x,M=Q;m<M;m+=3){const S=m,D=m+1,T=m+2;i=ki(this,u,t,n,c,g,l,S,D,T),i&&(i.faceIndex=Math.floor(m/3),i.face.materialIndex=I.materialIndex,e.push(i))}}else{const E=Math.max(0,d.start),f=Math.min(o.count,d.start+d.count);for(let I=E,u=f;I<u;I+=3){const x=I,Q=I+1,m=I+2;i=ki(this,a,t,n,c,g,l,x,Q,m),i&&(i.faceIndex=Math.floor(I/3),e.push(i))}}}}function Ig(A,t,e,n,i,s,a,r){let o;if(t.side===Te?o=n.intersectTriangle(a,s,i,!0,r):o=n.intersectTriangle(i,s,a,t.side===Yn,r),o===null)return null;Ti.copy(r),Ti.applyMatrix4(A.matrixWorld);const c=e.ray.origin.distanceTo(Ti);return c<e.near||c>e.far?null:{distance:c,point:Ti.clone(),object:A}}function ki(A,t,e,n,i,s,a,r,o,c){A.getVertexPosition(r,bi),A.getVertexPosition(o,Ri),A.getVertexPosition(c,Fi);const g=Ig(A,t,e,n,bi,Ri,Fi,Kr);if(g){const l=new b;sn.getBarycoord(Kr,bi,Ri,Fi,l),i&&(g.uv=sn.getInterpolatedAttribute(i,r,o,c,l,new Xt)),s&&(g.uv1=sn.getInterpolatedAttribute(s,r,o,c,l,new Xt)),a&&(g.normal=sn.getInterpolatedAttribute(a,r,o,c,l,new b),g.normal.dot(n.direction)>0&&g.normal.multiplyScalar(-1));const h={a:r,b:o,c,normal:new b,materialIndex:0};sn.getNormal(bi,Ri,Fi,h.normal),g.face=h,g.barycoord=l}return g}class Ei extends On{constructor(t=1,e=1,n=1,i=1,s=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:s,depthSegments:a};const r=this;i=Math.floor(i),s=Math.floor(s),a=Math.floor(a);const o=[],c=[],g=[],l=[];let h=0,d=0;E("z","y","x",-1,-1,n,e,t,a,s,0),E("z","y","x",1,-1,n,e,-t,a,s,1),E("x","z","y",1,1,t,n,e,i,a,2),E("x","z","y",1,-1,t,n,-e,i,a,3),E("x","y","z",1,-1,t,e,n,i,s,4),E("x","y","z",-1,-1,t,e,-n,i,s,5),this.setIndex(o),this.setAttribute("position",new gA(c,3)),this.setAttribute("normal",new gA(g,3)),this.setAttribute("uv",new gA(l,2));function E(f,I,u,x,Q,m,M,S,D,T,y){const C=m/D,v=M/T,z=m/2,U=M/2,Y=S/2,K=D+1,H=T+1;let X=0,P=0;const At=new b;for(let rt=0;rt<H;rt++){const It=rt*v-U;for(let Dt=0;Dt<K;Dt++){const Ut=Dt*C-z;At[f]=Ut*x,At[I]=It*Q,At[u]=Y,c.push(At.x,At.y,At.z),At[f]=0,At[I]=0,At[u]=S>0?1:-1,g.push(At.x,At.y,At.z),l.push(Dt/D),l.push(1-rt/T),X+=1}}for(let rt=0;rt<T;rt++)for(let It=0;It<D;It++){const Dt=h+It+K*rt,Ut=h+It+K*(rt+1),J=h+(It+1)+K*(rt+1),tt=h+(It+1)+K*rt;o.push(Dt,Ut,tt),o.push(Ut,J,tt),P+=6}r.addGroup(d,P,y),d+=P,h+=X}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Ei(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function zA(A){const t={};for(const e in A){t[e]={};for(const n in A[e]){const i=A[e][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][n]=null):t[e][n]=i.clone():Array.isArray(i)?t[e][n]=i.slice():t[e][n]=i}}return t}function be(A){const t={};for(let e=0;e<A.length;e++){const n=zA(A[e]);for(const i in n)t[i]=n[i]}return t}function Eg(A){const t=[];for(let e=0;e<A.length;e++)t.push(A[e].clone());return t}function nc(A){const t=A.getRenderTarget();return t===null?A.outputColorSpace:t.isXRRenderTarget===!0?t.texture.colorSpace:Wt.workingColorSpace}const pg={clone:zA,merge:be};var fg=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,Bg=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class hn extends Ii{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=fg,this.fragmentShader=Bg,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=zA(t.uniforms),this.uniformsGroups=Eg(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const i in this.uniforms){const a=this.uniforms[i].value;a&&a.isTexture?e.uniforms[i]={type:"t",value:a.toJSON(t).uuid}:a&&a.isColor?e.uniforms[i]={type:"c",value:a.getHex()}:a&&a.isVector2?e.uniforms[i]={type:"v2",value:a.toArray()}:a&&a.isVector3?e.uniforms[i]={type:"v3",value:a.toArray()}:a&&a.isVector4?e.uniforms[i]={type:"v4",value:a.toArray()}:a&&a.isMatrix3?e.uniforms[i]={type:"m3",value:a.toArray()}:a&&a.isMatrix4?e.uniforms[i]={type:"m4",value:a.toArray()}:e.uniforms[i]={value:a}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}class us extends _e{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new ne,this.projectionMatrix=new ne,this.projectionMatrixInverse=new ne,this.coordinateSystem=Sn}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const kn=new b,Wr=new Xt,Xr=new Xt;class Oe extends us{constructor(t=50,e=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=Ja*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(Qs*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return Ja*2*Math.atan(Math.tan(Qs*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,n){kn.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(kn.x,kn.y).multiplyScalar(-t/kn.z),kn.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(kn.x,kn.y).multiplyScalar(-t/kn.z)}getViewSize(t,e){return this.getViewBounds(t,Wr,Xr),e.subVectors(Xr,Wr)}setViewOffset(t,e,n,i,s,a){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(Qs*.5*this.fov)/this.zoom,n=2*e,i=this.aspect*n,s=-.5*i;const a=this.view;if(this.view!==null&&this.view.enabled){const o=a.fullWidth,c=a.fullHeight;s+=a.offsetX*i/o,e-=a.offsetY*n/c,i*=a.width/o,n*=a.height/c}const r=this.filmOffset;r!==0&&(s+=t*r/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+i,e,e-n,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const SA=-90,DA=1;class Ac extends _e{constructor(t,e,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new Oe(SA,DA,t,e);i.layers=this.layers,this.add(i);const s=new Oe(SA,DA,t,e);s.layers=this.layers,this.add(s);const a=new Oe(SA,DA,t,e);a.layers=this.layers,this.add(a);const r=new Oe(SA,DA,t,e);r.layers=this.layers,this.add(r);const o=new Oe(SA,DA,t,e);o.layers=this.layers,this.add(o);const c=new Oe(SA,DA,t,e);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[n,i,s,a,r,o]=e;for(const c of e)this.remove(c);if(t===Sn)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),s.up.set(0,0,-1),s.lookAt(0,1,0),a.up.set(0,0,1),a.lookAt(0,-1,0),r.up.set(0,1,0),r.lookAt(0,0,1),o.up.set(0,1,0),o.lookAt(0,0,-1);else if(t===as)n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),s.up.set(0,0,1),s.lookAt(0,1,0),a.up.set(0,0,-1),a.lookAt(0,-1,0),r.up.set(0,-1,0),r.lookAt(0,0,1),o.up.set(0,-1,0),o.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const c of e)this.add(c),c.updateMatrixWorld()}update(t,e){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[s,a,r,o,c,g]=this.children,l=t.getRenderTarget(),h=t.getActiveCubeFace(),d=t.getActiveMipmapLevel(),E=t.xr.enabled;t.xr.enabled=!1;const f=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0,i),t.render(e,s),t.setRenderTarget(n,1,i),t.render(e,a),t.setRenderTarget(n,2,i),t.render(e,r),t.setRenderTarget(n,3,i),t.render(e,o),t.setRenderTarget(n,4,i),t.render(e,c),n.texture.generateMipmaps=f,t.setRenderTarget(n,5,i),t.render(e,g),t.setRenderTarget(l,h,d),t.xr.enabled=E,n.texture.needsPMREMUpdate=!0}}class ic extends De{constructor(t=[],e=GA,n,i,s,a,r,o,c,g){super(t,e,n,i,s,a,r,o,c,g),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class sc extends ln{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const n={width:t,height:t,depth:1},i=[n,n,n,n,n,n];this.texture=new ic(i),this._setTextureOptions(e),this.texture.isRenderTargetTexture=!0}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new Ei(5,5,5),s=new hn({name:"CubemapFromEquirect",uniforms:zA(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Te,blending:Pn});s.uniforms.tEquirect.value=e;const a=new Je(i,s),r=e.minFilter;return e.minFilter===sA&&(e.minFilter=on),new Ac(1,10,this).update(t,a),e.minFilter=r,a.geometry.dispose(),a.material.dispose(),this}clear(t,e=!0,n=!0,i=!0){const s=t.getRenderTarget();for(let a=0;a<6;a++)t.setRenderTarget(this,a),t.clear(e,n,i);t.setRenderTarget(s)}}class Ui extends _e{constructor(){super(),this.isGroup=!0,this.type="Group"}}const Cg={type:"move"};class Ys{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Ui,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Ui,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new b,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new b),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Ui,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new b,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new b),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const n of t.hand.values())this._getHandJoint(e,n)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,e,n){let i=null,s=null,a=null;const r=this._targetRay,o=this._grip,c=this._hand;if(t&&e.session.visibilityState!=="visible-blurred"){if(c&&t.hand){a=!0;for(const f of t.hand.values()){const I=e.getJointPose(f,n),u=this._getHandJoint(c,f);I!==null&&(u.matrix.fromArray(I.transform.matrix),u.matrix.decompose(u.position,u.rotation,u.scale),u.matrixWorldNeedsUpdate=!0,u.jointRadius=I.radius),u.visible=I!==null}const g=c.joints["index-finger-tip"],l=c.joints["thumb-tip"],h=g.position.distanceTo(l.position),d=.02,E=.005;c.inputState.pinching&&h>d+E?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!c.inputState.pinching&&h<=d-E&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else o!==null&&t.gripSpace&&(s=e.getPose(t.gripSpace,n),s!==null&&(o.matrix.fromArray(s.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,s.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(s.linearVelocity)):o.hasLinearVelocity=!1,s.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(s.angularVelocity)):o.hasAngularVelocity=!1));r!==null&&(i=e.getPose(t.targetRaySpace,n),i===null&&s!==null&&(i=s),i!==null&&(r.matrix.fromArray(i.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.matrixWorldNeedsUpdate=!0,i.linearVelocity?(r.hasLinearVelocity=!0,r.linearVelocity.copy(i.linearVelocity)):r.hasLinearVelocity=!1,i.angularVelocity?(r.hasAngularVelocity=!0,r.angularVelocity.copy(i.angularVelocity)):r.hasAngularVelocity=!1,this.dispatchEvent(Cg)))}return r!==null&&(r.visible=i!==null),o!==null&&(o.visible=s!==null),c!==null&&(c.visible=a!==null),this}_getHandJoint(t,e){if(t.joints[e.jointName]===void 0){const n=new Ui;n.matrixAutoUpdate=!1,n.visible=!1,t.joints[e.jointName]=n,t.add(n)}return t.joints[e.jointName]}}class zn extends _e{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new gn,this.environmentIntensity=1,this.environmentRotation=new gn,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}}class Qg extends De{constructor(t=null,e=1,n=1,i,s,a,r,o,c=ye,g=ye,l,h){super(null,a,r,o,c,g,i,s,l,h),this.isDataTexture=!0,this.image={data:t,width:e,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class mg extends qe{constructor(t,e,n,i=1){super(t,e,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}const Os=new b,yg=new b,xg=new Tt;class tA{constructor(t=new b(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=Os.subVectors(n,e).cross(yg.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta(Os),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:e.copy(t.start).addScaledVector(n,s)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||xg.getNormalMatrix(t),i=this.coplanarPoint(Os).applyMatrix4(t),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}const Zn=new cr,Li=new b;class ac{constructor(t=new tA,e=new tA,n=new tA,i=new tA,s=new tA,a=new tA){this.planes=[t,e,n,i,s,a]}set(t,e,n,i,s,a){const r=this.planes;return r[0].copy(t),r[1].copy(e),r[2].copy(n),r[3].copy(i),r[4].copy(s),r[5].copy(a),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t,e=Sn){const n=this.planes,i=t.elements,s=i[0],a=i[1],r=i[2],o=i[3],c=i[4],g=i[5],l=i[6],h=i[7],d=i[8],E=i[9],f=i[10],I=i[11],u=i[12],x=i[13],Q=i[14],m=i[15];if(n[0].setComponents(o-s,h-c,I-d,m-u).normalize(),n[1].setComponents(o+s,h+c,I+d,m+u).normalize(),n[2].setComponents(o+a,h+g,I+E,m+x).normalize(),n[3].setComponents(o-a,h-g,I-E,m-x).normalize(),n[4].setComponents(o-r,h-l,I-f,m-Q).normalize(),e===Sn)n[5].setComponents(o+r,h+l,I+f,m+Q).normalize();else if(e===as)n[5].setComponents(r,l,f,Q).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),Zn.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;e.boundingSphere===null&&e.computeBoundingSphere(),Zn.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(Zn)}intersectsSprite(t){return Zn.center.set(0,0,0),Zn.radius=.7071067811865476,Zn.applyMatrix4(t.matrixWorld),this.intersectsSphere(Zn)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let s=0;s<6;s++)if(e[s].distanceToPoint(n)<i)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(Li.x=i.normal.x>0?t.max.x:t.min.x,Li.y=i.normal.y>0?t.max.y:t.min.y,Li.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(Li)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class rc extends De{constructor(t,e,n=ke,i,s,a,r=ye,o=ye,c,g=oi,l=1){if(g!==oi&&g!==ci)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");const h={width:t,height:e,depth:l};super(h,i,s,a,r,o,g,n,c),this.isDepthTexture=!0,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.source=new or(Object.assign({},t.image)),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}}class JA extends On{constructor(t=1,e=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const s=t/2,a=e/2,r=Math.floor(n),o=Math.floor(i),c=r+1,g=o+1,l=t/r,h=e/o,d=[],E=[],f=[],I=[];for(let u=0;u<g;u++){const x=u*h-a;for(let Q=0;Q<c;Q++){const m=Q*l-s;E.push(m,-x,0),f.push(0,0,1),I.push(Q/r),I.push(1-u/o)}}for(let u=0;u<o;u++)for(let x=0;x<r;x++){const Q=x+c*u,m=x+c*(u+1),M=x+1+c*(u+1),S=x+1+c*u;d.push(Q,m,S),d.push(m,M,S)}this.setIndex(d),this.setAttribute("position",new gA(E,3)),this.setAttribute("normal",new gA(f,3)),this.setAttribute("uv",new gA(I,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new JA(t.width,t.height,t.widthSegments,t.heightSegments)}}class lr extends hn{constructor(t){super(t),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class Zr extends Ii{constructor(t){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new Ht(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ht(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Vo,this.normalScale=new Xt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new gn,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class wg extends Ii{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=kl,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class Sg extends Ii{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}class Dg extends us{constructor(t=-1,e=1,n=1,i=-1,s=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=s,this.far=a,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,s,a){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let s=n-t,a=n+t,r=i+e,o=i-e;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,g=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,a=s+c*this.view.width,r-=g*this.view.offsetY,o=r-g*this.view.height}this.projectionMatrix.makeOrthographic(s,a,r,o,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}}class _g extends On{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}toJSON(){const t=super.toJSON();return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}class Mg extends Oe{constructor(t=[]){super(),this.isArrayCamera=!0,this.isMultiViewCamera=!1,this.cameras=t}}class oc{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=jr(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=jr();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function jr(){return performance.now()}class gr{constructor(t,e,n,i){gr.prototype.isMatrix2=!0,this.elements=[1,0,0,1],t!==void 0&&this.set(t,e,n,i)}identity(){return this.set(1,0,0,1),this}fromArray(t,e=0){for(let n=0;n<4;n++)this.elements[n]=t[n+e];return this}set(t,e,n,i){const s=this.elements;return s[0]=t,s[2]=e,s[1]=n,s[3]=i,this}}function $r(A,t,e,n){const i=vg(n);switch(e){case zo:return A*t;case Oo:return A*t/i.components*i.byteLength;case rr:return A*t/i.components*i.byteLength;case Jo:return A*t*2/i.components*i.byteLength;case hs:return A*t*2/i.components*i.byteLength;case Yo:return A*t*3/i.components*i.byteLength;case me:return A*t*4/i.components*i.byteLength;case Dn:return A*t*4/i.components*i.byteLength;case Ki:case Wi:return Math.floor((A+3)/4)*Math.floor((t+3)/4)*8;case Xi:case Zi:return Math.floor((A+3)/4)*Math.floor((t+3)/4)*16;case Ca:case ma:return Math.max(A,16)*Math.max(t,8)/4;case Ba:case Qa:return Math.max(A,8)*Math.max(t,8)/2;case ya:case xa:return Math.floor((A+3)/4)*Math.floor((t+3)/4)*8;case wa:return Math.floor((A+3)/4)*Math.floor((t+3)/4)*16;case Sa:return Math.floor((A+3)/4)*Math.floor((t+3)/4)*16;case Da:return Math.floor((A+4)/5)*Math.floor((t+3)/4)*16;case _a:return Math.floor((A+4)/5)*Math.floor((t+4)/5)*16;case Ma:return Math.floor((A+5)/6)*Math.floor((t+4)/5)*16;case va:return Math.floor((A+5)/6)*Math.floor((t+5)/6)*16;case ba:return Math.floor((A+7)/8)*Math.floor((t+4)/5)*16;case Ra:return Math.floor((A+7)/8)*Math.floor((t+5)/6)*16;case Fa:return Math.floor((A+7)/8)*Math.floor((t+7)/8)*16;case Na:return Math.floor((A+9)/10)*Math.floor((t+4)/5)*16;case Ta:return Math.floor((A+9)/10)*Math.floor((t+5)/6)*16;case ka:return Math.floor((A+9)/10)*Math.floor((t+7)/8)*16;case Ua:return Math.floor((A+9)/10)*Math.floor((t+9)/10)*16;case La:return Math.floor((A+11)/12)*Math.floor((t+9)/10)*16;case Ga:return Math.floor((A+11)/12)*Math.floor((t+11)/12)*16;case ji:case Pa:case Ha:return Math.ceil(A/4)*Math.ceil(t/4)*16;case qo:case za:return Math.ceil(A/4)*Math.ceil(t/4)*8;case Ya:case Oa:return Math.ceil(A/4)*Math.ceil(t/4)*16}throw new Error(`Unable to determine texture byte length for ${e} format.`)}function vg(A){switch(A){case Le:case Go:return{byteLength:1,components:1};case ai:case Po:case ui:return{byteLength:2,components:1};case sr:case ar:return{byteLength:2,components:4};case ke:case ir:case wn:return{byteLength:4,components:1};case Ho:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${A}.`)}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Ar}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=Ar);/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function cc(){let A=null,t=!1,e=null,n=null;function i(s,a){e(s,a),n=A.requestAnimationFrame(i)}return{start:function(){t!==!0&&e!==null&&(n=A.requestAnimationFrame(i),t=!0)},stop:function(){A.cancelAnimationFrame(n),t=!1},setAnimationLoop:function(s){e=s},setContext:function(s){A=s}}}function bg(A){const t=new WeakMap;function e(r,o){const c=r.array,g=r.usage,l=c.byteLength,h=A.createBuffer();A.bindBuffer(o,h),A.bufferData(o,c,g),r.onUploadCallback();let d;if(c instanceof Float32Array)d=A.FLOAT;else if(c instanceof Uint16Array)r.isFloat16BufferAttribute?d=A.HALF_FLOAT:d=A.UNSIGNED_SHORT;else if(c instanceof Int16Array)d=A.SHORT;else if(c instanceof Uint32Array)d=A.UNSIGNED_INT;else if(c instanceof Int32Array)d=A.INT;else if(c instanceof Int8Array)d=A.BYTE;else if(c instanceof Uint8Array)d=A.UNSIGNED_BYTE;else if(c instanceof Uint8ClampedArray)d=A.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+c);return{buffer:h,type:d,bytesPerElement:c.BYTES_PER_ELEMENT,version:r.version,size:l}}function n(r,o,c){const g=o.array,l=o.updateRanges;if(A.bindBuffer(c,r),l.length===0)A.bufferSubData(c,0,g);else{l.sort((d,E)=>d.start-E.start);let h=0;for(let d=1;d<l.length;d++){const E=l[h],f=l[d];f.start<=E.start+E.count+1?E.count=Math.max(E.count,f.start+f.count-E.start):(++h,l[h]=f)}l.length=h+1;for(let d=0,E=l.length;d<E;d++){const f=l[d];A.bufferSubData(c,f.start*g.BYTES_PER_ELEMENT,g,f.start,f.count)}o.clearUpdateRanges()}o.onUploadCallback()}function i(r){return r.isInterleavedBufferAttribute&&(r=r.data),t.get(r)}function s(r){r.isInterleavedBufferAttribute&&(r=r.data);const o=t.get(r);o&&(A.deleteBuffer(o.buffer),t.delete(r))}function a(r,o){if(r.isInterleavedBufferAttribute&&(r=r.data),r.isGLBufferAttribute){const g=t.get(r);(!g||g.version<r.version)&&t.set(r,{buffer:r.buffer,type:r.type,bytesPerElement:r.elementSize,version:r.version});return}const c=t.get(r);if(c===void 0)t.set(r,e(r,o));else if(c.version<r.version){if(c.size!==r.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");n(c.buffer,r,o),c.version=r.version}}return{get:i,remove:s,update:a}}var Rg=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,Fg=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,Ng=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,Tg=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,kg=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,Ug=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,Lg=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,Gg=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,Pg=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,Hg=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,zg=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,Yg=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,Og=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,Jg=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,qg=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,Vg=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,Kg=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,Wg=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,Xg=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,Zg=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,jg=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,$g=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,th=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,eh=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,nh=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,Ah=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,ih=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,sh=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,ah=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,rh=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,oh="gl_FragColor = linearToOutputTexel( gl_FragColor );",ch=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,lh=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,gh=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,hh=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,uh=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,dh=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,Ih=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,Eh=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,ph=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,fh=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,Bh=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,Ch=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,Qh=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,mh=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,yh=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,xh=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,wh=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,Sh=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,Dh=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,_h=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,Mh=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,vh=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,bh=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,Rh=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,Fh=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,Nh=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,Th=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,kh=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,Uh=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,Lh=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,Gh=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,Ph=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,Hh=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,zh=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,Yh=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,Oh=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,Jh=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,qh=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,Vh=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,Kh=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,Wh=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,Xh=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,Zh=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,jh=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,$h=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,tu=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,eu=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,nu=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,Au=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,iu=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,su=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,au=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,ru=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,ou=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,cu=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,lu=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,gu=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,hu=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,uu=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,du=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Iu=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,Eu=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,pu=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,fu=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,Bu=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,Cu=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Qu=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,mu=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,yu=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,xu=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,wu=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,Su=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,Du=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,_u=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,Mu=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,vu=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const bu=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,Ru=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,Fu=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,Nu=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,Tu=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,ku=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,Uu=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,Lu=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,Gu=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,Pu=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,Hu=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,zu=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,Yu=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Ou=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Ju=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,qu=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Vu=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Ku=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Wu=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,Xu=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Zu=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,ju=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,$u=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,td=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,ed=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,nd=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Ad=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,id=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,sd=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,ad=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,rd=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,od=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,cd=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,ld=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,Lt={alphahash_fragment:Rg,alphahash_pars_fragment:Fg,alphamap_fragment:Ng,alphamap_pars_fragment:Tg,alphatest_fragment:kg,alphatest_pars_fragment:Ug,aomap_fragment:Lg,aomap_pars_fragment:Gg,batching_pars_vertex:Pg,batching_vertex:Hg,begin_vertex:zg,beginnormal_vertex:Yg,bsdfs:Og,iridescence_fragment:Jg,bumpmap_pars_fragment:qg,clipping_planes_fragment:Vg,clipping_planes_pars_fragment:Kg,clipping_planes_pars_vertex:Wg,clipping_planes_vertex:Xg,color_fragment:Zg,color_pars_fragment:jg,color_pars_vertex:$g,color_vertex:th,common:eh,cube_uv_reflection_fragment:nh,defaultnormal_vertex:Ah,displacementmap_pars_vertex:ih,displacementmap_vertex:sh,emissivemap_fragment:ah,emissivemap_pars_fragment:rh,colorspace_fragment:oh,colorspace_pars_fragment:ch,envmap_fragment:lh,envmap_common_pars_fragment:gh,envmap_pars_fragment:hh,envmap_pars_vertex:uh,envmap_physical_pars_fragment:xh,envmap_vertex:dh,fog_vertex:Ih,fog_pars_vertex:Eh,fog_fragment:ph,fog_pars_fragment:fh,gradientmap_pars_fragment:Bh,lightmap_pars_fragment:Ch,lights_lambert_fragment:Qh,lights_lambert_pars_fragment:mh,lights_pars_begin:yh,lights_toon_fragment:wh,lights_toon_pars_fragment:Sh,lights_phong_fragment:Dh,lights_phong_pars_fragment:_h,lights_physical_fragment:Mh,lights_physical_pars_fragment:vh,lights_fragment_begin:bh,lights_fragment_maps:Rh,lights_fragment_end:Fh,logdepthbuf_fragment:Nh,logdepthbuf_pars_fragment:Th,logdepthbuf_pars_vertex:kh,logdepthbuf_vertex:Uh,map_fragment:Lh,map_pars_fragment:Gh,map_particle_fragment:Ph,map_particle_pars_fragment:Hh,metalnessmap_fragment:zh,metalnessmap_pars_fragment:Yh,morphinstance_vertex:Oh,morphcolor_vertex:Jh,morphnormal_vertex:qh,morphtarget_pars_vertex:Vh,morphtarget_vertex:Kh,normal_fragment_begin:Wh,normal_fragment_maps:Xh,normal_pars_fragment:Zh,normal_pars_vertex:jh,normal_vertex:$h,normalmap_pars_fragment:tu,clearcoat_normal_fragment_begin:eu,clearcoat_normal_fragment_maps:nu,clearcoat_pars_fragment:Au,iridescence_pars_fragment:iu,opaque_fragment:su,packing:au,premultiplied_alpha_fragment:ru,project_vertex:ou,dithering_fragment:cu,dithering_pars_fragment:lu,roughnessmap_fragment:gu,roughnessmap_pars_fragment:hu,shadowmap_pars_fragment:uu,shadowmap_pars_vertex:du,shadowmap_vertex:Iu,shadowmask_pars_fragment:Eu,skinbase_vertex:pu,skinning_pars_vertex:fu,skinning_vertex:Bu,skinnormal_vertex:Cu,specularmap_fragment:Qu,specularmap_pars_fragment:mu,tonemapping_fragment:yu,tonemapping_pars_fragment:xu,transmission_fragment:wu,transmission_pars_fragment:Su,uv_pars_fragment:Du,uv_pars_vertex:_u,uv_vertex:Mu,worldpos_vertex:vu,background_vert:bu,background_frag:Ru,backgroundCube_vert:Fu,backgroundCube_frag:Nu,cube_vert:Tu,cube_frag:ku,depth_vert:Uu,depth_frag:Lu,distanceRGBA_vert:Gu,distanceRGBA_frag:Pu,equirect_vert:Hu,equirect_frag:zu,linedashed_vert:Yu,linedashed_frag:Ou,meshbasic_vert:Ju,meshbasic_frag:qu,meshlambert_vert:Vu,meshlambert_frag:Ku,meshmatcap_vert:Wu,meshmatcap_frag:Xu,meshnormal_vert:Zu,meshnormal_frag:ju,meshphong_vert:$u,meshphong_frag:td,meshphysical_vert:ed,meshphysical_frag:nd,meshtoon_vert:Ad,meshtoon_frag:id,points_vert:sd,points_frag:ad,shadow_vert:rd,shadow_frag:od,sprite_vert:cd,sprite_frag:ld},at={common:{diffuse:{value:new Ht(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Tt},alphaMap:{value:null},alphaMapTransform:{value:new Tt},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Tt}},envmap:{envMap:{value:null},envMapRotation:{value:new Tt},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Tt}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Tt}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Tt},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Tt},normalScale:{value:new Xt(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Tt},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Tt}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Tt}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Tt}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Ht(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Ht(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Tt},alphaTest:{value:0},uvTransform:{value:new Tt}},sprite:{diffuse:{value:new Ht(16777215)},opacity:{value:1},center:{value:new Xt(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Tt},alphaMap:{value:null},alphaMapTransform:{value:new Tt},alphaTest:{value:0}}},an={basic:{uniforms:be([at.common,at.specularmap,at.envmap,at.aomap,at.lightmap,at.fog]),vertexShader:Lt.meshbasic_vert,fragmentShader:Lt.meshbasic_frag},lambert:{uniforms:be([at.common,at.specularmap,at.envmap,at.aomap,at.lightmap,at.emissivemap,at.bumpmap,at.normalmap,at.displacementmap,at.fog,at.lights,{emissive:{value:new Ht(0)}}]),vertexShader:Lt.meshlambert_vert,fragmentShader:Lt.meshlambert_frag},phong:{uniforms:be([at.common,at.specularmap,at.envmap,at.aomap,at.lightmap,at.emissivemap,at.bumpmap,at.normalmap,at.displacementmap,at.fog,at.lights,{emissive:{value:new Ht(0)},specular:{value:new Ht(1118481)},shininess:{value:30}}]),vertexShader:Lt.meshphong_vert,fragmentShader:Lt.meshphong_frag},standard:{uniforms:be([at.common,at.envmap,at.aomap,at.lightmap,at.emissivemap,at.bumpmap,at.normalmap,at.displacementmap,at.roughnessmap,at.metalnessmap,at.fog,at.lights,{emissive:{value:new Ht(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Lt.meshphysical_vert,fragmentShader:Lt.meshphysical_frag},toon:{uniforms:be([at.common,at.aomap,at.lightmap,at.emissivemap,at.bumpmap,at.normalmap,at.displacementmap,at.gradientmap,at.fog,at.lights,{emissive:{value:new Ht(0)}}]),vertexShader:Lt.meshtoon_vert,fragmentShader:Lt.meshtoon_frag},matcap:{uniforms:be([at.common,at.bumpmap,at.normalmap,at.displacementmap,at.fog,{matcap:{value:null}}]),vertexShader:Lt.meshmatcap_vert,fragmentShader:Lt.meshmatcap_frag},points:{uniforms:be([at.points,at.fog]),vertexShader:Lt.points_vert,fragmentShader:Lt.points_frag},dashed:{uniforms:be([at.common,at.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Lt.linedashed_vert,fragmentShader:Lt.linedashed_frag},depth:{uniforms:be([at.common,at.displacementmap]),vertexShader:Lt.depth_vert,fragmentShader:Lt.depth_frag},normal:{uniforms:be([at.common,at.bumpmap,at.normalmap,at.displacementmap,{opacity:{value:1}}]),vertexShader:Lt.meshnormal_vert,fragmentShader:Lt.meshnormal_frag},sprite:{uniforms:be([at.sprite,at.fog]),vertexShader:Lt.sprite_vert,fragmentShader:Lt.sprite_frag},background:{uniforms:{uvTransform:{value:new Tt},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Lt.background_vert,fragmentShader:Lt.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Tt}},vertexShader:Lt.backgroundCube_vert,fragmentShader:Lt.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Lt.cube_vert,fragmentShader:Lt.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Lt.equirect_vert,fragmentShader:Lt.equirect_frag},distanceRGBA:{uniforms:be([at.common,at.displacementmap,{referencePosition:{value:new b},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Lt.distanceRGBA_vert,fragmentShader:Lt.distanceRGBA_frag},shadow:{uniforms:be([at.lights,at.fog,{color:{value:new Ht(0)},opacity:{value:1}}]),vertexShader:Lt.shadow_vert,fragmentShader:Lt.shadow_frag}};an.physical={uniforms:be([an.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Tt},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Tt},clearcoatNormalScale:{value:new Xt(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Tt},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Tt},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Tt},sheen:{value:0},sheenColor:{value:new Ht(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Tt},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Tt},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Tt},transmissionSamplerSize:{value:new Xt},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Tt},attenuationDistance:{value:0},attenuationColor:{value:new Ht(0)},specularColor:{value:new Ht(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Tt},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Tt},anisotropyVector:{value:new Xt},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Tt}}]),vertexShader:Lt.meshphysical_vert,fragmentShader:Lt.meshphysical_frag};const Gi={r:0,b:0,g:0},jn=new gn,gd=new ne;function hd(A,t,e,n,i,s,a){const r=new Ht(0);let o=s===!0?0:1,c,g,l=null,h=0,d=null;function E(Q){let m=Q.isScene===!0?Q.background:null;return m&&m.isTexture&&(m=(Q.backgroundBlurriness>0?e:t).get(m)),m}function f(Q){let m=!1;const M=E(Q);M===null?u(r,o):M&&M.isColor&&(u(M,1),m=!0);const S=A.xr.getEnvironmentBlendMode();S==="additive"?n.buffers.color.setClear(0,0,0,1,a):S==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,a),(A.autoClear||m)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),A.clear(A.autoClearColor,A.autoClearDepth,A.autoClearStencil))}function I(Q,m){const M=E(m);M&&(M.isCubeTexture||M.mapping===gs)?(g===void 0&&(g=new Je(new Ei(1,1,1),new hn({name:"BackgroundCubeMaterial",uniforms:zA(an.backgroundCube.uniforms),vertexShader:an.backgroundCube.vertexShader,fragmentShader:an.backgroundCube.fragmentShader,side:Te,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),g.geometry.deleteAttribute("normal"),g.geometry.deleteAttribute("uv"),g.onBeforeRender=function(S,D,T){this.matrixWorld.copyPosition(T.matrixWorld)},Object.defineProperty(g.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(g)),jn.copy(m.backgroundRotation),jn.x*=-1,jn.y*=-1,jn.z*=-1,M.isCubeTexture&&M.isRenderTargetTexture===!1&&(jn.y*=-1,jn.z*=-1),g.material.uniforms.envMap.value=M,g.material.uniforms.flipEnvMap.value=M.isCubeTexture&&M.isRenderTargetTexture===!1?-1:1,g.material.uniforms.backgroundBlurriness.value=m.backgroundBlurriness,g.material.uniforms.backgroundIntensity.value=m.backgroundIntensity,g.material.uniforms.backgroundRotation.value.setFromMatrix4(gd.makeRotationFromEuler(jn)),g.material.toneMapped=Wt.getTransfer(M.colorSpace)!==ee,(l!==M||h!==M.version||d!==A.toneMapping)&&(g.material.needsUpdate=!0,l=M,h=M.version,d=A.toneMapping),g.layers.enableAll(),Q.unshift(g,g.geometry,g.material,0,0,null)):M&&M.isTexture&&(c===void 0&&(c=new Je(new JA(2,2),new hn({name:"BackgroundMaterial",uniforms:zA(an.background.uniforms),vertexShader:an.background.vertexShader,fragmentShader:an.background.fragmentShader,side:Yn,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(c)),c.material.uniforms.t2D.value=M,c.material.uniforms.backgroundIntensity.value=m.backgroundIntensity,c.material.toneMapped=Wt.getTransfer(M.colorSpace)!==ee,M.matrixAutoUpdate===!0&&M.updateMatrix(),c.material.uniforms.uvTransform.value.copy(M.matrix),(l!==M||h!==M.version||d!==A.toneMapping)&&(c.material.needsUpdate=!0,l=M,h=M.version,d=A.toneMapping),c.layers.enableAll(),Q.unshift(c,c.geometry,c.material,0,0,null))}function u(Q,m){Q.getRGB(Gi,nc(A)),n.buffers.color.setClear(Gi.r,Gi.g,Gi.b,m,a)}function x(){g!==void 0&&(g.geometry.dispose(),g.material.dispose(),g=void 0),c!==void 0&&(c.geometry.dispose(),c.material.dispose(),c=void 0)}return{getClearColor:function(){return r},setClearColor:function(Q,m=1){r.set(Q),o=m,u(r,o)},getClearAlpha:function(){return o},setClearAlpha:function(Q){o=Q,u(r,o)},render:f,addToRenderList:I,dispose:x}}function ud(A,t){const e=A.getParameter(A.MAX_VERTEX_ATTRIBS),n={},i=h(null);let s=i,a=!1;function r(C,v,z,U,Y){let K=!1;const H=l(U,z,v);s!==H&&(s=H,c(s.object)),K=d(C,U,z,Y),K&&E(C,U,z,Y),Y!==null&&t.update(Y,A.ELEMENT_ARRAY_BUFFER),(K||a)&&(a=!1,m(C,v,z,U),Y!==null&&A.bindBuffer(A.ELEMENT_ARRAY_BUFFER,t.get(Y).buffer))}function o(){return A.createVertexArray()}function c(C){return A.bindVertexArray(C)}function g(C){return A.deleteVertexArray(C)}function l(C,v,z){const U=z.wireframe===!0;let Y=n[C.id];Y===void 0&&(Y={},n[C.id]=Y);let K=Y[v.id];K===void 0&&(K={},Y[v.id]=K);let H=K[U];return H===void 0&&(H=h(o()),K[U]=H),H}function h(C){const v=[],z=[],U=[];for(let Y=0;Y<e;Y++)v[Y]=0,z[Y]=0,U[Y]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:v,enabledAttributes:z,attributeDivisors:U,object:C,attributes:{},index:null}}function d(C,v,z,U){const Y=s.attributes,K=v.attributes;let H=0;const X=z.getAttributes();for(const P in X)if(X[P].location>=0){const rt=Y[P];let It=K[P];if(It===void 0&&(P==="instanceMatrix"&&C.instanceMatrix&&(It=C.instanceMatrix),P==="instanceColor"&&C.instanceColor&&(It=C.instanceColor)),rt===void 0||rt.attribute!==It||It&&rt.data!==It.data)return!0;H++}return s.attributesNum!==H||s.index!==U}function E(C,v,z,U){const Y={},K=v.attributes;let H=0;const X=z.getAttributes();for(const P in X)if(X[P].location>=0){let rt=K[P];rt===void 0&&(P==="instanceMatrix"&&C.instanceMatrix&&(rt=C.instanceMatrix),P==="instanceColor"&&C.instanceColor&&(rt=C.instanceColor));const It={};It.attribute=rt,rt&&rt.data&&(It.data=rt.data),Y[P]=It,H++}s.attributes=Y,s.attributesNum=H,s.index=U}function f(){const C=s.newAttributes;for(let v=0,z=C.length;v<z;v++)C[v]=0}function I(C){u(C,0)}function u(C,v){const z=s.newAttributes,U=s.enabledAttributes,Y=s.attributeDivisors;z[C]=1,U[C]===0&&(A.enableVertexAttribArray(C),U[C]=1),Y[C]!==v&&(A.vertexAttribDivisor(C,v),Y[C]=v)}function x(){const C=s.newAttributes,v=s.enabledAttributes;for(let z=0,U=v.length;z<U;z++)v[z]!==C[z]&&(A.disableVertexAttribArray(z),v[z]=0)}function Q(C,v,z,U,Y,K,H){H===!0?A.vertexAttribIPointer(C,v,z,Y,K):A.vertexAttribPointer(C,v,z,U,Y,K)}function m(C,v,z,U){f();const Y=U.attributes,K=z.getAttributes(),H=v.defaultAttributeValues;for(const X in K){const P=K[X];if(P.location>=0){let At=Y[X];if(At===void 0&&(X==="instanceMatrix"&&C.instanceMatrix&&(At=C.instanceMatrix),X==="instanceColor"&&C.instanceColor&&(At=C.instanceColor)),At!==void 0){const rt=At.normalized,It=At.itemSize,Dt=t.get(At);if(Dt===void 0)continue;const Ut=Dt.buffer,J=Dt.type,tt=Dt.bytesPerElement,lt=J===A.INT||J===A.UNSIGNED_INT||At.gpuType===ir;if(At.isInterleavedBufferAttribute){const Z=At.data,ht=Z.stride,Ft=At.offset;if(Z.isInstancedInterleavedBuffer){for(let mt=0;mt<P.locationSize;mt++)u(P.location+mt,Z.meshPerAttribute);C.isInstancedMesh!==!0&&U._maxInstanceCount===void 0&&(U._maxInstanceCount=Z.meshPerAttribute*Z.count)}else for(let mt=0;mt<P.locationSize;mt++)I(P.location+mt);A.bindBuffer(A.ARRAY_BUFFER,Ut);for(let mt=0;mt<P.locationSize;mt++)Q(P.location+mt,It/P.locationSize,J,rt,ht*tt,(Ft+It/P.locationSize*mt)*tt,lt)}else{if(At.isInstancedBufferAttribute){for(let Z=0;Z<P.locationSize;Z++)u(P.location+Z,At.meshPerAttribute);C.isInstancedMesh!==!0&&U._maxInstanceCount===void 0&&(U._maxInstanceCount=At.meshPerAttribute*At.count)}else for(let Z=0;Z<P.locationSize;Z++)I(P.location+Z);A.bindBuffer(A.ARRAY_BUFFER,Ut);for(let Z=0;Z<P.locationSize;Z++)Q(P.location+Z,It/P.locationSize,J,rt,It*tt,It/P.locationSize*Z*tt,lt)}}else if(H!==void 0){const rt=H[X];if(rt!==void 0)switch(rt.length){case 2:A.vertexAttrib2fv(P.location,rt);break;case 3:A.vertexAttrib3fv(P.location,rt);break;case 4:A.vertexAttrib4fv(P.location,rt);break;default:A.vertexAttrib1fv(P.location,rt)}}}}x()}function M(){T();for(const C in n){const v=n[C];for(const z in v){const U=v[z];for(const Y in U)g(U[Y].object),delete U[Y];delete v[z]}delete n[C]}}function S(C){if(n[C.id]===void 0)return;const v=n[C.id];for(const z in v){const U=v[z];for(const Y in U)g(U[Y].object),delete U[Y];delete v[z]}delete n[C.id]}function D(C){for(const v in n){const z=n[v];if(z[C.id]===void 0)continue;const U=z[C.id];for(const Y in U)g(U[Y].object),delete U[Y];delete z[C.id]}}function T(){y(),a=!0,s!==i&&(s=i,c(s.object))}function y(){i.geometry=null,i.program=null,i.wireframe=!1}return{setup:r,reset:T,resetDefaultState:y,dispose:M,releaseStatesOfGeometry:S,releaseStatesOfProgram:D,initAttributes:f,enableAttribute:I,disableUnusedAttributes:x}}function dd(A,t,e){let n;function i(c){n=c}function s(c,g){A.drawArrays(n,c,g),e.update(g,n,1)}function a(c,g,l){l!==0&&(A.drawArraysInstanced(n,c,g,l),e.update(g,n,l))}function r(c,g,l){if(l===0)return;t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,c,0,g,0,l);let d=0;for(let E=0;E<l;E++)d+=g[E];e.update(d,n,1)}function o(c,g,l,h){if(l===0)return;const d=t.get("WEBGL_multi_draw");if(d===null)for(let E=0;E<c.length;E++)a(c[E],g[E],h[E]);else{d.multiDrawArraysInstancedWEBGL(n,c,0,g,0,h,0,l);let E=0;for(let f=0;f<l;f++)E+=g[f]*h[f];e.update(E,n,1)}}this.setMode=i,this.render=s,this.renderInstances=a,this.renderMultiDraw=r,this.renderMultiDrawInstances=o}function Id(A,t,e,n){let i;function s(){if(i!==void 0)return i;if(t.has("EXT_texture_filter_anisotropic")===!0){const D=t.get("EXT_texture_filter_anisotropic");i=A.getParameter(D.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i}function a(D){return!(D!==me&&n.convert(D)!==A.getParameter(A.IMPLEMENTATION_COLOR_READ_FORMAT))}function r(D){const T=D===ui&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(D!==Le&&n.convert(D)!==A.getParameter(A.IMPLEMENTATION_COLOR_READ_TYPE)&&D!==wn&&!T)}function o(D){if(D==="highp"){if(A.getShaderPrecisionFormat(A.VERTEX_SHADER,A.HIGH_FLOAT).precision>0&&A.getShaderPrecisionFormat(A.FRAGMENT_SHADER,A.HIGH_FLOAT).precision>0)return"highp";D="mediump"}return D==="mediump"&&A.getShaderPrecisionFormat(A.VERTEX_SHADER,A.MEDIUM_FLOAT).precision>0&&A.getShaderPrecisionFormat(A.FRAGMENT_SHADER,A.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let c=e.precision!==void 0?e.precision:"highp";const g=o(c);g!==c&&(console.warn("THREE.WebGLRenderer:",c,"not supported, using",g,"instead."),c=g);const l=e.logarithmicDepthBuffer===!0,h=e.reverseDepthBuffer===!0&&t.has("EXT_clip_control"),d=A.getParameter(A.MAX_TEXTURE_IMAGE_UNITS),E=A.getParameter(A.MAX_VERTEX_TEXTURE_IMAGE_UNITS),f=A.getParameter(A.MAX_TEXTURE_SIZE),I=A.getParameter(A.MAX_CUBE_MAP_TEXTURE_SIZE),u=A.getParameter(A.MAX_VERTEX_ATTRIBS),x=A.getParameter(A.MAX_VERTEX_UNIFORM_VECTORS),Q=A.getParameter(A.MAX_VARYING_VECTORS),m=A.getParameter(A.MAX_FRAGMENT_UNIFORM_VECTORS),M=E>0,S=A.getParameter(A.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:s,getMaxPrecision:o,textureFormatReadable:a,textureTypeReadable:r,precision:c,logarithmicDepthBuffer:l,reverseDepthBuffer:h,maxTextures:d,maxVertexTextures:E,maxTextureSize:f,maxCubemapSize:I,maxAttributes:u,maxVertexUniforms:x,maxVaryings:Q,maxFragmentUniforms:m,vertexTextures:M,maxSamples:S}}function Ed(A){const t=this;let e=null,n=0,i=!1,s=!1;const a=new tA,r=new Tt,o={value:null,needsUpdate:!1};this.uniform=o,this.numPlanes=0,this.numIntersection=0,this.init=function(l,h){const d=l.length!==0||h||n!==0||i;return i=h,n=l.length,d},this.beginShadows=function(){s=!0,g(null)},this.endShadows=function(){s=!1},this.setGlobalState=function(l,h){e=g(l,h,0)},this.setState=function(l,h,d){const E=l.clippingPlanes,f=l.clipIntersection,I=l.clipShadows,u=A.get(l);if(!i||E===null||E.length===0||s&&!I)s?g(null):c();else{const x=s?0:n,Q=x*4;let m=u.clippingState||null;o.value=m,m=g(E,h,Q,d);for(let M=0;M!==Q;++M)m[M]=e[M];u.clippingState=m,this.numIntersection=f?this.numPlanes:0,this.numPlanes+=x}};function c(){o.value!==e&&(o.value=e,o.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function g(l,h,d,E){const f=l!==null?l.length:0;let I=null;if(f!==0){if(I=o.value,E!==!0||I===null){const u=d+f*4,x=h.matrixWorldInverse;r.getNormalMatrix(x),(I===null||I.length<u)&&(I=new Float32Array(u));for(let Q=0,m=d;Q!==f;++Q,m+=4)a.copy(l[Q]).applyMatrix4(x,r),a.normal.toArray(I,m),I[m+3]=a.constant}o.value=I,o.needsUpdate=!0}return t.numPlanes=f,t.numIntersection=0,I}}function pd(A){let t=new WeakMap;function e(a,r){return r===Ia?a.mapping=GA:r===Ea&&(a.mapping=PA),a}function n(a){if(a&&a.isTexture){const r=a.mapping;if(r===Ia||r===Ea)if(t.has(a)){const o=t.get(a).texture;return e(o,a.mapping)}else{const o=a.image;if(o&&o.height>0){const c=new sc(o.height);return c.fromEquirectangularTexture(A,a),t.set(a,c),a.addEventListener("dispose",i),e(c.texture,a.mapping)}else return null}}return a}function i(a){const r=a.target;r.removeEventListener("dispose",i);const o=t.get(r);o!==void 0&&(t.delete(r),o.dispose())}function s(){t=new WeakMap}return{get:n,dispose:s}}const NA=4,to=[.125,.215,.35,.446,.526,.582],AA=20,Js=new Dg,eo=new Ht;let qs=null,Vs=0,Ks=0,Ws=!1;const eA=(1+Math.sqrt(5))/2,_A=1/eA,no=[new b(-eA,_A,0),new b(eA,_A,0),new b(-_A,0,eA),new b(_A,0,eA),new b(0,eA,-_A),new b(0,eA,_A),new b(-1,1,-1),new b(1,1,-1),new b(-1,1,1),new b(1,1,1)],fd=new b;class qa{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100,s={}){const{size:a=256,position:r=fd}=s;qs=this._renderer.getRenderTarget(),Vs=this._renderer.getActiveCubeFace(),Ks=this._renderer.getActiveMipmapLevel(),Ws=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(a);const o=this._allocateTargets();return o.depthBuffer=!0,this._sceneToCubeUV(t,n,i,o,r),e>0&&this._blur(o,0,0,e),this._applyPMREM(o),this._cleanup(o),o}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=so(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=io(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(qs,Vs,Ks),this._renderer.xr.enabled=Ws,t.scissorTest=!1,Pi(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===GA||t.mapping===PA?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),qs=this._renderer.getRenderTarget(),Vs=this._renderer.getActiveCubeFace(),Ks=this._renderer.getActiveMipmapLevel(),Ws=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,n={magFilter:on,minFilter:on,generateMipmaps:!1,type:ui,format:me,colorSpace:HA,depthBuffer:!1},i=Ao(t,e,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=Ao(t,e,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=Bd(s)),this._blurMaterial=Cd(s,t,e)}return i}_compileMaterial(t){const e=new Je(this._lodPlanes[0],t);this._renderer.compile(e,Js)}_sceneToCubeUV(t,e,n,i,s){const o=new Oe(90,1,e,n),c=[1,-1,1,1,1,1],g=[1,1,1,-1,-1,-1],l=this._renderer,h=l.autoClear,d=l.toneMapping;l.getClearColor(eo),l.toneMapping=Hn,l.autoClear=!1;const E=new $o({name:"PMREM.Background",side:Te,depthWrite:!1,depthTest:!1}),f=new Je(new Ei,E);let I=!1;const u=t.background;u?u.isColor&&(E.color.copy(u),t.background=null,I=!0):(E.color.copy(eo),I=!0);for(let x=0;x<6;x++){const Q=x%3;Q===0?(o.up.set(0,c[x],0),o.position.set(s.x,s.y,s.z),o.lookAt(s.x+g[x],s.y,s.z)):Q===1?(o.up.set(0,0,c[x]),o.position.set(s.x,s.y,s.z),o.lookAt(s.x,s.y+g[x],s.z)):(o.up.set(0,c[x],0),o.position.set(s.x,s.y,s.z),o.lookAt(s.x,s.y,s.z+g[x]));const m=this._cubeSize;Pi(i,Q*m,x>2?m:0,m,m),l.setRenderTarget(i),I&&l.render(f,o),l.render(t,o)}f.geometry.dispose(),f.material.dispose(),l.toneMapping=d,l.autoClear=h,t.background=u}_textureToCubeUV(t,e){const n=this._renderer,i=t.mapping===GA||t.mapping===PA;i?(this._cubemapMaterial===null&&(this._cubemapMaterial=so()),this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=io());const s=i?this._cubemapMaterial:this._equirectMaterial,a=new Je(this._lodPlanes[0],s),r=s.uniforms;r.envMap.value=t;const o=this._cubeSize;Pi(e,0,0,3*o,2*o),n.setRenderTarget(e),n.render(a,Js)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;const i=this._lodPlanes.length;for(let s=1;s<i;s++){const a=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),r=no[(i-s-1)%no.length];this._blur(t,s-1,s,a,r)}e.autoClear=n}_blur(t,e,n,i,s){const a=this._pingPongRenderTarget;this._halfBlur(t,a,e,n,i,"latitudinal",s),this._halfBlur(a,t,n,n,i,"longitudinal",s)}_halfBlur(t,e,n,i,s,a,r){const o=this._renderer,c=this._blurMaterial;a!=="latitudinal"&&a!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const g=3,l=new Je(this._lodPlanes[i],c),h=c.uniforms,d=this._sizeLods[n]-1,E=isFinite(s)?Math.PI/(2*d):2*Math.PI/(2*AA-1),f=s/E,I=isFinite(s)?1+Math.floor(g*f):AA;I>AA&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${I} samples when the maximum is set to ${AA}`);const u=[];let x=0;for(let D=0;D<AA;++D){const T=D/f,y=Math.exp(-T*T/2);u.push(y),D===0?x+=y:D<I&&(x+=2*y)}for(let D=0;D<u.length;D++)u[D]=u[D]/x;h.envMap.value=t.texture,h.samples.value=I,h.weights.value=u,h.latitudinal.value=a==="latitudinal",r&&(h.poleAxis.value=r);const{_lodMax:Q}=this;h.dTheta.value=E,h.mipInt.value=Q-n;const m=this._sizeLods[i],M=3*m*(i>Q-NA?i-Q+NA:0),S=4*(this._cubeSize-m);Pi(e,M,S,3*m,2*m),o.setRenderTarget(e),o.render(l,Js)}}function Bd(A){const t=[],e=[],n=[];let i=A;const s=A-NA+1+to.length;for(let a=0;a<s;a++){const r=Math.pow(2,i);e.push(r);let o=1/r;a>A-NA?o=to[a-A+NA-1]:a===0&&(o=0),n.push(o);const c=1/(r-2),g=-c,l=1+c,h=[g,g,l,g,l,l,g,g,l,l,g,l],d=6,E=6,f=3,I=2,u=1,x=new Float32Array(f*E*d),Q=new Float32Array(I*E*d),m=new Float32Array(u*E*d);for(let S=0;S<d;S++){const D=S%3*2/3-1,T=S>2?0:-1,y=[D,T,0,D+2/3,T,0,D+2/3,T+1,0,D,T,0,D+2/3,T+1,0,D,T+1,0];x.set(y,f*E*S),Q.set(h,I*E*S);const C=[S,S,S,S,S,S];m.set(C,u*E*S)}const M=new On;M.setAttribute("position",new qe(x,f)),M.setAttribute("uv",new qe(Q,I)),M.setAttribute("faceIndex",new qe(m,u)),t.push(M),i>NA&&i--}return{lodPlanes:t,sizeLods:e,sigmas:n}}function Ao(A,t,e){const n=new ln(A,t,e);return n.texture.mapping=gs,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function Pi(A,t,e,n,i){A.viewport.set(t,e,n,i),A.scissor.set(t,e,n,i)}function Cd(A,t,e){const n=new Float32Array(AA),i=new b(0,1,0);return new hn({name:"SphericalGaussianBlur",defines:{n:AA,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/e,CUBEUV_MAX_MIP:`${A}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:hr(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:Pn,depthTest:!1,depthWrite:!1})}function io(){return new hn({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:hr(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:Pn,depthTest:!1,depthWrite:!1})}function so(){return new hn({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:hr(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:Pn,depthTest:!1,depthWrite:!1})}function hr(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function Qd(A){let t=new WeakMap,e=null;function n(r){if(r&&r.isTexture){const o=r.mapping,c=o===Ia||o===Ea,g=o===GA||o===PA;if(c||g){let l=t.get(r);const h=l!==void 0?l.texture.pmremVersion:0;if(r.isRenderTargetTexture&&r.pmremVersion!==h)return e===null&&(e=new qa(A)),l=c?e.fromEquirectangular(r,l):e.fromCubemap(r,l),l.texture.pmremVersion=r.pmremVersion,t.set(r,l),l.texture;if(l!==void 0)return l.texture;{const d=r.image;return c&&d&&d.height>0||g&&d&&i(d)?(e===null&&(e=new qa(A)),l=c?e.fromEquirectangular(r):e.fromCubemap(r),l.texture.pmremVersion=r.pmremVersion,t.set(r,l),r.addEventListener("dispose",s),l.texture):null}}}return r}function i(r){let o=0;const c=6;for(let g=0;g<c;g++)r[g]!==void 0&&o++;return o===c}function s(r){const o=r.target;o.removeEventListener("dispose",s);const c=t.get(o);c!==void 0&&(t.delete(o),c.dispose())}function a(){t=new WeakMap,e!==null&&(e.dispose(),e=null)}return{get:n,dispose:a}}function md(A){const t={};function e(n){if(t[n]!==void 0)return t[n];let i;switch(n){case"WEBGL_depth_texture":i=A.getExtension("WEBGL_depth_texture")||A.getExtension("MOZ_WEBGL_depth_texture")||A.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=A.getExtension("EXT_texture_filter_anisotropic")||A.getExtension("MOZ_EXT_texture_filter_anisotropic")||A.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=A.getExtension("WEBGL_compressed_texture_s3tc")||A.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||A.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=A.getExtension("WEBGL_compressed_texture_pvrtc")||A.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=A.getExtension(n)}return t[n]=i,i}return{has:function(n){return e(n)!==null},init:function(){e("EXT_color_buffer_float"),e("WEBGL_clip_cull_distance"),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float"),e("WEBGL_multisampled_render_to_texture"),e("WEBGL_render_shared_exponent")},get:function(n){const i=e(n);return i===null&&TA("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function yd(A,t,e,n){const i={},s=new WeakMap;function a(l){const h=l.target;h.index!==null&&t.remove(h.index);for(const E in h.attributes)t.remove(h.attributes[E]);h.removeEventListener("dispose",a),delete i[h.id];const d=s.get(h);d&&(t.remove(d),s.delete(h)),n.releaseStatesOfGeometry(h),h.isInstancedBufferGeometry===!0&&delete h._maxInstanceCount,e.memory.geometries--}function r(l,h){return i[h.id]===!0||(h.addEventListener("dispose",a),i[h.id]=!0,e.memory.geometries++),h}function o(l){const h=l.attributes;for(const d in h)t.update(h[d],A.ARRAY_BUFFER)}function c(l){const h=[],d=l.index,E=l.attributes.position;let f=0;if(d!==null){const x=d.array;f=d.version;for(let Q=0,m=x.length;Q<m;Q+=3){const M=x[Q+0],S=x[Q+1],D=x[Q+2];h.push(M,S,S,D,D,M)}}else if(E!==void 0){const x=E.array;f=E.version;for(let Q=0,m=x.length/3-1;Q<m;Q+=3){const M=Q+0,S=Q+1,D=Q+2;h.push(M,S,S,D,D,M)}}else return;const I=new(Wo(h)?ec:tc)(h,1);I.version=f;const u=s.get(l);u&&t.remove(u),s.set(l,I)}function g(l){const h=s.get(l);if(h){const d=l.index;d!==null&&h.version<d.version&&c(l)}else c(l);return s.get(l)}return{get:r,update:o,getWireframeAttribute:g}}function xd(A,t,e){let n;function i(h){n=h}let s,a;function r(h){s=h.type,a=h.bytesPerElement}function o(h,d){A.drawElements(n,d,s,h*a),e.update(d,n,1)}function c(h,d,E){E!==0&&(A.drawElementsInstanced(n,d,s,h*a,E),e.update(d,n,E))}function g(h,d,E){if(E===0)return;t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,d,0,s,h,0,E);let I=0;for(let u=0;u<E;u++)I+=d[u];e.update(I,n,1)}function l(h,d,E,f){if(E===0)return;const I=t.get("WEBGL_multi_draw");if(I===null)for(let u=0;u<h.length;u++)c(h[u]/a,d[u],f[u]);else{I.multiDrawElementsInstancedWEBGL(n,d,0,s,h,0,f,0,E);let u=0;for(let x=0;x<E;x++)u+=d[x]*f[x];e.update(u,n,1)}}this.setMode=i,this.setIndex=r,this.render=o,this.renderInstances=c,this.renderMultiDraw=g,this.renderMultiDrawInstances=l}function wd(A){const t={geometries:0,textures:0},e={frame:0,calls:0,triangles:0,points:0,lines:0};function n(s,a,r){switch(e.calls++,a){case A.TRIANGLES:e.triangles+=r*(s/3);break;case A.LINES:e.lines+=r*(s/2);break;case A.LINE_STRIP:e.lines+=r*(s-1);break;case A.LINE_LOOP:e.lines+=r*s;break;case A.POINTS:e.points+=r*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",a);break}}function i(){e.calls=0,e.triangles=0,e.points=0,e.lines=0}return{memory:t,render:e,programs:null,autoReset:!0,reset:i,update:n}}function Sd(A,t,e){const n=new WeakMap,i=new te;function s(a,r,o){const c=a.morphTargetInfluences,g=r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color,l=g!==void 0?g.length:0;let h=n.get(r);if(h===void 0||h.count!==l){let y=function(){D.dispose(),n.delete(r),r.removeEventListener("dispose",y)};h!==void 0&&h.texture.dispose();const d=r.morphAttributes.position!==void 0,E=r.morphAttributes.normal!==void 0,f=r.morphAttributes.color!==void 0,I=r.morphAttributes.position||[],u=r.morphAttributes.normal||[],x=r.morphAttributes.color||[];let Q=0;d===!0&&(Q=1),E===!0&&(Q=2),f===!0&&(Q=3);let m=r.attributes.position.count*Q,M=1;m>t.maxTextureSize&&(M=Math.ceil(m/t.maxTextureSize),m=t.maxTextureSize);const S=new Float32Array(m*M*4*l),D=new cn(S,m,M,l);D.type=wn,D.needsUpdate=!0;const T=Q*4;for(let C=0;C<l;C++){const v=I[C],z=u[C],U=x[C],Y=m*M*4*C;for(let K=0;K<v.count;K++){const H=K*T;d===!0&&(i.fromBufferAttribute(v,K),S[Y+H+0]=i.x,S[Y+H+1]=i.y,S[Y+H+2]=i.z,S[Y+H+3]=0),E===!0&&(i.fromBufferAttribute(z,K),S[Y+H+4]=i.x,S[Y+H+5]=i.y,S[Y+H+6]=i.z,S[Y+H+7]=0),f===!0&&(i.fromBufferAttribute(U,K),S[Y+H+8]=i.x,S[Y+H+9]=i.y,S[Y+H+10]=i.z,S[Y+H+11]=U.itemSize===4?i.w:1)}}h={count:l,texture:D,size:new Xt(m,M)},n.set(r,h),r.addEventListener("dispose",y)}if(a.isInstancedMesh===!0&&a.morphTexture!==null)o.getUniforms().setValue(A,"morphTexture",a.morphTexture,e);else{let d=0;for(let f=0;f<c.length;f++)d+=c[f];const E=r.morphTargetsRelative?1:1-d;o.getUniforms().setValue(A,"morphTargetBaseInfluence",E),o.getUniforms().setValue(A,"morphTargetInfluences",c)}o.getUniforms().setValue(A,"morphTargetsTexture",h.texture,e),o.getUniforms().setValue(A,"morphTargetsTextureSize",h.size)}return{update:s}}function Dd(A,t,e,n){let i=new WeakMap;function s(o){const c=n.render.frame,g=o.geometry,l=t.get(o,g);if(i.get(l)!==c&&(t.update(l),i.set(l,c)),o.isInstancedMesh&&(o.hasEventListener("dispose",r)===!1&&o.addEventListener("dispose",r),i.get(o)!==c&&(e.update(o.instanceMatrix,A.ARRAY_BUFFER),o.instanceColor!==null&&e.update(o.instanceColor,A.ARRAY_BUFFER),i.set(o,c))),o.isSkinnedMesh){const h=o.skeleton;i.get(h)!==c&&(h.update(),i.set(h,c))}return l}function a(){i=new WeakMap}function r(o){const c=o.target;c.removeEventListener("dispose",r),e.remove(c.instanceMatrix),c.instanceColor!==null&&e.remove(c.instanceColor)}return{update:s,dispose:a}}const lc=new De,ao=new rc(1,1),gc=new cn,hc=new Ag,uc=new ic,ro=[],oo=[],co=new Float32Array(16),lo=new Float32Array(9),go=new Float32Array(4);function qA(A,t,e){const n=A[0];if(n<=0||n>0)return A;const i=t*e;let s=ro[i];if(s===void 0&&(s=new Float32Array(i),ro[i]=s),t!==0){n.toArray(s,0);for(let a=1,r=0;a!==t;++a)r+=e,A[a].toArray(s,r)}return s}function de(A,t){if(A.length!==t.length)return!1;for(let e=0,n=A.length;e<n;e++)if(A[e]!==t[e])return!1;return!0}function Ie(A,t){for(let e=0,n=t.length;e<n;e++)A[e]=t[e]}function ds(A,t){let e=oo[t];e===void 0&&(e=new Int32Array(t),oo[t]=e);for(let n=0;n!==t;++n)e[n]=A.allocateTextureUnit();return e}function _d(A,t){const e=this.cache;e[0]!==t&&(A.uniform1f(this.addr,t),e[0]=t)}function Md(A,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(A.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(de(e,t))return;A.uniform2fv(this.addr,t),Ie(e,t)}}function vd(A,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(A.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(t.r!==void 0)(e[0]!==t.r||e[1]!==t.g||e[2]!==t.b)&&(A.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(de(e,t))return;A.uniform3fv(this.addr,t),Ie(e,t)}}function bd(A,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(A.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(de(e,t))return;A.uniform4fv(this.addr,t),Ie(e,t)}}function Rd(A,t){const e=this.cache,n=t.elements;if(n===void 0){if(de(e,t))return;A.uniformMatrix2fv(this.addr,!1,t),Ie(e,t)}else{if(de(e,n))return;go.set(n),A.uniformMatrix2fv(this.addr,!1,go),Ie(e,n)}}function Fd(A,t){const e=this.cache,n=t.elements;if(n===void 0){if(de(e,t))return;A.uniformMatrix3fv(this.addr,!1,t),Ie(e,t)}else{if(de(e,n))return;lo.set(n),A.uniformMatrix3fv(this.addr,!1,lo),Ie(e,n)}}function Nd(A,t){const e=this.cache,n=t.elements;if(n===void 0){if(de(e,t))return;A.uniformMatrix4fv(this.addr,!1,t),Ie(e,t)}else{if(de(e,n))return;co.set(n),A.uniformMatrix4fv(this.addr,!1,co),Ie(e,n)}}function Td(A,t){const e=this.cache;e[0]!==t&&(A.uniform1i(this.addr,t),e[0]=t)}function kd(A,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(A.uniform2i(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(de(e,t))return;A.uniform2iv(this.addr,t),Ie(e,t)}}function Ud(A,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(A.uniform3i(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(de(e,t))return;A.uniform3iv(this.addr,t),Ie(e,t)}}function Ld(A,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(A.uniform4i(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(de(e,t))return;A.uniform4iv(this.addr,t),Ie(e,t)}}function Gd(A,t){const e=this.cache;e[0]!==t&&(A.uniform1ui(this.addr,t),e[0]=t)}function Pd(A,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(A.uniform2ui(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(de(e,t))return;A.uniform2uiv(this.addr,t),Ie(e,t)}}function Hd(A,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(A.uniform3ui(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(de(e,t))return;A.uniform3uiv(this.addr,t),Ie(e,t)}}function zd(A,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(A.uniform4ui(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(de(e,t))return;A.uniform4uiv(this.addr,t),Ie(e,t)}}function Yd(A,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(A.uniform1i(this.addr,i),n[0]=i);let s;this.type===A.SAMPLER_2D_SHADOW?(ao.compareFunction=Ko,s=ao):s=lc,e.setTexture2D(t||s,i)}function Od(A,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(A.uniform1i(this.addr,i),n[0]=i),e.setTexture3D(t||hc,i)}function Jd(A,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(A.uniform1i(this.addr,i),n[0]=i),e.setTextureCube(t||uc,i)}function qd(A,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(A.uniform1i(this.addr,i),n[0]=i),e.setTexture2DArray(t||gc,i)}function Vd(A){switch(A){case 5126:return _d;case 35664:return Md;case 35665:return vd;case 35666:return bd;case 35674:return Rd;case 35675:return Fd;case 35676:return Nd;case 5124:case 35670:return Td;case 35667:case 35671:return kd;case 35668:case 35672:return Ud;case 35669:case 35673:return Ld;case 5125:return Gd;case 36294:return Pd;case 36295:return Hd;case 36296:return zd;case 35678:case 36198:case 36298:case 36306:case 35682:return Yd;case 35679:case 36299:case 36307:return Od;case 35680:case 36300:case 36308:case 36293:return Jd;case 36289:case 36303:case 36311:case 36292:return qd}}function Kd(A,t){A.uniform1fv(this.addr,t)}function Wd(A,t){const e=qA(t,this.size,2);A.uniform2fv(this.addr,e)}function Xd(A,t){const e=qA(t,this.size,3);A.uniform3fv(this.addr,e)}function Zd(A,t){const e=qA(t,this.size,4);A.uniform4fv(this.addr,e)}function jd(A,t){const e=qA(t,this.size,4);A.uniformMatrix2fv(this.addr,!1,e)}function $d(A,t){const e=qA(t,this.size,9);A.uniformMatrix3fv(this.addr,!1,e)}function tI(A,t){const e=qA(t,this.size,16);A.uniformMatrix4fv(this.addr,!1,e)}function eI(A,t){A.uniform1iv(this.addr,t)}function nI(A,t){A.uniform2iv(this.addr,t)}function AI(A,t){A.uniform3iv(this.addr,t)}function iI(A,t){A.uniform4iv(this.addr,t)}function sI(A,t){A.uniform1uiv(this.addr,t)}function aI(A,t){A.uniform2uiv(this.addr,t)}function rI(A,t){A.uniform3uiv(this.addr,t)}function oI(A,t){A.uniform4uiv(this.addr,t)}function cI(A,t,e){const n=this.cache,i=t.length,s=ds(e,i);de(n,s)||(A.uniform1iv(this.addr,s),Ie(n,s));for(let a=0;a!==i;++a)e.setTexture2D(t[a]||lc,s[a])}function lI(A,t,e){const n=this.cache,i=t.length,s=ds(e,i);de(n,s)||(A.uniform1iv(this.addr,s),Ie(n,s));for(let a=0;a!==i;++a)e.setTexture3D(t[a]||hc,s[a])}function gI(A,t,e){const n=this.cache,i=t.length,s=ds(e,i);de(n,s)||(A.uniform1iv(this.addr,s),Ie(n,s));for(let a=0;a!==i;++a)e.setTextureCube(t[a]||uc,s[a])}function hI(A,t,e){const n=this.cache,i=t.length,s=ds(e,i);de(n,s)||(A.uniform1iv(this.addr,s),Ie(n,s));for(let a=0;a!==i;++a)e.setTexture2DArray(t[a]||gc,s[a])}function uI(A){switch(A){case 5126:return Kd;case 35664:return Wd;case 35665:return Xd;case 35666:return Zd;case 35674:return jd;case 35675:return $d;case 35676:return tI;case 5124:case 35670:return eI;case 35667:case 35671:return nI;case 35668:case 35672:return AI;case 35669:case 35673:return iI;case 5125:return sI;case 36294:return aI;case 36295:return rI;case 36296:return oI;case 35678:case 36198:case 36298:case 36306:case 35682:return cI;case 35679:case 36299:case 36307:return lI;case 35680:case 36300:case 36308:case 36293:return gI;case 36289:case 36303:case 36311:case 36292:return hI}}class dI{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.setValue=Vd(e.type)}}class II{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=uI(e.type)}}class EI{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,n){const i=this.seq;for(let s=0,a=i.length;s!==a;++s){const r=i[s];r.setValue(t,e[r.id],n)}}}const Xs=/(\w+)(\])?(\[|\.)?/g;function ho(A,t){A.seq.push(t),A.map[t.id]=t}function pI(A,t,e){const n=A.name,i=n.length;for(Xs.lastIndex=0;;){const s=Xs.exec(n),a=Xs.lastIndex;let r=s[1];const o=s[2]==="]",c=s[3];if(o&&(r=r|0),c===void 0||c==="["&&a+2===i){ho(e,c===void 0?new dI(r,A,t):new II(r,A,t));break}else{let l=e.map[r];l===void 0&&(l=new EI(r),ho(e,l)),e=l}}}class $i{constructor(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const s=t.getActiveUniform(e,i),a=t.getUniformLocation(e,s.name);pI(s,a,this)}}setValue(t,e,n,i){const s=this.map[e];s!==void 0&&s.setValue(t,n,i)}setOptional(t,e,n){const i=e[n];i!==void 0&&this.setValue(t,n,i)}static upload(t,e,n,i){for(let s=0,a=e.length;s!==a;++s){const r=e[s],o=n[r.id];o.needsUpdate!==!1&&r.setValue(t,o.value,i)}}static seqWithValue(t,e){const n=[];for(let i=0,s=t.length;i!==s;++i){const a=t[i];a.id in e&&n.push(a)}return n}}function uo(A,t,e){const n=A.createShader(t);return A.shaderSource(n,e),A.compileShader(n),n}const fI=37297;let BI=0;function CI(A,t){const e=A.split(`
`),n=[],i=Math.max(t-6,0),s=Math.min(t+6,e.length);for(let a=i;a<s;a++){const r=a+1;n.push(`${r===t?">":" "} ${r}: ${e[a]}`)}return n.join(`
`)}const Io=new Tt;function QI(A){Wt._getMatrix(Io,Wt.workingColorSpace,A);const t=`mat3( ${Io.elements.map(e=>e.toFixed(4))} )`;switch(Wt.getTransfer(A)){case is:return[t,"LinearTransferOETF"];case ee:return[t,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",A),[t,"LinearTransferOETF"]}}function Eo(A,t,e){const n=A.getShaderParameter(t,A.COMPILE_STATUS),i=A.getShaderInfoLog(t).trim();if(n&&i==="")return"";const s=/ERROR: 0:(\d+)/.exec(i);if(s){const a=parseInt(s[1]);return e.toUpperCase()+`

`+i+`

`+CI(A.getShaderSource(t),a)}else return i}function mI(A,t){const e=QI(t);return[`vec4 ${A}( vec4 value ) {`,`	return ${e[1]}( vec4( value.rgb * ${e[0]}, value.a ) );`,"}"].join(`
`)}function yI(A,t){let e;switch(t){case Dl:e="Linear";break;case _l:e="Reinhard";break;case Ml:e="Cineon";break;case vl:e="ACESFilmic";break;case Rl:e="AgX";break;case Fl:e="Neutral";break;case bl:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+A+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}const Hi=new b;function xI(){Wt.getLuminanceCoefficients(Hi);const A=Hi.x.toFixed(4),t=Hi.y.toFixed(4),e=Hi.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${A}, ${t}, ${e} );`,"	return dot( weights, rgb );","}"].join(`
`)}function wI(A){return[A.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",A.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter($A).join(`
`)}function SI(A){const t=[];for(const e in A){const n=A[e];n!==!1&&t.push("#define "+e+" "+n)}return t.join(`
`)}function DI(A,t){const e={},n=A.getProgramParameter(t,A.ACTIVE_ATTRIBUTES);for(let i=0;i<n;i++){const s=A.getActiveAttrib(t,i),a=s.name;let r=1;s.type===A.FLOAT_MAT2&&(r=2),s.type===A.FLOAT_MAT3&&(r=3),s.type===A.FLOAT_MAT4&&(r=4),e[a]={type:s.type,location:A.getAttribLocation(t,a),locationSize:r}}return e}function $A(A){return A!==""}function po(A,t){const e=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return A.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,e).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function fo(A,t){return A.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const _I=/^[ \t]*#include +<([\w\d./]+)>/gm;function Va(A){return A.replace(_I,vI)}const MI=new Map;function vI(A,t){let e=Lt[t];if(e===void 0){const n=MI.get(t);if(n!==void 0)e=Lt[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,n);else throw new Error("Can not resolve #include <"+t+">")}return Va(e)}const bI=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Bo(A){return A.replace(bI,RI)}function RI(A,t,e,n){let i="";for(let s=parseInt(t);s<parseInt(e);s++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return i}function Co(A){let t=`precision ${A.precision} float;
	precision ${A.precision} int;
	precision ${A.precision} sampler2D;
	precision ${A.precision} samplerCube;
	precision ${A.precision} sampler3D;
	precision ${A.precision} sampler2DArray;
	precision ${A.precision} sampler2DShadow;
	precision ${A.precision} samplerCubeShadow;
	precision ${A.precision} sampler2DArrayShadow;
	precision ${A.precision} isampler2D;
	precision ${A.precision} isampler3D;
	precision ${A.precision} isamplerCube;
	precision ${A.precision} isampler2DArray;
	precision ${A.precision} usampler2D;
	precision ${A.precision} usampler3D;
	precision ${A.precision} usamplerCube;
	precision ${A.precision} usampler2DArray;
	`;return A.precision==="highp"?t+=`
#define HIGH_PRECISION`:A.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:A.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function FI(A){let t="SHADOWMAP_TYPE_BASIC";return A.shadowMapType===ko?t="SHADOWMAP_TYPE_PCF":A.shadowMapType===al?t="SHADOWMAP_TYPE_PCF_SOFT":A.shadowMapType===yn&&(t="SHADOWMAP_TYPE_VSM"),t}function NI(A){let t="ENVMAP_TYPE_CUBE";if(A.envMap)switch(A.envMapMode){case GA:case PA:t="ENVMAP_TYPE_CUBE";break;case gs:t="ENVMAP_TYPE_CUBE_UV";break}return t}function TI(A){let t="ENVMAP_MODE_REFLECTION";if(A.envMap)switch(A.envMapMode){case PA:t="ENVMAP_MODE_REFRACTION";break}return t}function kI(A){let t="ENVMAP_BLENDING_NONE";if(A.envMap)switch(A.combine){case Uo:t="ENVMAP_BLENDING_MULTIPLY";break;case wl:t="ENVMAP_BLENDING_MIX";break;case Sl:t="ENVMAP_BLENDING_ADD";break}return t}function UI(A){const t=A.envMapCubeUVHeight;if(t===null)return null;const e=Math.log2(t)-2,n=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,e),7*16)),texelHeight:n,maxMip:e}}function LI(A,t,e,n){const i=A.getContext(),s=e.defines;let a=e.vertexShader,r=e.fragmentShader;const o=FI(e),c=NI(e),g=TI(e),l=kI(e),h=UI(e),d=wI(e),E=SI(s),f=i.createProgram();let I,u,x=e.glslVersion?"#version "+e.glslVersion+`
`:"";e.isRawShaderMaterial?(I=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,E].filter($A).join(`
`),I.length>0&&(I+=`
`),u=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,E].filter($A).join(`
`),u.length>0&&(u+=`
`)):(I=[Co(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,E,e.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",e.batching?"#define USE_BATCHING":"",e.batchingColor?"#define USE_BATCHING_COLOR":"",e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.instancingMorph?"#define USE_INSTANCING_MORPH":"",e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+g:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.displacementMap?"#define USE_DISPLACEMENTMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.mapUv?"#define MAP_UV "+e.mapUv:"",e.alphaMapUv?"#define ALPHAMAP_UV "+e.alphaMapUv:"",e.lightMapUv?"#define LIGHTMAP_UV "+e.lightMapUv:"",e.aoMapUv?"#define AOMAP_UV "+e.aoMapUv:"",e.emissiveMapUv?"#define EMISSIVEMAP_UV "+e.emissiveMapUv:"",e.bumpMapUv?"#define BUMPMAP_UV "+e.bumpMapUv:"",e.normalMapUv?"#define NORMALMAP_UV "+e.normalMapUv:"",e.displacementMapUv?"#define DISPLACEMENTMAP_UV "+e.displacementMapUv:"",e.metalnessMapUv?"#define METALNESSMAP_UV "+e.metalnessMapUv:"",e.roughnessMapUv?"#define ROUGHNESSMAP_UV "+e.roughnessMapUv:"",e.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+e.anisotropyMapUv:"",e.clearcoatMapUv?"#define CLEARCOATMAP_UV "+e.clearcoatMapUv:"",e.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+e.clearcoatNormalMapUv:"",e.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+e.clearcoatRoughnessMapUv:"",e.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+e.iridescenceMapUv:"",e.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+e.iridescenceThicknessMapUv:"",e.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+e.sheenColorMapUv:"",e.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+e.sheenRoughnessMapUv:"",e.specularMapUv?"#define SPECULARMAP_UV "+e.specularMapUv:"",e.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+e.specularColorMapUv:"",e.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+e.specularIntensityMapUv:"",e.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+e.transmissionMapUv:"",e.thicknessMapUv?"#define THICKNESSMAP_UV "+e.thicknessMapUv:"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&e.flatShading===!1?"#define USE_MORPHNORMALS":"",e.morphColors?"#define USE_MORPHCOLORS":"",e.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+e.morphTextureStride:"",e.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+e.morphTargetsCount:"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+o:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter($A).join(`
`),u=[Co(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,E,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+c:"",e.envMap?"#define "+g:"",e.envMap?"#define "+l:"",h?"#define CUBEUV_TEXEL_WIDTH "+h.texelWidth:"",h?"#define CUBEUV_TEXEL_HEIGHT "+h.texelHeight:"",h?"#define CUBEUV_MAX_MIP "+h.maxMip+".0":"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoat?"#define USE_CLEARCOAT":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.dispersion?"#define USE_DISPERSION":"",e.iridescence?"#define USE_IRIDESCENCE":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaTest?"#define USE_ALPHATEST":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.sheen?"#define USE_SHEEN":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor||e.batchingColor?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+o:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",e.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",e.toneMapping!==Hn?"#define TONE_MAPPING":"",e.toneMapping!==Hn?Lt.tonemapping_pars_fragment:"",e.toneMapping!==Hn?yI("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",e.opaque?"#define OPAQUE":"",Lt.colorspace_pars_fragment,mI("linearToOutputTexel",e.outputColorSpace),xI(),e.useDepthPacking?"#define DEPTH_PACKING "+e.depthPacking:"",`
`].filter($A).join(`
`)),a=Va(a),a=po(a,e),a=fo(a,e),r=Va(r),r=po(r,e),r=fo(r,e),a=Bo(a),r=Bo(r),e.isRawShaderMaterial!==!0&&(x=`#version 300 es
`,I=[d,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+I,u=["#define varying in",e.glslVersion===ss?"":"layout(location = 0) out highp vec4 pc_fragColor;",e.glslVersion===ss?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+u);const Q=x+I+a,m=x+u+r,M=uo(i,i.VERTEX_SHADER,Q),S=uo(i,i.FRAGMENT_SHADER,m);i.attachShader(f,M),i.attachShader(f,S),e.index0AttributeName!==void 0?i.bindAttribLocation(f,0,e.index0AttributeName):e.morphTargets===!0&&i.bindAttribLocation(f,0,"position"),i.linkProgram(f);function D(v){if(A.debug.checkShaderErrors){const z=i.getProgramInfoLog(f).trim(),U=i.getShaderInfoLog(M).trim(),Y=i.getShaderInfoLog(S).trim();let K=!0,H=!0;if(i.getProgramParameter(f,i.LINK_STATUS)===!1)if(K=!1,typeof A.debug.onShaderError=="function")A.debug.onShaderError(i,f,M,S);else{const X=Eo(i,M,"vertex"),P=Eo(i,S,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(f,i.VALIDATE_STATUS)+`

Material Name: `+v.name+`
Material Type: `+v.type+`

Program Info Log: `+z+`
`+X+`
`+P)}else z!==""?console.warn("THREE.WebGLProgram: Program Info Log:",z):(U===""||Y==="")&&(H=!1);H&&(v.diagnostics={runnable:K,programLog:z,vertexShader:{log:U,prefix:I},fragmentShader:{log:Y,prefix:u}})}i.deleteShader(M),i.deleteShader(S),T=new $i(i,f),y=DI(i,f)}let T;this.getUniforms=function(){return T===void 0&&D(this),T};let y;this.getAttributes=function(){return y===void 0&&D(this),y};let C=e.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return C===!1&&(C=i.getProgramParameter(f,fI)),C},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(f),this.program=void 0},this.type=e.shaderType,this.name=e.shaderName,this.id=BI++,this.cacheKey=t,this.usedTimes=1,this.program=f,this.vertexShader=M,this.fragmentShader=S,this}let GI=0;class PI{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,i=this._getShaderStage(e),s=this._getShaderStage(n),a=this._getShaderCacheForMaterial(t);return a.has(i)===!1&&(a.add(i),i.usedTimes++),a.has(s)===!1&&(a.add(s),s.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const n of e)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let n=e.get(t);return n===void 0&&(n=new Set,e.set(t,n)),n}_getShaderStage(t){const e=this.shaderCache;let n=e.get(t);return n===void 0&&(n=new HI(t),e.set(t,n)),n}}class HI{constructor(t){this.id=GI++,this.code=t,this.usedTimes=0}}function zI(A,t,e,n,i,s,a){const r=new Zo,o=new PI,c=new Set,g=[],l=i.logarithmicDepthBuffer,h=i.vertexTextures;let d=i.precision;const E={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function f(y){return c.add(y),y===0?"uv":`uv${y}`}function I(y,C,v,z,U){const Y=z.fog,K=U.geometry,H=y.isMeshStandardMaterial?z.environment:null,X=(y.isMeshStandardMaterial?e:t).get(y.envMap||H),P=X&&X.mapping===gs?X.image.height:null,At=E[y.type];y.precision!==null&&(d=i.getMaxPrecision(y.precision),d!==y.precision&&console.warn("THREE.WebGLProgram.getParameters:",y.precision,"not supported, using",d,"instead."));const rt=K.morphAttributes.position||K.morphAttributes.normal||K.morphAttributes.color,It=rt!==void 0?rt.length:0;let Dt=0;K.morphAttributes.position!==void 0&&(Dt=1),K.morphAttributes.normal!==void 0&&(Dt=2),K.morphAttributes.color!==void 0&&(Dt=3);let Ut,J,tt,lt;if(At){const jt=an[At];Ut=jt.vertexShader,J=jt.fragmentShader}else Ut=y.vertexShader,J=y.fragmentShader,o.update(y),tt=o.getVertexShaderID(y),lt=o.getFragmentShaderID(y);const Z=A.getRenderTarget(),ht=A.state.buffers.depth.getReversed(),Ft=U.isInstancedMesh===!0,mt=U.isBatchedMesh===!0,zt=!!y.map,qt=!!y.matcap,Gt=!!X,_=!!y.aoMap,ae=!!y.lightMap,Pt=!!y.bumpMap,Yt=!!y.normalMap,gt=!!y.displacementMap,Mt=!!y.emissiveMap,Bt=!!y.metalnessMap,kt=!!y.roughnessMap,le=y.anisotropy>0,w=y.clearcoat>0,p=y.dispersion>0,k=y.iridescence>0,q=y.sheen>0,W=y.transmission>0,O=le&&!!y.anisotropyMap,Qt=w&&!!y.clearcoatMap,it=w&&!!y.clearcoatNormalMap,Ct=w&&!!y.clearcoatRoughnessMap,yt=k&&!!y.iridescenceMap,j=k&&!!y.iridescenceThicknessMap,ut=q&&!!y.sheenColorMap,_t=q&&!!y.sheenRoughnessMap,St=!!y.specularMap,st=!!y.specularColorMap,Rt=!!y.specularIntensityMap,R=W&&!!y.transmissionMap,ot=W&&!!y.thicknessMap,$=!!y.gradientMap,Et=!!y.alphaMap,et=y.alphaTest>0,V=!!y.alphaHash,pt=!!y.extensions;let Nt=Hn;y.toneMapped&&(Z===null||Z.isXRRenderTarget===!0)&&(Nt=A.toneMapping);const ie={shaderID:At,shaderType:y.type,shaderName:y.name,vertexShader:Ut,fragmentShader:J,defines:y.defines,customVertexShaderID:tt,customFragmentShaderID:lt,isRawShaderMaterial:y.isRawShaderMaterial===!0,glslVersion:y.glslVersion,precision:d,batching:mt,batchingColor:mt&&U._colorsTexture!==null,instancing:Ft,instancingColor:Ft&&U.instanceColor!==null,instancingMorph:Ft&&U.morphTexture!==null,supportsVertexTextures:h,outputColorSpace:Z===null?A.outputColorSpace:Z.isXRRenderTarget===!0?Z.texture.colorSpace:HA,alphaToCoverage:!!y.alphaToCoverage,map:zt,matcap:qt,envMap:Gt,envMapMode:Gt&&X.mapping,envMapCubeUVHeight:P,aoMap:_,lightMap:ae,bumpMap:Pt,normalMap:Yt,displacementMap:h&&gt,emissiveMap:Mt,normalMapObjectSpace:Yt&&y.normalMapType===Ll,normalMapTangentSpace:Yt&&y.normalMapType===Vo,metalnessMap:Bt,roughnessMap:kt,anisotropy:le,anisotropyMap:O,clearcoat:w,clearcoatMap:Qt,clearcoatNormalMap:it,clearcoatRoughnessMap:Ct,dispersion:p,iridescence:k,iridescenceMap:yt,iridescenceThicknessMap:j,sheen:q,sheenColorMap:ut,sheenRoughnessMap:_t,specularMap:St,specularColorMap:st,specularIntensityMap:Rt,transmission:W,transmissionMap:R,thicknessMap:ot,gradientMap:$,opaque:y.transparent===!1&&y.blending===lA&&y.alphaToCoverage===!1,alphaMap:Et,alphaTest:et,alphaHash:V,combine:y.combine,mapUv:zt&&f(y.map.channel),aoMapUv:_&&f(y.aoMap.channel),lightMapUv:ae&&f(y.lightMap.channel),bumpMapUv:Pt&&f(y.bumpMap.channel),normalMapUv:Yt&&f(y.normalMap.channel),displacementMapUv:gt&&f(y.displacementMap.channel),emissiveMapUv:Mt&&f(y.emissiveMap.channel),metalnessMapUv:Bt&&f(y.metalnessMap.channel),roughnessMapUv:kt&&f(y.roughnessMap.channel),anisotropyMapUv:O&&f(y.anisotropyMap.channel),clearcoatMapUv:Qt&&f(y.clearcoatMap.channel),clearcoatNormalMapUv:it&&f(y.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:Ct&&f(y.clearcoatRoughnessMap.channel),iridescenceMapUv:yt&&f(y.iridescenceMap.channel),iridescenceThicknessMapUv:j&&f(y.iridescenceThicknessMap.channel),sheenColorMapUv:ut&&f(y.sheenColorMap.channel),sheenRoughnessMapUv:_t&&f(y.sheenRoughnessMap.channel),specularMapUv:St&&f(y.specularMap.channel),specularColorMapUv:st&&f(y.specularColorMap.channel),specularIntensityMapUv:Rt&&f(y.specularIntensityMap.channel),transmissionMapUv:R&&f(y.transmissionMap.channel),thicknessMapUv:ot&&f(y.thicknessMap.channel),alphaMapUv:Et&&f(y.alphaMap.channel),vertexTangents:!!K.attributes.tangent&&(Yt||le),vertexColors:y.vertexColors,vertexAlphas:y.vertexColors===!0&&!!K.attributes.color&&K.attributes.color.itemSize===4,pointsUvs:U.isPoints===!0&&!!K.attributes.uv&&(zt||Et),fog:!!Y,useFog:y.fog===!0,fogExp2:!!Y&&Y.isFogExp2,flatShading:y.flatShading===!0,sizeAttenuation:y.sizeAttenuation===!0,logarithmicDepthBuffer:l,reverseDepthBuffer:ht,skinning:U.isSkinnedMesh===!0,morphTargets:K.morphAttributes.position!==void 0,morphNormals:K.morphAttributes.normal!==void 0,morphColors:K.morphAttributes.color!==void 0,morphTargetsCount:It,morphTextureStride:Dt,numDirLights:C.directional.length,numPointLights:C.point.length,numSpotLights:C.spot.length,numSpotLightMaps:C.spotLightMap.length,numRectAreaLights:C.rectArea.length,numHemiLights:C.hemi.length,numDirLightShadows:C.directionalShadowMap.length,numPointLightShadows:C.pointShadowMap.length,numSpotLightShadows:C.spotShadowMap.length,numSpotLightShadowsWithMaps:C.numSpotLightShadowsWithMaps,numLightProbes:C.numLightProbes,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:y.dithering,shadowMapEnabled:A.shadowMap.enabled&&v.length>0,shadowMapType:A.shadowMap.type,toneMapping:Nt,decodeVideoTexture:zt&&y.map.isVideoTexture===!0&&Wt.getTransfer(y.map.colorSpace)===ee,decodeVideoTextureEmissive:Mt&&y.emissiveMap.isVideoTexture===!0&&Wt.getTransfer(y.emissiveMap.colorSpace)===ee,premultipliedAlpha:y.premultipliedAlpha,doubleSided:y.side===rn,flipSided:y.side===Te,useDepthPacking:y.depthPacking>=0,depthPacking:y.depthPacking||0,index0AttributeName:y.index0AttributeName,extensionClipCullDistance:pt&&y.extensions.clipCullDistance===!0&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(pt&&y.extensions.multiDraw===!0||mt)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:y.customProgramCacheKey()};return ie.vertexUv1s=c.has(1),ie.vertexUv2s=c.has(2),ie.vertexUv3s=c.has(3),c.clear(),ie}function u(y){const C=[];if(y.shaderID?C.push(y.shaderID):(C.push(y.customVertexShaderID),C.push(y.customFragmentShaderID)),y.defines!==void 0)for(const v in y.defines)C.push(v),C.push(y.defines[v]);return y.isRawShaderMaterial===!1&&(x(C,y),Q(C,y),C.push(A.outputColorSpace)),C.push(y.customProgramCacheKey),C.join()}function x(y,C){y.push(C.precision),y.push(C.outputColorSpace),y.push(C.envMapMode),y.push(C.envMapCubeUVHeight),y.push(C.mapUv),y.push(C.alphaMapUv),y.push(C.lightMapUv),y.push(C.aoMapUv),y.push(C.bumpMapUv),y.push(C.normalMapUv),y.push(C.displacementMapUv),y.push(C.emissiveMapUv),y.push(C.metalnessMapUv),y.push(C.roughnessMapUv),y.push(C.anisotropyMapUv),y.push(C.clearcoatMapUv),y.push(C.clearcoatNormalMapUv),y.push(C.clearcoatRoughnessMapUv),y.push(C.iridescenceMapUv),y.push(C.iridescenceThicknessMapUv),y.push(C.sheenColorMapUv),y.push(C.sheenRoughnessMapUv),y.push(C.specularMapUv),y.push(C.specularColorMapUv),y.push(C.specularIntensityMapUv),y.push(C.transmissionMapUv),y.push(C.thicknessMapUv),y.push(C.combine),y.push(C.fogExp2),y.push(C.sizeAttenuation),y.push(C.morphTargetsCount),y.push(C.morphAttributeCount),y.push(C.numDirLights),y.push(C.numPointLights),y.push(C.numSpotLights),y.push(C.numSpotLightMaps),y.push(C.numHemiLights),y.push(C.numRectAreaLights),y.push(C.numDirLightShadows),y.push(C.numPointLightShadows),y.push(C.numSpotLightShadows),y.push(C.numSpotLightShadowsWithMaps),y.push(C.numLightProbes),y.push(C.shadowMapType),y.push(C.toneMapping),y.push(C.numClippingPlanes),y.push(C.numClipIntersection),y.push(C.depthPacking)}function Q(y,C){r.disableAll(),C.supportsVertexTextures&&r.enable(0),C.instancing&&r.enable(1),C.instancingColor&&r.enable(2),C.instancingMorph&&r.enable(3),C.matcap&&r.enable(4),C.envMap&&r.enable(5),C.normalMapObjectSpace&&r.enable(6),C.normalMapTangentSpace&&r.enable(7),C.clearcoat&&r.enable(8),C.iridescence&&r.enable(9),C.alphaTest&&r.enable(10),C.vertexColors&&r.enable(11),C.vertexAlphas&&r.enable(12),C.vertexUv1s&&r.enable(13),C.vertexUv2s&&r.enable(14),C.vertexUv3s&&r.enable(15),C.vertexTangents&&r.enable(16),C.anisotropy&&r.enable(17),C.alphaHash&&r.enable(18),C.batching&&r.enable(19),C.dispersion&&r.enable(20),C.batchingColor&&r.enable(21),y.push(r.mask),r.disableAll(),C.fog&&r.enable(0),C.useFog&&r.enable(1),C.flatShading&&r.enable(2),C.logarithmicDepthBuffer&&r.enable(3),C.reverseDepthBuffer&&r.enable(4),C.skinning&&r.enable(5),C.morphTargets&&r.enable(6),C.morphNormals&&r.enable(7),C.morphColors&&r.enable(8),C.premultipliedAlpha&&r.enable(9),C.shadowMapEnabled&&r.enable(10),C.doubleSided&&r.enable(11),C.flipSided&&r.enable(12),C.useDepthPacking&&r.enable(13),C.dithering&&r.enable(14),C.transmission&&r.enable(15),C.sheen&&r.enable(16),C.opaque&&r.enable(17),C.pointsUvs&&r.enable(18),C.decodeVideoTexture&&r.enable(19),C.decodeVideoTextureEmissive&&r.enable(20),C.alphaToCoverage&&r.enable(21),y.push(r.mask)}function m(y){const C=E[y.type];let v;if(C){const z=an[C];v=pg.clone(z.uniforms)}else v=y.uniforms;return v}function M(y,C){let v;for(let z=0,U=g.length;z<U;z++){const Y=g[z];if(Y.cacheKey===C){v=Y,++v.usedTimes;break}}return v===void 0&&(v=new LI(A,C,y,s),g.push(v)),v}function S(y){if(--y.usedTimes===0){const C=g.indexOf(y);g[C]=g[g.length-1],g.pop(),y.destroy()}}function D(y){o.remove(y)}function T(){o.dispose()}return{getParameters:I,getProgramCacheKey:u,getUniforms:m,acquireProgram:M,releaseProgram:S,releaseShaderCache:D,programs:g,dispose:T}}function YI(){let A=new WeakMap;function t(a){return A.has(a)}function e(a){let r=A.get(a);return r===void 0&&(r={},A.set(a,r)),r}function n(a){A.delete(a)}function i(a,r,o){A.get(a)[r]=o}function s(){A=new WeakMap}return{has:t,get:e,remove:n,update:i,dispose:s}}function OI(A,t){return A.groupOrder!==t.groupOrder?A.groupOrder-t.groupOrder:A.renderOrder!==t.renderOrder?A.renderOrder-t.renderOrder:A.material.id!==t.material.id?A.material.id-t.material.id:A.z!==t.z?A.z-t.z:A.id-t.id}function Qo(A,t){return A.groupOrder!==t.groupOrder?A.groupOrder-t.groupOrder:A.renderOrder!==t.renderOrder?A.renderOrder-t.renderOrder:A.z!==t.z?t.z-A.z:A.id-t.id}function mo(){const A=[];let t=0;const e=[],n=[],i=[];function s(){t=0,e.length=0,n.length=0,i.length=0}function a(l,h,d,E,f,I){let u=A[t];return u===void 0?(u={id:l.id,object:l,geometry:h,material:d,groupOrder:E,renderOrder:l.renderOrder,z:f,group:I},A[t]=u):(u.id=l.id,u.object=l,u.geometry=h,u.material=d,u.groupOrder=E,u.renderOrder=l.renderOrder,u.z=f,u.group=I),t++,u}function r(l,h,d,E,f,I){const u=a(l,h,d,E,f,I);d.transmission>0?n.push(u):d.transparent===!0?i.push(u):e.push(u)}function o(l,h,d,E,f,I){const u=a(l,h,d,E,f,I);d.transmission>0?n.unshift(u):d.transparent===!0?i.unshift(u):e.unshift(u)}function c(l,h){e.length>1&&e.sort(l||OI),n.length>1&&n.sort(h||Qo),i.length>1&&i.sort(h||Qo)}function g(){for(let l=t,h=A.length;l<h;l++){const d=A[l];if(d.id===null)break;d.id=null,d.object=null,d.geometry=null,d.material=null,d.group=null}}return{opaque:e,transmissive:n,transparent:i,init:s,push:r,unshift:o,finish:g,sort:c}}function JI(){let A=new WeakMap;function t(n,i){const s=A.get(n);let a;return s===void 0?(a=new mo,A.set(n,[a])):i>=s.length?(a=new mo,s.push(a)):a=s[i],a}function e(){A=new WeakMap}return{get:t,dispose:e}}function qI(){const A={};return{get:function(t){if(A[t.id]!==void 0)return A[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new b,color:new Ht};break;case"SpotLight":e={position:new b,direction:new b,color:new Ht,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new b,color:new Ht,distance:0,decay:0};break;case"HemisphereLight":e={direction:new b,skyColor:new Ht,groundColor:new Ht};break;case"RectAreaLight":e={color:new Ht,position:new b,halfWidth:new b,halfHeight:new b};break}return A[t.id]=e,e}}}function VI(){const A={};return{get:function(t){if(A[t.id]!==void 0)return A[t.id];let e;switch(t.type){case"DirectionalLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Xt};break;case"SpotLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Xt};break;case"PointLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Xt,shadowCameraNear:1,shadowCameraFar:1e3};break}return A[t.id]=e,e}}}let KI=0;function WI(A,t){return(t.castShadow?2:0)-(A.castShadow?2:0)+(t.map?1:0)-(A.map?1:0)}function XI(A){const t=new qI,e=VI(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let c=0;c<9;c++)n.probe.push(new b);const i=new b,s=new ne,a=new ne;function r(c){let g=0,l=0,h=0;for(let y=0;y<9;y++)n.probe[y].set(0,0,0);let d=0,E=0,f=0,I=0,u=0,x=0,Q=0,m=0,M=0,S=0,D=0;c.sort(WI);for(let y=0,C=c.length;y<C;y++){const v=c[y],z=v.color,U=v.intensity,Y=v.distance,K=v.shadow&&v.shadow.map?v.shadow.map.texture:null;if(v.isAmbientLight)g+=z.r*U,l+=z.g*U,h+=z.b*U;else if(v.isLightProbe){for(let H=0;H<9;H++)n.probe[H].addScaledVector(v.sh.coefficients[H],U);D++}else if(v.isDirectionalLight){const H=t.get(v);if(H.color.copy(v.color).multiplyScalar(v.intensity),v.castShadow){const X=v.shadow,P=e.get(v);P.shadowIntensity=X.intensity,P.shadowBias=X.bias,P.shadowNormalBias=X.normalBias,P.shadowRadius=X.radius,P.shadowMapSize=X.mapSize,n.directionalShadow[d]=P,n.directionalShadowMap[d]=K,n.directionalShadowMatrix[d]=v.shadow.matrix,x++}n.directional[d]=H,d++}else if(v.isSpotLight){const H=t.get(v);H.position.setFromMatrixPosition(v.matrixWorld),H.color.copy(z).multiplyScalar(U),H.distance=Y,H.coneCos=Math.cos(v.angle),H.penumbraCos=Math.cos(v.angle*(1-v.penumbra)),H.decay=v.decay,n.spot[f]=H;const X=v.shadow;if(v.map&&(n.spotLightMap[M]=v.map,M++,X.updateMatrices(v),v.castShadow&&S++),n.spotLightMatrix[f]=X.matrix,v.castShadow){const P=e.get(v);P.shadowIntensity=X.intensity,P.shadowBias=X.bias,P.shadowNormalBias=X.normalBias,P.shadowRadius=X.radius,P.shadowMapSize=X.mapSize,n.spotShadow[f]=P,n.spotShadowMap[f]=K,m++}f++}else if(v.isRectAreaLight){const H=t.get(v);H.color.copy(z).multiplyScalar(U),H.halfWidth.set(v.width*.5,0,0),H.halfHeight.set(0,v.height*.5,0),n.rectArea[I]=H,I++}else if(v.isPointLight){const H=t.get(v);if(H.color.copy(v.color).multiplyScalar(v.intensity),H.distance=v.distance,H.decay=v.decay,v.castShadow){const X=v.shadow,P=e.get(v);P.shadowIntensity=X.intensity,P.shadowBias=X.bias,P.shadowNormalBias=X.normalBias,P.shadowRadius=X.radius,P.shadowMapSize=X.mapSize,P.shadowCameraNear=X.camera.near,P.shadowCameraFar=X.camera.far,n.pointShadow[E]=P,n.pointShadowMap[E]=K,n.pointShadowMatrix[E]=v.shadow.matrix,Q++}n.point[E]=H,E++}else if(v.isHemisphereLight){const H=t.get(v);H.skyColor.copy(v.color).multiplyScalar(U),H.groundColor.copy(v.groundColor).multiplyScalar(U),n.hemi[u]=H,u++}}I>0&&(A.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=at.LTC_FLOAT_1,n.rectAreaLTC2=at.LTC_FLOAT_2):(n.rectAreaLTC1=at.LTC_HALF_1,n.rectAreaLTC2=at.LTC_HALF_2)),n.ambient[0]=g,n.ambient[1]=l,n.ambient[2]=h;const T=n.hash;(T.directionalLength!==d||T.pointLength!==E||T.spotLength!==f||T.rectAreaLength!==I||T.hemiLength!==u||T.numDirectionalShadows!==x||T.numPointShadows!==Q||T.numSpotShadows!==m||T.numSpotMaps!==M||T.numLightProbes!==D)&&(n.directional.length=d,n.spot.length=f,n.rectArea.length=I,n.point.length=E,n.hemi.length=u,n.directionalShadow.length=x,n.directionalShadowMap.length=x,n.pointShadow.length=Q,n.pointShadowMap.length=Q,n.spotShadow.length=m,n.spotShadowMap.length=m,n.directionalShadowMatrix.length=x,n.pointShadowMatrix.length=Q,n.spotLightMatrix.length=m+M-S,n.spotLightMap.length=M,n.numSpotLightShadowsWithMaps=S,n.numLightProbes=D,T.directionalLength=d,T.pointLength=E,T.spotLength=f,T.rectAreaLength=I,T.hemiLength=u,T.numDirectionalShadows=x,T.numPointShadows=Q,T.numSpotShadows=m,T.numSpotMaps=M,T.numLightProbes=D,n.version=KI++)}function o(c,g){let l=0,h=0,d=0,E=0,f=0;const I=g.matrixWorldInverse;for(let u=0,x=c.length;u<x;u++){const Q=c[u];if(Q.isDirectionalLight){const m=n.directional[l];m.direction.setFromMatrixPosition(Q.matrixWorld),i.setFromMatrixPosition(Q.target.matrixWorld),m.direction.sub(i),m.direction.transformDirection(I),l++}else if(Q.isSpotLight){const m=n.spot[d];m.position.setFromMatrixPosition(Q.matrixWorld),m.position.applyMatrix4(I),m.direction.setFromMatrixPosition(Q.matrixWorld),i.setFromMatrixPosition(Q.target.matrixWorld),m.direction.sub(i),m.direction.transformDirection(I),d++}else if(Q.isRectAreaLight){const m=n.rectArea[E];m.position.setFromMatrixPosition(Q.matrixWorld),m.position.applyMatrix4(I),a.identity(),s.copy(Q.matrixWorld),s.premultiply(I),a.extractRotation(s),m.halfWidth.set(Q.width*.5,0,0),m.halfHeight.set(0,Q.height*.5,0),m.halfWidth.applyMatrix4(a),m.halfHeight.applyMatrix4(a),E++}else if(Q.isPointLight){const m=n.point[h];m.position.setFromMatrixPosition(Q.matrixWorld),m.position.applyMatrix4(I),h++}else if(Q.isHemisphereLight){const m=n.hemi[f];m.direction.setFromMatrixPosition(Q.matrixWorld),m.direction.transformDirection(I),f++}}}return{setup:r,setupView:o,state:n}}function yo(A){const t=new XI(A),e=[],n=[];function i(g){c.camera=g,e.length=0,n.length=0}function s(g){e.push(g)}function a(g){n.push(g)}function r(){t.setup(e)}function o(g){t.setupView(e,g)}const c={lightsArray:e,shadowsArray:n,camera:null,lights:t,transmissionRenderTarget:{}};return{init:i,state:c,setupLights:r,setupLightsView:o,pushLight:s,pushShadow:a}}function ZI(A){let t=new WeakMap;function e(i,s=0){const a=t.get(i);let r;return a===void 0?(r=new yo(A),t.set(i,[r])):s>=a.length?(r=new yo(A),a.push(r)):r=a[s],r}function n(){t=new WeakMap}return{get:e,dispose:n}}const jI=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,$I=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function tE(A,t,e){let n=new ac;const i=new Xt,s=new Xt,a=new te,r=new wg({depthPacking:Ul}),o=new Sg,c={},g=e.maxTextureSize,l={[Yn]:Te,[Te]:Yn,[rn]:rn},h=new hn({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Xt},radius:{value:4}},vertexShader:jI,fragmentShader:$I}),d=h.clone();d.defines.HORIZONTAL_PASS=1;const E=new On;E.setAttribute("position",new qe(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const f=new Je(E,h),I=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=ko;let u=this.type;this.render=function(S,D,T){if(I.enabled===!1||I.autoUpdate===!1&&I.needsUpdate===!1||S.length===0)return;const y=A.getRenderTarget(),C=A.getActiveCubeFace(),v=A.getActiveMipmapLevel(),z=A.state;z.setBlending(Pn),z.buffers.color.setClear(1,1,1,1),z.buffers.depth.setTest(!0),z.setScissorTest(!1);const U=u!==yn&&this.type===yn,Y=u===yn&&this.type!==yn;for(let K=0,H=S.length;K<H;K++){const X=S[K],P=X.shadow;if(P===void 0){console.warn("THREE.WebGLShadowMap:",X,"has no shadow.");continue}if(P.autoUpdate===!1&&P.needsUpdate===!1)continue;i.copy(P.mapSize);const At=P.getFrameExtents();if(i.multiply(At),s.copy(P.mapSize),(i.x>g||i.y>g)&&(i.x>g&&(s.x=Math.floor(g/At.x),i.x=s.x*At.x,P.mapSize.x=s.x),i.y>g&&(s.y=Math.floor(g/At.y),i.y=s.y*At.y,P.mapSize.y=s.y)),P.map===null||U===!0||Y===!0){const It=this.type!==yn?{minFilter:ye,magFilter:ye}:{};P.map!==null&&P.map.dispose(),P.map=new ln(i.x,i.y,It),P.map.texture.name=X.name+".shadowMap",P.camera.updateProjectionMatrix()}A.setRenderTarget(P.map),A.clear();const rt=P.getViewportCount();for(let It=0;It<rt;It++){const Dt=P.getViewport(It);a.set(s.x*Dt.x,s.y*Dt.y,s.x*Dt.z,s.y*Dt.w),z.viewport(a),P.updateMatrices(X,It),n=P.getFrustum(),m(D,T,P.camera,X,this.type)}P.isPointLightShadow!==!0&&this.type===yn&&x(P,T),P.needsUpdate=!1}u=this.type,I.needsUpdate=!1,A.setRenderTarget(y,C,v)};function x(S,D){const T=t.update(f);h.defines.VSM_SAMPLES!==S.blurSamples&&(h.defines.VSM_SAMPLES=S.blurSamples,d.defines.VSM_SAMPLES=S.blurSamples,h.needsUpdate=!0,d.needsUpdate=!0),S.mapPass===null&&(S.mapPass=new ln(i.x,i.y)),h.uniforms.shadow_pass.value=S.map.texture,h.uniforms.resolution.value=S.mapSize,h.uniforms.radius.value=S.radius,A.setRenderTarget(S.mapPass),A.clear(),A.renderBufferDirect(D,null,T,h,f,null),d.uniforms.shadow_pass.value=S.mapPass.texture,d.uniforms.resolution.value=S.mapSize,d.uniforms.radius.value=S.radius,A.setRenderTarget(S.map),A.clear(),A.renderBufferDirect(D,null,T,d,f,null)}function Q(S,D,T,y){let C=null;const v=T.isPointLight===!0?S.customDistanceMaterial:S.customDepthMaterial;if(v!==void 0)C=v;else if(C=T.isPointLight===!0?o:r,A.localClippingEnabled&&D.clipShadows===!0&&Array.isArray(D.clippingPlanes)&&D.clippingPlanes.length!==0||D.displacementMap&&D.displacementScale!==0||D.alphaMap&&D.alphaTest>0||D.map&&D.alphaTest>0||D.alphaToCoverage===!0){const z=C.uuid,U=D.uuid;let Y=c[z];Y===void 0&&(Y={},c[z]=Y);let K=Y[U];K===void 0&&(K=C.clone(),Y[U]=K,D.addEventListener("dispose",M)),C=K}if(C.visible=D.visible,C.wireframe=D.wireframe,y===yn?C.side=D.shadowSide!==null?D.shadowSide:D.side:C.side=D.shadowSide!==null?D.shadowSide:l[D.side],C.alphaMap=D.alphaMap,C.alphaTest=D.alphaToCoverage===!0?.5:D.alphaTest,C.map=D.map,C.clipShadows=D.clipShadows,C.clippingPlanes=D.clippingPlanes,C.clipIntersection=D.clipIntersection,C.displacementMap=D.displacementMap,C.displacementScale=D.displacementScale,C.displacementBias=D.displacementBias,C.wireframeLinewidth=D.wireframeLinewidth,C.linewidth=D.linewidth,T.isPointLight===!0&&C.isMeshDistanceMaterial===!0){const z=A.properties.get(C);z.light=T}return C}function m(S,D,T,y,C){if(S.visible===!1)return;if(S.layers.test(D.layers)&&(S.isMesh||S.isLine||S.isPoints)&&(S.castShadow||S.receiveShadow&&C===yn)&&(!S.frustumCulled||n.intersectsObject(S))){S.modelViewMatrix.multiplyMatrices(T.matrixWorldInverse,S.matrixWorld);const U=t.update(S),Y=S.material;if(Array.isArray(Y)){const K=U.groups;for(let H=0,X=K.length;H<X;H++){const P=K[H],At=Y[P.materialIndex];if(At&&At.visible){const rt=Q(S,At,y,C);S.onBeforeShadow(A,S,D,T,U,rt,P),A.renderBufferDirect(T,null,U,rt,S,P),S.onAfterShadow(A,S,D,T,U,rt,P)}}}else if(Y.visible){const K=Q(S,Y,y,C);S.onBeforeShadow(A,S,D,T,U,K,null),A.renderBufferDirect(T,null,U,K,S,null),S.onAfterShadow(A,S,D,T,U,K,null)}}const z=S.children;for(let U=0,Y=z.length;U<Y;U++)m(z[U],D,T,y,C)}function M(S){S.target.removeEventListener("dispose",M);for(const T in c){const y=c[T],C=S.target.uuid;C in y&&(y[C].dispose(),delete y[C])}}}const eE={[oa]:ca,[la]:ua,[ga]:da,[LA]:ha,[ca]:oa,[ua]:la,[da]:ga,[ha]:LA};function nE(A,t){function e(){let R=!1;const ot=new te;let $=null;const Et=new te(0,0,0,0);return{setMask:function(et){$!==et&&!R&&(A.colorMask(et,et,et,et),$=et)},setLocked:function(et){R=et},setClear:function(et,V,pt,Nt,ie){ie===!0&&(et*=Nt,V*=Nt,pt*=Nt),ot.set(et,V,pt,Nt),Et.equals(ot)===!1&&(A.clearColor(et,V,pt,Nt),Et.copy(ot))},reset:function(){R=!1,$=null,Et.set(-1,0,0,0)}}}function n(){let R=!1,ot=!1,$=null,Et=null,et=null;return{setReversed:function(V){if(ot!==V){const pt=t.get("EXT_clip_control");V?pt.clipControlEXT(pt.LOWER_LEFT_EXT,pt.ZERO_TO_ONE_EXT):pt.clipControlEXT(pt.LOWER_LEFT_EXT,pt.NEGATIVE_ONE_TO_ONE_EXT),ot=V;const Nt=et;et=null,this.setClear(Nt)}},getReversed:function(){return ot},setTest:function(V){V?Z(A.DEPTH_TEST):ht(A.DEPTH_TEST)},setMask:function(V){$!==V&&!R&&(A.depthMask(V),$=V)},setFunc:function(V){if(ot&&(V=eE[V]),Et!==V){switch(V){case oa:A.depthFunc(A.NEVER);break;case ca:A.depthFunc(A.ALWAYS);break;case la:A.depthFunc(A.LESS);break;case LA:A.depthFunc(A.LEQUAL);break;case ga:A.depthFunc(A.EQUAL);break;case ha:A.depthFunc(A.GEQUAL);break;case ua:A.depthFunc(A.GREATER);break;case da:A.depthFunc(A.NOTEQUAL);break;default:A.depthFunc(A.LEQUAL)}Et=V}},setLocked:function(V){R=V},setClear:function(V){et!==V&&(ot&&(V=1-V),A.clearDepth(V),et=V)},reset:function(){R=!1,$=null,Et=null,et=null,ot=!1}}}function i(){let R=!1,ot=null,$=null,Et=null,et=null,V=null,pt=null,Nt=null,ie=null;return{setTest:function(jt){R||(jt?Z(A.STENCIL_TEST):ht(A.STENCIL_TEST))},setMask:function(jt){ot!==jt&&!R&&(A.stencilMask(jt),ot=jt)},setFunc:function(jt,je,pn){($!==jt||Et!==je||et!==pn)&&(A.stencilFunc(jt,je,pn),$=jt,Et=je,et=pn)},setOp:function(jt,je,pn){(V!==jt||pt!==je||Nt!==pn)&&(A.stencilOp(jt,je,pn),V=jt,pt=je,Nt=pn)},setLocked:function(jt){R=jt},setClear:function(jt){ie!==jt&&(A.clearStencil(jt),ie=jt)},reset:function(){R=!1,ot=null,$=null,Et=null,et=null,V=null,pt=null,Nt=null,ie=null}}}const s=new e,a=new n,r=new i,o=new WeakMap,c=new WeakMap;let g={},l={},h=new WeakMap,d=[],E=null,f=!1,I=null,u=null,x=null,Q=null,m=null,M=null,S=null,D=new Ht(0,0,0),T=0,y=!1,C=null,v=null,z=null,U=null,Y=null;const K=A.getParameter(A.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let H=!1,X=0;const P=A.getParameter(A.VERSION);P.indexOf("WebGL")!==-1?(X=parseFloat(/^WebGL (\d)/.exec(P)[1]),H=X>=1):P.indexOf("OpenGL ES")!==-1&&(X=parseFloat(/^OpenGL ES (\d)/.exec(P)[1]),H=X>=2);let At=null,rt={};const It=A.getParameter(A.SCISSOR_BOX),Dt=A.getParameter(A.VIEWPORT),Ut=new te().fromArray(It),J=new te().fromArray(Dt);function tt(R,ot,$,Et){const et=new Uint8Array(4),V=A.createTexture();A.bindTexture(R,V),A.texParameteri(R,A.TEXTURE_MIN_FILTER,A.NEAREST),A.texParameteri(R,A.TEXTURE_MAG_FILTER,A.NEAREST);for(let pt=0;pt<$;pt++)R===A.TEXTURE_3D||R===A.TEXTURE_2D_ARRAY?A.texImage3D(ot,0,A.RGBA,1,1,Et,0,A.RGBA,A.UNSIGNED_BYTE,et):A.texImage2D(ot+pt,0,A.RGBA,1,1,0,A.RGBA,A.UNSIGNED_BYTE,et);return V}const lt={};lt[A.TEXTURE_2D]=tt(A.TEXTURE_2D,A.TEXTURE_2D,1),lt[A.TEXTURE_CUBE_MAP]=tt(A.TEXTURE_CUBE_MAP,A.TEXTURE_CUBE_MAP_POSITIVE_X,6),lt[A.TEXTURE_2D_ARRAY]=tt(A.TEXTURE_2D_ARRAY,A.TEXTURE_2D_ARRAY,1,1),lt[A.TEXTURE_3D]=tt(A.TEXTURE_3D,A.TEXTURE_3D,1,1),s.setClear(0,0,0,1),a.setClear(1),r.setClear(0),Z(A.DEPTH_TEST),a.setFunc(LA),Pt(!1),Yt(_r),Z(A.CULL_FACE),_(Pn);function Z(R){g[R]!==!0&&(A.enable(R),g[R]=!0)}function ht(R){g[R]!==!1&&(A.disable(R),g[R]=!1)}function Ft(R,ot){return l[R]!==ot?(A.bindFramebuffer(R,ot),l[R]=ot,R===A.DRAW_FRAMEBUFFER&&(l[A.FRAMEBUFFER]=ot),R===A.FRAMEBUFFER&&(l[A.DRAW_FRAMEBUFFER]=ot),!0):!1}function mt(R,ot){let $=d,Et=!1;if(R){$=h.get(ot),$===void 0&&($=[],h.set(ot,$));const et=R.textures;if($.length!==et.length||$[0]!==A.COLOR_ATTACHMENT0){for(let V=0,pt=et.length;V<pt;V++)$[V]=A.COLOR_ATTACHMENT0+V;$.length=et.length,Et=!0}}else $[0]!==A.BACK&&($[0]=A.BACK,Et=!0);Et&&A.drawBuffers($)}function zt(R){return E!==R?(A.useProgram(R),E=R,!0):!1}const qt={[nA]:A.FUNC_ADD,[ol]:A.FUNC_SUBTRACT,[cl]:A.FUNC_REVERSE_SUBTRACT};qt[ll]=A.MIN,qt[gl]=A.MAX;const Gt={[hl]:A.ZERO,[ul]:A.ONE,[dl]:A.SRC_COLOR,[aa]:A.SRC_ALPHA,[Cl]:A.SRC_ALPHA_SATURATE,[fl]:A.DST_COLOR,[El]:A.DST_ALPHA,[Il]:A.ONE_MINUS_SRC_COLOR,[ra]:A.ONE_MINUS_SRC_ALPHA,[Bl]:A.ONE_MINUS_DST_COLOR,[pl]:A.ONE_MINUS_DST_ALPHA,[Ql]:A.CONSTANT_COLOR,[ml]:A.ONE_MINUS_CONSTANT_COLOR,[yl]:A.CONSTANT_ALPHA,[xl]:A.ONE_MINUS_CONSTANT_ALPHA};function _(R,ot,$,Et,et,V,pt,Nt,ie,jt){if(R===Pn){f===!0&&(ht(A.BLEND),f=!1);return}if(f===!1&&(Z(A.BLEND),f=!0),R!==rl){if(R!==I||jt!==y){if((u!==nA||m!==nA)&&(A.blendEquation(A.FUNC_ADD),u=nA,m=nA),jt)switch(R){case lA:A.blendFuncSeparate(A.ONE,A.ONE_MINUS_SRC_ALPHA,A.ONE,A.ONE_MINUS_SRC_ALPHA);break;case Mr:A.blendFunc(A.ONE,A.ONE);break;case vr:A.blendFuncSeparate(A.ZERO,A.ONE_MINUS_SRC_COLOR,A.ZERO,A.ONE);break;case br:A.blendFuncSeparate(A.ZERO,A.SRC_COLOR,A.ZERO,A.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",R);break}else switch(R){case lA:A.blendFuncSeparate(A.SRC_ALPHA,A.ONE_MINUS_SRC_ALPHA,A.ONE,A.ONE_MINUS_SRC_ALPHA);break;case Mr:A.blendFunc(A.SRC_ALPHA,A.ONE);break;case vr:A.blendFuncSeparate(A.ZERO,A.ONE_MINUS_SRC_COLOR,A.ZERO,A.ONE);break;case br:A.blendFunc(A.ZERO,A.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",R);break}x=null,Q=null,M=null,S=null,D.set(0,0,0),T=0,I=R,y=jt}return}et=et||ot,V=V||$,pt=pt||Et,(ot!==u||et!==m)&&(A.blendEquationSeparate(qt[ot],qt[et]),u=ot,m=et),($!==x||Et!==Q||V!==M||pt!==S)&&(A.blendFuncSeparate(Gt[$],Gt[Et],Gt[V],Gt[pt]),x=$,Q=Et,M=V,S=pt),(Nt.equals(D)===!1||ie!==T)&&(A.blendColor(Nt.r,Nt.g,Nt.b,ie),D.copy(Nt),T=ie),I=R,y=!1}function ae(R,ot){R.side===rn?ht(A.CULL_FACE):Z(A.CULL_FACE);let $=R.side===Te;ot&&($=!$),Pt($),R.blending===lA&&R.transparent===!1?_(Pn):_(R.blending,R.blendEquation,R.blendSrc,R.blendDst,R.blendEquationAlpha,R.blendSrcAlpha,R.blendDstAlpha,R.blendColor,R.blendAlpha,R.premultipliedAlpha),a.setFunc(R.depthFunc),a.setTest(R.depthTest),a.setMask(R.depthWrite),s.setMask(R.colorWrite);const Et=R.stencilWrite;r.setTest(Et),Et&&(r.setMask(R.stencilWriteMask),r.setFunc(R.stencilFunc,R.stencilRef,R.stencilFuncMask),r.setOp(R.stencilFail,R.stencilZFail,R.stencilZPass)),Mt(R.polygonOffset,R.polygonOffsetFactor,R.polygonOffsetUnits),R.alphaToCoverage===!0?Z(A.SAMPLE_ALPHA_TO_COVERAGE):ht(A.SAMPLE_ALPHA_TO_COVERAGE)}function Pt(R){C!==R&&(R?A.frontFace(A.CW):A.frontFace(A.CCW),C=R)}function Yt(R){R!==il?(Z(A.CULL_FACE),R!==v&&(R===_r?A.cullFace(A.BACK):R===sl?A.cullFace(A.FRONT):A.cullFace(A.FRONT_AND_BACK))):ht(A.CULL_FACE),v=R}function gt(R){R!==z&&(H&&A.lineWidth(R),z=R)}function Mt(R,ot,$){R?(Z(A.POLYGON_OFFSET_FILL),(U!==ot||Y!==$)&&(A.polygonOffset(ot,$),U=ot,Y=$)):ht(A.POLYGON_OFFSET_FILL)}function Bt(R){R?Z(A.SCISSOR_TEST):ht(A.SCISSOR_TEST)}function kt(R){R===void 0&&(R=A.TEXTURE0+K-1),At!==R&&(A.activeTexture(R),At=R)}function le(R,ot,$){$===void 0&&(At===null?$=A.TEXTURE0+K-1:$=At);let Et=rt[$];Et===void 0&&(Et={type:void 0,texture:void 0},rt[$]=Et),(Et.type!==R||Et.texture!==ot)&&(At!==$&&(A.activeTexture($),At=$),A.bindTexture(R,ot||lt[R]),Et.type=R,Et.texture=ot)}function w(){const R=rt[At];R!==void 0&&R.type!==void 0&&(A.bindTexture(R.type,null),R.type=void 0,R.texture=void 0)}function p(){try{A.compressedTexImage2D(...arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function k(){try{A.compressedTexImage3D(...arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function q(){try{A.texSubImage2D(...arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function W(){try{A.texSubImage3D(...arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function O(){try{A.compressedTexSubImage2D(...arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function Qt(){try{A.compressedTexSubImage3D(...arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function it(){try{A.texStorage2D(...arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function Ct(){try{A.texStorage3D(...arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function yt(){try{A.texImage2D(...arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function j(){try{A.texImage3D(...arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function ut(R){Ut.equals(R)===!1&&(A.scissor(R.x,R.y,R.z,R.w),Ut.copy(R))}function _t(R){J.equals(R)===!1&&(A.viewport(R.x,R.y,R.z,R.w),J.copy(R))}function St(R,ot){let $=c.get(ot);$===void 0&&($=new WeakMap,c.set(ot,$));let Et=$.get(R);Et===void 0&&(Et=A.getUniformBlockIndex(ot,R.name),$.set(R,Et))}function st(R,ot){const Et=c.get(ot).get(R);o.get(ot)!==Et&&(A.uniformBlockBinding(ot,Et,R.__bindingPointIndex),o.set(ot,Et))}function Rt(){A.disable(A.BLEND),A.disable(A.CULL_FACE),A.disable(A.DEPTH_TEST),A.disable(A.POLYGON_OFFSET_FILL),A.disable(A.SCISSOR_TEST),A.disable(A.STENCIL_TEST),A.disable(A.SAMPLE_ALPHA_TO_COVERAGE),A.blendEquation(A.FUNC_ADD),A.blendFunc(A.ONE,A.ZERO),A.blendFuncSeparate(A.ONE,A.ZERO,A.ONE,A.ZERO),A.blendColor(0,0,0,0),A.colorMask(!0,!0,!0,!0),A.clearColor(0,0,0,0),A.depthMask(!0),A.depthFunc(A.LESS),a.setReversed(!1),A.clearDepth(1),A.stencilMask(4294967295),A.stencilFunc(A.ALWAYS,0,4294967295),A.stencilOp(A.KEEP,A.KEEP,A.KEEP),A.clearStencil(0),A.cullFace(A.BACK),A.frontFace(A.CCW),A.polygonOffset(0,0),A.activeTexture(A.TEXTURE0),A.bindFramebuffer(A.FRAMEBUFFER,null),A.bindFramebuffer(A.DRAW_FRAMEBUFFER,null),A.bindFramebuffer(A.READ_FRAMEBUFFER,null),A.useProgram(null),A.lineWidth(1),A.scissor(0,0,A.canvas.width,A.canvas.height),A.viewport(0,0,A.canvas.width,A.canvas.height),g={},At=null,rt={},l={},h=new WeakMap,d=[],E=null,f=!1,I=null,u=null,x=null,Q=null,m=null,M=null,S=null,D=new Ht(0,0,0),T=0,y=!1,C=null,v=null,z=null,U=null,Y=null,Ut.set(0,0,A.canvas.width,A.canvas.height),J.set(0,0,A.canvas.width,A.canvas.height),s.reset(),a.reset(),r.reset()}return{buffers:{color:s,depth:a,stencil:r},enable:Z,disable:ht,bindFramebuffer:Ft,drawBuffers:mt,useProgram:zt,setBlending:_,setMaterial:ae,setFlipSided:Pt,setCullFace:Yt,setLineWidth:gt,setPolygonOffset:Mt,setScissorTest:Bt,activeTexture:kt,bindTexture:le,unbindTexture:w,compressedTexImage2D:p,compressedTexImage3D:k,texImage2D:yt,texImage3D:j,updateUBOMapping:St,uniformBlockBinding:st,texStorage2D:it,texStorage3D:Ct,texSubImage2D:q,texSubImage3D:W,compressedTexSubImage2D:O,compressedTexSubImage3D:Qt,scissor:ut,viewport:_t,reset:Rt}}function AE(A,t,e,n,i,s,a){const r=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,o=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),c=new Xt,g=new WeakMap;let l;const h=new WeakMap;let d=!1;try{d=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function E(w,p){return d?new OffscreenCanvas(w,p):rs("canvas")}function f(w,p,k){let q=1;const W=le(w);if((W.width>k||W.height>k)&&(q=k/Math.max(W.width,W.height)),q<1)if(typeof HTMLImageElement<"u"&&w instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&w instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&w instanceof ImageBitmap||typeof VideoFrame<"u"&&w instanceof VideoFrame){const O=Math.floor(q*W.width),Qt=Math.floor(q*W.height);l===void 0&&(l=E(O,Qt));const it=p?E(O,Qt):l;return it.width=O,it.height=Qt,it.getContext("2d").drawImage(w,0,0,O,Qt),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+W.width+"x"+W.height+") to ("+O+"x"+Qt+")."),it}else return"data"in w&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+W.width+"x"+W.height+")."),w;return w}function I(w){return w.generateMipmaps}function u(w){A.generateMipmap(w)}function x(w){return w.isWebGLCubeRenderTarget?A.TEXTURE_CUBE_MAP:w.isWebGL3DRenderTarget?A.TEXTURE_3D:w.isWebGLArrayRenderTarget||w.isCompressedArrayTexture?A.TEXTURE_2D_ARRAY:A.TEXTURE_2D}function Q(w,p,k,q,W=!1){if(w!==null){if(A[w]!==void 0)return A[w];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+w+"'")}let O=p;if(p===A.RED&&(k===A.FLOAT&&(O=A.R32F),k===A.HALF_FLOAT&&(O=A.R16F),k===A.UNSIGNED_BYTE&&(O=A.R8)),p===A.RED_INTEGER&&(k===A.UNSIGNED_BYTE&&(O=A.R8UI),k===A.UNSIGNED_SHORT&&(O=A.R16UI),k===A.UNSIGNED_INT&&(O=A.R32UI),k===A.BYTE&&(O=A.R8I),k===A.SHORT&&(O=A.R16I),k===A.INT&&(O=A.R32I)),p===A.RG&&(k===A.FLOAT&&(O=A.RG32F),k===A.HALF_FLOAT&&(O=A.RG16F),k===A.UNSIGNED_BYTE&&(O=A.RG8)),p===A.RG_INTEGER&&(k===A.UNSIGNED_BYTE&&(O=A.RG8UI),k===A.UNSIGNED_SHORT&&(O=A.RG16UI),k===A.UNSIGNED_INT&&(O=A.RG32UI),k===A.BYTE&&(O=A.RG8I),k===A.SHORT&&(O=A.RG16I),k===A.INT&&(O=A.RG32I)),p===A.RGB_INTEGER&&(k===A.UNSIGNED_BYTE&&(O=A.RGB8UI),k===A.UNSIGNED_SHORT&&(O=A.RGB16UI),k===A.UNSIGNED_INT&&(O=A.RGB32UI),k===A.BYTE&&(O=A.RGB8I),k===A.SHORT&&(O=A.RGB16I),k===A.INT&&(O=A.RGB32I)),p===A.RGBA_INTEGER&&(k===A.UNSIGNED_BYTE&&(O=A.RGBA8UI),k===A.UNSIGNED_SHORT&&(O=A.RGBA16UI),k===A.UNSIGNED_INT&&(O=A.RGBA32UI),k===A.BYTE&&(O=A.RGBA8I),k===A.SHORT&&(O=A.RGBA16I),k===A.INT&&(O=A.RGBA32I)),p===A.RGB&&k===A.UNSIGNED_INT_5_9_9_9_REV&&(O=A.RGB9_E5),p===A.RGBA){const Qt=W?is:Wt.getTransfer(q);k===A.FLOAT&&(O=A.RGBA32F),k===A.HALF_FLOAT&&(O=A.RGBA16F),k===A.UNSIGNED_BYTE&&(O=Qt===ee?A.SRGB8_ALPHA8:A.RGBA8),k===A.UNSIGNED_SHORT_4_4_4_4&&(O=A.RGBA4),k===A.UNSIGNED_SHORT_5_5_5_1&&(O=A.RGB5_A1)}return(O===A.R16F||O===A.R32F||O===A.RG16F||O===A.RG32F||O===A.RGBA16F||O===A.RGBA32F)&&t.get("EXT_color_buffer_float"),O}function m(w,p){let k;return w?p===null||p===ke||p===ri?k=A.DEPTH24_STENCIL8:p===wn?k=A.DEPTH32F_STENCIL8:p===ai&&(k=A.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):p===null||p===ke||p===ri?k=A.DEPTH_COMPONENT24:p===wn?k=A.DEPTH_COMPONENT32F:p===ai&&(k=A.DEPTH_COMPONENT16),k}function M(w,p){return I(w)===!0||w.isFramebufferTexture&&w.minFilter!==ye&&w.minFilter!==on?Math.log2(Math.max(p.width,p.height))+1:w.mipmaps!==void 0&&w.mipmaps.length>0?w.mipmaps.length:w.isCompressedTexture&&Array.isArray(w.image)?p.mipmaps.length:1}function S(w){const p=w.target;p.removeEventListener("dispose",S),T(p),p.isVideoTexture&&g.delete(p)}function D(w){const p=w.target;p.removeEventListener("dispose",D),C(p)}function T(w){const p=n.get(w);if(p.__webglInit===void 0)return;const k=w.source,q=h.get(k);if(q){const W=q[p.__cacheKey];W.usedTimes--,W.usedTimes===0&&y(w),Object.keys(q).length===0&&h.delete(k)}n.remove(w)}function y(w){const p=n.get(w);A.deleteTexture(p.__webglTexture);const k=w.source,q=h.get(k);delete q[p.__cacheKey],a.memory.textures--}function C(w){const p=n.get(w);if(w.depthTexture&&(w.depthTexture.dispose(),n.remove(w.depthTexture)),w.isWebGLCubeRenderTarget)for(let q=0;q<6;q++){if(Array.isArray(p.__webglFramebuffer[q]))for(let W=0;W<p.__webglFramebuffer[q].length;W++)A.deleteFramebuffer(p.__webglFramebuffer[q][W]);else A.deleteFramebuffer(p.__webglFramebuffer[q]);p.__webglDepthbuffer&&A.deleteRenderbuffer(p.__webglDepthbuffer[q])}else{if(Array.isArray(p.__webglFramebuffer))for(let q=0;q<p.__webglFramebuffer.length;q++)A.deleteFramebuffer(p.__webglFramebuffer[q]);else A.deleteFramebuffer(p.__webglFramebuffer);if(p.__webglDepthbuffer&&A.deleteRenderbuffer(p.__webglDepthbuffer),p.__webglMultisampledFramebuffer&&A.deleteFramebuffer(p.__webglMultisampledFramebuffer),p.__webglColorRenderbuffer)for(let q=0;q<p.__webglColorRenderbuffer.length;q++)p.__webglColorRenderbuffer[q]&&A.deleteRenderbuffer(p.__webglColorRenderbuffer[q]);p.__webglDepthRenderbuffer&&A.deleteRenderbuffer(p.__webglDepthRenderbuffer)}const k=w.textures;for(let q=0,W=k.length;q<W;q++){const O=n.get(k[q]);O.__webglTexture&&(A.deleteTexture(O.__webglTexture),a.memory.textures--),n.remove(k[q])}n.remove(w)}let v=0;function z(){v=0}function U(){const w=v;return w>=i.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+w+" texture units while this GPU supports only "+i.maxTextures),v+=1,w}function Y(w){const p=[];return p.push(w.wrapS),p.push(w.wrapT),p.push(w.wrapR||0),p.push(w.magFilter),p.push(w.minFilter),p.push(w.anisotropy),p.push(w.internalFormat),p.push(w.format),p.push(w.type),p.push(w.generateMipmaps),p.push(w.premultiplyAlpha),p.push(w.flipY),p.push(w.unpackAlignment),p.push(w.colorSpace),p.join()}function K(w,p){const k=n.get(w);if(w.isVideoTexture&&Bt(w),w.isRenderTargetTexture===!1&&w.version>0&&k.__version!==w.version){const q=w.image;if(q===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(q.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{lt(k,w,p);return}}e.bindTexture(A.TEXTURE_2D,k.__webglTexture,A.TEXTURE0+p)}function H(w,p){const k=n.get(w);if(w.version>0&&k.__version!==w.version){lt(k,w,p);return}e.bindTexture(A.TEXTURE_2D_ARRAY,k.__webglTexture,A.TEXTURE0+p)}function X(w,p){const k=n.get(w);if(w.version>0&&k.__version!==w.version){lt(k,w,p);return}e.bindTexture(A.TEXTURE_3D,k.__webglTexture,A.TEXTURE0+p)}function P(w,p){const k=n.get(w);if(w.version>0&&k.__version!==w.version){Z(k,w,p);return}e.bindTexture(A.TEXTURE_CUBE_MAP,k.__webglTexture,A.TEXTURE0+p)}const At={[pa]:A.REPEAT,[iA]:A.CLAMP_TO_EDGE,[fa]:A.MIRRORED_REPEAT},rt={[ye]:A.NEAREST,[Nl]:A.NEAREST_MIPMAP_NEAREST,[Ci]:A.NEAREST_MIPMAP_LINEAR,[on]:A.LINEAR,[Cs]:A.LINEAR_MIPMAP_NEAREST,[sA]:A.LINEAR_MIPMAP_LINEAR},It={[Gl]:A.NEVER,[Jl]:A.ALWAYS,[Pl]:A.LESS,[Ko]:A.LEQUAL,[Hl]:A.EQUAL,[Ol]:A.GEQUAL,[zl]:A.GREATER,[Yl]:A.NOTEQUAL};function Dt(w,p){if(p.type===wn&&t.has("OES_texture_float_linear")===!1&&(p.magFilter===on||p.magFilter===Cs||p.magFilter===Ci||p.magFilter===sA||p.minFilter===on||p.minFilter===Cs||p.minFilter===Ci||p.minFilter===sA)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),A.texParameteri(w,A.TEXTURE_WRAP_S,At[p.wrapS]),A.texParameteri(w,A.TEXTURE_WRAP_T,At[p.wrapT]),(w===A.TEXTURE_3D||w===A.TEXTURE_2D_ARRAY)&&A.texParameteri(w,A.TEXTURE_WRAP_R,At[p.wrapR]),A.texParameteri(w,A.TEXTURE_MAG_FILTER,rt[p.magFilter]),A.texParameteri(w,A.TEXTURE_MIN_FILTER,rt[p.minFilter]),p.compareFunction&&(A.texParameteri(w,A.TEXTURE_COMPARE_MODE,A.COMPARE_REF_TO_TEXTURE),A.texParameteri(w,A.TEXTURE_COMPARE_FUNC,It[p.compareFunction])),t.has("EXT_texture_filter_anisotropic")===!0){if(p.magFilter===ye||p.minFilter!==Ci&&p.minFilter!==sA||p.type===wn&&t.has("OES_texture_float_linear")===!1)return;if(p.anisotropy>1||n.get(p).__currentAnisotropy){const k=t.get("EXT_texture_filter_anisotropic");A.texParameterf(w,k.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(p.anisotropy,i.getMaxAnisotropy())),n.get(p).__currentAnisotropy=p.anisotropy}}}function Ut(w,p){let k=!1;w.__webglInit===void 0&&(w.__webglInit=!0,p.addEventListener("dispose",S));const q=p.source;let W=h.get(q);W===void 0&&(W={},h.set(q,W));const O=Y(p);if(O!==w.__cacheKey){W[O]===void 0&&(W[O]={texture:A.createTexture(),usedTimes:0},a.memory.textures++,k=!0),W[O].usedTimes++;const Qt=W[w.__cacheKey];Qt!==void 0&&(W[w.__cacheKey].usedTimes--,Qt.usedTimes===0&&y(p)),w.__cacheKey=O,w.__webglTexture=W[O].texture}return k}function J(w,p,k){return Math.floor(Math.floor(w/k)/p)}function tt(w,p,k,q){const O=w.updateRanges;if(O.length===0)e.texSubImage2D(A.TEXTURE_2D,0,0,0,p.width,p.height,k,q,p.data);else{O.sort((j,ut)=>j.start-ut.start);let Qt=0;for(let j=1;j<O.length;j++){const ut=O[Qt],_t=O[j],St=ut.start+ut.count,st=J(_t.start,p.width,4),Rt=J(ut.start,p.width,4);_t.start<=St+1&&st===Rt&&J(_t.start+_t.count-1,p.width,4)===st?ut.count=Math.max(ut.count,_t.start+_t.count-ut.start):(++Qt,O[Qt]=_t)}O.length=Qt+1;const it=A.getParameter(A.UNPACK_ROW_LENGTH),Ct=A.getParameter(A.UNPACK_SKIP_PIXELS),yt=A.getParameter(A.UNPACK_SKIP_ROWS);A.pixelStorei(A.UNPACK_ROW_LENGTH,p.width);for(let j=0,ut=O.length;j<ut;j++){const _t=O[j],St=Math.floor(_t.start/4),st=Math.ceil(_t.count/4),Rt=St%p.width,R=Math.floor(St/p.width),ot=st,$=1;A.pixelStorei(A.UNPACK_SKIP_PIXELS,Rt),A.pixelStorei(A.UNPACK_SKIP_ROWS,R),e.texSubImage2D(A.TEXTURE_2D,0,Rt,R,ot,$,k,q,p.data)}w.clearUpdateRanges(),A.pixelStorei(A.UNPACK_ROW_LENGTH,it),A.pixelStorei(A.UNPACK_SKIP_PIXELS,Ct),A.pixelStorei(A.UNPACK_SKIP_ROWS,yt)}}function lt(w,p,k){let q=A.TEXTURE_2D;(p.isDataArrayTexture||p.isCompressedArrayTexture)&&(q=A.TEXTURE_2D_ARRAY),p.isData3DTexture&&(q=A.TEXTURE_3D);const W=Ut(w,p),O=p.source;e.bindTexture(q,w.__webglTexture,A.TEXTURE0+k);const Qt=n.get(O);if(O.version!==Qt.__version||W===!0){e.activeTexture(A.TEXTURE0+k);const it=Wt.getPrimaries(Wt.workingColorSpace),Ct=p.colorSpace===Ln?null:Wt.getPrimaries(p.colorSpace),yt=p.colorSpace===Ln||it===Ct?A.NONE:A.BROWSER_DEFAULT_WEBGL;A.pixelStorei(A.UNPACK_FLIP_Y_WEBGL,p.flipY),A.pixelStorei(A.UNPACK_PREMULTIPLY_ALPHA_WEBGL,p.premultiplyAlpha),A.pixelStorei(A.UNPACK_ALIGNMENT,p.unpackAlignment),A.pixelStorei(A.UNPACK_COLORSPACE_CONVERSION_WEBGL,yt);let j=f(p.image,!1,i.maxTextureSize);j=kt(p,j);const ut=s.convert(p.format,p.colorSpace),_t=s.convert(p.type);let St=Q(p.internalFormat,ut,_t,p.colorSpace,p.isVideoTexture);Dt(q,p);let st;const Rt=p.mipmaps,R=p.isVideoTexture!==!0,ot=Qt.__version===void 0||W===!0,$=O.dataReady,Et=M(p,j);if(p.isDepthTexture)St=m(p.format===ci,p.type),ot&&(R?e.texStorage2D(A.TEXTURE_2D,1,St,j.width,j.height):e.texImage2D(A.TEXTURE_2D,0,St,j.width,j.height,0,ut,_t,null));else if(p.isDataTexture)if(Rt.length>0){R&&ot&&e.texStorage2D(A.TEXTURE_2D,Et,St,Rt[0].width,Rt[0].height);for(let et=0,V=Rt.length;et<V;et++)st=Rt[et],R?$&&e.texSubImage2D(A.TEXTURE_2D,et,0,0,st.width,st.height,ut,_t,st.data):e.texImage2D(A.TEXTURE_2D,et,St,st.width,st.height,0,ut,_t,st.data);p.generateMipmaps=!1}else R?(ot&&e.texStorage2D(A.TEXTURE_2D,Et,St,j.width,j.height),$&&tt(p,j,ut,_t)):e.texImage2D(A.TEXTURE_2D,0,St,j.width,j.height,0,ut,_t,j.data);else if(p.isCompressedTexture)if(p.isCompressedArrayTexture){R&&ot&&e.texStorage3D(A.TEXTURE_2D_ARRAY,Et,St,Rt[0].width,Rt[0].height,j.depth);for(let et=0,V=Rt.length;et<V;et++)if(st=Rt[et],p.format!==me)if(ut!==null)if(R){if($)if(p.layerUpdates.size>0){const pt=$r(st.width,st.height,p.format,p.type);for(const Nt of p.layerUpdates){const ie=st.data.subarray(Nt*pt/st.data.BYTES_PER_ELEMENT,(Nt+1)*pt/st.data.BYTES_PER_ELEMENT);e.compressedTexSubImage3D(A.TEXTURE_2D_ARRAY,et,0,0,Nt,st.width,st.height,1,ut,ie)}p.clearLayerUpdates()}else e.compressedTexSubImage3D(A.TEXTURE_2D_ARRAY,et,0,0,0,st.width,st.height,j.depth,ut,st.data)}else e.compressedTexImage3D(A.TEXTURE_2D_ARRAY,et,St,st.width,st.height,j.depth,0,st.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else R?$&&e.texSubImage3D(A.TEXTURE_2D_ARRAY,et,0,0,0,st.width,st.height,j.depth,ut,_t,st.data):e.texImage3D(A.TEXTURE_2D_ARRAY,et,St,st.width,st.height,j.depth,0,ut,_t,st.data)}else{R&&ot&&e.texStorage2D(A.TEXTURE_2D,Et,St,Rt[0].width,Rt[0].height);for(let et=0,V=Rt.length;et<V;et++)st=Rt[et],p.format!==me?ut!==null?R?$&&e.compressedTexSubImage2D(A.TEXTURE_2D,et,0,0,st.width,st.height,ut,st.data):e.compressedTexImage2D(A.TEXTURE_2D,et,St,st.width,st.height,0,st.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):R?$&&e.texSubImage2D(A.TEXTURE_2D,et,0,0,st.width,st.height,ut,_t,st.data):e.texImage2D(A.TEXTURE_2D,et,St,st.width,st.height,0,ut,_t,st.data)}else if(p.isDataArrayTexture)if(R){if(ot&&e.texStorage3D(A.TEXTURE_2D_ARRAY,Et,St,j.width,j.height,j.depth),$)if(p.layerUpdates.size>0){const et=$r(j.width,j.height,p.format,p.type);for(const V of p.layerUpdates){const pt=j.data.subarray(V*et/j.data.BYTES_PER_ELEMENT,(V+1)*et/j.data.BYTES_PER_ELEMENT);e.texSubImage3D(A.TEXTURE_2D_ARRAY,0,0,0,V,j.width,j.height,1,ut,_t,pt)}p.clearLayerUpdates()}else e.texSubImage3D(A.TEXTURE_2D_ARRAY,0,0,0,0,j.width,j.height,j.depth,ut,_t,j.data)}else e.texImage3D(A.TEXTURE_2D_ARRAY,0,St,j.width,j.height,j.depth,0,ut,_t,j.data);else if(p.isData3DTexture)R?(ot&&e.texStorage3D(A.TEXTURE_3D,Et,St,j.width,j.height,j.depth),$&&e.texSubImage3D(A.TEXTURE_3D,0,0,0,0,j.width,j.height,j.depth,ut,_t,j.data)):e.texImage3D(A.TEXTURE_3D,0,St,j.width,j.height,j.depth,0,ut,_t,j.data);else if(p.isFramebufferTexture){if(ot)if(R)e.texStorage2D(A.TEXTURE_2D,Et,St,j.width,j.height);else{let et=j.width,V=j.height;for(let pt=0;pt<Et;pt++)e.texImage2D(A.TEXTURE_2D,pt,St,et,V,0,ut,_t,null),et>>=1,V>>=1}}else if(Rt.length>0){if(R&&ot){const et=le(Rt[0]);e.texStorage2D(A.TEXTURE_2D,Et,St,et.width,et.height)}for(let et=0,V=Rt.length;et<V;et++)st=Rt[et],R?$&&e.texSubImage2D(A.TEXTURE_2D,et,0,0,ut,_t,st):e.texImage2D(A.TEXTURE_2D,et,St,ut,_t,st);p.generateMipmaps=!1}else if(R){if(ot){const et=le(j);e.texStorage2D(A.TEXTURE_2D,Et,St,et.width,et.height)}$&&e.texSubImage2D(A.TEXTURE_2D,0,0,0,ut,_t,j)}else e.texImage2D(A.TEXTURE_2D,0,St,ut,_t,j);I(p)&&u(q),Qt.__version=O.version,p.onUpdate&&p.onUpdate(p)}w.__version=p.version}function Z(w,p,k){if(p.image.length!==6)return;const q=Ut(w,p),W=p.source;e.bindTexture(A.TEXTURE_CUBE_MAP,w.__webglTexture,A.TEXTURE0+k);const O=n.get(W);if(W.version!==O.__version||q===!0){e.activeTexture(A.TEXTURE0+k);const Qt=Wt.getPrimaries(Wt.workingColorSpace),it=p.colorSpace===Ln?null:Wt.getPrimaries(p.colorSpace),Ct=p.colorSpace===Ln||Qt===it?A.NONE:A.BROWSER_DEFAULT_WEBGL;A.pixelStorei(A.UNPACK_FLIP_Y_WEBGL,p.flipY),A.pixelStorei(A.UNPACK_PREMULTIPLY_ALPHA_WEBGL,p.premultiplyAlpha),A.pixelStorei(A.UNPACK_ALIGNMENT,p.unpackAlignment),A.pixelStorei(A.UNPACK_COLORSPACE_CONVERSION_WEBGL,Ct);const yt=p.isCompressedTexture||p.image[0].isCompressedTexture,j=p.image[0]&&p.image[0].isDataTexture,ut=[];for(let V=0;V<6;V++)!yt&&!j?ut[V]=f(p.image[V],!0,i.maxCubemapSize):ut[V]=j?p.image[V].image:p.image[V],ut[V]=kt(p,ut[V]);const _t=ut[0],St=s.convert(p.format,p.colorSpace),st=s.convert(p.type),Rt=Q(p.internalFormat,St,st,p.colorSpace),R=p.isVideoTexture!==!0,ot=O.__version===void 0||q===!0,$=W.dataReady;let Et=M(p,_t);Dt(A.TEXTURE_CUBE_MAP,p);let et;if(yt){R&&ot&&e.texStorage2D(A.TEXTURE_CUBE_MAP,Et,Rt,_t.width,_t.height);for(let V=0;V<6;V++){et=ut[V].mipmaps;for(let pt=0;pt<et.length;pt++){const Nt=et[pt];p.format!==me?St!==null?R?$&&e.compressedTexSubImage2D(A.TEXTURE_CUBE_MAP_POSITIVE_X+V,pt,0,0,Nt.width,Nt.height,St,Nt.data):e.compressedTexImage2D(A.TEXTURE_CUBE_MAP_POSITIVE_X+V,pt,Rt,Nt.width,Nt.height,0,Nt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):R?$&&e.texSubImage2D(A.TEXTURE_CUBE_MAP_POSITIVE_X+V,pt,0,0,Nt.width,Nt.height,St,st,Nt.data):e.texImage2D(A.TEXTURE_CUBE_MAP_POSITIVE_X+V,pt,Rt,Nt.width,Nt.height,0,St,st,Nt.data)}}}else{if(et=p.mipmaps,R&&ot){et.length>0&&Et++;const V=le(ut[0]);e.texStorage2D(A.TEXTURE_CUBE_MAP,Et,Rt,V.width,V.height)}for(let V=0;V<6;V++)if(j){R?$&&e.texSubImage2D(A.TEXTURE_CUBE_MAP_POSITIVE_X+V,0,0,0,ut[V].width,ut[V].height,St,st,ut[V].data):e.texImage2D(A.TEXTURE_CUBE_MAP_POSITIVE_X+V,0,Rt,ut[V].width,ut[V].height,0,St,st,ut[V].data);for(let pt=0;pt<et.length;pt++){const ie=et[pt].image[V].image;R?$&&e.texSubImage2D(A.TEXTURE_CUBE_MAP_POSITIVE_X+V,pt+1,0,0,ie.width,ie.height,St,st,ie.data):e.texImage2D(A.TEXTURE_CUBE_MAP_POSITIVE_X+V,pt+1,Rt,ie.width,ie.height,0,St,st,ie.data)}}else{R?$&&e.texSubImage2D(A.TEXTURE_CUBE_MAP_POSITIVE_X+V,0,0,0,St,st,ut[V]):e.texImage2D(A.TEXTURE_CUBE_MAP_POSITIVE_X+V,0,Rt,St,st,ut[V]);for(let pt=0;pt<et.length;pt++){const Nt=et[pt];R?$&&e.texSubImage2D(A.TEXTURE_CUBE_MAP_POSITIVE_X+V,pt+1,0,0,St,st,Nt.image[V]):e.texImage2D(A.TEXTURE_CUBE_MAP_POSITIVE_X+V,pt+1,Rt,St,st,Nt.image[V])}}}I(p)&&u(A.TEXTURE_CUBE_MAP),O.__version=W.version,p.onUpdate&&p.onUpdate(p)}w.__version=p.version}function ht(w,p,k,q,W,O){const Qt=s.convert(k.format,k.colorSpace),it=s.convert(k.type),Ct=Q(k.internalFormat,Qt,it,k.colorSpace),yt=n.get(p),j=n.get(k);if(j.__renderTarget=p,!yt.__hasExternalTextures){const ut=Math.max(1,p.width>>O),_t=Math.max(1,p.height>>O);W===A.TEXTURE_3D||W===A.TEXTURE_2D_ARRAY?e.texImage3D(W,O,Ct,ut,_t,p.depth,0,Qt,it,null):e.texImage2D(W,O,Ct,ut,_t,0,Qt,it,null)}e.bindFramebuffer(A.FRAMEBUFFER,w),Mt(p)?r.framebufferTexture2DMultisampleEXT(A.FRAMEBUFFER,q,W,j.__webglTexture,0,gt(p)):(W===A.TEXTURE_2D||W>=A.TEXTURE_CUBE_MAP_POSITIVE_X&&W<=A.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&A.framebufferTexture2D(A.FRAMEBUFFER,q,W,j.__webglTexture,O),e.bindFramebuffer(A.FRAMEBUFFER,null)}function Ft(w,p,k){if(A.bindRenderbuffer(A.RENDERBUFFER,w),p.depthBuffer){const q=p.depthTexture,W=q&&q.isDepthTexture?q.type:null,O=m(p.stencilBuffer,W),Qt=p.stencilBuffer?A.DEPTH_STENCIL_ATTACHMENT:A.DEPTH_ATTACHMENT,it=gt(p);Mt(p)?r.renderbufferStorageMultisampleEXT(A.RENDERBUFFER,it,O,p.width,p.height):k?A.renderbufferStorageMultisample(A.RENDERBUFFER,it,O,p.width,p.height):A.renderbufferStorage(A.RENDERBUFFER,O,p.width,p.height),A.framebufferRenderbuffer(A.FRAMEBUFFER,Qt,A.RENDERBUFFER,w)}else{const q=p.textures;for(let W=0;W<q.length;W++){const O=q[W],Qt=s.convert(O.format,O.colorSpace),it=s.convert(O.type),Ct=Q(O.internalFormat,Qt,it,O.colorSpace),yt=gt(p);k&&Mt(p)===!1?A.renderbufferStorageMultisample(A.RENDERBUFFER,yt,Ct,p.width,p.height):Mt(p)?r.renderbufferStorageMultisampleEXT(A.RENDERBUFFER,yt,Ct,p.width,p.height):A.renderbufferStorage(A.RENDERBUFFER,Ct,p.width,p.height)}}A.bindRenderbuffer(A.RENDERBUFFER,null)}function mt(w,p){if(p&&p.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(A.FRAMEBUFFER,w),!(p.depthTexture&&p.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const q=n.get(p.depthTexture);q.__renderTarget=p,(!q.__webglTexture||p.depthTexture.image.width!==p.width||p.depthTexture.image.height!==p.height)&&(p.depthTexture.image.width=p.width,p.depthTexture.image.height=p.height,p.depthTexture.needsUpdate=!0),K(p.depthTexture,0);const W=q.__webglTexture,O=gt(p);if(p.depthTexture.format===oi)Mt(p)?r.framebufferTexture2DMultisampleEXT(A.FRAMEBUFFER,A.DEPTH_ATTACHMENT,A.TEXTURE_2D,W,0,O):A.framebufferTexture2D(A.FRAMEBUFFER,A.DEPTH_ATTACHMENT,A.TEXTURE_2D,W,0);else if(p.depthTexture.format===ci)Mt(p)?r.framebufferTexture2DMultisampleEXT(A.FRAMEBUFFER,A.DEPTH_STENCIL_ATTACHMENT,A.TEXTURE_2D,W,0,O):A.framebufferTexture2D(A.FRAMEBUFFER,A.DEPTH_STENCIL_ATTACHMENT,A.TEXTURE_2D,W,0);else throw new Error("Unknown depthTexture format")}function zt(w){const p=n.get(w),k=w.isWebGLCubeRenderTarget===!0;if(p.__boundDepthTexture!==w.depthTexture){const q=w.depthTexture;if(p.__depthDisposeCallback&&p.__depthDisposeCallback(),q){const W=()=>{delete p.__boundDepthTexture,delete p.__depthDisposeCallback,q.removeEventListener("dispose",W)};q.addEventListener("dispose",W),p.__depthDisposeCallback=W}p.__boundDepthTexture=q}if(w.depthTexture&&!p.__autoAllocateDepthBuffer){if(k)throw new Error("target.depthTexture not supported in Cube render targets");const q=w.texture.mipmaps;q&&q.length>0?mt(p.__webglFramebuffer[0],w):mt(p.__webglFramebuffer,w)}else if(k){p.__webglDepthbuffer=[];for(let q=0;q<6;q++)if(e.bindFramebuffer(A.FRAMEBUFFER,p.__webglFramebuffer[q]),p.__webglDepthbuffer[q]===void 0)p.__webglDepthbuffer[q]=A.createRenderbuffer(),Ft(p.__webglDepthbuffer[q],w,!1);else{const W=w.stencilBuffer?A.DEPTH_STENCIL_ATTACHMENT:A.DEPTH_ATTACHMENT,O=p.__webglDepthbuffer[q];A.bindRenderbuffer(A.RENDERBUFFER,O),A.framebufferRenderbuffer(A.FRAMEBUFFER,W,A.RENDERBUFFER,O)}}else{const q=w.texture.mipmaps;if(q&&q.length>0?e.bindFramebuffer(A.FRAMEBUFFER,p.__webglFramebuffer[0]):e.bindFramebuffer(A.FRAMEBUFFER,p.__webglFramebuffer),p.__webglDepthbuffer===void 0)p.__webglDepthbuffer=A.createRenderbuffer(),Ft(p.__webglDepthbuffer,w,!1);else{const W=w.stencilBuffer?A.DEPTH_STENCIL_ATTACHMENT:A.DEPTH_ATTACHMENT,O=p.__webglDepthbuffer;A.bindRenderbuffer(A.RENDERBUFFER,O),A.framebufferRenderbuffer(A.FRAMEBUFFER,W,A.RENDERBUFFER,O)}}e.bindFramebuffer(A.FRAMEBUFFER,null)}function qt(w,p,k){const q=n.get(w);p!==void 0&&ht(q.__webglFramebuffer,w,w.texture,A.COLOR_ATTACHMENT0,A.TEXTURE_2D,0),k!==void 0&&zt(w)}function Gt(w){const p=w.texture,k=n.get(w),q=n.get(p);w.addEventListener("dispose",D);const W=w.textures,O=w.isWebGLCubeRenderTarget===!0,Qt=W.length>1;if(Qt||(q.__webglTexture===void 0&&(q.__webglTexture=A.createTexture()),q.__version=p.version,a.memory.textures++),O){k.__webglFramebuffer=[];for(let it=0;it<6;it++)if(p.mipmaps&&p.mipmaps.length>0){k.__webglFramebuffer[it]=[];for(let Ct=0;Ct<p.mipmaps.length;Ct++)k.__webglFramebuffer[it][Ct]=A.createFramebuffer()}else k.__webglFramebuffer[it]=A.createFramebuffer()}else{if(p.mipmaps&&p.mipmaps.length>0){k.__webglFramebuffer=[];for(let it=0;it<p.mipmaps.length;it++)k.__webglFramebuffer[it]=A.createFramebuffer()}else k.__webglFramebuffer=A.createFramebuffer();if(Qt)for(let it=0,Ct=W.length;it<Ct;it++){const yt=n.get(W[it]);yt.__webglTexture===void 0&&(yt.__webglTexture=A.createTexture(),a.memory.textures++)}if(w.samples>0&&Mt(w)===!1){k.__webglMultisampledFramebuffer=A.createFramebuffer(),k.__webglColorRenderbuffer=[],e.bindFramebuffer(A.FRAMEBUFFER,k.__webglMultisampledFramebuffer);for(let it=0;it<W.length;it++){const Ct=W[it];k.__webglColorRenderbuffer[it]=A.createRenderbuffer(),A.bindRenderbuffer(A.RENDERBUFFER,k.__webglColorRenderbuffer[it]);const yt=s.convert(Ct.format,Ct.colorSpace),j=s.convert(Ct.type),ut=Q(Ct.internalFormat,yt,j,Ct.colorSpace,w.isXRRenderTarget===!0),_t=gt(w);A.renderbufferStorageMultisample(A.RENDERBUFFER,_t,ut,w.width,w.height),A.framebufferRenderbuffer(A.FRAMEBUFFER,A.COLOR_ATTACHMENT0+it,A.RENDERBUFFER,k.__webglColorRenderbuffer[it])}A.bindRenderbuffer(A.RENDERBUFFER,null),w.depthBuffer&&(k.__webglDepthRenderbuffer=A.createRenderbuffer(),Ft(k.__webglDepthRenderbuffer,w,!0)),e.bindFramebuffer(A.FRAMEBUFFER,null)}}if(O){e.bindTexture(A.TEXTURE_CUBE_MAP,q.__webglTexture),Dt(A.TEXTURE_CUBE_MAP,p);for(let it=0;it<6;it++)if(p.mipmaps&&p.mipmaps.length>0)for(let Ct=0;Ct<p.mipmaps.length;Ct++)ht(k.__webglFramebuffer[it][Ct],w,p,A.COLOR_ATTACHMENT0,A.TEXTURE_CUBE_MAP_POSITIVE_X+it,Ct);else ht(k.__webglFramebuffer[it],w,p,A.COLOR_ATTACHMENT0,A.TEXTURE_CUBE_MAP_POSITIVE_X+it,0);I(p)&&u(A.TEXTURE_CUBE_MAP),e.unbindTexture()}else if(Qt){for(let it=0,Ct=W.length;it<Ct;it++){const yt=W[it],j=n.get(yt);e.bindTexture(A.TEXTURE_2D,j.__webglTexture),Dt(A.TEXTURE_2D,yt),ht(k.__webglFramebuffer,w,yt,A.COLOR_ATTACHMENT0+it,A.TEXTURE_2D,0),I(yt)&&u(A.TEXTURE_2D)}e.unbindTexture()}else{let it=A.TEXTURE_2D;if((w.isWebGL3DRenderTarget||w.isWebGLArrayRenderTarget)&&(it=w.isWebGL3DRenderTarget?A.TEXTURE_3D:A.TEXTURE_2D_ARRAY),e.bindTexture(it,q.__webglTexture),Dt(it,p),p.mipmaps&&p.mipmaps.length>0)for(let Ct=0;Ct<p.mipmaps.length;Ct++)ht(k.__webglFramebuffer[Ct],w,p,A.COLOR_ATTACHMENT0,it,Ct);else ht(k.__webglFramebuffer,w,p,A.COLOR_ATTACHMENT0,it,0);I(p)&&u(it),e.unbindTexture()}w.depthBuffer&&zt(w)}function _(w){const p=w.textures;for(let k=0,q=p.length;k<q;k++){const W=p[k];if(I(W)){const O=x(w),Qt=n.get(W).__webglTexture;e.bindTexture(O,Qt),u(O),e.unbindTexture()}}}const ae=[],Pt=[];function Yt(w){if(w.samples>0){if(Mt(w)===!1){const p=w.textures,k=w.width,q=w.height;let W=A.COLOR_BUFFER_BIT;const O=w.stencilBuffer?A.DEPTH_STENCIL_ATTACHMENT:A.DEPTH_ATTACHMENT,Qt=n.get(w),it=p.length>1;if(it)for(let yt=0;yt<p.length;yt++)e.bindFramebuffer(A.FRAMEBUFFER,Qt.__webglMultisampledFramebuffer),A.framebufferRenderbuffer(A.FRAMEBUFFER,A.COLOR_ATTACHMENT0+yt,A.RENDERBUFFER,null),e.bindFramebuffer(A.FRAMEBUFFER,Qt.__webglFramebuffer),A.framebufferTexture2D(A.DRAW_FRAMEBUFFER,A.COLOR_ATTACHMENT0+yt,A.TEXTURE_2D,null,0);e.bindFramebuffer(A.READ_FRAMEBUFFER,Qt.__webglMultisampledFramebuffer);const Ct=w.texture.mipmaps;Ct&&Ct.length>0?e.bindFramebuffer(A.DRAW_FRAMEBUFFER,Qt.__webglFramebuffer[0]):e.bindFramebuffer(A.DRAW_FRAMEBUFFER,Qt.__webglFramebuffer);for(let yt=0;yt<p.length;yt++){if(w.resolveDepthBuffer&&(w.depthBuffer&&(W|=A.DEPTH_BUFFER_BIT),w.stencilBuffer&&w.resolveStencilBuffer&&(W|=A.STENCIL_BUFFER_BIT)),it){A.framebufferRenderbuffer(A.READ_FRAMEBUFFER,A.COLOR_ATTACHMENT0,A.RENDERBUFFER,Qt.__webglColorRenderbuffer[yt]);const j=n.get(p[yt]).__webglTexture;A.framebufferTexture2D(A.DRAW_FRAMEBUFFER,A.COLOR_ATTACHMENT0,A.TEXTURE_2D,j,0)}A.blitFramebuffer(0,0,k,q,0,0,k,q,W,A.NEAREST),o===!0&&(ae.length=0,Pt.length=0,ae.push(A.COLOR_ATTACHMENT0+yt),w.depthBuffer&&w.resolveDepthBuffer===!1&&(ae.push(O),Pt.push(O),A.invalidateFramebuffer(A.DRAW_FRAMEBUFFER,Pt)),A.invalidateFramebuffer(A.READ_FRAMEBUFFER,ae))}if(e.bindFramebuffer(A.READ_FRAMEBUFFER,null),e.bindFramebuffer(A.DRAW_FRAMEBUFFER,null),it)for(let yt=0;yt<p.length;yt++){e.bindFramebuffer(A.FRAMEBUFFER,Qt.__webglMultisampledFramebuffer),A.framebufferRenderbuffer(A.FRAMEBUFFER,A.COLOR_ATTACHMENT0+yt,A.RENDERBUFFER,Qt.__webglColorRenderbuffer[yt]);const j=n.get(p[yt]).__webglTexture;e.bindFramebuffer(A.FRAMEBUFFER,Qt.__webglFramebuffer),A.framebufferTexture2D(A.DRAW_FRAMEBUFFER,A.COLOR_ATTACHMENT0+yt,A.TEXTURE_2D,j,0)}e.bindFramebuffer(A.DRAW_FRAMEBUFFER,Qt.__webglMultisampledFramebuffer)}else if(w.depthBuffer&&w.resolveDepthBuffer===!1&&o){const p=w.stencilBuffer?A.DEPTH_STENCIL_ATTACHMENT:A.DEPTH_ATTACHMENT;A.invalidateFramebuffer(A.DRAW_FRAMEBUFFER,[p])}}}function gt(w){return Math.min(i.maxSamples,w.samples)}function Mt(w){const p=n.get(w);return w.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&p.__useRenderToTexture!==!1}function Bt(w){const p=a.render.frame;g.get(w)!==p&&(g.set(w,p),w.update())}function kt(w,p){const k=w.colorSpace,q=w.format,W=w.type;return w.isCompressedTexture===!0||w.isVideoTexture===!0||k!==HA&&k!==Ln&&(Wt.getTransfer(k)===ee?(q!==me||W!==Le)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",k)),p}function le(w){return typeof HTMLImageElement<"u"&&w instanceof HTMLImageElement?(c.width=w.naturalWidth||w.width,c.height=w.naturalHeight||w.height):typeof VideoFrame<"u"&&w instanceof VideoFrame?(c.width=w.displayWidth,c.height=w.displayHeight):(c.width=w.width,c.height=w.height),c}this.allocateTextureUnit=U,this.resetTextureUnits=z,this.setTexture2D=K,this.setTexture2DArray=H,this.setTexture3D=X,this.setTextureCube=P,this.rebindTextures=qt,this.setupRenderTarget=Gt,this.updateRenderTargetMipmap=_,this.updateMultisampleRenderTarget=Yt,this.setupDepthRenderbuffer=zt,this.setupFrameBufferTexture=ht,this.useMultisampledRTT=Mt}function iE(A,t){function e(n,i=Ln){let s;const a=Wt.getTransfer(i);if(n===Le)return A.UNSIGNED_BYTE;if(n===sr)return A.UNSIGNED_SHORT_4_4_4_4;if(n===ar)return A.UNSIGNED_SHORT_5_5_5_1;if(n===Ho)return A.UNSIGNED_INT_5_9_9_9_REV;if(n===Go)return A.BYTE;if(n===Po)return A.SHORT;if(n===ai)return A.UNSIGNED_SHORT;if(n===ir)return A.INT;if(n===ke)return A.UNSIGNED_INT;if(n===wn)return A.FLOAT;if(n===ui)return A.HALF_FLOAT;if(n===zo)return A.ALPHA;if(n===Yo)return A.RGB;if(n===me)return A.RGBA;if(n===oi)return A.DEPTH_COMPONENT;if(n===ci)return A.DEPTH_STENCIL;if(n===Oo)return A.RED;if(n===rr)return A.RED_INTEGER;if(n===Jo)return A.RG;if(n===hs)return A.RG_INTEGER;if(n===Dn)return A.RGBA_INTEGER;if(n===Ki||n===Wi||n===Xi||n===Zi)if(a===ee)if(s=t.get("WEBGL_compressed_texture_s3tc_srgb"),s!==null){if(n===Ki)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===Wi)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===Xi)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===Zi)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(s=t.get("WEBGL_compressed_texture_s3tc"),s!==null){if(n===Ki)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Wi)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===Xi)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===Zi)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(n===Ba||n===Ca||n===Qa||n===ma)if(s=t.get("WEBGL_compressed_texture_pvrtc"),s!==null){if(n===Ba)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===Ca)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===Qa)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===ma)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(n===ya||n===xa||n===wa)if(s=t.get("WEBGL_compressed_texture_etc"),s!==null){if(n===ya||n===xa)return a===ee?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(n===wa)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(n===Sa||n===Da||n===_a||n===Ma||n===va||n===ba||n===Ra||n===Fa||n===Na||n===Ta||n===ka||n===Ua||n===La||n===Ga)if(s=t.get("WEBGL_compressed_texture_astc"),s!==null){if(n===Sa)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===Da)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===_a)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===Ma)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===va)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===ba)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===Ra)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===Fa)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===Na)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===Ta)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===ka)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===Ua)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===La)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===Ga)return a===ee?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(n===ji||n===Pa||n===Ha)if(s=t.get("EXT_texture_compression_bptc"),s!==null){if(n===ji)return a===ee?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===Pa)return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===Ha)return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(n===qo||n===za||n===Ya||n===Oa)if(s=t.get("EXT_texture_compression_rgtc"),s!==null){if(n===ji)return s.COMPRESSED_RED_RGTC1_EXT;if(n===za)return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===Ya)return s.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===Oa)return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return n===ri?A.UNSIGNED_INT_24_8:A[n]!==void 0?A[n]:null}return{convert:e}}const sE=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,aE=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class rE{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(t,e,n){if(this.texture===null){const i=new De,s=t.properties.get(i);s.__webglTexture=e.texture,(e.depthNear!==n.depthNear||e.depthFar!==n.depthFar)&&(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=i}}getMesh(t){if(this.texture!==null&&this.mesh===null){const e=t.cameras[0].viewport,n=new hn({vertexShader:sE,fragmentShader:aE,uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new Je(new JA(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class oE extends OA{constructor(t,e){super();const n=this;let i=null,s=1,a=null,r="local-floor",o=1,c=null,g=null,l=null,h=null,d=null,E=null;const f=new rE,I=e.getContextAttributes();let u=null,x=null;const Q=[],m=[],M=new Xt;let S=null;const D=new Oe;D.viewport=new te;const T=new Oe;T.viewport=new te;const y=[D,T],C=new Mg;let v=null,z=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(J){let tt=Q[J];return tt===void 0&&(tt=new Ys,Q[J]=tt),tt.getTargetRaySpace()},this.getControllerGrip=function(J){let tt=Q[J];return tt===void 0&&(tt=new Ys,Q[J]=tt),tt.getGripSpace()},this.getHand=function(J){let tt=Q[J];return tt===void 0&&(tt=new Ys,Q[J]=tt),tt.getHandSpace()};function U(J){const tt=m.indexOf(J.inputSource);if(tt===-1)return;const lt=Q[tt];lt!==void 0&&(lt.update(J.inputSource,J.frame,c||a),lt.dispatchEvent({type:J.type,data:J.inputSource}))}function Y(){i.removeEventListener("select",U),i.removeEventListener("selectstart",U),i.removeEventListener("selectend",U),i.removeEventListener("squeeze",U),i.removeEventListener("squeezestart",U),i.removeEventListener("squeezeend",U),i.removeEventListener("end",Y),i.removeEventListener("inputsourceschange",K);for(let J=0;J<Q.length;J++){const tt=m[J];tt!==null&&(m[J]=null,Q[J].disconnect(tt))}v=null,z=null,f.reset(),t.setRenderTarget(u),d=null,h=null,l=null,i=null,x=null,Ut.stop(),n.isPresenting=!1,t.setPixelRatio(S),t.setSize(M.width,M.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(J){s=J,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(J){r=J,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return c||a},this.setReferenceSpace=function(J){c=J},this.getBaseLayer=function(){return h!==null?h:d},this.getBinding=function(){return l},this.getFrame=function(){return E},this.getSession=function(){return i},this.setSession=async function(J){if(i=J,i!==null){if(u=t.getRenderTarget(),i.addEventListener("select",U),i.addEventListener("selectstart",U),i.addEventListener("selectend",U),i.addEventListener("squeeze",U),i.addEventListener("squeezestart",U),i.addEventListener("squeezeend",U),i.addEventListener("end",Y),i.addEventListener("inputsourceschange",K),I.xrCompatible!==!0&&await e.makeXRCompatible(),S=t.getPixelRatio(),t.getSize(M),typeof XRWebGLBinding<"u"&&"createProjectionLayer"in XRWebGLBinding.prototype){let lt=null,Z=null,ht=null;I.depth&&(ht=I.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,lt=I.stencil?ci:oi,Z=I.stencil?ri:ke);const Ft={colorFormat:e.RGBA8,depthFormat:ht,scaleFactor:s};l=new XRWebGLBinding(i,e),h=l.createProjectionLayer(Ft),i.updateRenderState({layers:[h]}),t.setPixelRatio(1),t.setSize(h.textureWidth,h.textureHeight,!1),x=new ln(h.textureWidth,h.textureHeight,{format:me,type:Le,depthTexture:new rc(h.textureWidth,h.textureHeight,Z,void 0,void 0,void 0,void 0,void 0,void 0,lt),stencilBuffer:I.stencil,colorSpace:t.outputColorSpace,samples:I.antialias?4:0,resolveDepthBuffer:h.ignoreDepthValues===!1,resolveStencilBuffer:h.ignoreDepthValues===!1})}else{const lt={antialias:I.antialias,alpha:!0,depth:I.depth,stencil:I.stencil,framebufferScaleFactor:s};d=new XRWebGLLayer(i,e,lt),i.updateRenderState({baseLayer:d}),t.setPixelRatio(1),t.setSize(d.framebufferWidth,d.framebufferHeight,!1),x=new ln(d.framebufferWidth,d.framebufferHeight,{format:me,type:Le,colorSpace:t.outputColorSpace,stencilBuffer:I.stencil,resolveDepthBuffer:d.ignoreDepthValues===!1,resolveStencilBuffer:d.ignoreDepthValues===!1})}x.isXRRenderTarget=!0,this.setFoveation(o),c=null,a=await i.requestReferenceSpace(r),Ut.setContext(i),Ut.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(i!==null)return i.environmentBlendMode},this.getDepthTexture=function(){return f.getDepthTexture()};function K(J){for(let tt=0;tt<J.removed.length;tt++){const lt=J.removed[tt],Z=m.indexOf(lt);Z>=0&&(m[Z]=null,Q[Z].disconnect(lt))}for(let tt=0;tt<J.added.length;tt++){const lt=J.added[tt];let Z=m.indexOf(lt);if(Z===-1){for(let Ft=0;Ft<Q.length;Ft++)if(Ft>=m.length){m.push(lt),Z=Ft;break}else if(m[Ft]===null){m[Ft]=lt,Z=Ft;break}if(Z===-1)break}const ht=Q[Z];ht&&ht.connect(lt)}}const H=new b,X=new b;function P(J,tt,lt){H.setFromMatrixPosition(tt.matrixWorld),X.setFromMatrixPosition(lt.matrixWorld);const Z=H.distanceTo(X),ht=tt.projectionMatrix.elements,Ft=lt.projectionMatrix.elements,mt=ht[14]/(ht[10]-1),zt=ht[14]/(ht[10]+1),qt=(ht[9]+1)/ht[5],Gt=(ht[9]-1)/ht[5],_=(ht[8]-1)/ht[0],ae=(Ft[8]+1)/Ft[0],Pt=mt*_,Yt=mt*ae,gt=Z/(-_+ae),Mt=gt*-_;if(tt.matrixWorld.decompose(J.position,J.quaternion,J.scale),J.translateX(Mt),J.translateZ(gt),J.matrixWorld.compose(J.position,J.quaternion,J.scale),J.matrixWorldInverse.copy(J.matrixWorld).invert(),ht[10]===-1)J.projectionMatrix.copy(tt.projectionMatrix),J.projectionMatrixInverse.copy(tt.projectionMatrixInverse);else{const Bt=mt+gt,kt=zt+gt,le=Pt-Mt,w=Yt+(Z-Mt),p=qt*zt/kt*Bt,k=Gt*zt/kt*Bt;J.projectionMatrix.makePerspective(le,w,p,k,Bt,kt),J.projectionMatrixInverse.copy(J.projectionMatrix).invert()}}function At(J,tt){tt===null?J.matrixWorld.copy(J.matrix):J.matrixWorld.multiplyMatrices(tt.matrixWorld,J.matrix),J.matrixWorldInverse.copy(J.matrixWorld).invert()}this.updateCamera=function(J){if(i===null)return;let tt=J.near,lt=J.far;f.texture!==null&&(f.depthNear>0&&(tt=f.depthNear),f.depthFar>0&&(lt=f.depthFar)),C.near=T.near=D.near=tt,C.far=T.far=D.far=lt,(v!==C.near||z!==C.far)&&(i.updateRenderState({depthNear:C.near,depthFar:C.far}),v=C.near,z=C.far),D.layers.mask=J.layers.mask|2,T.layers.mask=J.layers.mask|4,C.layers.mask=D.layers.mask|T.layers.mask;const Z=J.parent,ht=C.cameras;At(C,Z);for(let Ft=0;Ft<ht.length;Ft++)At(ht[Ft],Z);ht.length===2?P(C,D,T):C.projectionMatrix.copy(D.projectionMatrix),rt(J,C,Z)};function rt(J,tt,lt){lt===null?J.matrix.copy(tt.matrixWorld):(J.matrix.copy(lt.matrixWorld),J.matrix.invert(),J.matrix.multiply(tt.matrixWorld)),J.matrix.decompose(J.position,J.quaternion,J.scale),J.updateMatrixWorld(!0),J.projectionMatrix.copy(tt.projectionMatrix),J.projectionMatrixInverse.copy(tt.projectionMatrixInverse),J.isPerspectiveCamera&&(J.fov=Ja*2*Math.atan(1/J.projectionMatrix.elements[5]),J.zoom=1)}this.getCamera=function(){return C},this.getFoveation=function(){if(!(h===null&&d===null))return o},this.setFoveation=function(J){o=J,h!==null&&(h.fixedFoveation=J),d!==null&&d.fixedFoveation!==void 0&&(d.fixedFoveation=J)},this.hasDepthSensing=function(){return f.texture!==null},this.getDepthSensingMesh=function(){return f.getMesh(C)};let It=null;function Dt(J,tt){if(g=tt.getViewerPose(c||a),E=tt,g!==null){const lt=g.views;d!==null&&(t.setRenderTargetFramebuffer(x,d.framebuffer),t.setRenderTarget(x));let Z=!1;lt.length!==C.cameras.length&&(C.cameras.length=0,Z=!0);for(let mt=0;mt<lt.length;mt++){const zt=lt[mt];let qt=null;if(d!==null)qt=d.getViewport(zt);else{const _=l.getViewSubImage(h,zt);qt=_.viewport,mt===0&&(t.setRenderTargetTextures(x,_.colorTexture,_.depthStencilTexture),t.setRenderTarget(x))}let Gt=y[mt];Gt===void 0&&(Gt=new Oe,Gt.layers.enable(mt),Gt.viewport=new te,y[mt]=Gt),Gt.matrix.fromArray(zt.transform.matrix),Gt.matrix.decompose(Gt.position,Gt.quaternion,Gt.scale),Gt.projectionMatrix.fromArray(zt.projectionMatrix),Gt.projectionMatrixInverse.copy(Gt.projectionMatrix).invert(),Gt.viewport.set(qt.x,qt.y,qt.width,qt.height),mt===0&&(C.matrix.copy(Gt.matrix),C.matrix.decompose(C.position,C.quaternion,C.scale)),Z===!0&&C.cameras.push(Gt)}const ht=i.enabledFeatures;if(ht&&ht.includes("depth-sensing")&&i.depthUsage=="gpu-optimized"&&l){const mt=l.getDepthInformation(lt[0]);mt&&mt.isValid&&mt.texture&&f.init(t,mt,i.renderState)}}for(let lt=0;lt<Q.length;lt++){const Z=m[lt],ht=Q[lt];Z!==null&&ht!==void 0&&ht.update(Z,tt,c||a)}It&&It(J,tt),tt.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:tt}),E=null}const Ut=new cc;Ut.setAnimationLoop(Dt),this.setAnimationLoop=function(J){It=J},this.dispose=function(){}}}const $n=new gn,cE=new ne;function lE(A,t){function e(I,u){I.matrixAutoUpdate===!0&&I.updateMatrix(),u.value.copy(I.matrix)}function n(I,u){u.color.getRGB(I.fogColor.value,nc(A)),u.isFog?(I.fogNear.value=u.near,I.fogFar.value=u.far):u.isFogExp2&&(I.fogDensity.value=u.density)}function i(I,u,x,Q,m){u.isMeshBasicMaterial||u.isMeshLambertMaterial?s(I,u):u.isMeshToonMaterial?(s(I,u),l(I,u)):u.isMeshPhongMaterial?(s(I,u),g(I,u)):u.isMeshStandardMaterial?(s(I,u),h(I,u),u.isMeshPhysicalMaterial&&d(I,u,m)):u.isMeshMatcapMaterial?(s(I,u),E(I,u)):u.isMeshDepthMaterial?s(I,u):u.isMeshDistanceMaterial?(s(I,u),f(I,u)):u.isMeshNormalMaterial?s(I,u):u.isLineBasicMaterial?(a(I,u),u.isLineDashedMaterial&&r(I,u)):u.isPointsMaterial?o(I,u,x,Q):u.isSpriteMaterial?c(I,u):u.isShadowMaterial?(I.color.value.copy(u.color),I.opacity.value=u.opacity):u.isShaderMaterial&&(u.uniformsNeedUpdate=!1)}function s(I,u){I.opacity.value=u.opacity,u.color&&I.diffuse.value.copy(u.color),u.emissive&&I.emissive.value.copy(u.emissive).multiplyScalar(u.emissiveIntensity),u.map&&(I.map.value=u.map,e(u.map,I.mapTransform)),u.alphaMap&&(I.alphaMap.value=u.alphaMap,e(u.alphaMap,I.alphaMapTransform)),u.bumpMap&&(I.bumpMap.value=u.bumpMap,e(u.bumpMap,I.bumpMapTransform),I.bumpScale.value=u.bumpScale,u.side===Te&&(I.bumpScale.value*=-1)),u.normalMap&&(I.normalMap.value=u.normalMap,e(u.normalMap,I.normalMapTransform),I.normalScale.value.copy(u.normalScale),u.side===Te&&I.normalScale.value.negate()),u.displacementMap&&(I.displacementMap.value=u.displacementMap,e(u.displacementMap,I.displacementMapTransform),I.displacementScale.value=u.displacementScale,I.displacementBias.value=u.displacementBias),u.emissiveMap&&(I.emissiveMap.value=u.emissiveMap,e(u.emissiveMap,I.emissiveMapTransform)),u.specularMap&&(I.specularMap.value=u.specularMap,e(u.specularMap,I.specularMapTransform)),u.alphaTest>0&&(I.alphaTest.value=u.alphaTest);const x=t.get(u),Q=x.envMap,m=x.envMapRotation;Q&&(I.envMap.value=Q,$n.copy(m),$n.x*=-1,$n.y*=-1,$n.z*=-1,Q.isCubeTexture&&Q.isRenderTargetTexture===!1&&($n.y*=-1,$n.z*=-1),I.envMapRotation.value.setFromMatrix4(cE.makeRotationFromEuler($n)),I.flipEnvMap.value=Q.isCubeTexture&&Q.isRenderTargetTexture===!1?-1:1,I.reflectivity.value=u.reflectivity,I.ior.value=u.ior,I.refractionRatio.value=u.refractionRatio),u.lightMap&&(I.lightMap.value=u.lightMap,I.lightMapIntensity.value=u.lightMapIntensity,e(u.lightMap,I.lightMapTransform)),u.aoMap&&(I.aoMap.value=u.aoMap,I.aoMapIntensity.value=u.aoMapIntensity,e(u.aoMap,I.aoMapTransform))}function a(I,u){I.diffuse.value.copy(u.color),I.opacity.value=u.opacity,u.map&&(I.map.value=u.map,e(u.map,I.mapTransform))}function r(I,u){I.dashSize.value=u.dashSize,I.totalSize.value=u.dashSize+u.gapSize,I.scale.value=u.scale}function o(I,u,x,Q){I.diffuse.value.copy(u.color),I.opacity.value=u.opacity,I.size.value=u.size*x,I.scale.value=Q*.5,u.map&&(I.map.value=u.map,e(u.map,I.uvTransform)),u.alphaMap&&(I.alphaMap.value=u.alphaMap,e(u.alphaMap,I.alphaMapTransform)),u.alphaTest>0&&(I.alphaTest.value=u.alphaTest)}function c(I,u){I.diffuse.value.copy(u.color),I.opacity.value=u.opacity,I.rotation.value=u.rotation,u.map&&(I.map.value=u.map,e(u.map,I.mapTransform)),u.alphaMap&&(I.alphaMap.value=u.alphaMap,e(u.alphaMap,I.alphaMapTransform)),u.alphaTest>0&&(I.alphaTest.value=u.alphaTest)}function g(I,u){I.specular.value.copy(u.specular),I.shininess.value=Math.max(u.shininess,1e-4)}function l(I,u){u.gradientMap&&(I.gradientMap.value=u.gradientMap)}function h(I,u){I.metalness.value=u.metalness,u.metalnessMap&&(I.metalnessMap.value=u.metalnessMap,e(u.metalnessMap,I.metalnessMapTransform)),I.roughness.value=u.roughness,u.roughnessMap&&(I.roughnessMap.value=u.roughnessMap,e(u.roughnessMap,I.roughnessMapTransform)),u.envMap&&(I.envMapIntensity.value=u.envMapIntensity)}function d(I,u,x){I.ior.value=u.ior,u.sheen>0&&(I.sheenColor.value.copy(u.sheenColor).multiplyScalar(u.sheen),I.sheenRoughness.value=u.sheenRoughness,u.sheenColorMap&&(I.sheenColorMap.value=u.sheenColorMap,e(u.sheenColorMap,I.sheenColorMapTransform)),u.sheenRoughnessMap&&(I.sheenRoughnessMap.value=u.sheenRoughnessMap,e(u.sheenRoughnessMap,I.sheenRoughnessMapTransform))),u.clearcoat>0&&(I.clearcoat.value=u.clearcoat,I.clearcoatRoughness.value=u.clearcoatRoughness,u.clearcoatMap&&(I.clearcoatMap.value=u.clearcoatMap,e(u.clearcoatMap,I.clearcoatMapTransform)),u.clearcoatRoughnessMap&&(I.clearcoatRoughnessMap.value=u.clearcoatRoughnessMap,e(u.clearcoatRoughnessMap,I.clearcoatRoughnessMapTransform)),u.clearcoatNormalMap&&(I.clearcoatNormalMap.value=u.clearcoatNormalMap,e(u.clearcoatNormalMap,I.clearcoatNormalMapTransform),I.clearcoatNormalScale.value.copy(u.clearcoatNormalScale),u.side===Te&&I.clearcoatNormalScale.value.negate())),u.dispersion>0&&(I.dispersion.value=u.dispersion),u.iridescence>0&&(I.iridescence.value=u.iridescence,I.iridescenceIOR.value=u.iridescenceIOR,I.iridescenceThicknessMinimum.value=u.iridescenceThicknessRange[0],I.iridescenceThicknessMaximum.value=u.iridescenceThicknessRange[1],u.iridescenceMap&&(I.iridescenceMap.value=u.iridescenceMap,e(u.iridescenceMap,I.iridescenceMapTransform)),u.iridescenceThicknessMap&&(I.iridescenceThicknessMap.value=u.iridescenceThicknessMap,e(u.iridescenceThicknessMap,I.iridescenceThicknessMapTransform))),u.transmission>0&&(I.transmission.value=u.transmission,I.transmissionSamplerMap.value=x.texture,I.transmissionSamplerSize.value.set(x.width,x.height),u.transmissionMap&&(I.transmissionMap.value=u.transmissionMap,e(u.transmissionMap,I.transmissionMapTransform)),I.thickness.value=u.thickness,u.thicknessMap&&(I.thicknessMap.value=u.thicknessMap,e(u.thicknessMap,I.thicknessMapTransform)),I.attenuationDistance.value=u.attenuationDistance,I.attenuationColor.value.copy(u.attenuationColor)),u.anisotropy>0&&(I.anisotropyVector.value.set(u.anisotropy*Math.cos(u.anisotropyRotation),u.anisotropy*Math.sin(u.anisotropyRotation)),u.anisotropyMap&&(I.anisotropyMap.value=u.anisotropyMap,e(u.anisotropyMap,I.anisotropyMapTransform))),I.specularIntensity.value=u.specularIntensity,I.specularColor.value.copy(u.specularColor),u.specularColorMap&&(I.specularColorMap.value=u.specularColorMap,e(u.specularColorMap,I.specularColorMapTransform)),u.specularIntensityMap&&(I.specularIntensityMap.value=u.specularIntensityMap,e(u.specularIntensityMap,I.specularIntensityMapTransform))}function E(I,u){u.matcap&&(I.matcap.value=u.matcap)}function f(I,u){const x=t.get(u).light;I.referencePosition.value.setFromMatrixPosition(x.matrixWorld),I.nearDistance.value=x.shadow.camera.near,I.farDistance.value=x.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:i}}function gE(A,t,e,n){let i={},s={},a=[];const r=A.getParameter(A.MAX_UNIFORM_BUFFER_BINDINGS);function o(x,Q){const m=Q.program;n.uniformBlockBinding(x,m)}function c(x,Q){let m=i[x.id];m===void 0&&(E(x),m=g(x),i[x.id]=m,x.addEventListener("dispose",I));const M=Q.program;n.updateUBOMapping(x,M);const S=t.render.frame;s[x.id]!==S&&(h(x),s[x.id]=S)}function g(x){const Q=l();x.__bindingPointIndex=Q;const m=A.createBuffer(),M=x.__size,S=x.usage;return A.bindBuffer(A.UNIFORM_BUFFER,m),A.bufferData(A.UNIFORM_BUFFER,M,S),A.bindBuffer(A.UNIFORM_BUFFER,null),A.bindBufferBase(A.UNIFORM_BUFFER,Q,m),m}function l(){for(let x=0;x<r;x++)if(a.indexOf(x)===-1)return a.push(x),x;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function h(x){const Q=i[x.id],m=x.uniforms,M=x.__cache;A.bindBuffer(A.UNIFORM_BUFFER,Q);for(let S=0,D=m.length;S<D;S++){const T=Array.isArray(m[S])?m[S]:[m[S]];for(let y=0,C=T.length;y<C;y++){const v=T[y];if(d(v,S,y,M)===!0){const z=v.__offset,U=Array.isArray(v.value)?v.value:[v.value];let Y=0;for(let K=0;K<U.length;K++){const H=U[K],X=f(H);typeof H=="number"||typeof H=="boolean"?(v.__data[0]=H,A.bufferSubData(A.UNIFORM_BUFFER,z+Y,v.__data)):H.isMatrix3?(v.__data[0]=H.elements[0],v.__data[1]=H.elements[1],v.__data[2]=H.elements[2],v.__data[3]=0,v.__data[4]=H.elements[3],v.__data[5]=H.elements[4],v.__data[6]=H.elements[5],v.__data[7]=0,v.__data[8]=H.elements[6],v.__data[9]=H.elements[7],v.__data[10]=H.elements[8],v.__data[11]=0):(H.toArray(v.__data,Y),Y+=X.storage/Float32Array.BYTES_PER_ELEMENT)}A.bufferSubData(A.UNIFORM_BUFFER,z,v.__data)}}}A.bindBuffer(A.UNIFORM_BUFFER,null)}function d(x,Q,m,M){const S=x.value,D=Q+"_"+m;if(M[D]===void 0)return typeof S=="number"||typeof S=="boolean"?M[D]=S:M[D]=S.clone(),!0;{const T=M[D];if(typeof S=="number"||typeof S=="boolean"){if(T!==S)return M[D]=S,!0}else if(T.equals(S)===!1)return T.copy(S),!0}return!1}function E(x){const Q=x.uniforms;let m=0;const M=16;for(let D=0,T=Q.length;D<T;D++){const y=Array.isArray(Q[D])?Q[D]:[Q[D]];for(let C=0,v=y.length;C<v;C++){const z=y[C],U=Array.isArray(z.value)?z.value:[z.value];for(let Y=0,K=U.length;Y<K;Y++){const H=U[Y],X=f(H),P=m%M,At=P%X.boundary,rt=P+At;m+=At,rt!==0&&M-rt<X.storage&&(m+=M-rt),z.__data=new Float32Array(X.storage/Float32Array.BYTES_PER_ELEMENT),z.__offset=m,m+=X.storage}}}const S=m%M;return S>0&&(m+=M-S),x.__size=m,x.__cache={},this}function f(x){const Q={boundary:0,storage:0};return typeof x=="number"||typeof x=="boolean"?(Q.boundary=4,Q.storage=4):x.isVector2?(Q.boundary=8,Q.storage=8):x.isVector3||x.isColor?(Q.boundary=16,Q.storage=12):x.isVector4?(Q.boundary=16,Q.storage=16):x.isMatrix3?(Q.boundary=48,Q.storage=48):x.isMatrix4?(Q.boundary=64,Q.storage=64):x.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",x),Q}function I(x){const Q=x.target;Q.removeEventListener("dispose",I);const m=a.indexOf(Q.__bindingPointIndex);a.splice(m,1),A.deleteBuffer(i[Q.id]),delete i[Q.id],delete s[Q.id]}function u(){for(const x in i)A.deleteBuffer(i[x]);a=[],i={},s={}}return{bind:o,update:c,dispose:u}}class mf{constructor(t={}){const{canvas:e=Kl(),context:n=null,depth:i=!0,stencil:s=!1,alpha:a=!1,antialias:r=!1,premultipliedAlpha:o=!0,preserveDrawingBuffer:c=!1,powerPreference:g="default",failIfMajorPerformanceCaveat:l=!1,reverseDepthBuffer:h=!1}=t;this.isWebGLRenderer=!0;let d;if(n!==null){if(typeof WebGLRenderingContext<"u"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");d=n.getContextAttributes().alpha}else d=a;const E=new Uint32Array(4),f=new Int32Array(4);let I=null,u=null;const x=[],Q=[];this.domElement=e,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.toneMapping=Hn,this.toneMappingExposure=1,this.transmissionResolutionScale=1;const m=this;let M=!1;this._outputColorSpace=Ne;let S=0,D=0,T=null,y=-1,C=null;const v=new te,z=new te;let U=null;const Y=new Ht(0);let K=0,H=e.width,X=e.height,P=1,At=null,rt=null;const It=new te(0,0,H,X),Dt=new te(0,0,H,X);let Ut=!1;const J=new ac;let tt=!1,lt=!1;const Z=new ne,ht=new ne,Ft=new b,mt=new te,zt={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let qt=!1;function Gt(){return T===null?P:1}let _=n;function ae(B,F){return e.getContext(B,F)}try{const B={alpha:!0,depth:i,stencil:s,antialias:r,premultipliedAlpha:o,preserveDrawingBuffer:c,powerPreference:g,failIfMajorPerformanceCaveat:l};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${Ar}`),e.addEventListener("webglcontextlost",Et,!1),e.addEventListener("webglcontextrestored",et,!1),e.addEventListener("webglcontextcreationerror",V,!1),_===null){const F="webgl2";if(_=ae(F,B),_===null)throw ae(F)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(B){throw console.error("THREE.WebGLRenderer: "+B.message),B}let Pt,Yt,gt,Mt,Bt,kt,le,w,p,k,q,W,O,Qt,it,Ct,yt,j,ut,_t,St,st,Rt,R;function ot(){Pt=new md(_),Pt.init(),st=new iE(_,Pt),Yt=new Id(_,Pt,t,st),gt=new nE(_,Pt),Yt.reverseDepthBuffer&&h&&gt.buffers.depth.setReversed(!0),Mt=new wd(_),Bt=new YI,kt=new AE(_,Pt,gt,Bt,Yt,st,Mt),le=new pd(m),w=new Qd(m),p=new bg(_),Rt=new ud(_,p),k=new yd(_,p,Mt,Rt),q=new Dd(_,k,p,Mt),ut=new Sd(_,Yt,kt),Ct=new Ed(Bt),W=new zI(m,le,w,Pt,Yt,Rt,Ct),O=new lE(m,Bt),Qt=new JI,it=new ZI(Pt),j=new hd(m,le,w,gt,q,d,o),yt=new tE(m,q,Yt),R=new gE(_,Mt,Yt,gt),_t=new dd(_,Pt,Mt),St=new xd(_,Pt,Mt),Mt.programs=W.programs,m.capabilities=Yt,m.extensions=Pt,m.properties=Bt,m.renderLists=Qt,m.shadowMap=yt,m.state=gt,m.info=Mt}ot();const $=new oE(m,_);this.xr=$,this.getContext=function(){return _},this.getContextAttributes=function(){return _.getContextAttributes()},this.forceContextLoss=function(){const B=Pt.get("WEBGL_lose_context");B&&B.loseContext()},this.forceContextRestore=function(){const B=Pt.get("WEBGL_lose_context");B&&B.restoreContext()},this.getPixelRatio=function(){return P},this.setPixelRatio=function(B){B!==void 0&&(P=B,this.setSize(H,X,!1))},this.getSize=function(B){return B.set(H,X)},this.setSize=function(B,F,L=!0){if($.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}H=B,X=F,e.width=Math.floor(B*P),e.height=Math.floor(F*P),L===!0&&(e.style.width=B+"px",e.style.height=F+"px"),this.setViewport(0,0,B,F)},this.getDrawingBufferSize=function(B){return B.set(H*P,X*P).floor()},this.setDrawingBufferSize=function(B,F,L){H=B,X=F,P=L,e.width=Math.floor(B*L),e.height=Math.floor(F*L),this.setViewport(0,0,B,F)},this.getCurrentViewport=function(B){return B.copy(v)},this.getViewport=function(B){return B.copy(It)},this.setViewport=function(B,F,L,G){B.isVector4?It.set(B.x,B.y,B.z,B.w):It.set(B,F,L,G),gt.viewport(v.copy(It).multiplyScalar(P).round())},this.getScissor=function(B){return B.copy(Dt)},this.setScissor=function(B,F,L,G){B.isVector4?Dt.set(B.x,B.y,B.z,B.w):Dt.set(B,F,L,G),gt.scissor(z.copy(Dt).multiplyScalar(P).round())},this.getScissorTest=function(){return Ut},this.setScissorTest=function(B){gt.setScissorTest(Ut=B)},this.setOpaqueSort=function(B){At=B},this.setTransparentSort=function(B){rt=B},this.getClearColor=function(B){return B.copy(j.getClearColor())},this.setClearColor=function(){j.setClearColor(...arguments)},this.getClearAlpha=function(){return j.getClearAlpha()},this.setClearAlpha=function(){j.setClearAlpha(...arguments)},this.clear=function(B=!0,F=!0,L=!0){let G=0;if(B){let N=!1;if(T!==null){const nt=T.texture.format;N=nt===Dn||nt===hs||nt===rr}if(N){const nt=T.texture.type,ct=nt===Le||nt===ke||nt===ai||nt===ri||nt===sr||nt===ar,ft=j.getClearColor(),dt=j.getClearAlpha(),vt=ft.r,bt=ft.g,xt=ft.b;ct?(E[0]=vt,E[1]=bt,E[2]=xt,E[3]=dt,_.clearBufferuiv(_.COLOR,0,E)):(f[0]=vt,f[1]=bt,f[2]=xt,f[3]=dt,_.clearBufferiv(_.COLOR,0,f))}else G|=_.COLOR_BUFFER_BIT}F&&(G|=_.DEPTH_BUFFER_BIT),L&&(G|=_.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),_.clear(G)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",Et,!1),e.removeEventListener("webglcontextrestored",et,!1),e.removeEventListener("webglcontextcreationerror",V,!1),j.dispose(),Qt.dispose(),it.dispose(),Bt.dispose(),le.dispose(),w.dispose(),q.dispose(),Rt.dispose(),R.dispose(),W.dispose(),$.dispose(),$.removeEventListener("sessionstart",Qr),$.removeEventListener("sessionend",mr),qn.stop()};function Et(B){B.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),M=!0}function et(){console.log("THREE.WebGLRenderer: Context Restored."),M=!1;const B=Mt.autoReset,F=yt.enabled,L=yt.autoUpdate,G=yt.needsUpdate,N=yt.type;ot(),Mt.autoReset=B,yt.enabled=F,yt.autoUpdate=L,yt.needsUpdate=G,yt.type=N}function V(B){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",B.statusMessage)}function pt(B){const F=B.target;F.removeEventListener("dispose",pt),Nt(F)}function Nt(B){ie(B),Bt.remove(B)}function ie(B){const F=Bt.get(B).programs;F!==void 0&&(F.forEach(function(L){W.releaseProgram(L)}),B.isShaderMaterial&&W.releaseShaderCache(B))}this.renderBufferDirect=function(B,F,L,G,N,nt){F===null&&(F=zt);const ct=N.isMesh&&N.matrixWorld.determinant()<0,ft=jc(B,F,L,G,N);gt.setMaterial(G,ct);let dt=L.index,vt=1;if(G.wireframe===!0){if(dt=k.getWireframeAttribute(L),dt===void 0)return;vt=2}const bt=L.drawRange,xt=L.attributes.position;let Ot=bt.start*vt,$t=(bt.start+bt.count)*vt;nt!==null&&(Ot=Math.max(Ot,nt.start*vt),$t=Math.min($t,(nt.start+nt.count)*vt)),dt!==null?(Ot=Math.max(Ot,0),$t=Math.min($t,dt.count)):xt!=null&&(Ot=Math.max(Ot,0),$t=Math.min($t,xt.count));const oe=$t-Ot;if(oe<0||oe===1/0)return;Rt.setup(N,G,ft,L,dt);let ce,Vt=_t;if(dt!==null&&(ce=p.get(dt),Vt=St,Vt.setIndex(ce)),N.isMesh)G.wireframe===!0?(gt.setLineWidth(G.wireframeLinewidth*Gt()),Vt.setMode(_.LINES)):Vt.setMode(_.TRIANGLES);else if(N.isLine){let wt=G.linewidth;wt===void 0&&(wt=1),gt.setLineWidth(wt*Gt()),N.isLineSegments?Vt.setMode(_.LINES):N.isLineLoop?Vt.setMode(_.LINE_LOOP):Vt.setMode(_.LINE_STRIP)}else N.isPoints?Vt.setMode(_.POINTS):N.isSprite&&Vt.setMode(_.TRIANGLES);if(N.isBatchedMesh)if(N._multiDrawInstances!==null)TA("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),Vt.renderMultiDrawInstances(N._multiDrawStarts,N._multiDrawCounts,N._multiDrawCount,N._multiDrawInstances);else if(Pt.get("WEBGL_multi_draw"))Vt.renderMultiDraw(N._multiDrawStarts,N._multiDrawCounts,N._multiDrawCount);else{const wt=N._multiDrawStarts,Be=N._multiDrawCounts,Zt=N._multiDrawCount,$e=dt?p.get(dt).bytesPerElement:1,dA=Bt.get(G).currentProgram.getUniforms();for(let Pe=0;Pe<Zt;Pe++)dA.setValue(_,"_gl_DrawID",Pe),Vt.render(wt[Pe]/$e,Be[Pe])}else if(N.isInstancedMesh)Vt.renderInstances(Ot,oe,N.count);else if(L.isInstancedBufferGeometry){const wt=L._maxInstanceCount!==void 0?L._maxInstanceCount:1/0,Be=Math.min(L.instanceCount,wt);Vt.renderInstances(Ot,oe,Be)}else Vt.render(Ot,oe)};function jt(B,F,L){B.transparent===!0&&B.side===rn&&B.forceSinglePass===!1?(B.side=Te,B.needsUpdate=!0,Bi(B,F,L),B.side=Yn,B.needsUpdate=!0,Bi(B,F,L),B.side=rn):Bi(B,F,L)}this.compile=function(B,F,L=null){L===null&&(L=B),u=it.get(L),u.init(F),Q.push(u),L.traverseVisible(function(N){N.isLight&&N.layers.test(F.layers)&&(u.pushLight(N),N.castShadow&&u.pushShadow(N))}),B!==L&&B.traverseVisible(function(N){N.isLight&&N.layers.test(F.layers)&&(u.pushLight(N),N.castShadow&&u.pushShadow(N))}),u.setupLights();const G=new Set;return B.traverse(function(N){if(!(N.isMesh||N.isPoints||N.isLine||N.isSprite))return;const nt=N.material;if(nt)if(Array.isArray(nt))for(let ct=0;ct<nt.length;ct++){const ft=nt[ct];jt(ft,L,N),G.add(ft)}else jt(nt,L,N),G.add(nt)}),u=Q.pop(),G},this.compileAsync=function(B,F,L=null){const G=this.compile(B,F,L);return new Promise(N=>{function nt(){if(G.forEach(function(ct){Bt.get(ct).currentProgram.isReady()&&G.delete(ct)}),G.size===0){N(B);return}setTimeout(nt,10)}Pt.get("KHR_parallel_shader_compile")!==null?nt():setTimeout(nt,10)})};let je=null;function pn(B){je&&je(B)}function Qr(){qn.stop()}function mr(){qn.start()}const qn=new cc;qn.setAnimationLoop(pn),typeof self<"u"&&qn.setContext(self),this.setAnimationLoop=function(B){je=B,$.setAnimationLoop(B),B===null?qn.stop():qn.start()},$.addEventListener("sessionstart",Qr),$.addEventListener("sessionend",mr),this.render=function(B,F){if(F!==void 0&&F.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(M===!0)return;if(B.matrixWorldAutoUpdate===!0&&B.updateMatrixWorld(),F.parent===null&&F.matrixWorldAutoUpdate===!0&&F.updateMatrixWorld(),$.enabled===!0&&$.isPresenting===!0&&($.cameraAutoUpdate===!0&&$.updateCamera(F),F=$.getCamera()),B.isScene===!0&&B.onBeforeRender(m,B,F,T),u=it.get(B,Q.length),u.init(F),Q.push(u),ht.multiplyMatrices(F.projectionMatrix,F.matrixWorldInverse),J.setFromProjectionMatrix(ht),lt=this.localClippingEnabled,tt=Ct.init(this.clippingPlanes,lt),I=Qt.get(B,x.length),I.init(),x.push(I),$.enabled===!0&&$.isPresenting===!0){const nt=m.xr.getDepthSensingMesh();nt!==null&&fs(nt,F,-1/0,m.sortObjects)}fs(B,F,0,m.sortObjects),I.finish(),m.sortObjects===!0&&I.sort(At,rt),qt=$.enabled===!1||$.isPresenting===!1||$.hasDepthSensing()===!1,qt&&j.addToRenderList(I,B),this.info.render.frame++,tt===!0&&Ct.beginShadows();const L=u.state.shadowsArray;yt.render(L,B,F),tt===!0&&Ct.endShadows(),this.info.autoReset===!0&&this.info.reset();const G=I.opaque,N=I.transmissive;if(u.setupLights(),F.isArrayCamera){const nt=F.cameras;if(N.length>0)for(let ct=0,ft=nt.length;ct<ft;ct++){const dt=nt[ct];xr(G,N,B,dt)}qt&&j.render(B);for(let ct=0,ft=nt.length;ct<ft;ct++){const dt=nt[ct];yr(I,B,dt,dt.viewport)}}else N.length>0&&xr(G,N,B,F),qt&&j.render(B),yr(I,B,F);T!==null&&D===0&&(kt.updateMultisampleRenderTarget(T),kt.updateRenderTargetMipmap(T)),B.isScene===!0&&B.onAfterRender(m,B,F),Rt.resetDefaultState(),y=-1,C=null,Q.pop(),Q.length>0?(u=Q[Q.length-1],tt===!0&&Ct.setGlobalState(m.clippingPlanes,u.state.camera)):u=null,x.pop(),x.length>0?I=x[x.length-1]:I=null};function fs(B,F,L,G){if(B.visible===!1)return;if(B.layers.test(F.layers)){if(B.isGroup)L=B.renderOrder;else if(B.isLOD)B.autoUpdate===!0&&B.update(F);else if(B.isLight)u.pushLight(B),B.castShadow&&u.pushShadow(B);else if(B.isSprite){if(!B.frustumCulled||J.intersectsSprite(B)){G&&mt.setFromMatrixPosition(B.matrixWorld).applyMatrix4(ht);const ct=q.update(B),ft=B.material;ft.visible&&I.push(B,ct,ft,L,mt.z,null)}}else if((B.isMesh||B.isLine||B.isPoints)&&(!B.frustumCulled||J.intersectsObject(B))){const ct=q.update(B),ft=B.material;if(G&&(B.boundingSphere!==void 0?(B.boundingSphere===null&&B.computeBoundingSphere(),mt.copy(B.boundingSphere.center)):(ct.boundingSphere===null&&ct.computeBoundingSphere(),mt.copy(ct.boundingSphere.center)),mt.applyMatrix4(B.matrixWorld).applyMatrix4(ht)),Array.isArray(ft)){const dt=ct.groups;for(let vt=0,bt=dt.length;vt<bt;vt++){const xt=dt[vt],Ot=ft[xt.materialIndex];Ot&&Ot.visible&&I.push(B,ct,Ot,L,mt.z,xt)}}else ft.visible&&I.push(B,ct,ft,L,mt.z,null)}}const nt=B.children;for(let ct=0,ft=nt.length;ct<ft;ct++)fs(nt[ct],F,L,G)}function yr(B,F,L,G){const N=B.opaque,nt=B.transmissive,ct=B.transparent;u.setupLightsView(L),tt===!0&&Ct.setGlobalState(m.clippingPlanes,L),G&&gt.viewport(v.copy(G)),N.length>0&&fi(N,F,L),nt.length>0&&fi(nt,F,L),ct.length>0&&fi(ct,F,L),gt.buffers.depth.setTest(!0),gt.buffers.depth.setMask(!0),gt.buffers.color.setMask(!0),gt.setPolygonOffset(!1)}function xr(B,F,L,G){if((L.isScene===!0?L.overrideMaterial:null)!==null)return;u.state.transmissionRenderTarget[G.id]===void 0&&(u.state.transmissionRenderTarget[G.id]=new ln(1,1,{generateMipmaps:!0,type:Pt.has("EXT_color_buffer_half_float")||Pt.has("EXT_color_buffer_float")?ui:Le,minFilter:sA,samples:4,stencilBuffer:s,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:Wt.workingColorSpace}));const nt=u.state.transmissionRenderTarget[G.id],ct=G.viewport||v;nt.setSize(ct.z*m.transmissionResolutionScale,ct.w*m.transmissionResolutionScale);const ft=m.getRenderTarget();m.setRenderTarget(nt),m.getClearColor(Y),K=m.getClearAlpha(),K<1&&m.setClearColor(16777215,.5),m.clear(),qt&&j.render(L);const dt=m.toneMapping;m.toneMapping=Hn;const vt=G.viewport;if(G.viewport!==void 0&&(G.viewport=void 0),u.setupLightsView(G),tt===!0&&Ct.setGlobalState(m.clippingPlanes,G),fi(B,L,G),kt.updateMultisampleRenderTarget(nt),kt.updateRenderTargetMipmap(nt),Pt.has("WEBGL_multisampled_render_to_texture")===!1){let bt=!1;for(let xt=0,Ot=F.length;xt<Ot;xt++){const $t=F[xt],oe=$t.object,ce=$t.geometry,Vt=$t.material,wt=$t.group;if(Vt.side===rn&&oe.layers.test(G.layers)){const Be=Vt.side;Vt.side=Te,Vt.needsUpdate=!0,wr(oe,L,G,ce,Vt,wt),Vt.side=Be,Vt.needsUpdate=!0,bt=!0}}bt===!0&&(kt.updateMultisampleRenderTarget(nt),kt.updateRenderTargetMipmap(nt))}m.setRenderTarget(ft),m.setClearColor(Y,K),vt!==void 0&&(G.viewport=vt),m.toneMapping=dt}function fi(B,F,L){const G=F.isScene===!0?F.overrideMaterial:null;for(let N=0,nt=B.length;N<nt;N++){const ct=B[N],ft=ct.object,dt=ct.geometry,vt=ct.group;let bt=ct.material;bt.allowOverride===!0&&G!==null&&(bt=G),ft.layers.test(L.layers)&&wr(ft,F,L,dt,bt,vt)}}function wr(B,F,L,G,N,nt){B.onBeforeRender(m,F,L,G,N,nt),B.modelViewMatrix.multiplyMatrices(L.matrixWorldInverse,B.matrixWorld),B.normalMatrix.getNormalMatrix(B.modelViewMatrix),N.onBeforeRender(m,F,L,G,B,nt),N.transparent===!0&&N.side===rn&&N.forceSinglePass===!1?(N.side=Te,N.needsUpdate=!0,m.renderBufferDirect(L,F,G,N,B,nt),N.side=Yn,N.needsUpdate=!0,m.renderBufferDirect(L,F,G,N,B,nt),N.side=rn):m.renderBufferDirect(L,F,G,N,B,nt),B.onAfterRender(m,F,L,G,N,nt)}function Bi(B,F,L){F.isScene!==!0&&(F=zt);const G=Bt.get(B),N=u.state.lights,nt=u.state.shadowsArray,ct=N.state.version,ft=W.getParameters(B,N.state,nt,F,L),dt=W.getProgramCacheKey(ft);let vt=G.programs;G.environment=B.isMeshStandardMaterial?F.environment:null,G.fog=F.fog,G.envMap=(B.isMeshStandardMaterial?w:le).get(B.envMap||G.environment),G.envMapRotation=G.environment!==null&&B.envMap===null?F.environmentRotation:B.envMapRotation,vt===void 0&&(B.addEventListener("dispose",pt),vt=new Map,G.programs=vt);let bt=vt.get(dt);if(bt!==void 0){if(G.currentProgram===bt&&G.lightsStateVersion===ct)return Dr(B,ft),bt}else ft.uniforms=W.getUniforms(B),B.onBeforeCompile(ft,m),bt=W.acquireProgram(ft,dt),vt.set(dt,bt),G.uniforms=ft.uniforms;const xt=G.uniforms;return(!B.isShaderMaterial&&!B.isRawShaderMaterial||B.clipping===!0)&&(xt.clippingPlanes=Ct.uniform),Dr(B,ft),G.needsLights=tl(B),G.lightsStateVersion=ct,G.needsLights&&(xt.ambientLightColor.value=N.state.ambient,xt.lightProbe.value=N.state.probe,xt.directionalLights.value=N.state.directional,xt.directionalLightShadows.value=N.state.directionalShadow,xt.spotLights.value=N.state.spot,xt.spotLightShadows.value=N.state.spotShadow,xt.rectAreaLights.value=N.state.rectArea,xt.ltc_1.value=N.state.rectAreaLTC1,xt.ltc_2.value=N.state.rectAreaLTC2,xt.pointLights.value=N.state.point,xt.pointLightShadows.value=N.state.pointShadow,xt.hemisphereLights.value=N.state.hemi,xt.directionalShadowMap.value=N.state.directionalShadowMap,xt.directionalShadowMatrix.value=N.state.directionalShadowMatrix,xt.spotShadowMap.value=N.state.spotShadowMap,xt.spotLightMatrix.value=N.state.spotLightMatrix,xt.spotLightMap.value=N.state.spotLightMap,xt.pointShadowMap.value=N.state.pointShadowMap,xt.pointShadowMatrix.value=N.state.pointShadowMatrix),G.currentProgram=bt,G.uniformsList=null,bt}function Sr(B){if(B.uniformsList===null){const F=B.currentProgram.getUniforms();B.uniformsList=$i.seqWithValue(F.seq,B.uniforms)}return B.uniformsList}function Dr(B,F){const L=Bt.get(B);L.outputColorSpace=F.outputColorSpace,L.batching=F.batching,L.batchingColor=F.batchingColor,L.instancing=F.instancing,L.instancingColor=F.instancingColor,L.instancingMorph=F.instancingMorph,L.skinning=F.skinning,L.morphTargets=F.morphTargets,L.morphNormals=F.morphNormals,L.morphColors=F.morphColors,L.morphTargetsCount=F.morphTargetsCount,L.numClippingPlanes=F.numClippingPlanes,L.numIntersection=F.numClipIntersection,L.vertexAlphas=F.vertexAlphas,L.vertexTangents=F.vertexTangents,L.toneMapping=F.toneMapping}function jc(B,F,L,G,N){F.isScene!==!0&&(F=zt),kt.resetTextureUnits();const nt=F.fog,ct=G.isMeshStandardMaterial?F.environment:null,ft=T===null?m.outputColorSpace:T.isXRRenderTarget===!0?T.texture.colorSpace:HA,dt=(G.isMeshStandardMaterial?w:le).get(G.envMap||ct),vt=G.vertexColors===!0&&!!L.attributes.color&&L.attributes.color.itemSize===4,bt=!!L.attributes.tangent&&(!!G.normalMap||G.anisotropy>0),xt=!!L.morphAttributes.position,Ot=!!L.morphAttributes.normal,$t=!!L.morphAttributes.color;let oe=Hn;G.toneMapped&&(T===null||T.isXRRenderTarget===!0)&&(oe=m.toneMapping);const ce=L.morphAttributes.position||L.morphAttributes.normal||L.morphAttributes.color,Vt=ce!==void 0?ce.length:0,wt=Bt.get(G),Be=u.state.lights;if(tt===!0&&(lt===!0||B!==C)){const Me=B===C&&G.id===y;Ct.setState(G,B,Me)}let Zt=!1;G.version===wt.__version?(wt.needsLights&&wt.lightsStateVersion!==Be.state.version||wt.outputColorSpace!==ft||N.isBatchedMesh&&wt.batching===!1||!N.isBatchedMesh&&wt.batching===!0||N.isBatchedMesh&&wt.batchingColor===!0&&N.colorTexture===null||N.isBatchedMesh&&wt.batchingColor===!1&&N.colorTexture!==null||N.isInstancedMesh&&wt.instancing===!1||!N.isInstancedMesh&&wt.instancing===!0||N.isSkinnedMesh&&wt.skinning===!1||!N.isSkinnedMesh&&wt.skinning===!0||N.isInstancedMesh&&wt.instancingColor===!0&&N.instanceColor===null||N.isInstancedMesh&&wt.instancingColor===!1&&N.instanceColor!==null||N.isInstancedMesh&&wt.instancingMorph===!0&&N.morphTexture===null||N.isInstancedMesh&&wt.instancingMorph===!1&&N.morphTexture!==null||wt.envMap!==dt||G.fog===!0&&wt.fog!==nt||wt.numClippingPlanes!==void 0&&(wt.numClippingPlanes!==Ct.numPlanes||wt.numIntersection!==Ct.numIntersection)||wt.vertexAlphas!==vt||wt.vertexTangents!==bt||wt.morphTargets!==xt||wt.morphNormals!==Ot||wt.morphColors!==$t||wt.toneMapping!==oe||wt.morphTargetsCount!==Vt)&&(Zt=!0):(Zt=!0,wt.__version=G.version);let $e=wt.currentProgram;Zt===!0&&($e=Bi(G,F,N));let dA=!1,Pe=!1,VA=!1;const re=$e.getUniforms(),Ve=wt.uniforms;if(gt.useProgram($e.program)&&(dA=!0,Pe=!0,VA=!0),G.id!==y&&(y=G.id,Pe=!0),dA||C!==B){gt.buffers.depth.getReversed()?(Z.copy(B.projectionMatrix),Xl(Z),Zl(Z),re.setValue(_,"projectionMatrix",Z)):re.setValue(_,"projectionMatrix",B.projectionMatrix),re.setValue(_,"viewMatrix",B.matrixWorldInverse);const Re=re.map.cameraPosition;Re!==void 0&&Re.setValue(_,Ft.setFromMatrixPosition(B.matrixWorld)),Yt.logarithmicDepthBuffer&&re.setValue(_,"logDepthBufFC",2/(Math.log(B.far+1)/Math.LN2)),(G.isMeshPhongMaterial||G.isMeshToonMaterial||G.isMeshLambertMaterial||G.isMeshBasicMaterial||G.isMeshStandardMaterial||G.isShaderMaterial)&&re.setValue(_,"isOrthographic",B.isOrthographicCamera===!0),C!==B&&(C=B,Pe=!0,VA=!0)}if(N.isSkinnedMesh){re.setOptional(_,N,"bindMatrix"),re.setOptional(_,N,"bindMatrixInverse");const Me=N.skeleton;Me&&(Me.boneTexture===null&&Me.computeBoneTexture(),re.setValue(_,"boneTexture",Me.boneTexture,kt))}N.isBatchedMesh&&(re.setOptional(_,N,"batchingTexture"),re.setValue(_,"batchingTexture",N._matricesTexture,kt),re.setOptional(_,N,"batchingIdTexture"),re.setValue(_,"batchingIdTexture",N._indirectTexture,kt),re.setOptional(_,N,"batchingColorTexture"),N._colorsTexture!==null&&re.setValue(_,"batchingColorTexture",N._colorsTexture,kt));const Ke=L.morphAttributes;if((Ke.position!==void 0||Ke.normal!==void 0||Ke.color!==void 0)&&ut.update(N,L,$e),(Pe||wt.receiveShadow!==N.receiveShadow)&&(wt.receiveShadow=N.receiveShadow,re.setValue(_,"receiveShadow",N.receiveShadow)),G.isMeshGouraudMaterial&&G.envMap!==null&&(Ve.envMap.value=dt,Ve.flipEnvMap.value=dt.isCubeTexture&&dt.isRenderTargetTexture===!1?-1:1),G.isMeshStandardMaterial&&G.envMap===null&&F.environment!==null&&(Ve.envMapIntensity.value=F.environmentIntensity),Pe&&(re.setValue(_,"toneMappingExposure",m.toneMappingExposure),wt.needsLights&&$c(Ve,VA),nt&&G.fog===!0&&O.refreshFogUniforms(Ve,nt),O.refreshMaterialUniforms(Ve,G,P,X,u.state.transmissionRenderTarget[B.id]),$i.upload(_,Sr(wt),Ve,kt)),G.isShaderMaterial&&G.uniformsNeedUpdate===!0&&($i.upload(_,Sr(wt),Ve,kt),G.uniformsNeedUpdate=!1),G.isSpriteMaterial&&re.setValue(_,"center",N.center),re.setValue(_,"modelViewMatrix",N.modelViewMatrix),re.setValue(_,"normalMatrix",N.normalMatrix),re.setValue(_,"modelMatrix",N.matrixWorld),G.isShaderMaterial||G.isRawShaderMaterial){const Me=G.uniformsGroups;for(let Re=0,Bs=Me.length;Re<Bs;Re++){const Vn=Me[Re];R.update(Vn,$e),R.bind(Vn,$e)}}return $e}function $c(B,F){B.ambientLightColor.needsUpdate=F,B.lightProbe.needsUpdate=F,B.directionalLights.needsUpdate=F,B.directionalLightShadows.needsUpdate=F,B.pointLights.needsUpdate=F,B.pointLightShadows.needsUpdate=F,B.spotLights.needsUpdate=F,B.spotLightShadows.needsUpdate=F,B.rectAreaLights.needsUpdate=F,B.hemisphereLights.needsUpdate=F}function tl(B){return B.isMeshLambertMaterial||B.isMeshToonMaterial||B.isMeshPhongMaterial||B.isMeshStandardMaterial||B.isShadowMaterial||B.isShaderMaterial&&B.lights===!0}this.getActiveCubeFace=function(){return S},this.getActiveMipmapLevel=function(){return D},this.getRenderTarget=function(){return T},this.setRenderTargetTextures=function(B,F,L){const G=Bt.get(B);G.__autoAllocateDepthBuffer=B.resolveDepthBuffer===!1,G.__autoAllocateDepthBuffer===!1&&(G.__useRenderToTexture=!1),Bt.get(B.texture).__webglTexture=F,Bt.get(B.depthTexture).__webglTexture=G.__autoAllocateDepthBuffer?void 0:L,G.__hasExternalTextures=!0},this.setRenderTargetFramebuffer=function(B,F){const L=Bt.get(B);L.__webglFramebuffer=F,L.__useDefaultFramebuffer=F===void 0};const el=_.createFramebuffer();this.setRenderTarget=function(B,F=0,L=0){T=B,S=F,D=L;let G=!0,N=null,nt=!1,ct=!1;if(B){const dt=Bt.get(B);if(dt.__useDefaultFramebuffer!==void 0)gt.bindFramebuffer(_.FRAMEBUFFER,null),G=!1;else if(dt.__webglFramebuffer===void 0)kt.setupRenderTarget(B);else if(dt.__hasExternalTextures)kt.rebindTextures(B,Bt.get(B.texture).__webglTexture,Bt.get(B.depthTexture).__webglTexture);else if(B.depthBuffer){const xt=B.depthTexture;if(dt.__boundDepthTexture!==xt){if(xt!==null&&Bt.has(xt)&&(B.width!==xt.image.width||B.height!==xt.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");kt.setupDepthRenderbuffer(B)}}const vt=B.texture;(vt.isData3DTexture||vt.isDataArrayTexture||vt.isCompressedArrayTexture)&&(ct=!0);const bt=Bt.get(B).__webglFramebuffer;B.isWebGLCubeRenderTarget?(Array.isArray(bt[F])?N=bt[F][L]:N=bt[F],nt=!0):B.samples>0&&kt.useMultisampledRTT(B)===!1?N=Bt.get(B).__webglMultisampledFramebuffer:Array.isArray(bt)?N=bt[L]:N=bt,v.copy(B.viewport),z.copy(B.scissor),U=B.scissorTest}else v.copy(It).multiplyScalar(P).floor(),z.copy(Dt).multiplyScalar(P).floor(),U=Ut;if(L!==0&&(N=el),gt.bindFramebuffer(_.FRAMEBUFFER,N)&&G&&gt.drawBuffers(B,N),gt.viewport(v),gt.scissor(z),gt.setScissorTest(U),nt){const dt=Bt.get(B.texture);_.framebufferTexture2D(_.FRAMEBUFFER,_.COLOR_ATTACHMENT0,_.TEXTURE_CUBE_MAP_POSITIVE_X+F,dt.__webglTexture,L)}else if(ct){const dt=Bt.get(B.texture),vt=F;_.framebufferTextureLayer(_.FRAMEBUFFER,_.COLOR_ATTACHMENT0,dt.__webglTexture,L,vt)}else if(B!==null&&L!==0){const dt=Bt.get(B.texture);_.framebufferTexture2D(_.FRAMEBUFFER,_.COLOR_ATTACHMENT0,_.TEXTURE_2D,dt.__webglTexture,L)}y=-1},this.readRenderTargetPixels=function(B,F,L,G,N,nt,ct,ft=0){if(!(B&&B.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let dt=Bt.get(B).__webglFramebuffer;if(B.isWebGLCubeRenderTarget&&ct!==void 0&&(dt=dt[ct]),dt){gt.bindFramebuffer(_.FRAMEBUFFER,dt);try{const vt=B.textures[ft],bt=vt.format,xt=vt.type;if(!Yt.textureFormatReadable(bt)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!Yt.textureTypeReadable(xt)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}F>=0&&F<=B.width-G&&L>=0&&L<=B.height-N&&(B.textures.length>1&&_.readBuffer(_.COLOR_ATTACHMENT0+ft),_.readPixels(F,L,G,N,st.convert(bt),st.convert(xt),nt))}finally{const vt=T!==null?Bt.get(T).__webglFramebuffer:null;gt.bindFramebuffer(_.FRAMEBUFFER,vt)}}},this.readRenderTargetPixelsAsync=async function(B,F,L,G,N,nt,ct,ft=0){if(!(B&&B.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let dt=Bt.get(B).__webglFramebuffer;if(B.isWebGLCubeRenderTarget&&ct!==void 0&&(dt=dt[ct]),dt)if(F>=0&&F<=B.width-G&&L>=0&&L<=B.height-N){gt.bindFramebuffer(_.FRAMEBUFFER,dt);const vt=B.textures[ft],bt=vt.format,xt=vt.type;if(!Yt.textureFormatReadable(bt))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!Yt.textureTypeReadable(xt))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");const Ot=_.createBuffer();_.bindBuffer(_.PIXEL_PACK_BUFFER,Ot),_.bufferData(_.PIXEL_PACK_BUFFER,nt.byteLength,_.STREAM_READ),B.textures.length>1&&_.readBuffer(_.COLOR_ATTACHMENT0+ft),_.readPixels(F,L,G,N,st.convert(bt),st.convert(xt),0);const $t=T!==null?Bt.get(T).__webglFramebuffer:null;gt.bindFramebuffer(_.FRAMEBUFFER,$t);const oe=_.fenceSync(_.SYNC_GPU_COMMANDS_COMPLETE,0);return _.flush(),await Wl(_,oe,4),_.bindBuffer(_.PIXEL_PACK_BUFFER,Ot),_.getBufferSubData(_.PIXEL_PACK_BUFFER,0,nt),_.deleteBuffer(Ot),_.deleteSync(oe),nt}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")},this.copyFramebufferToTexture=function(B,F=null,L=0){const G=Math.pow(2,-L),N=Math.floor(B.image.width*G),nt=Math.floor(B.image.height*G),ct=F!==null?F.x:0,ft=F!==null?F.y:0;kt.setTexture2D(B,0),_.copyTexSubImage2D(_.TEXTURE_2D,L,0,0,ct,ft,N,nt),gt.unbindTexture()};const nl=_.createFramebuffer(),Al=_.createFramebuffer();this.copyTextureToTexture=function(B,F,L=null,G=null,N=0,nt=null){nt===null&&(N!==0?(TA("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),nt=N,N=0):nt=0);let ct,ft,dt,vt,bt,xt,Ot,$t,oe;const ce=B.isCompressedTexture?B.mipmaps[nt]:B.image;if(L!==null)ct=L.max.x-L.min.x,ft=L.max.y-L.min.y,dt=L.isBox3?L.max.z-L.min.z:1,vt=L.min.x,bt=L.min.y,xt=L.isBox3?L.min.z:0;else{const Ke=Math.pow(2,-N);ct=Math.floor(ce.width*Ke),ft=Math.floor(ce.height*Ke),B.isDataArrayTexture?dt=ce.depth:B.isData3DTexture?dt=Math.floor(ce.depth*Ke):dt=1,vt=0,bt=0,xt=0}G!==null?(Ot=G.x,$t=G.y,oe=G.z):(Ot=0,$t=0,oe=0);const Vt=st.convert(F.format),wt=st.convert(F.type);let Be;F.isData3DTexture?(kt.setTexture3D(F,0),Be=_.TEXTURE_3D):F.isDataArrayTexture||F.isCompressedArrayTexture?(kt.setTexture2DArray(F,0),Be=_.TEXTURE_2D_ARRAY):(kt.setTexture2D(F,0),Be=_.TEXTURE_2D),_.pixelStorei(_.UNPACK_FLIP_Y_WEBGL,F.flipY),_.pixelStorei(_.UNPACK_PREMULTIPLY_ALPHA_WEBGL,F.premultiplyAlpha),_.pixelStorei(_.UNPACK_ALIGNMENT,F.unpackAlignment);const Zt=_.getParameter(_.UNPACK_ROW_LENGTH),$e=_.getParameter(_.UNPACK_IMAGE_HEIGHT),dA=_.getParameter(_.UNPACK_SKIP_PIXELS),Pe=_.getParameter(_.UNPACK_SKIP_ROWS),VA=_.getParameter(_.UNPACK_SKIP_IMAGES);_.pixelStorei(_.UNPACK_ROW_LENGTH,ce.width),_.pixelStorei(_.UNPACK_IMAGE_HEIGHT,ce.height),_.pixelStorei(_.UNPACK_SKIP_PIXELS,vt),_.pixelStorei(_.UNPACK_SKIP_ROWS,bt),_.pixelStorei(_.UNPACK_SKIP_IMAGES,xt);const re=B.isDataArrayTexture||B.isData3DTexture,Ve=F.isDataArrayTexture||F.isData3DTexture;if(B.isDepthTexture){const Ke=Bt.get(B),Me=Bt.get(F),Re=Bt.get(Ke.__renderTarget),Bs=Bt.get(Me.__renderTarget);gt.bindFramebuffer(_.READ_FRAMEBUFFER,Re.__webglFramebuffer),gt.bindFramebuffer(_.DRAW_FRAMEBUFFER,Bs.__webglFramebuffer);for(let Vn=0;Vn<dt;Vn++)re&&(_.framebufferTextureLayer(_.READ_FRAMEBUFFER,_.COLOR_ATTACHMENT0,Bt.get(B).__webglTexture,N,xt+Vn),_.framebufferTextureLayer(_.DRAW_FRAMEBUFFER,_.COLOR_ATTACHMENT0,Bt.get(F).__webglTexture,nt,oe+Vn)),_.blitFramebuffer(vt,bt,ct,ft,Ot,$t,ct,ft,_.DEPTH_BUFFER_BIT,_.NEAREST);gt.bindFramebuffer(_.READ_FRAMEBUFFER,null),gt.bindFramebuffer(_.DRAW_FRAMEBUFFER,null)}else if(N!==0||B.isRenderTargetTexture||Bt.has(B)){const Ke=Bt.get(B),Me=Bt.get(F);gt.bindFramebuffer(_.READ_FRAMEBUFFER,nl),gt.bindFramebuffer(_.DRAW_FRAMEBUFFER,Al);for(let Re=0;Re<dt;Re++)re?_.framebufferTextureLayer(_.READ_FRAMEBUFFER,_.COLOR_ATTACHMENT0,Ke.__webglTexture,N,xt+Re):_.framebufferTexture2D(_.READ_FRAMEBUFFER,_.COLOR_ATTACHMENT0,_.TEXTURE_2D,Ke.__webglTexture,N),Ve?_.framebufferTextureLayer(_.DRAW_FRAMEBUFFER,_.COLOR_ATTACHMENT0,Me.__webglTexture,nt,oe+Re):_.framebufferTexture2D(_.DRAW_FRAMEBUFFER,_.COLOR_ATTACHMENT0,_.TEXTURE_2D,Me.__webglTexture,nt),N!==0?_.blitFramebuffer(vt,bt,ct,ft,Ot,$t,ct,ft,_.COLOR_BUFFER_BIT,_.NEAREST):Ve?_.copyTexSubImage3D(Be,nt,Ot,$t,oe+Re,vt,bt,ct,ft):_.copyTexSubImage2D(Be,nt,Ot,$t,vt,bt,ct,ft);gt.bindFramebuffer(_.READ_FRAMEBUFFER,null),gt.bindFramebuffer(_.DRAW_FRAMEBUFFER,null)}else Ve?B.isDataTexture||B.isData3DTexture?_.texSubImage3D(Be,nt,Ot,$t,oe,ct,ft,dt,Vt,wt,ce.data):F.isCompressedArrayTexture?_.compressedTexSubImage3D(Be,nt,Ot,$t,oe,ct,ft,dt,Vt,ce.data):_.texSubImage3D(Be,nt,Ot,$t,oe,ct,ft,dt,Vt,wt,ce):B.isDataTexture?_.texSubImage2D(_.TEXTURE_2D,nt,Ot,$t,ct,ft,Vt,wt,ce.data):B.isCompressedTexture?_.compressedTexSubImage2D(_.TEXTURE_2D,nt,Ot,$t,ce.width,ce.height,Vt,ce.data):_.texSubImage2D(_.TEXTURE_2D,nt,Ot,$t,ct,ft,Vt,wt,ce);_.pixelStorei(_.UNPACK_ROW_LENGTH,Zt),_.pixelStorei(_.UNPACK_IMAGE_HEIGHT,$e),_.pixelStorei(_.UNPACK_SKIP_PIXELS,dA),_.pixelStorei(_.UNPACK_SKIP_ROWS,Pe),_.pixelStorei(_.UNPACK_SKIP_IMAGES,VA),nt===0&&F.generateMipmaps&&_.generateMipmap(Be),gt.unbindTexture()},this.copyTextureToTexture3D=function(B,F,L=null,G=null,N=0){return TA('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(B,F,L,G,N)},this.initRenderTarget=function(B){Bt.get(B).__webglFramebuffer===void 0&&kt.setupRenderTarget(B)},this.initTexture=function(B){B.isCubeTexture?kt.setTextureCube(B,0):B.isData3DTexture?kt.setTexture3D(B,0):B.isDataArrayTexture||B.isCompressedArrayTexture?kt.setTexture2DArray(B,0):kt.setTexture2D(B,0),gt.unbindTexture()},this.resetState=function(){S=0,D=0,T=null,gt.reset(),Rt.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Sn}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorSpace=Wt._getDrawingBufferColorSpace(t),e.unpackColorSpace=Wt._getUnpackColorSpace()}}let Mn;const dc=typeof TextDecoder<"u"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};typeof TextDecoder<"u"&&dc.decode();let ti=null;function hE(){return(ti===null||ti.byteLength===0)&&(ti=new Uint8Array(Mn.memory.buffer)),ti}function uE(A,t){return A=A>>>0,dc.decode(hE().subarray(A,A+t))}function dE(A,t,e,n,i,s,a,r,o,c,g){return Mn.raycast_splats(A,t,e,n,i,s,a,r,o,c,g)}async function IE(A,t){if(typeof Response=="function"&&A instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(A,t)}catch(n){if(A.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",n);else throw n}const e=await A.arrayBuffer();return await WebAssembly.instantiate(e,t)}else{const e=await WebAssembly.instantiate(A,t);return e instanceof WebAssembly.Instance?{instance:e,module:A}:e}}function EE(){const A={};return A.wbg={},A.wbg.__wbg_buffer_609cc3eee51ed158=function(t){return t.buffer},A.wbg.__wbg_length_3b4f022188ae8db6=function(t){return t.length},A.wbg.__wbg_length_6ca527665d89694d=function(t){return t.length},A.wbg.__wbg_length_8cfd2c6409af88ad=function(t){return t.length},A.wbg.__wbg_new_9fee97a409b32b68=function(t){return new Uint16Array(t)},A.wbg.__wbg_new_e3b321dcfef89fc7=function(t){return new Uint32Array(t)},A.wbg.__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354=function(t,e,n){return new Float32Array(t,e>>>0,n>>>0)},A.wbg.__wbg_newwithbyteoffsetandlength_f1dead44d1fc7212=function(t,e,n){return new Uint32Array(t,e>>>0,n>>>0)},A.wbg.__wbg_newwithlength_5a5efe313cfd59f1=function(t){return new Float32Array(t>>>0)},A.wbg.__wbg_set_10bad9bee0e9c58b=function(t,e,n){t.set(e,n>>>0)},A.wbg.__wbg_set_d23661d19148b229=function(t,e,n){t.set(e,n>>>0)},A.wbg.__wbg_set_f4f1f0daa30696fc=function(t,e,n){t.set(e,n>>>0)},A.wbg.__wbg_subarray_3aaeec89bb2544f0=function(t,e,n){return t.subarray(e>>>0,n>>>0)},A.wbg.__wbg_subarray_769e1e0f81bb259b=function(t,e,n){return t.subarray(e>>>0,n>>>0)},A.wbg.__wbindgen_init_externref_table=function(){const t=Mn.__wbindgen_export_0,e=t.grow(4);t.set(0,void 0),t.set(e+0,void 0),t.set(e+1,null),t.set(e+2,!0),t.set(e+3,!1)},A.wbg.__wbindgen_memory=function(){return Mn.memory},A.wbg.__wbindgen_throw=function(t,e){throw new Error(uE(t,e))},A}function pE(A,t){return Mn=A.exports,Ic.__wbindgen_wasm_module=t,ti=null,Mn.__wbindgen_start(),Mn}async function Ic(A){if(Mn!==void 0)return Mn;typeof A<"u"&&(Object.getPrototypeOf(A)===Object.prototype?{module_or_path:A}=A:console.warn("using deprecated parameters for the initialization function; pass a single object instead")),typeof A>"u"&&(A=new URL("data:application/wasm;base64,",import.meta.url));const t=EE();(typeof A=="string"||typeof Request=="function"&&A instanceof Request||typeof URL=="function"&&A instanceof URL)&&(A=fetch(A));const{instance:e,module:n}=await IE(await A,t);return pE(e,n)}const hA=-9,fE=9,UA=(fE-hA)/254,BE=11,CE=11,Ae=1<<BE,aA=1<<CE,QE=1;function mE(A){return A==="bool"||A==="bvec2"||A==="bvec3"||A==="bvec4"}function rA(A){return A==="int"||A==="ivec2"||A==="ivec3"||A==="ivec4"}function oA(A){return A==="uint"||A==="uvec2"||A==="uvec3"||A==="uvec4"}function yE(A){return A==="float"||A==="vec2"||A==="vec3"||A==="vec4"}function xE(A){return A==="mat2"||A==="mat2x2"||A==="mat2x3"||A==="mat2x4"||A==="mat3"||A==="mat3x2"||A==="mat3x3"||A==="mat3x4"||A==="mat4"||A==="mat4x2"||A==="mat4x3"||A==="mat4x4"}function li(A){return yE(A)||xE(A)}function MA(A){return A==="mat2"||A==="mat2x2"}function vA(A){return A==="mat3"||A==="mat3x3"}function bA(A){return A==="mat4"||A==="mat4x4"}function wE(A){switch(A){case"vec2":return"float";case"vec3":return"float";case"vec4":return"float";case"ivec2":return"int";case"ivec3":return"int";case"ivec4":return"int";case"uvec2":return"uint";case"uvec3":return"uint";case"uvec4":return"uint";default:throw new Error(`Invalid vector type: ${A}`)}}function SE(A){switch(A){case"vec2":case"ivec2":case"uvec2":return 2;case"vec3":case"ivec3":case"uvec3":return 3;case"vec4":case"ivec4":case"uvec4":return 4;default:throw new Error(`Invalid vector type: ${A}`)}}function he(A){return Math.trunc(A).toString()}function ue(A){return`${Math.max(0,Math.trunc(A)).toString()}u`}function Kt(A){return A===Number.POSITIVE_INFINITY?"INFINITY":A===Number.NEGATIVE_INFINITY?"-INFINITY":Number.isInteger(A)?A.toFixed(1):A.toString()}function Gn(A){return A instanceof cA?A.type:A.dynoOut().type}class cA{constructor(t){this.__isDynoValue=!0,this.type=t}}class Ue extends cA{constructor(t,e){super(t.outTypes[e]),this.dyno=t,this.key=e}}class ts extends cA{constructor(t,e){super(t),this.literal=e}getLiteral(){return this.literal}}class DE extends ts{constructor(t,e){super(t,""),this.value=e}getLiteral(){const{type:t,value:e}=this;switch(t){case"bool":return e?"true":"false";case"uint":return ue(e);case"int":return he(e);case"float":return Kt(e);case"bvec2":{const n=e;return`bvec2(${n[0]}, ${n[1]})`}case"uvec2":{if(e instanceof Xt)return`uvec2(${ue(e.x)}, ${ue(e.y)})`;const n=e;return`uvec2(${ue(n[0])}, ${ue(n[1])})`}case"ivec2":{if(e instanceof Xt)return`ivec2(${he(e.x)}, ${he(e.y)})`;const n=e;return`ivec2(${he(n[0])}, ${he(n[1])})`}case"vec2":{if(e instanceof Xt)return`vec2(${Kt(e.x)}, ${Kt(e.y)})`;const n=e;return`vec2(${Kt(n[0])}, ${Kt(n[1])})`}case"bvec3":{const n=e;return`bvec3(${n[0]}, ${n[1]}, ${n[2]})`}case"uvec3":{if(e instanceof b)return`uvec3(${ue(e.x)}, ${ue(e.y)}, ${ue(e.z)})`;const n=e;return`uvec3(${ue(n[0])}, ${ue(n[1])}, ${ue(n[2])})`}case"ivec3":{if(e instanceof b)return`ivec3(${he(e.x)}, ${he(e.y)}, ${he(e.z)})`;const n=e;return`ivec3(${he(n[0])}, ${he(n[1])}, ${he(n[2])})`}case"vec3":{if(e instanceof b)return`vec3(${Kt(e.x)}, ${Kt(e.y)}, ${Kt(e.z)})`;const n=e;return`vec3(${Kt(n[0])}, ${Kt(n[1])}, ${Kt(n[2])})`}case"bvec4":{const n=e;return`bvec4(${n[0]}, ${n[1]}, ${n[2]}, ${n[3]})`}case"uvec4":{if(e instanceof te)return`uvec4(${ue(e.x)}, ${ue(e.y)}, ${ue(e.z)}, ${ue(e.w)})`;const n=e;return`uvec4(${ue(n[0])}, ${ue(n[1])}, ${ue(n[2])}, ${ue(n[3])})`}case"ivec4":{if(e instanceof te)return`ivec4(${he(e.x)}, ${he(e.y)}, ${he(e.z)}, ${he(e.w)})`;const n=e;return`ivec4(${he(n[0])}, ${he(n[1])}, ${he(n[2])}, ${he(n[3])})`}case"vec4":{if(e instanceof te)return`vec4(${Kt(e.x)}, ${Kt(e.y)}, ${Kt(e.z)}, ${Kt(e.w)})`;if(e instanceof fe)return`vec4(${Kt(e.x)}, ${Kt(e.y)}, ${Kt(e.z)}, ${Kt(e.w)})`;const n=e;return`vec4(${Kt(n[0])}, ${Kt(n[1])}, ${Kt(n[2])}, ${Kt(n[3])})`}case"mat2":case"mat2x2":{const n=e,i=n instanceof gr?n.elements:e,s=new Array(4).fill(0).map((a,r)=>Kt(i[r]));return`${t}(${s.join(", ")})`}case"mat2x3":{const n=e,i=new Array(6).fill(0).map((s,a)=>Kt(n[a]));return`${t}(${i.join(", ")})`}case"mat2x4":{const n=e,i=new Array(8).fill(0).map((s,a)=>Kt(n[a]));return`${t}(${i.join(", ")})`}case"mat3":case"mat3x3":{const n=e,i=n instanceof Tt?n.elements:e,s=new Array(9).fill(0).map((a,r)=>Kt(i[r]));return`${t}(${s.join(", ")})`}case"mat3x2":{const n=e,i=new Array(6).fill(0).map((s,a)=>Kt(n[a]));return`${t}(${i.join(", ")})`}case"mat3x4":{const n=e,i=new Array(12).fill(0).map((s,a)=>Kt(n[a]));return`${t}(${i.join(", ")})`}case"mat4":case"mat4x4":{const n=e,i=n instanceof ne?n.elements:e,s=new Array(16).fill(0).map((a,r)=>Kt(i[r]));return`${t}(${s.join(", ")})`}case"mat4x2":{const n=e,i=new Array(8).fill(0).map((s,a)=>Kt(n[a]));return`${t}(${i.join(", ")})`}case"mat4x3":{const n=e,i=new Array(12).fill(0).map((s,a)=>Kt(n[a]));return`${t}(${i.join(", ")})`}default:throw new Error(`Type not implemented: ${String(t)}`)}}}function Ka(A,t){return new DE(A,t)}function zi(A){const t=String(A);if(mE(A))return`${t}(false)`;if(li(A))return`${t}(0.0)`;if(rA(A))return`${t}(0)`;if(oA(A))return`${t}(0u)`;throw new Error(`Type not implemented: ${t}`)}const xo="    ";class _E{constructor({indent:t}={}){this.globals=new Set,this.statements=[],this.uniforms={},this.declares=new Set,this.updaters=[],this.sequence=0,this.indent=xo,this.indent=t??xo}nextSequence(){return this.sequence++}}class xe{constructor({inTypes:t,outTypes:e,inputs:n,update:i,globals:s,statements:a,generate:r}){this.inTypes=t??{},this.outTypes=e??{},this.inputs=n??{},this.update=i,this.globals=s,this.statements=a,this.generate=r??(({inputs:o,outputs:c,compile:g})=>{var l,h;return{globals:(l=this.globals)==null?void 0:l.call(this,{inputs:o,outputs:c,compile:g}),statements:(h=this.statements)==null?void 0:h.call(this,{inputs:o,outputs:c,compile:g})}})}get outputs(){const t={};for(const e in this.outTypes)t[e]=new Ue(this,e);return t}apply(t){return Object.assign(this.inputs,t),this.outputs}compile({inputs:t,outputs:e,compile:n}){const i=[`// ${this.constructor.name}(${Object.values(t).join(", ")}) => (${Object.values(e).join(", ")})`],s=[];for(const c in e){const g=e[c];g&&!n.declares.has(g)&&(n.declares.add(g),s.push(c))}const{globals:a,statements:r,uniforms:o}=this.generate({inputs:t,outputs:e,compile:n});for(const c of a??[])n.globals.add(c);for(const c in o)n.uniforms[c]=o[c];this.update&&n.updaters.push(this.update);for(const c of s){const g=e[c];g&&(n.uniforms[g]||i.push(`${Ec(g,this.outTypes[c])};`))}return r!=null&&r.length&&(i.push("{"),i.push(...r.map(c=>n.indent+c)),i.push("}")),i}}class ME extends xe{constructor({inTypes:t,outTypes:e,inputs:n,update:i,globals:s,construct:a}){super({inTypes:t,outTypes:e,inputs:n,update:i,globals:s,generate:r=>this.generateBlock(r)}),this.construct=a}generateBlock({inputs:t,outputs:e,compile:n}){var i,s;const a={},r={};for(const I in t)t[I]!=null&&(a[I]=new ts(this.inTypes[I],t[I]));for(const I in e)e[I]!=null&&(r[I]=new cA(this.outTypes[I]));const o={roots:[]},c=this.construct(a,r,o);for(const I of((i=this.globals)==null?void 0:i.call(this,{inputs:t,outputs:e,compile:n}))??[])n.globals.add(I);const g=[],l=new Map;function h(I,u,x){let Q=l.get(I);if(!Q){Q={sequence:n.nextSequence(),outNames:new Map,newOuts:new Set},l.set(I,Q);for(const m in I.inputs){let M=I.inputs[m];for(;M;){if(M instanceof cA){M instanceof Ue&&h(M.dyno,M.key);break}M=M.dynoOut()}}g.push(I)}u&&(x||Q.newOuts.add(u),Q.outNames.set(u,x??`${u}_${Q.sequence}`))}for(const I of o.roots)h(I);for(const I in r){let u=(c==null?void 0:c[I])??r[I];for(;u;){if(u instanceof cA){u instanceof Ue&&h(u.dyno,u.key,e[I]);break}u=u.dynoOut()}r[I]=u}const d=[];for(const I of g){const u={},x={};for(const M in I.inputs){let S=I.inputs[M];for(;S;){if(S instanceof cA){if(S instanceof ts)u[M]=S.getLiteral();else if(S instanceof Ue){const D=(s=l.get(S.dyno))==null?void 0:s.outNames.get(S.key);if(!D)throw new Error(`Source not found for ${S.dyno.constructor.name}.${S.key}`);u[M]=D}break}S=S.dynoOut()}}const Q=l.get(I)??{outNames:new Map};for(const[M,S]of Q.outNames.entries())x[M]=S;const m=I.compile({inputs:u,outputs:x,compile:n});d.push(m)}const E=[];for(const I in e)r[I]instanceof ts&&E.push(`${e[I]} = ${r[I].getLiteral()};`);return E.length>0&&d.push(E),{statements:d.flatMap((I,u)=>u===0?I:["",...I])}}}function Jn(A,t,e,{update:n,globals:i}={}){return new ME({inTypes:A,outTypes:t,construct:e,update:n,globals:i})}function Is({inTypes:A,outTypes:t,inputs:e,update:n,globals:i,statements:s,generate:a}){return new xe({inTypes:A,outTypes:t,inputs:e,update:n,globals:i,statements:s,generate:a})}function Ec(A,t,e){const n=typeof t=="string"?t:t.type;if(!n)throw new Error(`Invalid DynoType: ${String(t)}`);return`${n} ${A}${e!=null?`[${e}]`:""}`}function In(A){var t;let e=!1;const n=A.split(`
`).map(a=>{const r=a.trimEnd();return e?r:r.length>0?(e=!0,r):null}).filter(a=>a!=null);for(;n.length>0&&n[n.length-1].length===0;)n.pop();if(n.length===0)return[];const i=(t=n[0].match(/^\s*/))==null?void 0:t[0];if(!i)return n;const s=new RegExp(`^${i}`);return n.map(a=>a.replace(s,""))}function Ge(A){return In(A).join(`
`)}class ur extends xe{constructor({a:t,outKey:e,outTypeFunc:n}){const i={a:Gn(t)},s=n(Gn(t)),a={[e]:s};super({inTypes:i,outTypes:a,inputs:{a:t}}),this.outKey=e}dynoOut(){return new Ue(this,this.outKey)}}class Es extends xe{constructor({a:t,b:e,outKey:n,outTypeFunc:i}){const s={a:Gn(t),b:Gn(e)},a=i(Gn(t),Gn(e)),r={[n]:a};super({inTypes:s,outTypes:r,inputs:{a:t,b:e}}),this.outKey=n}dynoOut(){return new Ue(this,this.outKey)}}const Ee={type:"Gsplat"},ps={type:"PackedSplats"},os=(A,t)=>new bE({packedSplats:A,index:t}),vE=(A,t,e,n)=>new RE({packedSplats:A,index:t,base:e,count:n}),es=A=>new FE({gsplat:A}),Zs=({gsplat:A,flags:t,index:e,center:n,scales:i,quaternion:s,rgba:a,rgb:r,opacity:o,x:c,y:g,z:l,r:h,g:d,b:E})=>new NE({gsplat:A,flags:t,index:e,center:n,scales:i,quaternion:s,rgba:a,rgb:r,opacity:o,x:c,y:g,z:l,r:h,g:d,b:E}),pc=(A,{scale:t,rotate:e,translate:n,recolor:i})=>new TE({gsplat:A,scale:t,rotate:e,translate:n,recolor:i}),En=Ge(`
  struct Gsplat {
    vec3 center;
    uint flags;
    vec3 scales;
    int index;
    vec4 quaternion;
    vec4 rgba;
  };
  const uint GSPLAT_FLAG_ACTIVE = 1u << 0u;

  bool isGsplatActive(uint flags) {
    return (flags & GSPLAT_FLAG_ACTIVE) != 0u;
  }
`),dr=Ge(`
  struct PackedSplats {
    usampler2DArray texture;
    int numSplats;
  };
`),fc=Ge(`
  bool readPackedSplat(usampler2DArray texture, int numSplats, int index, out Gsplat gsplat) {
    if ((index >= 0) && (index < numSplats)) {
      uvec4 packed = texelFetch(texture, splatTexCoord(index), 0);
      unpackSplat(packed, gsplat.center, gsplat.scales, gsplat.quaternion, gsplat.rgba);
      return true;
    } else {
      return false;
    }
  }
`);class bE extends xe{constructor({packedSplats:t,index:e}){super({inTypes:{packedSplats:ps,index:"int"},outTypes:{gsplat:Ee},inputs:{packedSplats:t,index:e},globals:()=>[En,dr,fc],statements:({inputs:n,outputs:i})=>{const{gsplat:s}=i;if(!s)return[];const{packedSplats:a,index:r}=n;let o;return a&&r?o=In(`
            if (readPackedSplat(${a}.texture, ${a}.numSplats, ${r}, ${s})) {
              bool zeroSize = all(equal(${s}.scales, vec3(0.0, 0.0, 0.0)));
              ${s}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
            } else {
              ${s}.flags = 0u;
            }
          `):o=[`${s}.flags = 0u;`],o.push(`${s}.index = ${r??"0"};`),o}})}dynoOut(){return new Ue(this,"gsplat")}}class RE extends xe{constructor({packedSplats:t,index:e,base:n,count:i}){super({inTypes:{packedSplats:ps,index:"int",base:"int",count:"int"},outTypes:{gsplat:Ee},inputs:{packedSplats:t,index:e,base:n,count:i},globals:()=>[En,dr,fc],statements:({inputs:s,outputs:a})=>{const{gsplat:r}=a;if(!r)return[];const{packedSplats:o,index:c,base:g,count:l}=s;let h;return o&&c&&g&&l?h=In(`
            ${r}.flags = 0u;
            if ((${c} >= ${g}) && (${c} < (${g} + ${l}))) {
              if (readPackedSplat(${o}.texture, ${o}.numSplats, ${c}, ${r})) {
                bool zeroSize = all(equal(${r}.scales, vec3(0.0, 0.0, 0.0)));
                ${r}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
              }
            }
          `):h=[`${r}.flags = 0u;`],h.push(`${r}.index = ${c??"0"};`),h}})}dynoOut(){return new Ue(this,"gsplat")}}class FE extends xe{constructor({gsplat:t}){super({inTypes:{gsplat:Ee},outTypes:{flags:"uint",active:"bool",index:"int",center:"vec3",scales:"vec3",quaternion:"vec4",rgba:"vec4",rgb:"vec3",opacity:"float",x:"float",y:"float",z:"float",r:"float",g:"float",b:"float"},inputs:{gsplat:t},globals:()=>[En],statements:({inputs:e,outputs:n})=>{const{gsplat:i}=e,{flags:s,active:a,index:r,center:o,scales:c,quaternion:g,rgba:l,rgb:h,opacity:d,x:E,y:f,z:I,r:u,g:x,b:Q}=n;return[s?`${s} = ${i?`${i}.flags`:"0u"};`:null,a?`${a} = isGsplatActive(${i?`${i}.flags`:"0u"});`:null,r?`${r} = ${i?`${i}.index`:"0"};`:null,o?`${o} = ${i?`${i}.center`:"vec3(0.0, 0.0, 0.0)"};`:null,c?`${c} = ${i?`${i}.scales`:"vec3(0.0, 0.0, 0.0)"};`:null,g?`${g} = ${i?`${i}.quaternion`:"vec4(0.0, 0.0, 0.0, 1.0)"};`:null,l?`${l} = ${i?`${i}.rgba`:"vec4(0.0, 0.0, 0.0, 0.0)"};`:null,h?`${h} = ${i?`${i}.rgba.rgb`:"vec3(0.0, 0.0, 0.0)"};`:null,d?`${d} = ${i?`${i}.rgba.a`:"0.0"};`:null,E?`${E} = ${i?`${i}.center.x`:"0.0"};`:null,f?`${f} = ${i?`${i}.center.y`:"0.0"};`:null,I?`${I} = ${i?`${i}.center.z`:"0.0"};`:null,u?`${u} = ${i?`${i}.rgba.r`:"0.0"};`:null,x?`${x} = ${i?`${i}.rgba.g`:"0.0"};`:null,Q?`${Q} = ${i?`${i}.rgba.b`:"0.0"};`:null].filter(Boolean)}})}}class NE extends xe{constructor({gsplat:t,flags:e,index:n,center:i,scales:s,quaternion:a,rgba:r,rgb:o,opacity:c,x:g,y:l,z:h,r:d,g:E,b:f}){super({inTypes:{gsplat:Ee,flags:"uint",index:"int",center:"vec3",scales:"vec3",quaternion:"vec4",rgba:"vec4",rgb:"vec3",opacity:"float",x:"float",y:"float",z:"float",r:"float",g:"float",b:"float"},outTypes:{gsplat:Ee},inputs:{gsplat:t,flags:e,index:n,center:i,scales:s,quaternion:a,rgba:r,rgb:o,opacity:c,x:g,y:l,z:h,r:d,g:E,b:f},globals:()=>[En],statements:({inputs:I,outputs:u})=>{const{gsplat:x}=u;if(!x)return[];const{gsplat:Q,flags:m,index:M,center:S,scales:D,quaternion:T,rgba:y,rgb:C,opacity:v,x:z,y:U,z:Y,r:K,g:H,b:X}=I;return[`${x}.flags = ${m??(Q?`${Q}.flags`:"0u")};`,`${x}.index = ${M??(Q?`${Q}.index`:"0")};`,`${x}.center = ${S??(Q?`${Q}.center`:"vec3(0.0, 0.0, 0.0)")};`,`${x}.scales = ${D??(Q?`${Q}.scales`:"vec3(0.0, 0.0, 0.0)")};`,`${x}.quaternion = ${T??(Q?`${Q}.quaternion`:"vec4(0.0, 0.0, 0.0, 1.0)")};`,`${x}.rgba = ${y??(Q?`${Q}.rgba`:"vec4(0.0, 0.0, 0.0, 0.0)")};`,C?`${x}.rgba.rgb = ${C};`:null,v?`${x}.rgba.a = ${v};`:null,z?`${x}.center.x = ${z};`:null,U?`${x}.center.y = ${U};`:null,Y?`${x}.center.z = ${Y};`:null,K?`${x}.rgba.r = ${K};`:null,H?`${x}.rgba.g = ${H};`:null,X?`${x}.rgba.b = ${X};`:null].filter(Boolean)}})}dynoOut(){return new Ue(this,"gsplat")}}Ge(`
  vec3 gsplatNormal(vec3 scales, vec4 quaternion) {
    float minScale = min(scales.x, min(scales.y, scales.z));
    vec3 normal;
    if (scales.z == minScale) {
      normal = vec3(0.0, 0.0, 1.0);
    } else if (scales.y == minScale) {
      normal = vec3(0.0, 1.0, 0.0);
    } else {
      normal = vec3(1.0, 0.0, 0.0);
    }
    return quatVec(quaternion, normal);
  }
`);class TE extends xe{constructor({gsplat:t,scale:e,rotate:n,translate:i,recolor:s}){super({inTypes:{gsplat:Ee,scale:"float",rotate:"vec4",translate:"vec3",recolor:"vec4"},outTypes:{gsplat:Ee},inputs:{gsplat:t,scale:e,rotate:n,translate:i,recolor:s},globals:()=>[En],statements:({inputs:a,outputs:r,compile:o})=>{const{gsplat:c}=r;if(!c||!a.gsplat)return[];const{scale:g,rotate:l,translate:h,recolor:d}=a,E=o.indent;return[`${c} = ${a.gsplat};`,`if (isGsplatActive(${c}.flags)) {`,g?`${E}${c}.center *= ${g};`:null,l?`${E}${c}.center = quatVec(${l}, ${c}.center);`:null,h?`${E}${c}.center += ${h};`:null,g?`${E}${c}.scales *= ${g};`:null,l?`${E}${c}.quaternion = quatQuat(${l}, ${c}.quaternion);`:null,d?`${E}${c}.rgba *= ${d};`:null,"}"].filter(Boolean)}})}dynoOut(){return new Ue(this,"gsplat")}}const kE=A=>new UE({gsplat:A});class UE extends xe{constructor({gsplat:t}){super({inTypes:{gsplat:Ee},inputs:{gsplat:t},globals:()=>[En],statements:({inputs:e,outputs:n})=>{const{output:i}=n;if(!i)return[];const{gsplat:s}=e;return s?In(`
            if (isGsplatActive(${s}.flags)) {
              ${i} = packSplat(${s}.center, ${s}.scales, ${s}.quaternion, ${s}.rgba);
            } else {
              ${i} = uvec4(0u, 0u, 0u, 0u);
            }
          `):[`${i} = uvec4(0u, 0u, 0u, 0u);`]}})}dynoOut(){return new Ue(this,"output")}}class LE extends xe{constructor({rgba8:t}){super({inTypes:{rgba8:"vec4"},inputs:{rgba8:t},statements:({inputs:e,outputs:n})=>[`target = ${e.rgba8??"vec4(0.0, 0.0, 0.0, 0.0)"};`]})}dynoOut(){return new Ue(this,"rgba8")}}class un extends xe{constructor({key:t,type:e,count:n,value:i,update:s,globals:a}){t=t??"value",super({outTypes:{[t]:e},update:()=>{if(s){const r=s(this.value);r!==void 0&&(this.value=r)}this.uniform.value=this.value},generate:({inputs:r,outputs:o})=>{const c=(a==null?void 0:a({inputs:r,outputs:o}))??[],g={},l=o[t];return l&&(c.push(`uniform ${Ec(l,e,n)};`),g[l]=this.uniform),{globals:c,uniforms:g}}}),this.type=e,this.count=n,this.value=i,this.uniform={value:i},this.outKey=t}dynoOut(){return new Ue(this,this.outKey)}}class wo extends un{constructor({key:t,value:e,update:n}){super({key:t,type:"bool",value:e,update:n})}}class Wa extends un{constructor({key:t,value:e,update:n}){super({key:t,type:"int",value:e,update:n})}}class gi extends un{constructor({key:t,value:e,update:n}){super({key:t,type:"float",value:e,update:n})}}class cs extends un{constructor({key:t,value:e,update:n}){super({key:t,type:"vec3",value:e,update:n})}}class Ir extends un{constructor({key:t,value:e,update:n}){super({key:t,type:"vec4",value:e,update:n})}}class js extends un{constructor({key:t,value:e,update:n}){super({key:t,type:"usampler2DArray",value:e,update:n})}}var Qe=Uint8Array,Ai=Uint16Array,GE=Int32Array,Bc=new Qe([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),Cc=new Qe([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),PE=new Qe([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Qc=function(A,t){for(var e=new Ai(31),n=0;n<31;++n)e[n]=t+=1<<A[n-1];for(var i=new GE(e[30]),n=1;n<30;++n)for(var s=e[n];s<e[n+1];++s)i[s]=s-e[n]<<5|n;return{b:e,r:i}},mc=Qc(Bc,2),yc=mc.b,HE=mc.r;yc[28]=258,HE[258]=28;var zE=Qc(Cc,0),YE=zE.b,xc=new Ai(32768);for(var se=0;se<32768;++se){var Un=(se&43690)>>1|(se&21845)<<1;Un=(Un&52428)>>2|(Un&13107)<<2,Un=(Un&61680)>>4|(Un&3855)<<4,xc[se]=((Un&65280)>>8|(Un&255)<<8)>>1}var ii=function(A,t,e){for(var n=A.length,i=0,s=new Ai(t);i<n;++i)A[i]&&++s[A[i]-1];var a=new Ai(t);for(i=1;i<t;++i)a[i]=a[i-1]+s[i-1]<<1;var r;{r=new Ai(1<<t);var o=15-t;for(i=0;i<n;++i)if(A[i])for(var c=i<<4|A[i],g=t-A[i],l=a[A[i]-1]++<<g,h=l|(1<<g)-1;l<=h;++l)r[xc[l]>>o]=c}return r},pi=new Qe(288);for(var se=0;se<144;++se)pi[se]=8;for(var se=144;se<256;++se)pi[se]=9;for(var se=256;se<280;++se)pi[se]=7;for(var se=280;se<288;++se)pi[se]=8;var wc=new Qe(32);for(var se=0;se<32;++se)wc[se]=5;var OE=ii(pi,9),JE=ii(wc,5),$s=function(A){for(var t=A[0],e=1;e<A.length;++e)A[e]>t&&(t=A[e]);return t},An=function(A,t,e){var n=t/8|0;return(A[n]|A[n+1]<<8)>>(t&7)&e},ta=function(A,t){var e=t/8|0;return(A[e]|A[e+1]<<8|A[e+2]<<16)>>(t&7)},Sc=function(A){return(A+7)/8|0},ns=function(A,t,e){return(t==null||t<0)&&(t=0),(e==null||e>A.length)&&(e=A.length),new Qe(A.subarray(t,e))},qE=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],Xe=function(A,t,e){var n=new Error(t||qE[A]);if(n.code=A,Error.captureStackTrace&&Error.captureStackTrace(n,Xe),!e)throw n;return n},VE=function(A,t,e,n){var i=A.length,s=0;if(!i||t.f&&!t.l)return e||new Qe(0);var a=!e,r=a||t.i!=2,o=t.i;a&&(e=new Qe(i*3));var c=function(zt){var qt=e.length;if(zt>qt){var Gt=new Qe(Math.max(qt*2,zt));Gt.set(e),e=Gt}},g=t.f||0,l=t.p||0,h=t.b||0,d=t.l,E=t.d,f=t.m,I=t.n,u=i*8;do{if(!d){g=An(A,l,1);var x=An(A,l+1,3);if(l+=3,x)if(x==1)d=OE,E=JE,f=9,I=5;else if(x==2){var S=An(A,l,31)+257,D=An(A,l+10,15)+4,T=S+An(A,l+5,31)+1;l+=14;for(var y=new Qe(T),C=new Qe(19),v=0;v<D;++v)C[PE[v]]=An(A,l+v*3,7);l+=D*3;for(var z=$s(C),U=(1<<z)-1,Y=ii(C,z),v=0;v<T;){var K=Y[An(A,l,U)];l+=K&15;var Q=K>>4;if(Q<16)y[v++]=Q;else{var H=0,X=0;for(Q==16?(X=3+An(A,l,3),l+=2,H=y[v-1]):Q==17?(X=3+An(A,l,7),l+=3):Q==18&&(X=11+An(A,l,127),l+=7);X--;)y[v++]=H}}var P=y.subarray(0,S),At=y.subarray(S);f=$s(P),I=$s(At),d=ii(P,f),E=ii(At,I)}else Xe(1);else{var Q=Sc(l)+4,m=A[Q-4]|A[Q-3]<<8,M=Q+m;if(M>i){o&&Xe(0);break}r&&c(h+m),e.set(A.subarray(Q,M),h),t.b=h+=m,t.p=l=M*8,t.f=g;continue}if(l>u){o&&Xe(0);break}}r&&c(h+131072);for(var rt=(1<<f)-1,It=(1<<I)-1,Dt=l;;Dt=l){var H=d[ta(A,l)&rt],Ut=H>>4;if(l+=H&15,l>u){o&&Xe(0);break}if(H||Xe(2),Ut<256)e[h++]=Ut;else if(Ut==256){Dt=l,d=null;break}else{var J=Ut-254;if(Ut>264){var v=Ut-257,tt=Bc[v];J=An(A,l,(1<<tt)-1)+yc[v],l+=tt}var lt=E[ta(A,l)&It],Z=lt>>4;lt||Xe(3),l+=lt&15;var At=YE[Z];if(Z>3){var tt=Cc[Z];At+=ta(A,l)&(1<<tt)-1,l+=tt}if(l>u){o&&Xe(0);break}r&&c(h+131072);var ht=h+J;if(h<At){var Ft=s-At,mt=Math.min(At,ht);for(Ft+h<0&&Xe(3);h<mt;++h)e[h]=n[Ft+h]}for(;h<ht;++h)e[h]=e[h-At]}}t.l=d,t.p=Dt,t.b=h,t.f=g,d&&(g=1,t.m=f,t.d=E,t.n=I)}while(!g);return h!=e.length&&a?ns(e,0,h):e.subarray(0,h)},KE=new Qe(0),WE=function(A){(A[0]!=31||A[1]!=139||A[2]!=8)&&Xe(6,"invalid gzip data");var t=A[3],e=10;t&4&&(e+=(A[10]|A[11]<<8)+2);for(var n=(t>>3&1)+(t>>4&1);n>0;n-=!A[e++]);return e+(t&2)},ea=function(){function A(t,e){typeof t=="function"&&(e=t,t={}),this.ondata=e;var n=t&&t.dictionary&&t.dictionary.subarray(-32768);this.s={i:0,b:n?n.length:0},this.o=new Qe(32768),this.p=new Qe(0),n&&this.o.set(n)}return A.prototype.e=function(t){if(this.ondata||Xe(5),this.d&&Xe(4),!this.p.length)this.p=t;else if(t.length){var e=new Qe(this.p.length+t.length);e.set(this.p),e.set(t,this.p.length),this.p=e}},A.prototype.c=function(t){this.s.i=+(this.d=t||!1);var e=this.s.b,n=VE(this.p,this.s,this.o);this.ondata(ns(n,e,this.s.b),this.d),this.o=ns(n,this.s.b-32768),this.s.b=this.o.length,this.p=ns(this.p,this.s.p/8|0),this.s.p&=7},A.prototype.push=function(t,e){this.e(t),this.c(e)},A}(),XE=function(){function A(t,e){this.v=1,this.r=0,ea.call(this,t,e)}return A.prototype.push=function(t,e){if(ea.prototype.e.call(this,t),this.r+=t.length,this.v){var n=this.p.subarray(this.v-1),i=n.length>3?WE(n):4;if(i>n.length){if(!e)return}else this.v>1&&this.onmember&&this.onmember(this.r-n.length);this.p=n.subarray(i),this.v=0}ea.prototype.c.call(this,e),this.s.f&&!this.s.l&&!e&&(this.v=Sc(this.s.p)+9,this.s={i:0},this.o=new Qe(0),this.push(new Qe(0),e))},A}(),ZE=typeof TextDecoder<"u"&&new TextDecoder,jE=0;try{ZE.decode(KE,{stream:!0}),jE=1}catch{}const Er=new Float32Array(1),Dc=new Uint32Array(Er.buffer);function na(A){Er[0]=A;const t=Dc[0],e=t>>31&1,n=t>>23&255,i=t&8388607,s=e<<15;if(n===255)return i!==0?s|32767:s|31744;const a=n-127+15;if(a>=31)return s|31744;if(a<=0){if(a<-10)return s;const o=(i|8388608)>>1-a+13;return s|o}const r=i>>13;return s|a<<10|r}function Aa(A){const t=A>>15&1,e=A>>10&31,n=A&1023;let i;if(e===0)if(n===0)i=t<<31;else{let s=n,a=-14;for(;(s&1024)===0;)s<<=1,a--;s&=1023;const r=a+127,o=s<<13;i=t<<31|r<<23|o}else if(e===31)n===0?i=t<<31|2139095040:i=t<<31|2143289344;else{const s=e-15+127,a=n<<13;i=t<<31|s<<23|a}return Dc[0]=i,Er[0]}function Yi(A){return Math.max(0,Math.min(255,Math.round(A*255)))}function $E(A){const t=[],e=new Set;function n(i){i&&typeof i=="object"&&!e.has(i)&&(e.add(i),i instanceof ArrayBuffer?t.push(i):ArrayBuffer.isView(i)?t.push(i.buffer):Array.isArray(i)?i.forEach(n):Object.values(i).forEach(n))}return n(A),t}class tp{constructor({allocate:t,dispose:e,valid:n}){this.items=[],this.allocate=t,this.dispose=e,this.valid=n}alloc(t){for(;;){const e=this.items.pop();if(!e)break;if(this.valid(e,t))return e;this.dispose&&this.dispose(e)}return this.allocate(t)}free(t){this.items.push(t)}disposeAll(){let t;for(t=this.items.pop();t;)this.dispose&&this.dispose(t),t=this.items.pop()}}function So(A,t,e,n,i,s,a,r,o,c,g,l,h,d,E,f){const I=Yi(d),u=Yi(E),x=Yi(f),Q=Yi(h),m=gp(new fe(o,c,g,l)),M=m&255,S=m>>>8&255,D=m>>>16&255,T=s===0?0:Math.min(255,Math.max(0,Math.round((Math.log(s)-hA)/UA)+1)),y=a===0?0:Math.min(255,Math.max(0,Math.round((Math.log(a)-hA)/UA)+1)),C=r===0?0:Math.min(255,Math.max(0,Math.round((Math.log(r)-hA)/UA)+1)),v=na(e),z=na(n),U=na(i),Y=t*4;A[Y]=I|u<<8|x<<16|Q<<24,A[Y+1]=v|z<<16,A[Y+2]=U|M<<16|S<<24,A[Y+3]=T|y<<8|C<<16|D<<24}const ep=new b,np=new b,Ap=new fe,ip=new Ht,sp={center:ep,scales:np,quaternion:Ap,color:ip,opacity:0};function Do(A,t){const e=sp,n=t*4,i=A[n],s=A[n+1],a=A[n+2],r=A[n+3];e.color.set((i&255)/255,(i>>>8&255)/255,(i>>>16&255)/255),e.opacity=(i>>>24&255)/255,e.center.set(Aa(s&65535),Aa(s>>>16&65535),Aa(a&65535));const o=r&255;e.scales.x=o===0?0:Math.exp(hA+(o-1)*UA);const c=r>>>8&255;e.scales.y=c===0?0:Math.exp(hA+(c-1)*UA);const g=r>>>16&255;e.scales.z=g===0?0:Math.exp(hA+(g-1)*UA);const l=a>>>16&65535|r>>>8&16711680;return hp(l,e.quaternion),e}function Ze(A){const t=Ae,e=Math.max(QE,Math.min(aA,Math.ceil(A/t))),n=Math.ceil(A/(t*e)),i=t*e*n;return{width:t,height:e,depth:n,maxSplats:i}}function ap(A){const t=new oc(A.autoStart);return t.startTime=A.startTime,t.oldTime=A.oldTime,t.elapsedTime=A.elapsedTime,t.running=A.running,t}const rp=Ge(`
  precision highp float;

  in vec3 position;

  void main() {
    gl_Position = vec4(position.xy, 0.0, 1.0);
  }
`);function op(A){const t=new b;for(const e of A)t.add(e);return t.divideScalar(A.length)}function cp(A){if(A.length===0)return new fe;const t=A[0].clone();for(let e=1;e<A.length;e++)A[e].dot(A[0])<0?(t.x-=A[e].x,t.y-=A[e].y,t.z-=A[e].z,t.w-=A[e].w):(t.x+=A[e].x,t.y+=A[e].y,t.z+=A[e].z,t.w+=A[e].w);return t.normalize()}function lp(A,t){const[e,n]=[new b,new fe],[i,s]=[new b,new fe];A.decompose(e,n,new b),t.decompose(i,s,new b);const a=e.distanceTo(i),r=Math.abs(n.dot(s));return{distance:a,coorient:r}}function Xa({matrix1:A,matrix2:t,maxDistance:e,minCoorient:n}){const{distance:i,coorient:s}=lp(A,t);return i<=e&&(n==null||s>=n)}function gp(A){const t=A.clone().normalize();t.w<0&&t.set(-t.x,-t.y,-t.z,-t.w);const e=2*Math.acos(t.w),n=Math.sqrt(t.x*t.x+t.y*t.y+t.z*t.z),i=n<1e-6?new b(1,0,0):new b(t.x,t.y,t.z).divideScalar(n),s=Math.abs(i.x)+Math.abs(i.y)+Math.abs(i.z);let a=i.x/s,r=i.y/s;if(i.z<0){const d=a;a=(1-Math.abs(r))*(a>=0?1:-1),r=(1-Math.abs(d))*(r>=0?1:-1)}const o=a*.5+.5,c=r*.5+.5,g=Math.round(o*255),l=Math.round(c*255);return Math.round(e*(255/Math.PI))<<16|l<<8|g}function hp(A,t){const e=A&255,n=A>>>8&255,i=A>>>16&255,s=e/255,a=n/255;let r=(s-.5)*2,o=(a-.5)*2;const c=1-(Math.abs(r)+Math.abs(o)),g=Math.max(-c,0);r+=r>=0?-g:g,o+=o>=0?-g:g;const l=new b(r,o,c).normalize(),d=i/255*Math.PI*.5,E=Math.sin(d),f=Math.cos(d);return t.set(l.x*E,l.y*E,l.z*E,f),t}function up(A,t){const e=[];let n=0,i=null;const s=new XE((o,c)=>{if(e.push(o),n+=o.length,c||n>=t){const g=new Uint8Array(n);let l=0;for(const h of e)g.set(h,l),l+=h.length;i=g.slice(0,t)}}),a=1024;let r=0;for(;i==null&&r<A.length;){const o=A.slice(r,r+a);s.push(o,!1),r+=a}if(i==null&&(s.push(new Uint8Array,!0),i==null))throw new Error("Failed to decompress partial gzip");return i}class _c{constructor({graph:t,inputs:e,outputs:n,template:i}){this.graph=t,this.template=i,this.inputs=e??{},this.outputs=n??{};const s=new _E({indent:this.template.indent});for(const r in this.outputs)this.outputs[r]&&s.declares.add(this.outputs[r]);const a=t.compile({inputs:this.inputs,outputs:this.outputs,compile:s});this.shader=i.generate({globals:s.globals,statements:a}),this.uniforms=s.uniforms,this.updaters=s.updaters}prepareMaterial(){return dp(this)}update(){for(const t of this.updaters)t()}}class Mc{constructor(t){const e=t.match(/^([ \t]*)\{\{\s*GLOBALS\s*\}\}/m),n=t.match(/^([ \t]*)\{\{\s*STATEMENTS\s*\}\}/m);if(!e||!n)throw new Error("Template must contain {{ GLOBALS }} and {{ STATEMENTS }}");this.before=t.substring(0,e.index),this.between=t.substring(e.index+e[0].length,n.index),this.after=t.substring(n.index+n[0].length),this.indent=n[1]}generate({globals:t,statements:e}){return this.before+Array.from(t).join(`

`)+this.between+e.map(n=>this.indent+n).join(`
`)+this.after}}const _o=new Map;function dp(A){let t=_o.get(A);return t||(t=new lr({glslVersion:ss,vertexShader:rp,fragmentShader:A.shader,uniforms:A.uniforms}),_o.set(A,t),t)}function vc(A,t,e="add"){const n=()=>{throw new Error(`Invalid ${e} types: ${A}, ${t}`)};if(A===t)return A;if(A==="int"){if(rA(t))return t;n()}if(t==="int"){if(rA(A))return A;n()}if(A==="uint"){if(oA(t))return t;n()}if(t==="uint"){if(oA(A))return A;n()}if(A==="float"){if(li(t))return t;n()}if(t==="float"){if(li(A))return A;n()}throw new Error(`Invalid ${e} types: ${A}, ${t}`)}function Ip(A,t){return vc(A,t,"sub")}function Ep(A,t){const e=()=>{throw new Error(`Invalid mul types: ${A}, ${t}`)},n=i=>i;if(A==="int"){if(rA(t))return n(t);e()}if(t==="int"){if(rA(A))return n(A);e()}if(A==="uint"){if(oA(t))return n(t);e()}if(t==="uint"){if(oA(A))return n(A);e()}if(A==="float"){if(li(t))return n(t);e()}if(t==="float"){if(li(A))return n(A);e()}if(rA(A)||oA(A)||rA(t)||oA(t)){if(A===t)return n(A);e()}if(A==="vec2"){if(t==="vec2"||MA(t))return n("vec2");if(t==="mat3x2")return n("vec3");if(t==="mat4x2")return n("vec4");e()}if(A==="vec3"){if(t==="mat2x3")return n("vec2");if(t==="vec3"||vA(t))return n("vec3");if(t==="mat4x3")return n("vec4");e()}if(A==="vec4"){if(t==="mat2x4")return n("vec2");if(t==="mat3x4")return n("vec3");if(t==="vec4"||bA(t))return n("vec4");e()}if(t==="vec2"){if(MA(A))return n("vec2");if(A==="mat2x3")return n("vec3");if(A==="mat2x4")return n("vec4");e()}if(t==="vec3"){if(A==="mat3x2")return n("vec2");if(vA(A))return n("vec3");if(A==="mat3x4")return n("vec4");e()}if(t==="vec4"){if(A==="mat4x2")return n("vec2");if(A==="mat4x3")return n("vec3");if(bA(A))return n("vec4");e()}if(MA(A)){if(MA(t))return n("mat2");if(t==="mat3x2")return n("mat3x2");if(t==="mat4x2")return n("mat4x2");e()}if(A==="mat2x3"){if(MA(t))return n("mat2x3");if(t==="mat3x2")return n("mat3");if(t==="mat4x2")return n("mat4x3");e()}if(A==="mat2x4"){if(MA(t))return n("mat2x4");if(t==="mat3x2")return n("mat3x4");if(t==="mat4x2")return n("mat4");e()}if(A==="mat3x2"){if(t==="mat2x3")return n("mat2");if(vA(t))return n("mat3x2");if(t==="mat4x3")return n("mat4x2");e()}if(vA(A)){if(t==="mat2x3")return n("mat2x3");if(vA(t))return n("mat3");if(t==="mat4x3")return n("mat4x3");e()}if(A==="mat3x4"){if(t==="mat2x3")return n("mat2x4");if(vA(t))return n("mat3x4");if(t==="mat4x3")return n("mat4");e()}if(A==="mat4x2"){if(t==="mat2x4")return n("mat2");if(t==="mat3x4")return n("mat3x2");if(bA(t))return n("mat4x2");e()}if(A==="mat4x3"){if(t==="mat2x4")return n("mat2x3");if(t==="mat3x4")return n("mat3");if(bA(t))return n("mat4x3");e()}if(bA(A)){if(t==="mat2x4")return n("mat2x4");if(t==="mat3x4")return n("mat3x4");if(bA(t))return n("mat4");e()}throw new Error(`Invalid mul types: ${A}, ${t}`)}const si=(A,t)=>new fp({a:A,b:t}),pp=(A,t)=>new Bp({a:A,b:t}),bc=(A,t)=>new Cp({a:A,b:t});class fp extends Es{constructor({a:t,b:e}){super({a:t,b:e,outKey:"sum",outTypeFunc:vc}),this.statements=({inputs:n,outputs:i})=>[`${i.sum} = ${n.a} + ${n.b};`]}}class Bp extends Es{constructor({a:t,b:e}){super({a:t,b:e,outKey:"difference",outTypeFunc:Ip}),this.statements=({inputs:n,outputs:i})=>[`${i.difference} = ${n.a} - ${n.b};`]}}class Cp extends Es{constructor({a:t,b:e}){super({a:t,b:e,outKey:"product",outTypeFunc:Ep}),this.statements=({inputs:n,outputs:i})=>[`${i.product} = ${n.a} * ${n.b};`]}}const Qp=A=>new yp({value:A}),mp=A=>new xp({value:A});class yp extends ur{constructor({value:t}){super({a:t,outKey:"uint",outTypeFunc:()=>"uint"}),this.statements=({inputs:e,outputs:n})=>[`${n.uint} = packHalf2x16(${e.a});`]}}class xp extends ur{constructor({value:t}){super({a:t,outKey:"rgba8",outTypeFunc:()=>"vec4"}),this.statements=({inputs:e,outputs:n})=>[`uvec4 uRgba = uvec4(${e.a} & 0xffu, (${e.a} >> 8u) & 0xffu, (${e.a} >> 16u) & 0xffu, (${e.a} >> 24u) & 0xffu);`,`${n.rgba8} = vec4(uRgba) / 255.0;`]}}const wp=A=>new _p({a:A}),Sp=({vector:A,vectorType:t,x:e,y:n,z:i,w:s,r:a,g:r,b:o,a:c})=>new bp({vector:A,vectorType:t,x:e,y:n,z:i,w:s,r:a,g:r,b:o,a:c}),Dp=(A,t)=>new vp({a:A,b:t});class _p extends ur{constructor({a:t}){super({a:t,outTypeFunc:e=>e,outKey:"normalize"}),this.statements=({inputs:e,outputs:n})=>[`${n.normalize} = normalize(${e.a});`]}}function Mp(A){if(A==="float")return"vec2";if(A==="vec2")return"vec3";if(A==="vec3")return"vec4";throw new Error("Invalid type")}class vp extends Es{constructor({a:t,b:e}){const n=Gn(t),i=Mp(n);super({a:t,b:e,outKey:"extend",outTypeFunc:()=>i}),this.statements=({inputs:s,outputs:a})=>[`${a.extend} = ${i}(${s.a}, ${s.b});`]}}class bp extends xe{constructor({vector:t,vectorType:e,x:n,y:i,z:s,w:a,r,g:o,b:c,a:g}){if(!t&&!e)throw new Error("Either vector or vectorType must be provided");const l=e??Gn(t),h=wE(l),d=SE(l),E={vector:l,x:h,y:h,r:h,g:h},f={vector:t,x:n,y:i,r,g:o};d>=3&&(Object.assign(E,{z:h,b:h}),Object.assign(f,{z:s,b:c})),d>=4&&(Object.assign(E,{w:h,a:h}),Object.assign(f,{w:a,a:g})),super({inTypes:E,outTypes:{vector:l},inputs:f}),this.statements=({inputs:I,outputs:u})=>{const{vector:x}=u,{vector:Q,x:m,y:M,z:S,w:D,r:T,g:y,b:C,a:v}=I,z=[`${x}.x = ${m??T??(Q?`${Q}.x`:zi(h))};`,`${x}.y = ${M??y??(Q?`${Q}.y`:zi(h))};`];return d>=3&&z.push(`${x}.z = ${S??C??(Q?`${Q}.z`:zi(h))};`),d>=4&&z.push(`${x}.w = ${D??v??(Q?`${Q}.w`:zi(h))};`),z}}dynoOut(){return new Ue(this,"vector")}}const Rp=(A,{scale:t,scales:e,rotate:n,translate:i})=>new Np({position:A,scale:t,scales:e,rotate:n,translate:i}).outputs.position,Fp=(A,{scale:t,scales:e,rotate:n})=>new Tp({dir:A,scale:t,scales:e,rotate:n}).outputs.dir;class Np extends xe{constructor({position:t,scale:e,scales:n,rotate:i,translate:s}){super({inTypes:{position:"vec3",scale:"float",scales:"vec3",rotate:"vec4",translate:"vec3"},outTypes:{position:"vec3"},inputs:{position:t,scale:e,scales:n,rotate:i,translate:s},statements:({inputs:a,outputs:r})=>{const{position:o}=r;if(!o)return[];const{scale:c,scales:g,rotate:l,translate:h}=a;return[`${o} = ${a.position??"vec3(0.0, 0.0, 0.0)"};`,c?`${o} *= ${c};`:null,g?`${o} *= ${g};`:null,l?`${o} = quatVec(${l}, ${o});`:null,h?`${o} += ${h};`:null].filter(Boolean)}})}}class Tp extends xe{constructor({dir:t,scale:e,scales:n,rotate:i}){super({inTypes:{dir:"vec3",scale:"float",scales:"vec3",rotate:"vec4"},outTypes:{dir:"vec3"},inputs:{dir:t,scale:e,scales:n,rotate:i},statements:({inputs:s,outputs:a})=>{const{dir:r}=a;if(!r)return[];const{scale:o,scales:c,rotate:g}=s;return[`${r} = ${s.dir??"vec3(0.0, 0.0, 0.0)"};`,o?`${r} *= ${o};`:null,c?`${r} *= ${c};`:null,g?`${r} = quatVec(${g}, ${r});`:null].filter(Boolean)}})}}var kp=`precision highp float;
precision highp int;
precision highp sampler2D;
precision highp usampler2D;
precision highp isampler2D;
precision highp sampler2DArray;
precision highp usampler2DArray;
precision highp isampler2DArray;
precision highp sampler3D;
precision highp usampler3D;
precision highp isampler3D;

#include <splatDefines>

uniform uint targetLayer;
uniform int targetBase;
uniform int targetCount;

out vec4 target;

{{ GLOBALS }}

void computeReadback(int index) {
    {{ STATEMENTS }}
}

void main() {
    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);
    int index = targetIndex - targetBase;

    if ((index >= 0) && (index < targetCount)) {
        computeReadback(index);
    } else {
        target = vec4(0.0, 0.0, 0.0, 0.0);
    }
}`;const vn=class xn{constructor({renderer:t}={}){this.renderer=t,this.capacity=0,this.count=0}dispose(){this.target&&(this.target.dispose(),this.target=void 0)}ensureBuffer(t,e){const i=Math.ceil(Math.max(1,t)/Ae)*Ae*4;if(e.byteLength>=i)return e;const s=new ArrayBuffer(i);if(e instanceof ArrayBuffer)return s;const a=e.constructor;return new a(s)}ensureCapacity(t){const{width:e,height:n,depth:i,maxSplats:s}=Ze(t);(!this.target||s>this.capacity)&&(this.dispose(),this.capacity=s,this.target=new Xo(e,n,i,{depthBuffer:!1,stencilBuffer:!1,generateMipmaps:!1,magFilter:ye,minFilter:ye}),this.target.texture.format=me,this.target.texture.type=Le,this.target.texture.internalFormat="RGBA8")}prepareProgramMaterial(t){let e=xn.readbackProgram.get(t);if(!e){const i=Jn({index:"int"},{rgba8:"vec4"},({index:s})=>(t.inputs.index=s,{rgba8:new LE({rgba8:t.outputs.rgba8})}));xn.programTemplate||(xn.programTemplate=new Mc(kp)),e=new _c({graph:i,inputs:{index:"index"},outputs:{rgba8:"target"},template:xn.programTemplate}),Object.assign(e.uniforms,{targetLayer:{value:0},targetBase:{value:0},targetCount:{value:0}}),xn.readbackProgram.set(t,e)}const n=e.prepareMaterial();return xn.mesh.material=n,{program:e,material:n}}saveRenderState(t){return{xrPresenting:t.xr.isPresenting,autoClear:t.autoClear,scissorTest:t.getScissorTest(),pixelRatio:t.getPixelRatio()}}resetRenderState(t,e){t.setRenderTarget(null),t.setPixelRatio(e.pixelRatio),t.xr.isPresenting=e.xrPresenting,t.autoClear=e.autoClear,t.setScissorTest(e.scissorTest)}process({count:t,material:e}){const n=this.renderer;if(!n)throw new Error("No renderer");if(!this.target)throw new Error("No target");const i=Ae*aA;e.uniforms.targetBase.value=0,e.uniforms.targetCount.value=t;let s=0;for(;s<t;){const a=Math.floor(s/i),r=a*i,o=Math.min(aA,Math.ceil((t-r)/Ae));e.uniforms.targetLayer.value=a,n.setPixelRatio(1),n.setRenderTarget(this.target,a),n.xr.isPresenting=!1,n.autoClear=!1,n.setScissorTest(!0),n.setScissor(0,0,Ae,o),n.render(xn.scene,xn.camera),s+=Ae*o}this.count=t}async read({readback:t}){const e=this.renderer;if(!e)throw new Error("No renderer");if(!this.target)throw new Error("No target");const n=Math.ceil(this.count/Ae)*Ae;if(t.byteLength<n*4)throw new Error(`Readback buffer too small: ${t.byteLength} < ${n*4}`);const i=new Uint8Array(t instanceof ArrayBuffer?t:t.buffer),s=Ae*aA;let a=0;const r=[];for(;a<this.count;){const o=Math.floor(a/s),c=o*s,g=Math.min(aA,Math.ceil((this.count-c)/Ae));e.setPixelRatio(1),e.setRenderTarget(this.target,o);const l=Ae*g*4,h=i.subarray(c*4,c*4+l),d=e==null?void 0:e.readRenderTargetPixelsAsync(this.target,0,0,Ae,g,h);r.push(d),a+=Ae*g}return Promise.all(r).then(()=>t)}render({reader:t,count:e,renderer:n}){if(this.renderer=n||this.renderer,!this.renderer)throw new Error("No renderer");this.ensureCapacity(e);const{program:i,material:s}=this.prepareProgramMaterial(t);i.update();const a=this.saveRenderState(this.renderer);this.process({count:e,material:s}),this.resetRenderState(this.renderer,a)}async readback({readback:t}){if(!this.renderer)throw new Error("No renderer");const e=this.saveRenderState(this.renderer),n=this.read({readback:t});return this.resetRenderState(this.renderer,e),n}async renderReadback({reader:t,count:e,renderer:n,readback:i}){if(this.renderer=n||this.renderer,!this.renderer)throw new Error("No renderer");this.ensureCapacity(e);const{program:s,material:a}=this.prepareProgramMaterial(t);s.update();const r=this.saveRenderState(this.renderer);this.process({count:e,material:a});const o=this.read({readback:i});return this.resetRenderState(this.renderer,r),o}getTexture(){var t;return(t=this.target)==null?void 0:t.texture}};vn.programTemplate=null;vn.readbackProgram=new Map;vn.geometry=new JA(2,2);vn.mesh=new Je(vn.geometry,new lr({visible:!1}));vn.scene=new zn().add(vn.mesh);vn.camera=new us;let Rc=vn;const pr=class ve{constructor(t={}){this.capacity=0,this.count=0,this.array=null,this.readback=null,this.source=null,this.needsUpdate=!0,this.dyno=new un({key:"rgbaArray",type:Fc,globals:()=>[Nc],value:{texture:ve.getEmpty(),count:0},update:e=>{var n;return e.texture=((n=this.readback)==null?void 0:n.getTexture())??this.source??ve.getEmpty(),e.count=this.count,e}}),t.array?(this.array=t.array,this.capacity=Math.floor(this.array.length/4),this.capacity=Math.floor(this.capacity/Ae)*Ae,this.count=Math.min(this.capacity,t.count??Number.POSITIVE_INFINITY)):(this.capacity=t.capacity??0,this.count=0)}dispose(){this.readback&&(this.readback.dispose(),this.readback=null),this.source&&(this.source.dispose(),this.source=null)}ensureCapacity(t){var e;if(!this.array||t>(((e=this.array)==null?void 0:e.length)??0)/4){this.capacity=Ze(t).maxSplats;const n=new Uint8Array(this.capacity*4);this.array&&n.set(this.array),this.array=n}return this.array}getTexture(){var t;let e=(t=this.readback)==null?void 0:t.getTexture();return(this.source||this.array)&&(e=this.maybeUpdateSource()),e??ve.getEmpty()}maybeUpdateSource(){if(!this.array)throw new Error("No array");if(this.needsUpdate||!this.source){if(this.needsUpdate=!1,this.source){const{width:t,height:e,depth:n}=this.source.image;this.capacity!==t*e*n&&(this.source.dispose(),this.source=null)}if(this.source)this.array.buffer!==this.source.image.data.buffer&&(this.source.image.data=new Uint8Array(this.array.buffer));else{const{width:t,height:e,depth:n}=Ze(this.capacity);this.source=new cn(this.array,t,e,n),this.source.format=me,this.source.type=Le,this.source.internalFormat="RGBA8",this.source.needsUpdate=!0}this.source.needsUpdate=!0}return this.source}render({reader:t,count:e,renderer:n}){this.readback||(this.readback=new Rc({renderer:n})),this.readback.render({reader:t,count:e,renderer:n}),this.capacity=this.readback.capacity,this.count=this.readback.count}fromPackedSplats({packedSplats:t,base:e,count:n,renderer:i}){const{dynoSplats:s,dynoBase:a,dynoCount:r,reader:o}=ve.makeDynos();return s.packedSplats=t,a.value=e,r.value=n,this.render({reader:o,count:n,renderer:i}),this}async read(){if(!this.readback)throw new Error("No readback");return(!this.array||this.array.length<this.count*4)&&(this.array=new Uint8Array(this.capacity*4)),(await this.readback.readback({readback:this.array})).subarray(0,this.count*4)}static getEmpty(){if(!ve.emptySource){const t=new Uint8Array(4);ve.emptySource=new cn(t,1,1,1),ve.emptySource.format=me,ve.emptySource.type=Le,ve.emptySource.internalFormat="RGBA8",ve.emptySource.needsUpdate=!0}return ve.emptySource}static makeDynos(){if(!ve.dynos){const t=new fr,e=new Wa({value:0}),n=new Wa({value:0}),i=Jn({index:"int"},{rgba8:"vec4"},({index:s})=>{if(!s)throw new Error("index is undefined");s=si(s,e);const a=vE(t,s,e,n);return{rgba8:es(a).outputs.rgba}});ve.dynos={dynoSplats:t,dynoBase:e,dynoCount:n,reader:i}}return ve.dynos}};pr.emptySource=null;pr.dynos=null;let Up=pr;const Fc={type:"RgbaArray"},Nc=Ge(`
  struct RgbaArray {
    sampler2DArray texture;
    int count;
  };
`);function Lp(A,t){return new xe({inTypes:{rgba:Fc,index:"int"},outTypes:{rgba:"vec4"},inputs:{rgba:A,index:t},globals:()=>[Nc],statements:({inputs:n,outputs:i})=>In(`
        if ((index >= 0) && (index < ${n.rgba}.count)) {
          ${i.rgba} = texelFetch(${n.rgba}.texture, splatTexCoord(index), 0);
        } else {
          ${i.rgba} = vec4(0.0, 0.0, 0.0, 0.0);
        }
      `)}).outputs.rgba}function Gp(A){switch(A){case"all":return 0;case"plane":return 1;case"sphere":return 2;case"box":return 3;case"ellipsoid":return 4;case"cylinder":return 5;case"capsule":return 6;case"infinite_cone":return 7;default:throw new Error(`Unknown SDF type: ${A}`)}}function Pp(A){switch(A){case"multiply":return 0;case"set_rgb":return 1;case"add_rgba":return 2;default:throw new Error(`Unknown blend mode: ${A}`)}}class Hp extends _e{constructor(t={}){super();const{type:e,invert:n,opacity:i,color:s,displace:a,radius:r}=t;this.type=e??"sphere",this.invert=n??!1,this.opacity=i??1,this.color=s??new Ht(1,1,1),this.displace=a??new b(0,0,0),this.radius=r??0}}const Tc=class kc extends _e{constructor(t={}){const{name:e,rgbaBlendMode:n="multiply",sdfSmooth:i=0,softEdge:s=0,invert:a=!1,sdfs:r=null}=t;super(),this.rgbaBlendMode=n,this.sdfSmooth=i,this.softEdge=s,this.invert=a,this.sdfs=r,this.ordering=kc.nextOrdering++,this.name=e??`Edit ${this.ordering}`}addSdf(t){this.sdfs==null&&(this.sdfs=[]),this.sdfs.push(t)}removeSdf(t){this.sdfs!=null&&(this.sdfs=this.sdfs.filter(e=>e!==t))}};Tc.nextOrdering=1;let Uc=Tc;class zp{constructor({maxSdfs:t,maxEdits:e}){this.maxSdfs=Math.max(16,t??0),this.numSdfs=0,this.sdfData=new Uint32Array(this.maxSdfs*8*4),this.sdfFloatData=new Float32Array(this.sdfData.buffer),this.sdfTexture=this.newSdfTexture(this.sdfData,this.maxSdfs),this.dynoSdfArray=new un({key:"sdfArray",type:Lc,globals:()=>[Gc],value:{numSdfs:0,sdfTexture:this.sdfTexture},update:n=>(n.numSdfs=this.numSdfs,n.sdfTexture=this.sdfTexture,n)}),this.maxEdits=Math.max(16,e??0),this.numEdits=0,this.editData=new Uint32Array(this.maxEdits*4),this.editFloatData=new Float32Array(this.editData.buffer),this.dynoNumEdits=new Wa({value:0}),this.dynoEdits=this.newEdits(this.editData,this.maxEdits)}newSdfTexture(t,e){const n=new Qg(t,8,e,Dn,ke);return n.internalFormat="RGBA32UI",n.needsUpdate=!0,n}newEdits(t,e){return new un({key:"edits",type:"uvec4",count:e,globals:()=>[Pc],value:t})}ensureCapacity({maxSdfs:t,maxEdits:e}){let n=!1;return t>this.sdfTexture.image.height&&(this.sdfTexture.dispose(),this.maxSdfs=Math.max(this.maxSdfs*2,t),this.sdfData=new Uint32Array(this.maxSdfs*8*4),this.sdfFloatData=new Float32Array(this.sdfData.buffer),this.sdfTexture=this.newSdfTexture(this.sdfData,this.maxSdfs)),e>(this.dynoEdits.count??0)&&(this.maxEdits=Math.max(this.maxEdits*2,e),this.editData=new Uint32Array(this.maxEdits*4),this.editFloatData=new Float32Array(this.editData.buffer),this.dynoEdits=this.newEdits(this.editData,this.maxEdits),n=!0),n}updateEditData(t,e){const n=this.editData[t]!==e;return this.editData[t]=e,n}updateEditFloatData(t,e){RA[0]=e;const n=this.editFloatData[t]!==RA[0];return n&&(this.editFloatData[t]=RA[0]),n}encodeEdit(t,{sdfFirst:e,sdfCount:n,invert:i,rgbaBlendMode:s,softEdge:a,sdfSmooth:r}){const o=t*4;let c=!1;return c=this.updateEditData(o+0,s|(i?256:0))||c,c=this.updateEditData(o+1,e|n<<16)||c,c=this.updateEditFloatData(o+2,a)||c,c=this.updateEditFloatData(o+3,r)||c,c}updateSdfData(t,e){const n=this.sdfData[t]!==e;return this.sdfData[t]=e,n}updateSdfFloatData(t,e){RA[0]=e;const n=this.sdfFloatData[t]!==RA[0];return n&&(this.sdfFloatData[t]=RA[0]),n}encodeSdf(t,{sdfType:e,invert:n,center:i,quaternion:s,scale:a,sizes:r},o){const c=t*32,g=e|(n?256:0);let l=!1;l=this.updateSdfFloatData(c+0,(i==null?void 0:i.x)??0)||l,l=this.updateSdfFloatData(c+1,(i==null?void 0:i.y)??0)||l,l=this.updateSdfFloatData(c+2,(i==null?void 0:i.z)??0)||l,l=this.updateSdfData(c+3,g)||l,l=this.updateSdfFloatData(c+4,(s==null?void 0:s.x)??0)||l,l=this.updateSdfFloatData(c+5,(s==null?void 0:s.y)??0)||l,l=this.updateSdfFloatData(c+6,(s==null?void 0:s.z)??0)||l,l=this.updateSdfFloatData(c+7,(s==null?void 0:s.w)??0)||l,l=this.updateSdfFloatData(c+8,(a==null?void 0:a.x)??0)||l,l=this.updateSdfFloatData(c+9,(a==null?void 0:a.y)??0)||l,l=this.updateSdfFloatData(c+10,(a==null?void 0:a.z)??0)||l,l=this.updateSdfData(c+11,0)||l,l=this.updateSdfFloatData(c+12,(r==null?void 0:r.x)??0)||l,l=this.updateSdfFloatData(c+13,(r==null?void 0:r.y)??0)||l,l=this.updateSdfFloatData(c+14,(r==null?void 0:r.z)??0)||l,l=this.updateSdfFloatData(c+15,(r==null?void 0:r.w)??0)||l;const h=Math.min(4,o.length);for(let d=0;d<h;++d){const E=c+16+d*4;l=this.updateSdfFloatData(E+0,o[d].x)||l,l=this.updateSdfFloatData(E+1,o[d].y)||l,l=this.updateSdfFloatData(E+2,o[d].z)||l,l=this.updateSdfFloatData(E+3,o[d].w)||l}return l}update(t){const e=t.reduce((l,{sdfs:h})=>l+h.length,0),n=this.ensureCapacity({maxEdits:t.length,maxSdfs:e}),i=[new te,new te],s=new b,a=new fe,r=new b,o=new te;let c=0,g=n;t.length!==this.dynoNumEdits.value&&(this.dynoNumEdits.value=t.length,this.numEdits=t.length,g=!0);for(const[l,{edit:h,sdfs:d}]of t.entries()){g=this.encodeEdit(l,{sdfFirst:c,sdfCount:d.length,invert:h.invert,rgbaBlendMode:Pp(h.rgbaBlendMode),softEdge:h.softEdge,sdfSmooth:h.sdfSmooth})||g;let E=!1;for(const f of d)o.set(f.scale.x,f.scale.y,f.scale.z,f.radius),f.scale.setScalar(1),f.updateMatrixWorld(),f.matrixWorld.clone().invert().decompose(s,a,r),f.scale.set(o.x,o.y,o.z),f.updateMatrixWorld(),i[0].set(f.color.r,f.color.g,f.color.b,f.opacity),i[1].set(f.displace.x,f.displace.y,f.displace.z,1),E=this.encodeSdf(c,{sdfType:Gp(f.type),invert:f.invert,center:s,quaternion:a,scale:r,sizes:o},i)||E,c+=1;this.numSdfs=c,E&&(this.sdfTexture.needsUpdate=!0),g||(g=E)}return{updated:g,dynoUpdated:n}}modify(t){return Yp(t,this.dynoSdfArray,this.dynoNumEdits,this.dynoEdits)}}const Lc={type:"SdfArray"},Gc=Ge(`
  struct SdfArray {
    int numSdfs;
    usampler2D sdfTexture;
  };

  void unpackSdfArray(
    usampler2D sdfTexture, int sdfIndex, out uint flags,
    out vec3 center, out vec4 quaternion, out vec3 scale, out vec4 sizes,
    int numValues, out vec4 values[4]
  ) {
    uvec4 temp = texelFetch(sdfTexture, ivec2(0, sdfIndex), 0);
    flags = temp.w;
    center = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(1, sdfIndex), 0);
    quaternion = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    temp = texelFetch(sdfTexture, ivec2(2, sdfIndex), 0);
    scale = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(3, sdfIndex), 0);
    sizes = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    for (int i = 0; i < numValues; ++i) {
      temp = texelFetch(sdfTexture, ivec2(4 + i, sdfIndex), 0);
      values[i] = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));
    }
  }

  const uint SDF_FLAG_TYPE = 0xFFu;
  const uint SDF_FLAG_INVERT = 1u << 8u;

  const uint SDF_TYPE_ALL = 0u;
  const uint SDF_TYPE_PLANE = 1u;
  const uint SDF_TYPE_SPHERE = 2u;
  const uint SDF_TYPE_BOX = 3u;
  const uint SDF_TYPE_ELLIPSOID = 4u;
  const uint SDF_TYPE_CYLINDER = 5u;
  const uint SDF_TYPE_CAPSULE = 6u;
  const uint SDF_TYPE_INFINITE_CONE = 7u;

  float evaluateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 outValues[4]
  ) {
    float distanceAccum = (smoothK == 0.0) ? 1.0 / 0.0 : 0.0;
    float maxExp = -1.0 / 0.0;
    for (int i = 0; i < numValues; ++i) {
        outValues[i] = vec4(0.0);
    }

    uint flags;
    vec3 center, scale;
    vec4 quaternion, sizes;
    vec4 values[4];

    int sdfLast = min(sdfFirst + sdfCount, numSdfs);
    for (int index = sdfFirst; index < sdfLast; ++index) {
      unpackSdfArray(sdfTexture, index, flags, center, quaternion, scale, sizes, numValues, values);
      uint sdfType = flags & SDF_FLAG_TYPE;
      vec3 sdfPos = quatVec(quaternion, pos * scale) + center;

      float distance;
      switch (sdfType) {
        case SDF_TYPE_ALL:
          distance = -1.0 / 0.0;
          break;
        case SDF_TYPE_PLANE: {
          distance = sdfPos.z;
          break;
        }
        case SDF_TYPE_SPHERE: {
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_BOX: {
          vec3 q = abs(sdfPos) - sizes.xyz + sizes.w;
          distance = length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - sizes.w;
          break;
        }
        case SDF_TYPE_ELLIPSOID: {
          vec3 sizes = sizes.xyz;
          float k0 = length(sdfPos / sizes);
          float k1 = length(sdfPos / dot(sizes, sizes));
          distance = k0 * (k0 - 1.0) / k1;
          break;
        }
        case SDF_TYPE_CYLINDER: {
          vec2 d = abs(vec2(length(sdfPos.xz), sdfPos.y)) - sizes.wy;
          distance = min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
          break;
        }
        case SDF_TYPE_CAPSULE: {
          sdfPos.y -= clamp(sdfPos.y, -0.5 * sizes.y, 0.5 * sizes.y);
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_INFINITE_CONE: {
          float angle = 0.25 * PI * sizes.w;
          vec2 c = vec2(sin(angle), cos(angle));
          vec2 q = vec2(length(sdfPos.xy), -sdfPos.z);
          float d = length(q - c * max(dot(q, c), 0.0));
          distance = d * (((q.x * c.y - q.y * c.x) < 0.0) ? -1.0 : 1.0);
          break;
        }
      }

      if ((flags & SDF_FLAG_INVERT) != 0u) {
        distance = -distance;
      }

      if (smoothK == 0.0) {
        if (distance < distanceAccum) {
          distanceAccum = distance;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] = values[i];
          }
        }
      } else {
        float scaledDistance = -distance / smoothK;
        if (scaledDistance > maxExp) {
          float scale = exp(maxExp - scaledDistance);
          distanceAccum *= scale;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] *= scale;
          }
          maxExp = scaledDistance;
        }

        float weight = exp(scaledDistance - maxExp);
        distanceAccum += weight;
        for (int i = 0; i < numValues; ++i) {
          outValues[i] += weight * values[i];
        }
      }
    }

    if (smoothK == 0.0) {
      return distanceAccum;
    } else {
      // Very distant SDFs may result in 0 accumulation
      if (distanceAccum == 0.0) {
        return 1.0 / 0.0;
      }
      for (int i = 0; i < numValues; ++i) {
        outValues[i] /= distanceAccum;
      }
      return (-log(distanceAccum) - maxExp) * smoothK;
    }
  }

  float modulateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 values[4],
    float softEdge, bool invert
  ) {
    float distance = evaluateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, numValues, values);
    if (invert) {
      distance = -distance;
    }

    return (softEdge == 0.0) ? ((distance < 0.0) ? 1.0 : 0.0)
      : clamp(-distance / softEdge + 0.5, 0.0, 1.0);
  }
`),Pc=Ge(`
  const uint EDIT_FLAG_BLEND = 0xFFu;
  const uint EDIT_BLEND_MULTIPLY = 0u;
  const uint EDIT_BLEND_SET_RGB = 1u;
  const uint EDIT_BLEND_ADD_RGBA = 2u;
  const uint EDIT_FLAG_INVERT = 0x100u;

  void decodeEdit(
    uvec4 packedEdit, out int sdfFirst, out int sdfCount,
    out bool invert, out uint rgbaBlendMode, out float softEdge, out float sdfSmooth
  ) {
    rgbaBlendMode = packedEdit.x & EDIT_FLAG_BLEND;
    invert = (packedEdit.x & EDIT_FLAG_INVERT) != 0u;

    sdfFirst = int(packedEdit.y & 0xFFFFu);
    sdfCount = int(packedEdit.y >> 16u);

    softEdge = uintBitsToFloat(packedEdit.z);
    sdfSmooth = uintBitsToFloat(packedEdit.w);
  }

  void applyRgbaDisplaceEdit(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, inout vec3 pos,
    float smoothK, float softEdge, bool invert, uint rgbaBlendMode, inout vec4 rgba
  ) {
    vec4 values[4];
    float modulate = modulateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, 2, values, softEdge, invert);
    // On Android, moving values[0] is necessary to work around a compiler bug.
    vec4 sdfRgba = values[0];
    vec4 sdfDisplaceScale = values[1];

    vec4 target;
    switch (rgbaBlendMode) {
      case EDIT_BLEND_MULTIPLY:
        target = rgba * sdfRgba;
        break;
      case EDIT_BLEND_SET_RGB:
        target = vec4(sdfRgba.rgb, rgba.a * sdfRgba.a);
        break;
      case EDIT_BLEND_ADD_RGBA:
        target = rgba + sdfRgba;
        break;
      default:
        // Debug output if blend mode not set
        target = vec4(fract(pos), 1.0);
    }
    rgba = mix(rgba, target, modulate);
    pos += sdfDisplaceScale.xyz * modulate;
  }

  void applyPackedRgbaDisplaceEdit(uvec4 packedEdit, usampler2D sdfTexture, int numSdfs, inout vec3 pos, inout vec4 rgba) {
    int sdfFirst, sdfCount;
    bool invert;
    uint rgbaBlendMode;
    float softEdge, sdfSmooth;
    decodeEdit(packedEdit, sdfFirst, sdfCount, invert, rgbaBlendMode, softEdge, sdfSmooth);
    applyRgbaDisplaceEdit(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, sdfSmooth, softEdge, invert, rgbaBlendMode, rgba);
  }
`);function Yp(A,t,e,n){return new xe({inTypes:{gsplat:Ee,sdfArray:Lc,numEdits:"int",rgbaDisplaceEdits:"uvec4"},outTypes:{gsplat:Ee},globals:()=>[Gc,Pc],inputs:{gsplat:A,sdfArray:t,numEdits:e,rgbaDisplaceEdits:n},statements:({inputs:s,outputs:a})=>{const{sdfArray:r,numEdits:o,rgbaDisplaceEdits:c}=s,{gsplat:g}=a;return In(`
        ${g} = ${s.gsplat};
        if (isGsplatActive(${g}.flags)) {
          for (int editIndex = 0; editIndex < ${o}; ++editIndex) {
            applyPackedRgbaDisplaceEdit(
              ${c}[editIndex], ${r}.sdfTexture, ${r}.numSdfs,
              ${g}.center, ${g}.rgba
            );
          }
        }
      `)}}).outputs.gsplat}const RA=new Float32Array(1);class Op{constructor(t){this.modifier=t,this.cache=new Map}apply(t){let e=this.cache.get(t);return e||(e=Jn({index:"int"},{gsplat:Ee},({index:n})=>{const{gsplat:i}=t.apply({index:n});return this.modifier.apply({gsplat:i})}),this.cache.set(t,e)),e}}class Oi{constructor(){this.scale=new gi({value:Number.NEGATIVE_INFINITY}),this.rotate=new Ir({value:new fe(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY)}),this.translate=new cs({value:new b(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY)})}apply(t){return Rp(t,{scale:this.scale,rotate:this.rotate,translate:this.translate})}applyDir(t){return Fp(t,{rotate:this.rotate})}applyGsplat(t){return pc(t,{scale:this.scale,rotate:this.rotate,translate:this.translate})}updateFromMatrix(t){const e=new b,n=new fe,i=new b;t.decompose(i,n,e);const s=(e.x+e.y+e.z)/3;let a=!1;return s!==this.scale.value&&(this.scale.value=s,a=!0),i.equals(this.translate.value)||(this.translate.value.copy(i),a=!0),n.equals(this.rotate.value)||(this.rotate.value.copy(n),a=!0),a}update(t){return t.updateMatrixWorld(),this.updateFromMatrix(t.matrixWorld)}}class Hc extends _e{constructor({numSplats:t,generator:e,construct:n,update:i}){if(super(),this.numSplats=t??0,this.generator=e,this.frameUpdate=i,this.version=0,n){const s=n(this);Object.assign(this,s)}}updateVersion(){this.version+=1}set needsUpdate(t){t&&this.updateVersion()}}const hi=class Za extends Hc{constructor(t={}){const e=new Oi,n=new Oi,i=new Oi,s=new Oi,a=new Ir({value:new te(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY)}),r=new gi({value:0}),o=new gi({value:0}),c={transform:e,viewToWorld:n,worldToView:i,viewToObject:s,recolor:a,time:r,deltaTime:o};if(super({update:({time:g,deltaTime:l,viewToWorld:h,globalEdits:d})=>this.update({time:g,deltaTime:l,viewToWorld:h,globalEdits:d})}),this.isInitialized=!1,this.recolor=new Ht(1,1,1),this.opacity=1,this.enableViewToObject=!1,this.enableViewToWorld=!1,this.enableWorldToView=!1,this.skinning=null,this.edits=null,this.rgbaDisplaceEdits=null,this.splatRgba=null,this.maxSh=3,this.packedSplats=t.packedSplats??new YA,this.numSplats=this.packedSplats.numSplats,this.editable=t.editable??!0,this.onFrame=t.onFrame,this.context=c,this.objectModifier=t.objectModifier,this.worldModifier=t.worldModifier,this.updateGenerator(),t.url||t.fileBytes||t.constructSplats||t.packedSplats&&!t.packedSplats.isInitialized)this.initialized=this.asyncInitialize(t).then(async()=>{if(this.updateGenerator(),this.isInitialized=!0,t.onLoad){const g=t.onLoad(this);g instanceof Promise&&await g}return this});else if(this.isInitialized=!0,this.initialized=Promise.resolve(this),t.onLoad){const g=t.onLoad(this);g instanceof Promise&&(this.initialized=g.then(()=>this))}}async asyncInitialize(t){const{url:e,fileBytes:n,fileType:i,fileName:s,maxSplats:a,constructSplats:r}=t;if(e||n||r){const o={url:e,fileBytes:n,fileType:i,fileName:s,maxSplats:a,construct:r};this.packedSplats.reinitialize(o)}this.packedSplats&&(await this.packedSplats.initialized,this.numSplats=this.packedSplats.numSplats,this.updateGenerator())}static async staticInitialize(){await Ic(),Za.isStaticInitialized=!0}pushSplat(t,e,n,i,s){this.packedSplats.pushSplat(t,e,n,i,s)}forEachSplat(t){this.packedSplats.forEachSplat(t)}dispose(){this.packedSplats.dispose()}constructGenerator(t){const{transform:e,viewToObject:n,recolor:i}=t,s=Jn({index:"int"},{gsplat:Ee},({index:a})=>{if(!a)throw new Error("index is undefined");let r=os(this.packedSplats.dyno,a);if(this.maxSh>=1){const{sh1Texture:c,sh2Texture:g,sh3Texture:l}=this.ensureShTextures();if(c){const h=n.translate,{center:d}=es(r).outputs,E=wp(pp(d,h));let f=Kp(r,c,E);this.maxSh>=2&&g&&(f=si(f,Wp(r,g,E))),this.maxSh>=3&&l&&(f=si(f,Xp(r,l,E)));let{rgba:I}=es(r).outputs;I=si(I,Dp(f,Ka("float",0))),r=Zs({gsplat:r,rgba:I})}}if(this.splatRgba){const c=Lp(this.splatRgba.dyno,a);r=Zs({gsplat:r,rgba:c})}this.skinning&&(r=this.skinning.modify(r)),this.objectModifier&&(r=this.objectModifier.apply({gsplat:r}).gsplat),r=e.applyGsplat(r);const o=bc(i,es(r).outputs.rgba);return r=Zs({gsplat:r,rgba:o}),this.rgbaDisplaceEdits&&(r=this.rgbaDisplaceEdits.modify(r)),this.worldModifier&&(r=this.worldModifier.apply({gsplat:r}).gsplat),{gsplat:r}});this.generator=s}updateGenerator(){this.constructGenerator(this.context)}update({time:t,viewToWorld:e,deltaTime:n,globalEdits:i}){var s;this.numSplats=this.packedSplats.numSplats,this.context.time.value=t,this.context.deltaTime.value=n,Za.dynoTime.value=t;const{transform:a,viewToObject:r,recolor:o}=this.context;let c=a.update(this);this.context.viewToWorld.updateFromMatrix(e)&&this.enableViewToWorld&&(c=!0);const g=e.clone().invert();this.context.worldToView.updateFromMatrix(g)&&this.enableWorldToView&&(c=!0);const d=new ne().compose(a.translate.value,a.rotate.value,new b().setScalar(a.scale.value)).invert().multiply(e);r.updateFromMatrix(d)&&(this.enableViewToObject||this.packedSplats.extra.sh1)&&(c=!0);const E=new te(this.recolor.r,this.recolor.g,this.recolor.b,this.opacity);E.equals(o.value)||(o.value.copy(E),c=!0);const f=this.editable?(this.edits??[]).concat(i):[];this.editable&&!this.edits&&this.traverseVisible(u=>{u instanceof Uc&&f.push(u)}),f.sort((u,x)=>u.ordering-x.ordering);const I=f.map(u=>{if(u.sdfs!=null)return{edit:u,sdfs:u.sdfs};const x=[];return u.traverseVisible(Q=>{Q instanceof Hp&&x.push(Q)}),{edit:u,sdfs:x}});if(I.length>0&&!this.rgbaDisplaceEdits){const u=I.length,x=I.reduce((Q,m)=>Q+m.sdfs.length,0);this.rgbaDisplaceEdits=new zp({maxEdits:u,maxSdfs:x}),this.updateGenerator()}if(this.rgbaDisplaceEdits){const u=this.rgbaDisplaceEdits.update(I);c||(c=u.updated),u.dynoUpdated&&this.updateGenerator()}c&&this.updateVersion(),(s=this.onFrame)==null||s.call(this,{mesh:this,time:t,deltaTime:n})}raycast(t,e){if(!this.packedSplats.packedArray||!this.packedSplats.numSplats)return;const{near:n,far:i,ray:s}=t,a=this.matrixWorld.clone().invert(),r=new Tt().setFromMatrix4(a),o=s.origin.clone().applyMatrix4(a),c=s.direction.clone().applyMatrix3(r),g=new b;a.decompose(new b,new fe,g),(g.x*g.y*g.z)**(1/3);const h=dE(o.x,o.y,o.z,c.x,c.y,c.z,n,i,this.packedSplats.numSplats,this.packedSplats.packedArray,!0);for(const d of h){const E=s.direction.clone().multiplyScalar(d).add(s.origin);e.push({distance:d,point:E,object:this})}}ensureShTextures(){if(!this.packedSplats.extra.sh1)return{};let t=this.packedSplats.extra.sh1Texture;if(!t){let i=this.packedSplats.extra.sh1;const{width:s,height:a,depth:r,maxSplats:o}=Ze(i.length/2);if(i.length<o*2){const g=new Uint32Array(o*2);g.set(i),this.packedSplats.extra.sh1=g,i=g}const c=new cn(i,s,a,r);c.format=hs,c.type=ke,c.internalFormat="RG32UI",c.needsUpdate=!0,t=new js({value:c,key:"sh1"}),this.packedSplats.extra.sh1Texture=t}if(!this.packedSplats.extra.sh2)return{sh1Texture:t};let e=this.packedSplats.extra.sh2Texture;if(!e){let i=this.packedSplats.extra.sh2;const{width:s,height:a,depth:r,maxSplats:o}=Ze(i.length/4);if(i.length<o*4){const g=new Uint32Array(o*4);g.set(i),this.packedSplats.extra.sh2=g,i=g}const c=new cn(i,s,a,r);c.format=Dn,c.type=ke,c.internalFormat="RGBA32UI",c.needsUpdate=!0,e=new js({value:c,key:"sh2"}),this.packedSplats.extra.sh2Texture=e}if(!this.packedSplats.extra.sh3)return{sh1Texture:t,sh2Texture:e};let n=this.packedSplats.extra.sh3Texture;if(!n){let i=this.packedSplats.extra.sh3;const{width:s,height:a,depth:r,maxSplats:o}=Ze(i.length/4);if(i.length<o*4){const g=new Uint32Array(o*4);g.set(i),this.packedSplats.extra.sh3=g,i=g}const c=new cn(i,s,a,r);c.format=Dn,c.type=ke,c.internalFormat="RGBA32UI",c.needsUpdate=!0,n=new js({value:c,key:"sh3"}),this.packedSplats.extra.sh3Texture=n}return{sh1Texture:t,sh2Texture:e,sh3Texture:n}}};hi.staticInitialized=hi.staticInitialize();hi.isStaticInitialized=!1;hi.dynoTime=new gi({value:0});let ja=hi;const Jp=Ge(`
  vec3 evaluateSH1(Gsplat gsplat, usampler2DArray sh1, vec3 viewDir) {
    // Extract sint7 values packed into 2 x uint32
    uvec2 packed = texelFetch(sh1, splatTexCoord(gsplat.index), 0).rg;
    vec3 sh1_0 = vec3(ivec3(
      int(packed.x << 25u) >> 25,
      int(packed.x << 18u) >> 25,
      int(packed.x << 11u) >> 25
    )) / 63.0;
    vec3 sh1_1 = vec3(ivec3(
      int(packed.x << 4u) >> 25,
      int((packed.x >> 3u) | (packed.y << 29u)) >> 25,
      int(packed.y << 22u) >> 25
    )) / 63.0;
    vec3 sh1_2 = vec3(ivec3(
      int(packed.y << 15u) >> 25,
      int(packed.y << 8u) >> 25,
      int(packed.y << 1u) >> 25
    )) / 63.0;

    return sh1_0 * (-0.4886025 * viewDir.y)
      + sh1_1 * (0.4886025 * viewDir.z)
      + sh1_2 * (-0.4886025 * viewDir.x);
  }
`),qp=Ge(`
  vec3 evaluateSH2(Gsplat gsplat, usampler2DArray sh2, vec3 viewDir) {
    // Extract sint8 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh2, splatTexCoord(gsplat.index), 0);
    vec3 sh2_0 = vec3(ivec3(
      int(packed.x << 24u) >> 24,
      int(packed.x << 16u) >> 24,
      int(packed.x << 8u) >> 24
    )) / 127.0;
    vec3 sh2_1 = vec3(ivec3(
      int(packed.x) >> 24,
      int(packed.y << 24u) >> 24,
      int(packed.y << 16u) >> 24
    )) / 127.0;
    vec3 sh2_2 = vec3(ivec3(
      int(packed.y << 8u) >> 24,
      int(packed.y) >> 24,
      int(packed.z << 24u) >> 24
    )) / 127.0;
    vec3 sh2_3 = vec3(ivec3(
      int(packed.z << 16u) >> 24,
      int(packed.z << 8u) >> 24,
      int(packed.z) >> 24
    )) / 127.0;
    vec3 sh2_4 = vec3(ivec3(
      int(packed.w << 24u) >> 24,
      int(packed.w << 16u) >> 24,
      int(packed.w << 8u) >> 24
    )) / 127.0;

    return sh2_0 * (1.0925484 * viewDir.x * viewDir.y)
      + sh2_1 * (1.0925484 * viewDir.y * viewDir.z)
      + sh2_2 * (0.3153915 * (2.0 * viewDir.z * viewDir.z - viewDir.x * viewDir.x - viewDir.y * viewDir.y))
      + sh2_3 * (1.0925484 * viewDir.x * viewDir.z)
      + sh2_4 * (0.5462742 * (viewDir.x * viewDir.x - viewDir.y * viewDir.y));
  }
`),Vp=Ge(`
  vec3 evaluateSH3(Gsplat gsplat, usampler2DArray sh3, vec3 viewDir) {
    // Extract sint6 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh3, splatTexCoord(gsplat.index), 0);
    vec3 sh3_0 = vec3(ivec3(
      int(packed.x << 26u) >> 26,
      int(packed.x << 20u) >> 26,
      int(packed.x << 14u) >> 26
    )) / 31.0;
    vec3 sh3_1 = vec3(ivec3(
      int(packed.x << 8u) >> 26,
      int(packed.x << 2u) >> 26,
      int((packed.x >> 4u) | (packed.y << 28u)) >> 26
    )) / 31.0;
    vec3 sh3_2 = vec3(ivec3(
      int(packed.y << 22u) >> 26,
      int(packed.y << 16u) >> 26,
      int(packed.y << 10u) >> 26
    )) / 31.0;
    vec3 sh3_3 = vec3(ivec3(
      int(packed.y << 4u) >> 26,
      int((packed.y >> 2u) | (packed.z << 30u)) >> 26,
      int(packed.z << 24u) >> 26
    )) / 31.0;
    vec3 sh3_4 = vec3(ivec3(
      int(packed.z << 18u) >> 26,
      int(packed.z << 12u) >> 26,
      int(packed.z << 6u) >> 26
    )) / 31.0;
    vec3 sh3_5 = vec3(ivec3(
      int(packed.z) >> 26,
      int(packed.w << 26u) >> 26,
      int(packed.w << 20u) >> 26
    )) / 31.0;
    vec3 sh3_6 = vec3(ivec3(
      int(packed.w << 14u) >> 26,
      int(packed.w << 8u) >> 26,
      int(packed.w << 2u) >> 26
    )) / 31.0;

    float xx = viewDir.x * viewDir.x;
    float yy = viewDir.y * viewDir.y;
    float zz = viewDir.z * viewDir.z;
    float xy = viewDir.x * viewDir.y;
    float yz = viewDir.y * viewDir.z;
    float zx = viewDir.z * viewDir.x;

    return sh3_0 * (-0.5900436 * viewDir.y * (3.0 * xx - yy))
      + sh3_1 * (2.8906114 * xy * viewDir.z) +
      + sh3_2 * (-0.4570458 * viewDir.y * (4.0 * zz - xx - yy))
      + sh3_3 * (0.3731763 * viewDir.z * (2.0 * zz - 3.0 * xx - 3.0 * yy))
      + sh3_4 * (-0.4570458 * viewDir.x * (4.0 * zz - xx - yy))
      + sh3_5 * (1.4453057 * viewDir.z * (xx - yy))
      + sh3_6 * (-0.5900436 * viewDir.x * (xx - 3.0 * yy));
  }
`);function Kp(A,t,e){return Is({inTypes:{gsplat:Ee,sh1:"usampler2DArray",viewDir:"vec3"},outTypes:{rgb:"vec3"},inputs:{gsplat:A,sh1:t,viewDir:e},globals:()=>[En,Jp],statements:({inputs:n,outputs:i})=>In(`
        if (isGsplatActive(${n.gsplat}.flags)) {
          ${i.rgb} = evaluateSH1(${n.gsplat}, ${n.sh1}, ${n.viewDir});
        } else {
          ${i.rgb} = vec3(0.0);
        }
      `)}).outputs.rgb}function Wp(A,t,e){return Is({inTypes:{gsplat:Ee,sh2:"usampler2DArray",viewDir:"vec3"},outTypes:{rgb:"vec3"},inputs:{gsplat:A,sh2:t,viewDir:e},globals:()=>[En,qp],statements:({inputs:n,outputs:i})=>In(`
        if (isGsplatActive(${n.gsplat}.flags)) {
          ${i.rgb} = evaluateSH2(${n.gsplat}, ${n.sh2}, ${n.viewDir});
        } else {
          ${i.rgb} = vec3(0.0);
        }
      `)}).outputs.rgb}function Xp(A,t,e){return Is({inTypes:{gsplat:Ee,sh3:"usampler2DArray",viewDir:"vec3"},outTypes:{rgb:"vec3"},inputs:{gsplat:A,sh3:t,viewDir:e},globals:()=>[En,Vp],statements:({inputs:n,outputs:i})=>In(`
        if (isGsplatActive(${n.gsplat}.flags)) {
          ${i.rgb} = evaluateSH3(${n.gsplat}, ${n.sh3}, ${n.viewDir});
        } else {
          ${i.rgb} = vec3(0.0);
        }
      `)}).outputs.rgb}const zc=class As{constructor({fileBytes:t}){this.header="",this.littleEndian=!0,this.elements={},this.comments=[],this.data=null,this.numSplats=0,this.fileBytes=t instanceof ArrayBuffer?new Uint8Array(t):t}async parseHeader(){const e=new ReadableStream({start:a=>{a.enqueue(this.fileBytes.slice(0,65536)),a.close()}}).pipeThrough(new TextDecoderStream).getReader();this.header="";const n=`end_header
`;for(;;){const{value:a,done:r}=await e.read();if(r)throw new Error("Failed to read header");this.header+=a;const o=this.header.indexOf(n);if(o>=0){this.header=this.header.slice(0,o+n.length);break}}const i=new TextEncoder().encode(this.header).length;this.data=new DataView(this.fileBytes.buffer,i),this.elements={};let s=null;this.comments=[],this.header.trim().split(`
`).forEach((a,r)=>{const o=a.trim();if(r===0){if(o!=="ply")throw new Error("Invalid PLY header");return}if(o.length===0)return;const c=o.split(" ");switch(c[0]){case"format":if(c[1]==="binary_little_endian")this.littleEndian=!0;else if(c[1]==="binary_big_endian")this.littleEndian=!1;else throw new Error(`Unsupported PLY format: ${c[1]}`);if(c[2]!=="1.0")throw new Error(`Unsupported PLY version: ${c[2]}`);break;case"end_header":break;case"comment":this.comments.push(o.slice(8));break;case"element":{const g=c[1];s={name:g,count:Number.parseInt(c[2]),properties:{}},this.elements[g]=s;break}case"property":if(s==null)throw new Error("Property must be inside an element");c[1]==="list"?s.properties[c[4]]={isList:!0,type:c[3],countType:c[2]}:s.properties[c[2]]={isList:!1,type:c[1]};break}}),this.elements.vertex&&(this.numSplats=this.elements.vertex.count)}parseData(t){let e=0;const n=this.data;if(n==null)throw new Error("No data to parse");for(const i in this.elements){const s=this.elements[i],{count:a,properties:r}=s,o={},c=[];for(const[l,h]of Object.entries(r))h.isList?(o[l]=[],c.push(()=>{const d=o[l];d.length=qi[h.countType](n,e,this.littleEndian),e+=FA[h.countType];for(let E=0;E<d.length;E++)d[E]=qi[h.type](n,e,this.littleEndian),e+=FA[h.type]})):(o[l]=0,c.push(()=>{o[l]=qi[h.type](n,e,this.littleEndian),e+=FA[h.type]}));const g=t(s)??(()=>{});for(let l=0;l<a;l++){for(const h of c)h();g(l,o)}}}parseSplats(t,e){if(this.elements.vertex==null)throw new Error("No vertex element found");let n=!1;const i=[];let s=0,a=[],r=[],o=[],c,g,l;function h(){const u=$p[s];a=new Array(3).fill(null).flatMap((x,Q)=>[0,1,2].map((m,M)=>`f_rest_${Q+M*u/3}`)),r=new Array(5).fill(null).flatMap((x,Q)=>[0,1,2].map((m,M)=>`f_rest_${3+Q+M*u/3}`)),o=new Array(7).fill(null).flatMap((x,Q)=>[0,1,2].map((m,M)=>`f_rest_${8+Q+M*u/3}`)),c=s>=1?new Float32Array(3*3):void 0,g=s>=2?new Float32Array(5*3):void 0,l=s>=3?new Float32Array(7*3):void 0}function d(u,x){if(!c)throw new Error("Missing sh1");for(const[Q,m]of a.entries())c[Q]=x[m]*8/255-4;if(g)for(const[Q,m]of r.entries())g[Q]=x[m]*8/255-4;if(l)for(const[Q,m]of o.entries())l[Q]=x[m]*8/255-4;e==null||e(u,c,g,l)}function E(u){const{min_x:x,min_y:Q,min_z:m,max_x:M,max_y:S,max_z:D,min_scale_x:T,min_scale_y:y,min_scale_z:C,max_scale_x:v,max_scale_y:z,max_scale_z:U,min_r:Y,min_g:K,min_b:H,max_r:X,max_g:P,max_b:At}=u.properties;if(!x||!Q||!m||!M||!S||!D||!T||!y||!C||!v||!z||!U||!Y||!K||!H||!X||!P||!At)throw new Error("Missing PLY chunk properties");return n=!0,(rt,It)=>{const{min_x:Dt,min_y:Ut,min_z:J,max_x:tt,max_y:lt,max_z:Z,min_scale_x:ht,min_scale_y:Ft,min_scale_z:mt,max_scale_x:zt,max_scale_y:qt,max_scale_z:Gt,min_r:_,min_g:ae,min_b:Pt,max_r:Yt,max_g:gt,max_b:Mt}=It;i.push({min_x:Dt,min_y:Ut,min_z:J,max_x:tt,max_y:lt,max_z:Z,min_scale_x:ht,min_scale_y:Ft,min_scale_z:mt,max_scale_x:zt,max_scale_y:qt,max_scale_z:Gt,min_r:_,min_g:ae,min_b:Pt,max_r:Yt,max_g:gt,max_b:Mt})}}function f(u){if(e&&u.name==="sh")return s=vo(u.properties),h(),d;if(u.name!=="vertex")return null;const{packed_position:x,packed_rotation:Q,packed_scale:m,packed_color:M}=u.properties;if(!x||!Q||!m||!M)throw new Error("Missing PLY properties: packed_position, packed_rotation, packed_scale, packed_color");const S=Math.sqrt(2);return(D,T)=>{const y=i[D>>>8];if(y==null)throw new Error("Missing PLY chunk");const{min_x:C,min_y:v,min_z:z,max_x:U,max_y:Y,max_z:K,min_scale_x:H,min_scale_y:X,min_scale_z:P,max_scale_x:At,max_scale_y:rt,max_scale_z:It,min_r:Dt,min_g:Ut,min_b:J,max_r:tt,max_g:lt,max_b:Z}=y,{packed_position:ht,packed_rotation:Ft,packed_scale:mt,packed_color:zt}=T,qt=(ht>>>21&2047)/2047*(U-C)+C,Gt=(ht>>>11&1023)/1023*(Y-v)+v,_=(ht&2047)/2047*(K-z)+z,ae=((Ft>>>20&1023)/1023-.5)*S,Pt=((Ft>>>10&1023)/1023-.5)*S,Yt=((Ft&1023)/1023-.5)*S,gt=Math.sqrt(Math.max(0,1-ae*ae-Pt*Pt-Yt*Yt)),Mt=Ft>>>30,Bt=Mt===0?ae:Mt===1?gt:Pt,kt=Mt<=1?Pt:Mt===2?gt:Yt,le=Mt<=2?Yt:gt,w=Mt===0?gt:ae,p=Math.exp((mt>>>21&2047)/2047*(At-H)+H),k=Math.exp((mt>>>11&1023)/1023*(rt-X)+X),q=Math.exp((mt&2047)/2047*(It-P)+P),W=(zt>>>24&255)/255*(tt-Dt)+Dt,O=(zt>>>16&255)/255*(lt-Ut)+Ut,Qt=(zt>>>8&255)/255*(Z-J)+J,it=(zt&255)/255;t(D,qt,Gt,_,p,k,q,Bt,kt,le,w,it,W,O,Qt)}}const I=u=>{if(u.name==="chunk")return E(u);if(n)return f(u);if(u.name!=="vertex")return null;const{x,y:Q,z:m,scale_0:M,scale_1:S,scale_2:D,rot_0:T,rot_1:y,rot_2:C,rot_3:v,opacity:z,f_dc_0:U,f_dc_1:Y,f_dc_2:K,red:H,green:X,blue:P,alpha:At}=u.properties;if(!x||!Q||!m)throw new Error("Missing PLY properties: x, y, z");const rt=M&&S&&D,It=T&&y&&C&&v,Dt=At!=null?Vi[At.type]:1,Ut=H!=null?Vi[H.type]:1,J=X!=null?Vi[X.type]:1,tt=P!=null?Vi[P.type]:1;return s=vo(u.properties),h(),(lt,Z)=>{const ht=rt?Math.exp(Z.scale_0):As.defaultPointScale,Ft=rt?Math.exp(Z.scale_1):As.defaultPointScale,mt=rt?Math.exp(Z.scale_2):As.defaultPointScale,zt=It?Z.rot_1:0,qt=It?Z.rot_2:0,Gt=It?Z.rot_3:0,_=It?Z.rot_0:1,ae=z!=null?1/(1+Math.exp(-Z.opacity)):At!=null?Z.alpha/Dt:1,Pt=U!=null?Z.f_dc_0*Ji+.5:H!=null?Z.red/Ut:1,Yt=Y!=null?Z.f_dc_1*Ji+.5:X!=null?Z.green/J:1,gt=K!=null?Z.f_dc_2*Ji+.5:P!=null?Z.blue/tt:1;if(t(lt,Z.x,Z.y,Z.z,ht,Ft,mt,zt,qt,Gt,_,ae,Pt,Yt,gt),e&&c){if(c)for(const[Mt,Bt]of a.entries())c[Mt]=Z[Bt];if(g)for(const[Mt,Bt]of r.entries())g[Mt]=Z[Bt];if(l)for(const[Mt,Bt]of o.entries())l[Mt]=Z[Bt];e(lt,c,g,l)}}};this.parseData(I)}injectRgba(t){let e=0;const n=this.data;if(n==null)throw new Error("No parsed data");if(t.length!==this.numSplats*4)throw new Error("Invalid RGBA array length");for(const i in this.elements){const s=this.elements[i],{count:a,properties:r}=s,o=[];let c=0;const g=i==="vertex";if(g){for(const l of["opacity","f_dc_0","f_dc_1","f_dc_2"])if(!r[l]||r[l].type!=="float")throw new Error(`Can't injectRgba due to property: ${l}`)}for(const[l,h]of Object.entries(r))if(h.isList)o.push(()=>{const d=qi[h.countType](n,e,this.littleEndian);e+=FA[h.countType],e+=d*FA[h.type]});else{if(g)if(l==="f_dc_0"||l==="f_dc_1"||l==="f_dc_2"){const d=Number.parseInt(l.slice(5));o.push(()=>{const E=(t[c+d]/255-.5)/Ji;Mo[h.type](n,e,this.littleEndian,E)})}else l==="opacity"&&o.push(()=>{const d=Math.max(-100,Math.min(100,-Math.log(1/(t[c+3]/255)-1)));Mo[h.type](n,e,this.littleEndian,d)});o.push(()=>{e+=FA[h.type]})}for(let l=0;l<a;l++){for(const h of o)h();g&&(c+=4)}}}};zc.defaultPointScale=.001;let Zp=zc;const Ji=.28209479177387814,qi={char:(A,t,e)=>A.getInt8(t),uchar:(A,t,e)=>A.getUint8(t),short:(A,t,e)=>A.getInt16(t,e),ushort:(A,t,e)=>A.getUint16(t,e),int:(A,t,e)=>A.getInt32(t,e),uint:(A,t,e)=>A.getUint32(t,e),float:(A,t,e)=>A.getFloat32(t,e),double:(A,t,e)=>A.getFloat64(t,e)},Mo={char:(A,t,e,n)=>{A.setInt8(t,n)},uchar:(A,t,e,n)=>{A.setUint8(t,n)},short:(A,t,e,n)=>{A.setInt16(t,n,e)},ushort:(A,t,e,n)=>{A.setUint16(t,n,e)},int:(A,t,e,n)=>{A.setInt32(t,n,e)},uint:(A,t,e,n)=>{A.setUint32(t,n,e)},float:(A,t,e,n)=>{A.setFloat32(t,n,e)},double:(A,t,e,n)=>{A.setFloat64(t,n,e)}},FA={char:1,uchar:1,short:2,ushort:2,int:4,uint:4,float:4,double:8},Vi={char:127,uchar:255,short:32767,ushort:65535,int:2147483647,uint:4294967295,float:1,double:1},jp={0:0,9:1,24:2,45:3},$p={0:0,1:9,2:24,3:45};function vo(A){let t=0;for(;A[`f_rest_${t}`];)t+=1;const e=jp[t];if(e==null)throw new Error(`Unsupported number of SH coefficients: ${t}`);return e}const Yc=`(function() {
  "use strict";
  let wasm;
  const cachedTextDecoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-8", { ignoreBOM: true, fatal: true }) : { decode: () => {
    throw Error("TextDecoder not available");
  } };
  if (typeof TextDecoder !== "undefined") {
    cachedTextDecoder.decode();
  }
  let cachedUint8ArrayMemory0 = null;
  function getUint8ArrayMemory0() {
    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {
      cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachedUint8ArrayMemory0;
  }
  function getStringFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
  }
  function sort_splats(num_splats, readback, ordering) {
    const ret = wasm.sort_splats(num_splats, readback, ordering);
    return ret >>> 0;
  }
  function raycast_splats(origin_x, origin_y, origin_z, dir_x, dir_y, dir_z, near, far, num_splats, packed_splats, raycast_ellipsoid) {
    const ret = wasm.raycast_splats(origin_x, origin_y, origin_z, dir_x, dir_y, dir_z, near, far, num_splats, packed_splats, raycast_ellipsoid);
    return ret;
  }
  async function __wbg_load(module, imports) {
    if (typeof Response === "function" && module instanceof Response) {
      if (typeof WebAssembly.instantiateStreaming === "function") {
        try {
          return await WebAssembly.instantiateStreaming(module, imports);
        } catch (e) {
          if (module.headers.get("Content-Type") != "application/wasm") {
            console.warn("\`WebAssembly.instantiateStreaming\` failed because your server does not serve Wasm with \`application/wasm\` MIME type. Falling back to \`WebAssembly.instantiate\` which is slower. Original error:\\n", e);
          } else {
            throw e;
          }
        }
      }
      const bytes = await module.arrayBuffer();
      return await WebAssembly.instantiate(bytes, imports);
    } else {
      const instance = await WebAssembly.instantiate(module, imports);
      if (instance instanceof WebAssembly.Instance) {
        return { instance, module };
      } else {
        return instance;
      }
    }
  }
  function __wbg_get_imports() {
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbg_buffer_609cc3eee51ed158 = function(arg0) {
      const ret = arg0.buffer;
      return ret;
    };
    imports.wbg.__wbg_length_3b4f022188ae8db6 = function(arg0) {
      const ret = arg0.length;
      return ret;
    };
    imports.wbg.__wbg_length_6ca527665d89694d = function(arg0) {
      const ret = arg0.length;
      return ret;
    };
    imports.wbg.__wbg_length_8cfd2c6409af88ad = function(arg0) {
      const ret = arg0.length;
      return ret;
    };
    imports.wbg.__wbg_new_9fee97a409b32b68 = function(arg0) {
      const ret = new Uint16Array(arg0);
      return ret;
    };
    imports.wbg.__wbg_new_e3b321dcfef89fc7 = function(arg0) {
      const ret = new Uint32Array(arg0);
      return ret;
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354 = function(arg0, arg1, arg2) {
      const ret = new Float32Array(arg0, arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_f1dead44d1fc7212 = function(arg0, arg1, arg2) {
      const ret = new Uint32Array(arg0, arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_newwithlength_5a5efe313cfd59f1 = function(arg0) {
      const ret = new Float32Array(arg0 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_set_10bad9bee0e9c58b = function(arg0, arg1, arg2) {
      arg0.set(arg1, arg2 >>> 0);
    };
    imports.wbg.__wbg_set_d23661d19148b229 = function(arg0, arg1, arg2) {
      arg0.set(arg1, arg2 >>> 0);
    };
    imports.wbg.__wbg_set_f4f1f0daa30696fc = function(arg0, arg1, arg2) {
      arg0.set(arg1, arg2 >>> 0);
    };
    imports.wbg.__wbg_subarray_3aaeec89bb2544f0 = function(arg0, arg1, arg2) {
      const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_subarray_769e1e0f81bb259b = function(arg0, arg1, arg2) {
      const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbindgen_init_externref_table = function() {
      const table = wasm.__wbindgen_export_0;
      const offset = table.grow(4);
      table.set(0, void 0);
      table.set(offset + 0, void 0);
      table.set(offset + 1, null);
      table.set(offset + 2, true);
      table.set(offset + 3, false);
    };
    imports.wbg.__wbindgen_memory = function() {
      const ret = wasm.memory;
      return ret;
    };
    imports.wbg.__wbindgen_throw = function(arg0, arg1) {
      throw new Error(getStringFromWasm0(arg0, arg1));
    };
    return imports;
  }
  function __wbg_finalize_init(instance, module) {
    wasm = instance.exports;
    __wbg_init.__wbindgen_wasm_module = module;
    cachedUint8ArrayMemory0 = null;
    wasm.__wbindgen_start();
    return wasm;
  }
  async function __wbg_init(module_or_path) {
    if (wasm !== void 0) return wasm;
    if (typeof module_or_path !== "undefined") {
      if (Object.getPrototypeOf(module_or_path) === Object.prototype) {
        ({ module_or_path } = module_or_path);
      } else {
        console.warn("using deprecated parameters for the initialization function; pass a single object instead");
      }
    }
    if (typeof module_or_path === "undefined") {
      module_or_path = new URL("data:application/wasm;base64,", self.location.href);
    }
    const imports = __wbg_get_imports();
    if (typeof module_or_path === "string" || typeof Request === "function" && module_or_path instanceof Request || typeof URL === "function" && module_or_path instanceof URL) {
      module_or_path = fetch(module_or_path);
    }
    const { instance, module } = await __wbg_load(await module_or_path, imports);
    return __wbg_finalize_init(instance, module);
  }
  var u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;
  var fleb = new u8([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    /* unused */
    0,
    0,
    /* impossible */
    0
  ]);
  var fdeb = new u8([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    /* unused */
    0,
    0
  ]);
  var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  var freb = function(eb, start) {
    var b = new u16(31);
    for (var i2 = 0; i2 < 31; ++i2) {
      b[i2] = start += 1 << eb[i2 - 1];
    }
    var r = new i32(b[30]);
    for (var i2 = 1; i2 < 30; ++i2) {
      for (var j = b[i2]; j < b[i2 + 1]; ++j) {
        r[j] = j - b[i2] << 5 | i2;
      }
    }
    return { b, r };
  };
  var _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;
  fl[28] = 258, revfl[258] = 28;
  var _b = freb(fdeb, 0), fd = _b.b;
  var rev = new u16(32768);
  for (var i = 0; i < 32768; ++i) {
    var x = (i & 43690) >> 1 | (i & 21845) << 1;
    x = (x & 52428) >> 2 | (x & 13107) << 2;
    x = (x & 61680) >> 4 | (x & 3855) << 4;
    rev[i] = ((x & 65280) >> 8 | (x & 255) << 8) >> 1;
  }
  var hMap = function(cd, mb, r) {
    var s = cd.length;
    var i2 = 0;
    var l = new u16(mb);
    for (; i2 < s; ++i2) {
      if (cd[i2])
        ++l[cd[i2] - 1];
    }
    var le = new u16(mb);
    for (i2 = 1; i2 < mb; ++i2) {
      le[i2] = le[i2 - 1] + l[i2 - 1] << 1;
    }
    var co;
    if (r) {
      co = new u16(1 << mb);
      var rvb = 15 - mb;
      for (i2 = 0; i2 < s; ++i2) {
        if (cd[i2]) {
          var sv = i2 << 4 | cd[i2];
          var r_1 = mb - cd[i2];
          var v = le[cd[i2] - 1]++ << r_1;
          for (var m = v | (1 << r_1) - 1; v <= m; ++v) {
            co[rev[v] >> rvb] = sv;
          }
        }
      }
    } else {
      co = new u16(s);
      for (i2 = 0; i2 < s; ++i2) {
        if (cd[i2]) {
          co[i2] = rev[le[cd[i2] - 1]++] >> 15 - cd[i2];
        }
      }
    }
    return co;
  };
  var flt = new u8(288);
  for (var i = 0; i < 144; ++i)
    flt[i] = 8;
  for (var i = 144; i < 256; ++i)
    flt[i] = 9;
  for (var i = 256; i < 280; ++i)
    flt[i] = 7;
  for (var i = 280; i < 288; ++i)
    flt[i] = 8;
  var fdt = new u8(32);
  for (var i = 0; i < 32; ++i)
    fdt[i] = 5;
  var flrm = /* @__PURE__ */ hMap(flt, 9, 1);
  var fdrm = /* @__PURE__ */ hMap(fdt, 5, 1);
  var max = function(a) {
    var m = a[0];
    for (var i2 = 1; i2 < a.length; ++i2) {
      if (a[i2] > m)
        m = a[i2];
    }
    return m;
  };
  var bits = function(d, p, m) {
    var o = p / 8 | 0;
    return (d[o] | d[o + 1] << 8) >> (p & 7) & m;
  };
  var bits16 = function(d, p) {
    var o = p / 8 | 0;
    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);
  };
  var shft = function(p) {
    return (p + 7) / 8 | 0;
  };
  var slc = function(v, s, e) {
    if (s == null || s < 0)
      s = 0;
    if (e == null || e > v.length)
      e = v.length;
    return new u8(v.subarray(s, e));
  };
  var ec = [
    "unexpected EOF",
    "invalid block type",
    "invalid length/literal",
    "invalid distance",
    "stream finished",
    "no stream handler",
    ,
    "no callback",
    "invalid UTF-8 data",
    "extra field too long",
    "date not in range 1980-2099",
    "filename too long",
    "stream finishing",
    "invalid zip data"
    // determined by unknown compression method
  ];
  var err = function(ind, msg, nt) {
    var e = new Error(msg || ec[ind]);
    e.code = ind;
    if (Error.captureStackTrace)
      Error.captureStackTrace(e, err);
    if (!nt)
      throw e;
    return e;
  };
  var inflt = function(dat, st, buf, dict) {
    var sl = dat.length, dl = 0;
    if (!sl || st.f && !st.l)
      return buf || new u8(0);
    var noBuf = !buf;
    var resize = noBuf || st.i != 2;
    var noSt = st.i;
    if (noBuf)
      buf = new u8(sl * 3);
    var cbuf = function(l2) {
      var bl = buf.length;
      if (l2 > bl) {
        var nbuf = new u8(Math.max(bl * 2, l2));
        nbuf.set(buf);
        buf = nbuf;
      }
    };
    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    var tbts = sl * 8;
    do {
      if (!lm) {
        final = bits(dat, pos, 1);
        var type = bits(dat, pos + 1, 3);
        pos += 3;
        if (!type) {
          var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
          if (t > sl) {
            if (noSt)
              err(0);
            break;
          }
          if (resize)
            cbuf(bt + l);
          buf.set(dat.subarray(s, t), bt);
          st.b = bt += l, st.p = pos = t * 8, st.f = final;
          continue;
        } else if (type == 1)
          lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
        else if (type == 2) {
          var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
          var tl = hLit + bits(dat, pos + 5, 31) + 1;
          pos += 14;
          var ldt = new u8(tl);
          var clt = new u8(19);
          for (var i2 = 0; i2 < hcLen; ++i2) {
            clt[clim[i2]] = bits(dat, pos + i2 * 3, 7);
          }
          pos += hcLen * 3;
          var clb = max(clt), clbmsk = (1 << clb) - 1;
          var clm = hMap(clt, clb, 1);
          for (var i2 = 0; i2 < tl; ) {
            var r = clm[bits(dat, pos, clbmsk)];
            pos += r & 15;
            var s = r >> 4;
            if (s < 16) {
              ldt[i2++] = s;
            } else {
              var c = 0, n = 0;
              if (s == 16)
                n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i2 - 1];
              else if (s == 17)
                n = 3 + bits(dat, pos, 7), pos += 3;
              else if (s == 18)
                n = 11 + bits(dat, pos, 127), pos += 7;
              while (n--)
                ldt[i2++] = c;
            }
          }
          var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
          lbt = max(lt);
          dbt = max(dt);
          lm = hMap(lt, lbt, 1);
          dm = hMap(dt, dbt, 1);
        } else
          err(1);
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
      }
      if (resize)
        cbuf(bt + 131072);
      var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
      var lpos = pos;
      for (; ; lpos = pos) {
        var c = lm[bits16(dat, pos) & lms], sym = c >> 4;
        pos += c & 15;
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
        if (!c)
          err(2);
        if (sym < 256)
          buf[bt++] = sym;
        else if (sym == 256) {
          lpos = pos, lm = null;
          break;
        } else {
          var add2 = sym - 254;
          if (sym > 264) {
            var i2 = sym - 257, b = fleb[i2];
            add2 = bits(dat, pos, (1 << b) - 1) + fl[i2];
            pos += b;
          }
          var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;
          if (!d)
            err(3);
          pos += d & 15;
          var dt = fd[dsym];
          if (dsym > 3) {
            var b = fdeb[dsym];
            dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
          }
          if (pos > tbts) {
            if (noSt)
              err(0);
            break;
          }
          if (resize)
            cbuf(bt + 131072);
          var end = bt + add2;
          if (bt < dt) {
            var shift = dl - dt, dend = Math.min(dt, end);
            if (shift + bt < 0)
              err(3);
            for (; bt < dend; ++bt)
              buf[bt] = dict[shift + bt];
          }
          for (; bt < end; ++bt)
            buf[bt] = buf[bt - dt];
        }
      }
      st.l = lm, st.p = lpos, st.b = bt, st.f = final;
      if (lm)
        final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    } while (!final);
    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);
  };
  var et = /* @__PURE__ */ new u8(0);
  var gzs = function(d) {
    if (d[0] != 31 || d[1] != 139 || d[2] != 8)
      err(6, "invalid gzip data");
    var flg = d[3];
    var st = 10;
    if (flg & 4)
      st += (d[10] | d[11] << 8) + 2;
    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])
      ;
    return st + (flg & 2);
  };
  var Inflate = /* @__PURE__ */ function() {
    function Inflate2(opts, cb) {
      if (typeof opts == "function")
        cb = opts, opts = {};
      this.ondata = cb;
      var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);
      this.s = { i: 0, b: dict ? dict.length : 0 };
      this.o = new u8(32768);
      this.p = new u8(0);
      if (dict)
        this.o.set(dict);
    }
    Inflate2.prototype.e = function(c) {
      if (!this.ondata)
        err(5);
      if (this.d)
        err(4);
      if (!this.p.length)
        this.p = c;
      else if (c.length) {
        var n = new u8(this.p.length + c.length);
        n.set(this.p), n.set(c, this.p.length), this.p = n;
      }
    };
    Inflate2.prototype.c = function(final) {
      this.s.i = +(this.d = final || false);
      var bts = this.s.b;
      var dt = inflt(this.p, this.s, this.o);
      this.ondata(slc(dt, bts, this.s.b), this.d);
      this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
      this.p = slc(this.p, this.s.p / 8 | 0), this.s.p &= 7;
    };
    Inflate2.prototype.push = function(chunk, final) {
      this.e(chunk), this.c(final);
    };
    return Inflate2;
  }();
  var Gunzip = /* @__PURE__ */ function() {
    function Gunzip2(opts, cb) {
      this.v = 1;
      this.r = 0;
      Inflate.call(this, opts, cb);
    }
    Gunzip2.prototype.push = function(chunk, final) {
      Inflate.prototype.e.call(this, chunk);
      this.r += chunk.length;
      if (this.v) {
        var p = this.p.subarray(this.v - 1);
        var s = p.length > 3 ? gzs(p) : 4;
        if (s > p.length) {
          if (!final)
            return;
        } else if (this.v > 1 && this.onmember) {
          this.onmember(this.r - p.length);
        }
        this.p = p.subarray(s), this.v = 0;
      }
      Inflate.prototype.c.call(this, final);
      if (this.s.f && !this.s.l && !final) {
        this.v = shft(this.s.p) + 9;
        this.s = { i: 0 };
        this.o = new u8(0);
        this.push(new u8(0), final);
      }
    };
    return Gunzip2;
  }();
  var td = typeof TextDecoder != "undefined" && /* @__PURE__ */ new TextDecoder();
  var tds = 0;
  try {
    td.decode(et, { stream: true });
    tds = 1;
  } catch (e) {
  }
  /**
   * @license
   * Copyright 2010-2024 Three.js Authors
   * SPDX-License-Identifier: MIT
   */
  const REVISION = "172";
  const FrontSide = 0;
  const BackSide = 1;
  const NormalBlending = 1;
  const AddEquation = 100;
  const SrcAlphaFactor = 204;
  const OneMinusSrcAlphaFactor = 205;
  const LessEqualDepth = 3;
  const MultiplyOperation = 0;
  const UVMapping = 300;
  const RepeatWrapping = 1e3;
  const ClampToEdgeWrapping = 1001;
  const MirroredRepeatWrapping = 1002;
  const NearestFilter = 1003;
  const LinearFilter = 1006;
  const LinearMipmapLinearFilter = 1008;
  const UnsignedByteType = 1009;
  const UnsignedIntType = 1014;
  const FloatType = 1015;
  const RGBAFormat = 1023;
  const RGIntegerFormat = 1031;
  const RGBAIntegerFormat = 1033;
  const NoColorSpace = "";
  const SRGBColorSpace = "srgb";
  const LinearSRGBColorSpace = "srgb-linear";
  const LinearTransfer = "linear";
  const SRGBTransfer = "srgb";
  const KeepStencilOp = 7680;
  const AlwaysStencilFunc = 519;
  const StaticDrawUsage = 35044;
  const GLSL3 = "300 es";
  const WebGLCoordinateSystem = 2e3;
  const WebGPUCoordinateSystem = 2001;
  class EventDispatcher {
    addEventListener(type, listener) {
      if (this._listeners === void 0) this._listeners = {};
      const listeners = this._listeners;
      if (listeners[type] === void 0) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    }
    hasEventListener(type, listener) {
      if (this._listeners === void 0) return false;
      const listeners = this._listeners;
      return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
    }
    removeEventListener(type, listener) {
      if (this._listeners === void 0) return;
      const listeners = this._listeners;
      const listenerArray = listeners[type];
      if (listenerArray !== void 0) {
        const index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    }
    dispatchEvent(event) {
      if (this._listeners === void 0) return;
      const listeners = this._listeners;
      const listenerArray = listeners[event.type];
      if (listenerArray !== void 0) {
        event.target = this;
        const array = listenerArray.slice(0);
        for (let i2 = 0, l = array.length; i2 < l; i2++) {
          array[i2].call(this, event);
        }
        event.target = null;
      }
    }
  }
  const _lut = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
  function generateUUID() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
    return uuid.toLowerCase();
  }
  function clamp(value, min, max2) {
    return Math.max(min, Math.min(max2, value));
  }
  function euclideanModulo(n, m) {
    return (n % m + m) % m;
  }
  function lerp(x2, y, t) {
    return (1 - t) * x2 + t * y;
  }
  function denormalize(value, array) {
    switch (array.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return value / 4294967295;
      case Uint16Array:
        return value / 65535;
      case Uint8Array:
        return value / 255;
      case Int32Array:
        return Math.max(value / 2147483647, -1);
      case Int16Array:
        return Math.max(value / 32767, -1);
      case Int8Array:
        return Math.max(value / 127, -1);
      default:
        throw new Error("Invalid component type.");
    }
  }
  function normalize$1(value, array) {
    switch (array.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return Math.round(value * 4294967295);
      case Uint16Array:
        return Math.round(value * 65535);
      case Uint8Array:
        return Math.round(value * 255);
      case Int32Array:
        return Math.round(value * 2147483647);
      case Int16Array:
        return Math.round(value * 32767);
      case Int8Array:
        return Math.round(value * 127);
      default:
        throw new Error("Invalid component type.");
    }
  }
  class Vector2 {
    constructor(x2 = 0, y = 0) {
      Vector2.prototype.isVector2 = true;
      this.x = x2;
      this.y = y;
    }
    get width() {
      return this.x;
    }
    set width(value) {
      this.x = value;
    }
    get height() {
      return this.y;
    }
    set height(value) {
      this.y = value;
    }
    set(x2, y) {
      this.x = x2;
      this.y = y;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      return this;
    }
    setX(x2) {
      this.x = x2;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this;
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    applyMatrix3(m) {
      const x2 = this.x, y = this.y;
      const e = m.elements;
      this.x = e[0] * x2 + e[3] * y + e[6];
      this.y = e[1] * x2 + e[4] * y + e[7];
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      return this;
    }
    clamp(min, max2) {
      this.x = clamp(this.x, min.x, max2.x);
      this.y = clamp(this.y, min.y, max2.y);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      return this;
    }
    clampLength(min, max2) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max2));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y;
    }
    cross(v) {
      return this.x * v.y - this.y * v.x;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    angle() {
      const angle = Math.atan2(-this.y, -this.x) + Math.PI;
      return angle;
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0) return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y;
      return dx * dx + dy * dy;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      return this;
    }
    rotateAround(center, angle) {
      const c = Math.cos(angle), s = Math.sin(angle);
      const x2 = this.x - center.x;
      const y = this.y - center.y;
      this.x = x2 * c - y * s + center.x;
      this.y = x2 * s + y * c + center.y;
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
    }
  }
  class Matrix3 {
    constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      Matrix3.prototype.isMatrix3 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
      }
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      const te = this.elements;
      te[0] = n11;
      te[1] = n21;
      te[2] = n31;
      te[3] = n12;
      te[4] = n22;
      te[5] = n32;
      te[6] = n13;
      te[7] = n23;
      te[8] = n33;
      return this;
    }
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      );
      return this;
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrix3Column(this, 0);
      yAxis.setFromMatrix3Column(this, 1);
      zAxis.setFromMatrix3Column(this, 2);
      return this;
    }
    setFromMatrix4(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[4],
        me[8],
        me[1],
        me[5],
        me[9],
        me[2],
        me[6],
        me[10]
      );
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[3], a13 = ae[6];
      const a21 = ae[1], a22 = ae[4], a23 = ae[7];
      const a31 = ae[2], a32 = ae[5], a33 = ae[8];
      const b11 = be[0], b12 = be[3], b13 = be[6];
      const b21 = be[1], b22 = be[4], b23 = be[7];
      const b31 = be[2], b32 = be[5], b33 = be[8];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31;
      te[3] = a11 * b12 + a12 * b22 + a13 * b32;
      te[6] = a11 * b13 + a12 * b23 + a13 * b33;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31;
      te[4] = a21 * b12 + a22 * b22 + a23 * b32;
      te[7] = a21 * b13 + a22 * b23 + a23 * b33;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31;
      te[5] = a31 * b12 + a32 * b22 + a33 * b32;
      te[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[3] *= s;
      te[6] *= s;
      te[1] *= s;
      te[4] *= s;
      te[7] *= s;
      te[2] *= s;
      te[5] *= s;
      te[8] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i2 = te[8];
      return a * e * i2 - a * f * h - b * d * i2 + b * f * g + c * d * h - c * e * g;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n31 * n23 - n33 * n21) * detInv;
      te[2] = (n32 * n21 - n31 * n22) * detInv;
      te[3] = t12 * detInv;
      te[4] = (n33 * n11 - n31 * n13) * detInv;
      te[5] = (n31 * n12 - n32 * n11) * detInv;
      te[6] = t13 * detInv;
      te[7] = (n21 * n13 - n23 * n11) * detInv;
      te[8] = (n22 * n11 - n21 * n12) * detInv;
      return this;
    }
    transpose() {
      let tmp;
      const m = this.elements;
      tmp = m[1];
      m[1] = m[3];
      m[3] = tmp;
      tmp = m[2];
      m[2] = m[6];
      m[6] = tmp;
      tmp = m[5];
      m[5] = m[7];
      m[7] = tmp;
      return this;
    }
    getNormalMatrix(matrix4) {
      return this.setFromMatrix4(matrix4).invert().transpose();
    }
    transposeIntoArray(r) {
      const m = this.elements;
      r[0] = m[0];
      r[1] = m[3];
      r[2] = m[6];
      r[3] = m[1];
      r[4] = m[4];
      r[5] = m[7];
      r[6] = m[2];
      r[7] = m[5];
      r[8] = m[8];
      return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
      const c = Math.cos(rotation);
      const s = Math.sin(rotation);
      this.set(
        sx * c,
        sx * s,
        -sx * (c * cx + s * cy) + cx + tx,
        -sy * s,
        sy * c,
        -sy * (-s * cx + c * cy) + cy + ty,
        0,
        0,
        1
      );
      return this;
    }
    //
    scale(sx, sy) {
      this.premultiply(_m3.makeScale(sx, sy));
      return this;
    }
    rotate(theta) {
      this.premultiply(_m3.makeRotation(-theta));
      return this;
    }
    translate(tx, ty) {
      this.premultiply(_m3.makeTranslation(tx, ty));
      return this;
    }
    // for 2D Transforms
    makeTranslation(x2, y) {
      if (x2.isVector2) {
        this.set(
          1,
          0,
          x2.x,
          0,
          1,
          x2.y,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          x2,
          0,
          1,
          y,
          0,
          0,
          1
        );
      }
      return this;
    }
    makeRotation(theta) {
      const c = Math.cos(theta);
      const s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        s,
        c,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeScale(x2, y) {
      this.set(
        x2,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        1
      );
      return this;
    }
    //
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i2 = 0; i2 < 9; i2++) {
        if (te[i2] !== me[i2]) return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i2 = 0; i2 < 9; i2++) {
        this.elements[i2] = array[i2 + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      return array;
    }
    clone() {
      return new this.constructor().fromArray(this.elements);
    }
  }
  const _m3 = /* @__PURE__ */ new Matrix3();
  function arrayNeedsUint32(array) {
    for (let i2 = array.length - 1; i2 >= 0; --i2) {
      if (array[i2] >= 65535) return true;
    }
    return false;
  }
  function createElementNS(name) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", name);
  }
  const LINEAR_REC709_TO_XYZ = /* @__PURE__ */ new Matrix3().set(
    0.4123908,
    0.3575843,
    0.1804808,
    0.212639,
    0.7151687,
    0.0721923,
    0.0193308,
    0.1191948,
    0.9505322
  );
  const XYZ_TO_LINEAR_REC709 = /* @__PURE__ */ new Matrix3().set(
    3.2409699,
    -1.5373832,
    -0.4986108,
    -0.9692436,
    1.8759675,
    0.0415551,
    0.0556301,
    -0.203977,
    1.0569715
  );
  function createColorManagement() {
    const ColorManagement2 = {
      enabled: true,
      workingColorSpace: LinearSRGBColorSpace,
      /**
       * Implementations of supported color spaces.
       *
       * Required:
       *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
       *	- whitePoint: reference white [ x y ]
       *	- transfer: transfer function (pre-defined)
       *	- toXYZ: Matrix3 RGB to XYZ transform
       *	- fromXYZ: Matrix3 XYZ to RGB transform
       *	- luminanceCoefficients: RGB luminance coefficients
       *
       * Optional:
       *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
       *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
       *
       * Reference:
       * - https://www.russellcottrell.com/photo/matrixCalculator.htm
       */
      spaces: {},
      convert: function(color, sourceColorSpace, targetColorSpace) {
        if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
          return color;
        }
        if (this.spaces[sourceColorSpace].transfer === SRGBTransfer) {
          color.r = SRGBToLinear(color.r);
          color.g = SRGBToLinear(color.g);
          color.b = SRGBToLinear(color.b);
        }
        if (this.spaces[sourceColorSpace].primaries !== this.spaces[targetColorSpace].primaries) {
          color.applyMatrix3(this.spaces[sourceColorSpace].toXYZ);
          color.applyMatrix3(this.spaces[targetColorSpace].fromXYZ);
        }
        if (this.spaces[targetColorSpace].transfer === SRGBTransfer) {
          color.r = LinearToSRGB(color.r);
          color.g = LinearToSRGB(color.g);
          color.b = LinearToSRGB(color.b);
        }
        return color;
      },
      fromWorkingColorSpace: function(color, targetColorSpace) {
        return this.convert(color, this.workingColorSpace, targetColorSpace);
      },
      toWorkingColorSpace: function(color, sourceColorSpace) {
        return this.convert(color, sourceColorSpace, this.workingColorSpace);
      },
      getPrimaries: function(colorSpace) {
        return this.spaces[colorSpace].primaries;
      },
      getTransfer: function(colorSpace) {
        if (colorSpace === NoColorSpace) return LinearTransfer;
        return this.spaces[colorSpace].transfer;
      },
      getLuminanceCoefficients: function(target, colorSpace = this.workingColorSpace) {
        return target.fromArray(this.spaces[colorSpace].luminanceCoefficients);
      },
      define: function(colorSpaces) {
        Object.assign(this.spaces, colorSpaces);
      },
      // Internal APIs
      _getMatrix: function(targetMatrix, sourceColorSpace, targetColorSpace) {
        return targetMatrix.copy(this.spaces[sourceColorSpace].toXYZ).multiply(this.spaces[targetColorSpace].fromXYZ);
      },
      _getDrawingBufferColorSpace: function(colorSpace) {
        return this.spaces[colorSpace].outputColorSpaceConfig.drawingBufferColorSpace;
      },
      _getUnpackColorSpace: function(colorSpace = this.workingColorSpace) {
        return this.spaces[colorSpace].workingColorSpaceConfig.unpackColorSpace;
      }
    };
    const REC709_PRIMARIES = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06];
    const REC709_LUMINANCE_COEFFICIENTS = [0.2126, 0.7152, 0.0722];
    const D65 = [0.3127, 0.329];
    ColorManagement2.define({
      [LinearSRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: LinearTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        workingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      },
      [SRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: SRGBTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      }
    });
    return ColorManagement2;
  }
  const ColorManagement = /* @__PURE__ */ createColorManagement();
  function SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
  }
  function LinearToSRGB(c) {
    return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
  }
  let _canvas;
  class ImageUtils {
    static getDataURL(image) {
      if (/^data:/i.test(image.src)) {
        return image.src;
      }
      if (typeof HTMLCanvasElement === "undefined") {
        return image.src;
      }
      let canvas;
      if (image instanceof HTMLCanvasElement) {
        canvas = image;
      } else {
        if (_canvas === void 0) _canvas = createElementNS("canvas");
        _canvas.width = image.width;
        _canvas.height = image.height;
        const context = _canvas.getContext("2d");
        if (image instanceof ImageData) {
          context.putImageData(image, 0, 0);
        } else {
          context.drawImage(image, 0, 0, image.width, image.height);
        }
        canvas = _canvas;
      }
      if (canvas.width > 2048 || canvas.height > 2048) {
        console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
        return canvas.toDataURL("image/jpeg", 0.6);
      } else {
        return canvas.toDataURL("image/png");
      }
    }
    static sRGBToLinear(image) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
        const canvas = createElementNS("canvas");
        canvas.width = image.width;
        canvas.height = image.height;
        const context = canvas.getContext("2d");
        context.drawImage(image, 0, 0, image.width, image.height);
        const imageData = context.getImageData(0, 0, image.width, image.height);
        const data = imageData.data;
        for (let i2 = 0; i2 < data.length; i2++) {
          data[i2] = SRGBToLinear(data[i2] / 255) * 255;
        }
        context.putImageData(imageData, 0, 0);
        return canvas;
      } else if (image.data) {
        const data = image.data.slice(0);
        for (let i2 = 0; i2 < data.length; i2++) {
          if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
            data[i2] = Math.floor(SRGBToLinear(data[i2] / 255) * 255);
          } else {
            data[i2] = SRGBToLinear(data[i2]);
          }
        }
        return {
          data,
          width: image.width,
          height: image.height
        };
      } else {
        console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
        return image;
      }
    }
  }
  let _sourceId = 0;
  class Source {
    constructor(data = null) {
      this.isSource = true;
      Object.defineProperty(this, "id", { value: _sourceId++ });
      this.uuid = generateUUID();
      this.data = data;
      this.dataReady = true;
      this.version = 0;
    }
    set needsUpdate(value) {
      if (value === true) this.version++;
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.images[this.uuid] !== void 0) {
        return meta.images[this.uuid];
      }
      const output = {
        uuid: this.uuid,
        url: ""
      };
      const data = this.data;
      if (data !== null) {
        let url;
        if (Array.isArray(data)) {
          url = [];
          for (let i2 = 0, l = data.length; i2 < l; i2++) {
            if (data[i2].isDataTexture) {
              url.push(serializeImage(data[i2].image));
            } else {
              url.push(serializeImage(data[i2]));
            }
          }
        } else {
          url = serializeImage(data);
        }
        output.url = url;
      }
      if (!isRootObject) {
        meta.images[this.uuid] = output;
      }
      return output;
    }
  }
  function serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      return ImageUtils.getDataURL(image);
    } else {
      if (image.data) {
        return {
          data: Array.from(image.data),
          width: image.width,
          height: image.height,
          type: image.data.constructor.name
        };
      } else {
        console.warn("THREE.Texture: Unable to serialize Texture.");
        return {};
      }
    }
  }
  let _textureId = 0;
  class Texture extends EventDispatcher {
    constructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace) {
      super();
      this.isTexture = true;
      Object.defineProperty(this, "id", { value: _textureId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.source = new Source(image);
      this.mipmaps = [];
      this.mapping = mapping;
      this.channel = 0;
      this.wrapS = wrapS;
      this.wrapT = wrapT;
      this.magFilter = magFilter;
      this.minFilter = minFilter;
      this.anisotropy = anisotropy;
      this.format = format;
      this.internalFormat = null;
      this.type = type;
      this.offset = new Vector2(0, 0);
      this.repeat = new Vector2(1, 1);
      this.center = new Vector2(0, 0);
      this.rotation = 0;
      this.matrixAutoUpdate = true;
      this.matrix = new Matrix3();
      this.generateMipmaps = true;
      this.premultiplyAlpha = false;
      this.flipY = true;
      this.unpackAlignment = 4;
      this.colorSpace = colorSpace;
      this.userData = {};
      this.version = 0;
      this.onUpdate = null;
      this.renderTarget = null;
      this.isRenderTargetTexture = false;
      this.pmremVersion = 0;
    }
    get image() {
      return this.source.data;
    }
    set image(value = null) {
      this.source.data = value;
    }
    updateMatrix() {
      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.source = source.source;
      this.mipmaps = source.mipmaps.slice(0);
      this.mapping = source.mapping;
      this.channel = source.channel;
      this.wrapS = source.wrapS;
      this.wrapT = source.wrapT;
      this.magFilter = source.magFilter;
      this.minFilter = source.minFilter;
      this.anisotropy = source.anisotropy;
      this.format = source.format;
      this.internalFormat = source.internalFormat;
      this.type = source.type;
      this.offset.copy(source.offset);
      this.repeat.copy(source.repeat);
      this.center.copy(source.center);
      this.rotation = source.rotation;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrix.copy(source.matrix);
      this.generateMipmaps = source.generateMipmaps;
      this.premultiplyAlpha = source.premultiplyAlpha;
      this.flipY = source.flipY;
      this.unpackAlignment = source.unpackAlignment;
      this.colorSpace = source.colorSpace;
      this.renderTarget = source.renderTarget;
      this.isRenderTargetTexture = source.isRenderTargetTexture;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      this.needsUpdate = true;
      return this;
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.textures[this.uuid] !== void 0) {
        return meta.textures[this.uuid];
      }
      const output = {
        metadata: {
          version: 4.6,
          type: "Texture",
          generator: "Texture.toJSON"
        },
        uuid: this.uuid,
        name: this.name,
        image: this.source.toJSON(meta).uuid,
        mapping: this.mapping,
        channel: this.channel,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        internalFormat: this.internalFormat,
        type: this.type,
        colorSpace: this.colorSpace,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        generateMipmaps: this.generateMipmaps,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment
      };
      if (Object.keys(this.userData).length > 0) output.userData = this.userData;
      if (!isRootObject) {
        meta.textures[this.uuid] = output;
      }
      return output;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    transformUv(uv) {
      if (this.mapping !== UVMapping) return uv;
      uv.applyMatrix3(this.matrix);
      if (uv.x < 0 || uv.x > 1) {
        switch (this.wrapS) {
          case RepeatWrapping:
            uv.x = uv.x - Math.floor(uv.x);
            break;
          case ClampToEdgeWrapping:
            uv.x = uv.x < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.x) % 2) === 1) {
              uv.x = Math.ceil(uv.x) - uv.x;
            } else {
              uv.x = uv.x - Math.floor(uv.x);
            }
            break;
        }
      }
      if (uv.y < 0 || uv.y > 1) {
        switch (this.wrapT) {
          case RepeatWrapping:
            uv.y = uv.y - Math.floor(uv.y);
            break;
          case ClampToEdgeWrapping:
            uv.y = uv.y < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.y) % 2) === 1) {
              uv.y = Math.ceil(uv.y) - uv.y;
            } else {
              uv.y = uv.y - Math.floor(uv.y);
            }
            break;
        }
      }
      if (this.flipY) {
        uv.y = 1 - uv.y;
      }
      return uv;
    }
    set needsUpdate(value) {
      if (value === true) {
        this.version++;
        this.source.needsUpdate = true;
      }
    }
    set needsPMREMUpdate(value) {
      if (value === true) {
        this.pmremVersion++;
      }
    }
  }
  Texture.DEFAULT_IMAGE = null;
  Texture.DEFAULT_MAPPING = UVMapping;
  Texture.DEFAULT_ANISOTROPY = 1;
  class Vector4 {
    constructor(x2 = 0, y = 0, z = 0, w = 1) {
      Vector4.prototype.isVector4 = true;
      this.x = x2;
      this.y = y;
      this.z = z;
      this.w = w;
    }
    get width() {
      return this.z;
    }
    set width(value) {
      this.z = value;
    }
    get height() {
      return this.w;
    }
    set height(value) {
      this.w = value;
    }
    set(x2, y, z, w) {
      this.x = x2;
      this.y = y;
      this.z = z;
      this.w = w;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      this.w = scalar;
      return this;
    }
    setX(x2) {
      this.x = x2;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setW(w) {
      this.w = w;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        case 3:
          this.w = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        case 3:
          return this.w;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      this.w = v.w !== void 0 ? v.w : 1;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      this.w += v.w;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      this.w += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      this.w = a.w + b.w;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      this.w += v.w * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      this.w -= v.w;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      this.w -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      this.w = a.w - b.w;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      this.w *= v.w;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      this.w *= scalar;
      return this;
    }
    applyMatrix4(m) {
      const x2 = this.x, y = this.y, z = this.z, w = this.w;
      const e = m.elements;
      this.x = e[0] * x2 + e[4] * y + e[8] * z + e[12] * w;
      this.y = e[1] * x2 + e[5] * y + e[9] * z + e[13] * w;
      this.z = e[2] * x2 + e[6] * y + e[10] * z + e[14] * w;
      this.w = e[3] * x2 + e[7] * y + e[11] * z + e[15] * w;
      return this;
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      this.w /= v.w;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    setAxisAngleFromQuaternion(q) {
      this.w = 2 * Math.acos(q.w);
      const s = Math.sqrt(1 - q.w * q.w);
      if (s < 1e-4) {
        this.x = 1;
        this.y = 0;
        this.z = 0;
      } else {
        this.x = q.x / s;
        this.y = q.y / s;
        this.z = q.z / s;
      }
      return this;
    }
    setAxisAngleFromRotationMatrix(m) {
      let angle, x2, y, z;
      const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
      if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
        if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
          this.set(1, 0, 0, 0);
          return this;
        }
        angle = Math.PI;
        const xx = (m11 + 1) / 2;
        const yy = (m22 + 1) / 2;
        const zz = (m33 + 1) / 2;
        const xy = (m12 + m21) / 4;
        const xz = (m13 + m31) / 4;
        const yz = (m23 + m32) / 4;
        if (xx > yy && xx > zz) {
          if (xx < epsilon) {
            x2 = 0;
            y = 0.707106781;
            z = 0.707106781;
          } else {
            x2 = Math.sqrt(xx);
            y = xy / x2;
            z = xz / x2;
          }
        } else if (yy > zz) {
          if (yy < epsilon) {
            x2 = 0.707106781;
            y = 0;
            z = 0.707106781;
          } else {
            y = Math.sqrt(yy);
            x2 = xy / y;
            z = yz / y;
          }
        } else {
          if (zz < epsilon) {
            x2 = 0.707106781;
            y = 0.707106781;
            z = 0;
          } else {
            z = Math.sqrt(zz);
            x2 = xz / z;
            y = yz / z;
          }
        }
        this.set(x2, y, z, angle);
        return this;
      }
      let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
      if (Math.abs(s) < 1e-3) s = 1;
      this.x = (m32 - m23) / s;
      this.y = (m13 - m31) / s;
      this.z = (m21 - m12) / s;
      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      this.w = e[15];
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      this.w = Math.min(this.w, v.w);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      this.w = Math.max(this.w, v.w);
      return this;
    }
    clamp(min, max2) {
      this.x = clamp(this.x, min.x, max2.x);
      this.y = clamp(this.y, min.y, max2.y);
      this.z = clamp(this.z, min.z, max2.z);
      this.w = clamp(this.w, min.w, max2.w);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      this.z = clamp(this.z, minVal, maxVal);
      this.w = clamp(this.w, minVal, maxVal);
      return this;
    }
    clampLength(min, max2) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max2));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      this.w = Math.floor(this.w);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      this.w = Math.ceil(this.w);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      this.w = Math.round(this.w);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      this.z = Math.trunc(this.z);
      this.w = Math.trunc(this.w);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      this.w = -this.w;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      this.w += (v.w - this.w) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      this.w = v1.w + (v2.w - v1.w) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      this.w = array[offset + 3];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      array[offset + 3] = this.w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      this.w = attribute.getW(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      this.w = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
      yield this.w;
    }
  }
  class RenderTarget extends EventDispatcher {
    constructor(width = 1, height = 1, options = {}) {
      super();
      this.isRenderTarget = true;
      this.width = width;
      this.height = height;
      this.depth = 1;
      this.scissor = new Vector4(0, 0, width, height);
      this.scissorTest = false;
      this.viewport = new Vector4(0, 0, width, height);
      const image = { width, height, depth: 1 };
      options = Object.assign({
        generateMipmaps: false,
        internalFormat: null,
        minFilter: LinearFilter,
        depthBuffer: true,
        stencilBuffer: false,
        resolveDepthBuffer: true,
        resolveStencilBuffer: true,
        depthTexture: null,
        samples: 0,
        count: 1
      }, options);
      const texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
      texture.flipY = false;
      texture.generateMipmaps = options.generateMipmaps;
      texture.internalFormat = options.internalFormat;
      this.textures = [];
      const count = options.count;
      for (let i2 = 0; i2 < count; i2++) {
        this.textures[i2] = texture.clone();
        this.textures[i2].isRenderTargetTexture = true;
        this.textures[i2].renderTarget = this;
      }
      this.depthBuffer = options.depthBuffer;
      this.stencilBuffer = options.stencilBuffer;
      this.resolveDepthBuffer = options.resolveDepthBuffer;
      this.resolveStencilBuffer = options.resolveStencilBuffer;
      this._depthTexture = null;
      this.depthTexture = options.depthTexture;
      this.samples = options.samples;
    }
    get texture() {
      return this.textures[0];
    }
    set texture(value) {
      this.textures[0] = value;
    }
    set depthTexture(current) {
      if (this._depthTexture !== null) this._depthTexture.renderTarget = null;
      if (current !== null) current.renderTarget = this;
      this._depthTexture = current;
    }
    get depthTexture() {
      return this._depthTexture;
    }
    setSize(width, height, depth = 1) {
      if (this.width !== width || this.height !== height || this.depth !== depth) {
        this.width = width;
        this.height = height;
        this.depth = depth;
        for (let i2 = 0, il = this.textures.length; i2 < il; i2++) {
          this.textures[i2].image.width = width;
          this.textures[i2].image.height = height;
          this.textures[i2].image.depth = depth;
        }
        this.dispose();
      }
      this.viewport.set(0, 0, width, height);
      this.scissor.set(0, 0, width, height);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.width = source.width;
      this.height = source.height;
      this.depth = source.depth;
      this.scissor.copy(source.scissor);
      this.scissorTest = source.scissorTest;
      this.viewport.copy(source.viewport);
      this.textures.length = 0;
      for (let i2 = 0, il = source.textures.length; i2 < il; i2++) {
        this.textures[i2] = source.textures[i2].clone();
        this.textures[i2].isRenderTargetTexture = true;
        this.textures[i2].renderTarget = this;
      }
      const image = Object.assign({}, source.texture.image);
      this.texture.source = new Source(image);
      this.depthBuffer = source.depthBuffer;
      this.stencilBuffer = source.stencilBuffer;
      this.resolveDepthBuffer = source.resolveDepthBuffer;
      this.resolveStencilBuffer = source.resolveStencilBuffer;
      if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
      this.samples = source.samples;
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  }
  class WebGLRenderTarget extends RenderTarget {
    constructor(width = 1, height = 1, options = {}) {
      super(width, height, options);
      this.isWebGLRenderTarget = true;
    }
  }
  class DataArrayTexture extends Texture {
    constructor(data = null, width = 1, height = 1, depth = 1) {
      super(null);
      this.isDataArrayTexture = true;
      this.image = { data, width, height, depth };
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.wrapR = ClampToEdgeWrapping;
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
      this.layerUpdates = /* @__PURE__ */ new Set();
    }
    addLayerUpdate(layerIndex) {
      this.layerUpdates.add(layerIndex);
    }
    clearLayerUpdates() {
      this.layerUpdates.clear();
    }
  }
  class WebGLArrayRenderTarget extends WebGLRenderTarget {
    constructor(width = 1, height = 1, depth = 1, options = {}) {
      super(width, height, options);
      this.isWebGLArrayRenderTarget = true;
      this.depth = depth;
      this.texture = new DataArrayTexture(null, width, height, depth);
      this.texture.isRenderTargetTexture = true;
    }
  }
  class Quaternion {
    constructor(x2 = 0, y = 0, z = 0, w = 1) {
      this.isQuaternion = true;
      this._x = x2;
      this._y = y;
      this._z = z;
      this._w = w;
    }
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
      let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
      if (t === 0) {
        dst[dstOffset + 0] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
        return;
      }
      if (t === 1) {
        dst[dstOffset + 0] = x1;
        dst[dstOffset + 1] = y1;
        dst[dstOffset + 2] = z1;
        dst[dstOffset + 3] = w1;
        return;
      }
      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
        let s = 1 - t;
        const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
        if (sqrSin > Number.EPSILON) {
          const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
          s = Math.sin(s * len) / sin;
          t = Math.sin(t * len) / sin;
        }
        const tDir = t * dir;
        x0 = x0 * s + x1 * tDir;
        y0 = y0 * s + y1 * tDir;
        z0 = z0 * s + z1 * tDir;
        w0 = w0 * s + w1 * tDir;
        if (s === 1 - t) {
          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
          x0 *= f;
          y0 *= f;
          z0 *= f;
          w0 *= f;
        }
      }
      dst[dstOffset] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
      const x0 = src0[srcOffset0];
      const y0 = src0[srcOffset0 + 1];
      const z0 = src0[srcOffset0 + 2];
      const w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1];
      const y1 = src1[srcOffset1 + 1];
      const z1 = src1[srcOffset1 + 2];
      const w1 = src1[srcOffset1 + 3];
      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
      return dst;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get w() {
      return this._w;
    }
    set w(value) {
      this._w = value;
      this._onChangeCallback();
    }
    set(x2, y, z, w) {
      this._x = x2;
      this._y = y;
      this._z = z;
      this._w = w;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
      this._x = quaternion.x;
      this._y = quaternion.y;
      this._z = quaternion.z;
      this._w = quaternion.w;
      this._onChangeCallback();
      return this;
    }
    setFromEuler(euler, update = true) {
      const x2 = euler._x, y = euler._y, z = euler._z, order = euler._order;
      const cos = Math.cos;
      const sin = Math.sin;
      const c1 = cos(x2 / 2);
      const c2 = cos(y / 2);
      const c3 = cos(z / 2);
      const s1 = sin(x2 / 2);
      const s2 = sin(y / 2);
      const s3 = sin(z / 2);
      switch (order) {
        case "XYZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "YXZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "ZXY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "ZYX":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "YZX":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "XZY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        default:
          console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
      }
      if (update === true) this._onChangeCallback();
      return this;
    }
    setFromAxisAngle(axis, angle) {
      const halfAngle = angle / 2, s = Math.sin(halfAngle);
      this._x = axis.x * s;
      this._y = axis.y * s;
      this._z = axis.z * s;
      this._w = Math.cos(halfAngle);
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m) {
      const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
      if (trace > 0) {
        const s = 0.5 / Math.sqrt(trace + 1);
        this._w = 0.25 / s;
        this._x = (m32 - m23) * s;
        this._y = (m13 - m31) * s;
        this._z = (m21 - m12) * s;
      } else if (m11 > m22 && m11 > m33) {
        const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
        this._w = (m32 - m23) / s;
        this._x = 0.25 * s;
        this._y = (m12 + m21) / s;
        this._z = (m13 + m31) / s;
      } else if (m22 > m33) {
        const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
        this._w = (m13 - m31) / s;
        this._x = (m12 + m21) / s;
        this._y = 0.25 * s;
        this._z = (m23 + m32) / s;
      } else {
        const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
        this._w = (m21 - m12) / s;
        this._x = (m13 + m31) / s;
        this._y = (m23 + m32) / s;
        this._z = 0.25 * s;
      }
      this._onChangeCallback();
      return this;
    }
    setFromUnitVectors(vFrom, vTo) {
      let r = vFrom.dot(vTo) + 1;
      if (r < Number.EPSILON) {
        r = 0;
        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
          this._x = -vFrom.y;
          this._y = vFrom.x;
          this._z = 0;
          this._w = r;
        } else {
          this._x = 0;
          this._y = -vFrom.z;
          this._z = vFrom.y;
          this._w = r;
        }
      } else {
        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
        this._w = r;
      }
      return this.normalize();
    }
    angleTo(q) {
      return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
    }
    rotateTowards(q, step) {
      const angle = this.angleTo(q);
      if (angle === 0) return this;
      const t = Math.min(1, step / angle);
      this.slerp(q, t);
      return this;
    }
    identity() {
      return this.set(0, 0, 0, 1);
    }
    invert() {
      return this.conjugate();
    }
    conjugate() {
      this._x *= -1;
      this._y *= -1;
      this._z *= -1;
      this._onChangeCallback();
      return this;
    }
    dot(v) {
      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
    lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
      let l = this.length();
      if (l === 0) {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
      } else {
        l = 1 / l;
        this._x = this._x * l;
        this._y = this._y * l;
        this._z = this._z * l;
        this._w = this._w * l;
      }
      this._onChangeCallback();
      return this;
    }
    multiply(q) {
      return this.multiplyQuaternions(this, q);
    }
    premultiply(q) {
      return this.multiplyQuaternions(q, this);
    }
    multiplyQuaternions(a, b) {
      const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
      const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
      this._onChangeCallback();
      return this;
    }
    slerp(qb, t) {
      if (t === 0) return this;
      if (t === 1) return this.copy(qb);
      const x2 = this._x, y = this._y, z = this._z, w = this._w;
      let cosHalfTheta = w * qb._w + x2 * qb._x + y * qb._y + z * qb._z;
      if (cosHalfTheta < 0) {
        this._w = -qb._w;
        this._x = -qb._x;
        this._y = -qb._y;
        this._z = -qb._z;
        cosHalfTheta = -cosHalfTheta;
      } else {
        this.copy(qb);
      }
      if (cosHalfTheta >= 1) {
        this._w = w;
        this._x = x2;
        this._y = y;
        this._z = z;
        return this;
      }
      const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
      if (sqrSinHalfTheta <= Number.EPSILON) {
        const s = 1 - t;
        this._w = s * w + t * this._w;
        this._x = s * x2 + t * this._x;
        this._y = s * y + t * this._y;
        this._z = s * z + t * this._z;
        this.normalize();
        return this;
      }
      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
      const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
      this._w = w * ratioA + this._w * ratioB;
      this._x = x2 * ratioA + this._x * ratioB;
      this._y = y * ratioA + this._y * ratioB;
      this._z = z * ratioA + this._z * ratioB;
      this._onChangeCallback();
      return this;
    }
    slerpQuaternions(qa, qb, t) {
      return this.copy(qa).slerp(qb, t);
    }
    random() {
      const theta1 = 2 * Math.PI * Math.random();
      const theta2 = 2 * Math.PI * Math.random();
      const x0 = Math.random();
      const r1 = Math.sqrt(1 - x0);
      const r2 = Math.sqrt(x0);
      return this.set(
        r1 * Math.sin(theta1),
        r1 * Math.cos(theta1),
        r2 * Math.sin(theta2),
        r2 * Math.cos(theta2)
      );
    }
    equals(quaternion) {
      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    fromArray(array, offset = 0) {
      this._x = array[offset];
      this._y = array[offset + 1];
      this._z = array[offset + 2];
      this._w = array[offset + 3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this._x = attribute.getX(index);
      this._y = attribute.getY(index);
      this._z = attribute.getZ(index);
      this._w = attribute.getW(index);
      this._onChangeCallback();
      return this;
    }
    toJSON() {
      return this.toArray();
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._w;
    }
  }
  class Vector3 {
    constructor(x2 = 0, y = 0, z = 0) {
      Vector3.prototype.isVector3 = true;
      this.x = x2;
      this.y = y;
      this.z = z;
    }
    set(x2, y, z) {
      if (z === void 0) z = this.z;
      this.x = x2;
      this.y = y;
      this.z = z;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      return this;
    }
    setX(x2) {
      this.x = x2;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this;
    }
    multiplyVectors(a, b) {
      this.x = a.x * b.x;
      this.y = a.y * b.y;
      this.z = a.z * b.z;
      return this;
    }
    applyEuler(euler) {
      return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
    }
    applyAxisAngle(axis, angle) {
      return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
    }
    applyMatrix3(m) {
      const x2 = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x2 + e[3] * y + e[6] * z;
      this.y = e[1] * x2 + e[4] * y + e[7] * z;
      this.z = e[2] * x2 + e[5] * y + e[8] * z;
      return this;
    }
    applyNormalMatrix(m) {
      return this.applyMatrix3(m).normalize();
    }
    applyMatrix4(m) {
      const x2 = this.x, y = this.y, z = this.z;
      const e = m.elements;
      const w = 1 / (e[3] * x2 + e[7] * y + e[11] * z + e[15]);
      this.x = (e[0] * x2 + e[4] * y + e[8] * z + e[12]) * w;
      this.y = (e[1] * x2 + e[5] * y + e[9] * z + e[13]) * w;
      this.z = (e[2] * x2 + e[6] * y + e[10] * z + e[14]) * w;
      return this;
    }
    applyQuaternion(q) {
      const vx = this.x, vy = this.y, vz = this.z;
      const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
      const tx = 2 * (qy * vz - qz * vy);
      const ty = 2 * (qz * vx - qx * vz);
      const tz = 2 * (qx * vy - qy * vx);
      this.x = vx + qw * tx + qy * tz - qz * ty;
      this.y = vy + qw * ty + qz * tx - qx * tz;
      this.z = vz + qw * tz + qx * ty - qy * tx;
      return this;
    }
    project(camera) {
      return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
    }
    unproject(camera) {
      return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
    }
    transformDirection(m) {
      const x2 = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x2 + e[4] * y + e[8] * z;
      this.y = e[1] * x2 + e[5] * y + e[9] * z;
      this.z = e[2] * x2 + e[6] * y + e[10] * z;
      return this.normalize();
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      return this;
    }
    clamp(min, max2) {
      this.x = clamp(this.x, min.x, max2.x);
      this.y = clamp(this.y, min.y, max2.y);
      this.z = clamp(this.z, min.z, max2.z);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      this.z = clamp(this.z, minVal, maxVal);
      return this;
    }
    clampLength(min, max2) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max2));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      this.z = Math.trunc(this.z);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    // TODO lengthSquared?
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      return this;
    }
    cross(v) {
      return this.crossVectors(this, v);
    }
    crossVectors(a, b) {
      const ax = a.x, ay = a.y, az = a.z;
      const bx = b.x, by = b.y, bz = b.z;
      this.x = ay * bz - az * by;
      this.y = az * bx - ax * bz;
      this.z = ax * by - ay * bx;
      return this;
    }
    projectOnVector(v) {
      const denominator = v.lengthSq();
      if (denominator === 0) return this.set(0, 0, 0);
      const scalar = v.dot(this) / denominator;
      return this.copy(v).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
      _vector$c.copy(this).projectOnVector(planeNormal);
      return this.sub(_vector$c);
    }
    reflect(normal) {
      return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0) return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
      return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
    setFromSpherical(s) {
      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
    setFromSphericalCoords(radius, phi, theta) {
      const sinPhiRadius = Math.sin(phi) * radius;
      this.x = sinPhiRadius * Math.sin(theta);
      this.y = Math.cos(phi) * radius;
      this.z = sinPhiRadius * Math.cos(theta);
      return this;
    }
    setFromCylindrical(c) {
      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
    setFromCylindricalCoords(radius, theta, y) {
      this.x = radius * Math.sin(theta);
      this.y = y;
      this.z = radius * Math.cos(theta);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      return this;
    }
    setFromMatrixScale(m) {
      const sx = this.setFromMatrixColumn(m, 0).length();
      const sy = this.setFromMatrixColumn(m, 1).length();
      const sz = this.setFromMatrixColumn(m, 2).length();
      this.x = sx;
      this.y = sy;
      this.z = sz;
      return this;
    }
    setFromMatrixColumn(m, index) {
      return this.fromArray(m.elements, index * 4);
    }
    setFromMatrix3Column(m, index) {
      return this.fromArray(m.elements, index * 3);
    }
    setFromEuler(e) {
      this.x = e._x;
      this.y = e._y;
      this.z = e._z;
      return this;
    }
    setFromColor(c) {
      this.x = c.r;
      this.y = c.g;
      this.z = c.b;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      return this;
    }
    randomDirection() {
      const theta = Math.random() * Math.PI * 2;
      const u = Math.random() * 2 - 1;
      const c = Math.sqrt(1 - u * u);
      this.x = c * Math.cos(theta);
      this.y = u;
      this.z = c * Math.sin(theta);
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
    }
  }
  const _vector$c = /* @__PURE__ */ new Vector3();
  const _quaternion$4 = /* @__PURE__ */ new Quaternion();
  class Box3 {
    constructor(min = new Vector3(Infinity, Infinity, Infinity), max2 = new Vector3(-Infinity, -Infinity, -Infinity)) {
      this.isBox3 = true;
      this.min = min;
      this.max = max2;
    }
    set(min, max2) {
      this.min.copy(min);
      this.max.copy(max2);
      return this;
    }
    setFromArray(array) {
      this.makeEmpty();
      for (let i2 = 0, il = array.length; i2 < il; i2 += 3) {
        this.expandByPoint(_vector$b.fromArray(array, i2));
      }
      return this;
    }
    setFromBufferAttribute(attribute) {
      this.makeEmpty();
      for (let i2 = 0, il = attribute.count; i2 < il; i2++) {
        this.expandByPoint(_vector$b.fromBufferAttribute(attribute, i2));
      }
      return this;
    }
    setFromPoints(points) {
      this.makeEmpty();
      for (let i2 = 0, il = points.length; i2 < il; i2++) {
        this.expandByPoint(points[i2]);
      }
      return this;
    }
    setFromCenterAndSize(center, size) {
      const halfSize = _vector$b.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    setFromObject(object, precise = false) {
      this.makeEmpty();
      return this.expandByObject(object, precise);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
    makeEmpty() {
      this.min.x = this.min.y = this.min.z = Infinity;
      this.max.x = this.max.y = this.max.z = -Infinity;
      return this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    expandByObject(object, precise = false) {
      object.updateWorldMatrix(false, false);
      const geometry = object.geometry;
      if (geometry !== void 0) {
        const positionAttribute = geometry.getAttribute("position");
        if (precise === true && positionAttribute !== void 0 && object.isInstancedMesh !== true) {
          for (let i2 = 0, l = positionAttribute.count; i2 < l; i2++) {
            if (object.isMesh === true) {
              object.getVertexPosition(i2, _vector$b);
            } else {
              _vector$b.fromBufferAttribute(positionAttribute, i2);
            }
            _vector$b.applyMatrix4(object.matrixWorld);
            this.expandByPoint(_vector$b);
          }
        } else {
          if (object.boundingBox !== void 0) {
            if (object.boundingBox === null) {
              object.computeBoundingBox();
            }
            _box$4.copy(object.boundingBox);
          } else {
            if (geometry.boundingBox === null) {
              geometry.computeBoundingBox();
            }
            _box$4.copy(geometry.boundingBox);
          }
          _box$4.applyMatrix4(object.matrixWorld);
          this.union(_box$4);
        }
      }
      const children = object.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        this.expandByObject(children[i2], precise);
      }
      return this;
    }
    containsPoint(point) {
      return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;
    }
    containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
    getParameter(point, target) {
      return target.set(
        (point.x - this.min.x) / (this.max.x - this.min.x),
        (point.y - this.min.y) / (this.max.y - this.min.y),
        (point.z - this.min.z) / (this.max.z - this.min.z)
      );
    }
    intersectsBox(box) {
      return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;
    }
    intersectsSphere(sphere) {
      this.clampPoint(sphere.center, _vector$b);
      return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
    intersectsPlane(plane) {
      let min, max2;
      if (plane.normal.x > 0) {
        min = plane.normal.x * this.min.x;
        max2 = plane.normal.x * this.max.x;
      } else {
        min = plane.normal.x * this.max.x;
        max2 = plane.normal.x * this.min.x;
      }
      if (plane.normal.y > 0) {
        min += plane.normal.y * this.min.y;
        max2 += plane.normal.y * this.max.y;
      } else {
        min += plane.normal.y * this.max.y;
        max2 += plane.normal.y * this.min.y;
      }
      if (plane.normal.z > 0) {
        min += plane.normal.z * this.min.z;
        max2 += plane.normal.z * this.max.z;
      } else {
        min += plane.normal.z * this.max.z;
        max2 += plane.normal.z * this.min.z;
      }
      return min <= -plane.constant && max2 >= -plane.constant;
    }
    intersectsTriangle(triangle) {
      if (this.isEmpty()) {
        return false;
      }
      this.getCenter(_center);
      _extents.subVectors(this.max, _center);
      _v0$2.subVectors(triangle.a, _center);
      _v1$7.subVectors(triangle.b, _center);
      _v2$4.subVectors(triangle.c, _center);
      _f0.subVectors(_v1$7, _v0$2);
      _f1.subVectors(_v2$4, _v1$7);
      _f2.subVectors(_v0$2, _v2$4);
      let axes = [
        0,
        -_f0.z,
        _f0.y,
        0,
        -_f1.z,
        _f1.y,
        0,
        -_f2.z,
        _f2.y,
        _f0.z,
        0,
        -_f0.x,
        _f1.z,
        0,
        -_f1.x,
        _f2.z,
        0,
        -_f2.x,
        -_f0.y,
        _f0.x,
        0,
        -_f1.y,
        _f1.x,
        0,
        -_f2.y,
        _f2.x,
        0
      ];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      _triangleNormal.crossVectors(_f0, _f1);
      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
      return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
    }
    clampPoint(point, target) {
      return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
      return this.clampPoint(point, _vector$b).distanceTo(point);
    }
    getBoundingSphere(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
      } else {
        this.getCenter(target.center);
        target.radius = this.getSize(_vector$b).length() * 0.5;
      }
      return target;
    }
    intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      if (this.isEmpty()) this.makeEmpty();
      return this;
    }
    union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
    applyMatrix4(matrix) {
      if (this.isEmpty()) return this;
      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
      this.setFromPoints(_points);
      return this;
    }
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  }
  const _points = [
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3()
  ];
  const _vector$b = /* @__PURE__ */ new Vector3();
  const _box$4 = /* @__PURE__ */ new Box3();
  const _v0$2 = /* @__PURE__ */ new Vector3();
  const _v1$7 = /* @__PURE__ */ new Vector3();
  const _v2$4 = /* @__PURE__ */ new Vector3();
  const _f0 = /* @__PURE__ */ new Vector3();
  const _f1 = /* @__PURE__ */ new Vector3();
  const _f2 = /* @__PURE__ */ new Vector3();
  const _center = /* @__PURE__ */ new Vector3();
  const _extents = /* @__PURE__ */ new Vector3();
  const _triangleNormal = /* @__PURE__ */ new Vector3();
  const _testAxis = /* @__PURE__ */ new Vector3();
  function satForAxes(axes, v0, v1, v2, extents) {
    for (let i2 = 0, j = axes.length - 3; i2 <= j; i2 += 3) {
      _testAxis.fromArray(axes, i2);
      const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
      const p0 = v0.dot(_testAxis);
      const p1 = v1.dot(_testAxis);
      const p2 = v2.dot(_testAxis);
      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
        return false;
      }
    }
    return true;
  }
  const _box$3 = /* @__PURE__ */ new Box3();
  const _v1$6 = /* @__PURE__ */ new Vector3();
  const _v2$3 = /* @__PURE__ */ new Vector3();
  class Sphere {
    constructor(center = new Vector3(), radius = -1) {
      this.isSphere = true;
      this.center = center;
      this.radius = radius;
    }
    set(center, radius) {
      this.center.copy(center);
      this.radius = radius;
      return this;
    }
    setFromPoints(points, optionalCenter) {
      const center = this.center;
      if (optionalCenter !== void 0) {
        center.copy(optionalCenter);
      } else {
        _box$3.setFromPoints(points).getCenter(center);
      }
      let maxRadiusSq = 0;
      for (let i2 = 0, il = points.length; i2 < il; i2++) {
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i2]));
      }
      this.radius = Math.sqrt(maxRadiusSq);
      return this;
    }
    copy(sphere) {
      this.center.copy(sphere.center);
      this.radius = sphere.radius;
      return this;
    }
    isEmpty() {
      return this.radius < 0;
    }
    makeEmpty() {
      this.center.set(0, 0, 0);
      this.radius = -1;
      return this;
    }
    containsPoint(point) {
      return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(point) {
      return point.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(sphere) {
      const radiusSum = this.radius + sphere.radius;
      return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    intersectsBox(box) {
      return box.intersectsSphere(this);
    }
    intersectsPlane(plane) {
      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(point, target) {
      const deltaLengthSq = this.center.distanceToSquared(point);
      target.copy(point);
      if (deltaLengthSq > this.radius * this.radius) {
        target.sub(this.center).normalize();
        target.multiplyScalar(this.radius).add(this.center);
      }
      return target;
    }
    getBoundingBox(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
        return target;
      }
      target.set(this.center, this.center);
      target.expandByScalar(this.radius);
      return target;
    }
    applyMatrix4(matrix) {
      this.center.applyMatrix4(matrix);
      this.radius = this.radius * matrix.getMaxScaleOnAxis();
      return this;
    }
    translate(offset) {
      this.center.add(offset);
      return this;
    }
    expandByPoint(point) {
      if (this.isEmpty()) {
        this.center.copy(point);
        this.radius = 0;
        return this;
      }
      _v1$6.subVectors(point, this.center);
      const lengthSq = _v1$6.lengthSq();
      if (lengthSq > this.radius * this.radius) {
        const length = Math.sqrt(lengthSq);
        const delta = (length - this.radius) * 0.5;
        this.center.addScaledVector(_v1$6, delta / length);
        this.radius += delta;
      }
      return this;
    }
    union(sphere) {
      if (sphere.isEmpty()) {
        return this;
      }
      if (this.isEmpty()) {
        this.copy(sphere);
        return this;
      }
      if (this.center.equals(sphere.center) === true) {
        this.radius = Math.max(this.radius, sphere.radius);
      } else {
        _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
        this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
        this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
      }
      return this;
    }
    equals(sphere) {
      return sphere.center.equals(this.center) && sphere.radius === this.radius;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  }
  const _vector$a = /* @__PURE__ */ new Vector3();
  const _segCenter = /* @__PURE__ */ new Vector3();
  const _segDir = /* @__PURE__ */ new Vector3();
  const _diff = /* @__PURE__ */ new Vector3();
  const _edge1 = /* @__PURE__ */ new Vector3();
  const _edge2 = /* @__PURE__ */ new Vector3();
  const _normal$1 = /* @__PURE__ */ new Vector3();
  class Ray {
    constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
      this.origin = origin;
      this.direction = direction;
    }
    set(origin, direction) {
      this.origin.copy(origin);
      this.direction.copy(direction);
      return this;
    }
    copy(ray) {
      this.origin.copy(ray.origin);
      this.direction.copy(ray.direction);
      return this;
    }
    at(t, target) {
      return target.copy(this.origin).addScaledVector(this.direction, t);
    }
    lookAt(v) {
      this.direction.copy(v).sub(this.origin).normalize();
      return this;
    }
    recast(t) {
      this.origin.copy(this.at(t, _vector$a));
      return this;
    }
    closestPointToPoint(point, target) {
      target.subVectors(point, this.origin);
      const directionDistance = target.dot(this.direction);
      if (directionDistance < 0) {
        return target.copy(this.origin);
      }
      return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
    }
    distanceToPoint(point) {
      return Math.sqrt(this.distanceSqToPoint(point));
    }
    distanceSqToPoint(point) {
      const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);
      if (directionDistance < 0) {
        return this.origin.distanceToSquared(point);
      }
      _vector$a.copy(this.origin).addScaledVector(this.direction, directionDistance);
      return _vector$a.distanceToSquared(point);
    }
    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
      _segDir.copy(v1).sub(v0).normalize();
      _diff.copy(this.origin).sub(_segCenter);
      const segExtent = v0.distanceTo(v1) * 0.5;
      const a01 = -this.direction.dot(_segDir);
      const b0 = _diff.dot(this.direction);
      const b1 = -_diff.dot(_segDir);
      const c = _diff.lengthSq();
      const det = Math.abs(1 - a01 * a01);
      let s0, s1, sqrDist, extDet;
      if (det > 0) {
        s0 = a01 * b1 - b0;
        s1 = a01 * b0 - b1;
        extDet = segExtent * det;
        if (s0 >= 0) {
          if (s1 >= -extDet) {
            if (s1 <= extDet) {
              const invDet = 1 / det;
              s0 *= invDet;
              s1 *= invDet;
              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
            } else {
              s1 = segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          } else {
            s1 = -segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          if (s1 <= -extDet) {
            s0 = Math.max(0, -(-a01 * segExtent + b0));
            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          } else if (s1 <= extDet) {
            s0 = 0;
            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = s1 * (s1 + 2 * b1) + c;
          } else {
            s0 = Math.max(0, -(a01 * segExtent + b0));
            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        }
      } else {
        s1 = a01 > 0 ? -segExtent : segExtent;
        s0 = Math.max(0, -(a01 * s1 + b0));
        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
      }
      if (optionalPointOnRay) {
        optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
      }
      if (optionalPointOnSegment) {
        optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
      }
      return sqrDist;
    }
    intersectSphere(sphere, target) {
      _vector$a.subVectors(sphere.center, this.origin);
      const tca = _vector$a.dot(this.direction);
      const d2 = _vector$a.dot(_vector$a) - tca * tca;
      const radius2 = sphere.radius * sphere.radius;
      if (d2 > radius2) return null;
      const thc = Math.sqrt(radius2 - d2);
      const t0 = tca - thc;
      const t1 = tca + thc;
      if (t1 < 0) return null;
      if (t0 < 0) return this.at(t1, target);
      return this.at(t0, target);
    }
    intersectsSphere(sphere) {
      return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
    }
    distanceToPlane(plane) {
      const denominator = plane.normal.dot(this.direction);
      if (denominator === 0) {
        if (plane.distanceToPoint(this.origin) === 0) {
          return 0;
        }
        return null;
      }
      const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
      return t >= 0 ? t : null;
    }
    intersectPlane(plane, target) {
      const t = this.distanceToPlane(plane);
      if (t === null) {
        return null;
      }
      return this.at(t, target);
    }
    intersectsPlane(plane) {
      const distToPoint = plane.distanceToPoint(this.origin);
      if (distToPoint === 0) {
        return true;
      }
      const denominator = plane.normal.dot(this.direction);
      if (denominator * distToPoint < 0) {
        return true;
      }
      return false;
    }
    intersectBox(box, target) {
      let tmin, tmax, tymin, tymax, tzmin, tzmax;
      const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
      const origin = this.origin;
      if (invdirx >= 0) {
        tmin = (box.min.x - origin.x) * invdirx;
        tmax = (box.max.x - origin.x) * invdirx;
      } else {
        tmin = (box.max.x - origin.x) * invdirx;
        tmax = (box.min.x - origin.x) * invdirx;
      }
      if (invdiry >= 0) {
        tymin = (box.min.y - origin.y) * invdiry;
        tymax = (box.max.y - origin.y) * invdiry;
      } else {
        tymin = (box.max.y - origin.y) * invdiry;
        tymax = (box.min.y - origin.y) * invdiry;
      }
      if (tmin > tymax || tymin > tmax) return null;
      if (tymin > tmin || isNaN(tmin)) tmin = tymin;
      if (tymax < tmax || isNaN(tmax)) tmax = tymax;
      if (invdirz >= 0) {
        tzmin = (box.min.z - origin.z) * invdirz;
        tzmax = (box.max.z - origin.z) * invdirz;
      } else {
        tzmin = (box.max.z - origin.z) * invdirz;
        tzmax = (box.min.z - origin.z) * invdirz;
      }
      if (tmin > tzmax || tzmin > tmax) return null;
      if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
      if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
      if (tmax < 0) return null;
      return this.at(tmin >= 0 ? tmin : tmax, target);
    }
    intersectsBox(box) {
      return this.intersectBox(box, _vector$a) !== null;
    }
    intersectTriangle(a, b, c, backfaceCulling, target) {
      _edge1.subVectors(b, a);
      _edge2.subVectors(c, a);
      _normal$1.crossVectors(_edge1, _edge2);
      let DdN = this.direction.dot(_normal$1);
      let sign;
      if (DdN > 0) {
        if (backfaceCulling) return null;
        sign = 1;
      } else if (DdN < 0) {
        sign = -1;
        DdN = -DdN;
      } else {
        return null;
      }
      _diff.subVectors(this.origin, a);
      const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
      if (DdQxE2 < 0) {
        return null;
      }
      const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));
      if (DdE1xQ < 0) {
        return null;
      }
      if (DdQxE2 + DdE1xQ > DdN) {
        return null;
      }
      const QdN = -sign * _diff.dot(_normal$1);
      if (QdN < 0) {
        return null;
      }
      return this.at(QdN / DdN, target);
    }
    applyMatrix4(matrix4) {
      this.origin.applyMatrix4(matrix4);
      this.direction.transformDirection(matrix4);
      return this;
    }
    equals(ray) {
      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
    clone() {
      return new this.constructor().copy(this);
    }
  }
  class Matrix4 {
    constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      Matrix4.prototype.isMatrix4 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
      }
    }
    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      const te = this.elements;
      te[0] = n11;
      te[4] = n12;
      te[8] = n13;
      te[12] = n14;
      te[1] = n21;
      te[5] = n22;
      te[9] = n23;
      te[13] = n24;
      te[2] = n31;
      te[6] = n32;
      te[10] = n33;
      te[14] = n34;
      te[3] = n41;
      te[7] = n42;
      te[11] = n43;
      te[15] = n44;
      return this;
    }
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    clone() {
      return new Matrix4().fromArray(this.elements);
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      te[9] = me[9];
      te[10] = me[10];
      te[11] = me[11];
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      te[15] = me[15];
      return this;
    }
    copyPosition(m) {
      const te = this.elements, me = m.elements;
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      return this;
    }
    setFromMatrix3(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[3],
        me[6],
        0,
        me[1],
        me[4],
        me[7],
        0,
        me[2],
        me[5],
        me[8],
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrixColumn(this, 0);
      yAxis.setFromMatrixColumn(this, 1);
      zAxis.setFromMatrixColumn(this, 2);
      return this;
    }
    makeBasis(xAxis, yAxis, zAxis) {
      this.set(
        xAxis.x,
        yAxis.x,
        zAxis.x,
        0,
        xAxis.y,
        yAxis.y,
        zAxis.y,
        0,
        xAxis.z,
        yAxis.z,
        zAxis.z,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    extractRotation(m) {
      const te = this.elements;
      const me = m.elements;
      const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
      const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
      const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
      te[0] = me[0] * scaleX;
      te[1] = me[1] * scaleX;
      te[2] = me[2] * scaleX;
      te[3] = 0;
      te[4] = me[4] * scaleY;
      te[5] = me[5] * scaleY;
      te[6] = me[6] * scaleY;
      te[7] = 0;
      te[8] = me[8] * scaleZ;
      te[9] = me[9] * scaleZ;
      te[10] = me[10] * scaleZ;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromEuler(euler) {
      const te = this.elements;
      const x2 = euler.x, y = euler.y, z = euler.z;
      const a = Math.cos(x2), b = Math.sin(x2);
      const c = Math.cos(y), d = Math.sin(y);
      const e = Math.cos(z), f = Math.sin(z);
      if (euler.order === "XYZ") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = -c * f;
        te[8] = d;
        te[1] = af + be * d;
        te[5] = ae - bf * d;
        te[9] = -b * c;
        te[2] = bf - ae * d;
        te[6] = be + af * d;
        te[10] = a * c;
      } else if (euler.order === "YXZ") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce + df * b;
        te[4] = de * b - cf;
        te[8] = a * d;
        te[1] = a * f;
        te[5] = a * e;
        te[9] = -b;
        te[2] = cf * b - de;
        te[6] = df + ce * b;
        te[10] = a * c;
      } else if (euler.order === "ZXY") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce - df * b;
        te[4] = -a * f;
        te[8] = de + cf * b;
        te[1] = cf + de * b;
        te[5] = a * e;
        te[9] = df - ce * b;
        te[2] = -a * d;
        te[6] = b;
        te[10] = a * c;
      } else if (euler.order === "ZYX") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = be * d - af;
        te[8] = ae * d + bf;
        te[1] = c * f;
        te[5] = bf * d + ae;
        te[9] = af * d - be;
        te[2] = -d;
        te[6] = b * c;
        te[10] = a * c;
      } else if (euler.order === "YZX") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = bd - ac * f;
        te[8] = bc * f + ad;
        te[1] = f;
        te[5] = a * e;
        te[9] = -b * e;
        te[2] = -d * e;
        te[6] = ad * f + bc;
        te[10] = ac - bd * f;
      } else if (euler.order === "XZY") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = -f;
        te[8] = d * e;
        te[1] = ac * f + bd;
        te[5] = a * e;
        te[9] = ad * f - bc;
        te[2] = bc * f - ad;
        te[6] = b * e;
        te[10] = bd * f + ac;
      }
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromQuaternion(q) {
      return this.compose(_zero, q, _one);
    }
    lookAt(eye, target, up) {
      const te = this.elements;
      _z.subVectors(eye, target);
      if (_z.lengthSq() === 0) {
        _z.z = 1;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
      if (_x.lengthSq() === 0) {
        if (Math.abs(up.z) === 1) {
          _z.x += 1e-4;
        } else {
          _z.z += 1e-4;
        }
        _z.normalize();
        _x.crossVectors(up, _z);
      }
      _x.normalize();
      _y.crossVectors(_z, _x);
      te[0] = _x.x;
      te[4] = _y.x;
      te[8] = _z.x;
      te[1] = _x.y;
      te[5] = _y.y;
      te[9] = _z.y;
      te[2] = _x.z;
      te[6] = _y.z;
      te[10] = _z.z;
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
      const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
      const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
      const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
      const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
      const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
      const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
      const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[4] *= s;
      te[8] *= s;
      te[12] *= s;
      te[1] *= s;
      te[5] *= s;
      te[9] *= s;
      te[13] *= s;
      te[2] *= s;
      te[6] *= s;
      te[10] *= s;
      te[14] *= s;
      te[3] *= s;
      te[7] *= s;
      te[11] *= s;
      te[15] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
      const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
      const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
      const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
      return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    transpose() {
      const te = this.elements;
      let tmp;
      tmp = te[1];
      te[1] = te[4];
      te[4] = tmp;
      tmp = te[2];
      te[2] = te[8];
      te[8] = tmp;
      tmp = te[6];
      te[6] = te[9];
      te[9] = tmp;
      tmp = te[3];
      te[3] = te[12];
      te[12] = tmp;
      tmp = te[7];
      te[7] = te[13];
      te[13] = tmp;
      tmp = te[11];
      te[11] = te[14];
      te[14] = tmp;
      return this;
    }
    setPosition(x2, y, z) {
      const te = this.elements;
      if (x2.isVector3) {
        te[12] = x2.x;
        te[13] = x2.y;
        te[14] = x2.z;
      } else {
        te[12] = x2;
        te[13] = y;
        te[14] = z;
      }
      return this;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
      const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
      te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
      te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
      te[4] = t12 * detInv;
      te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
      te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
      te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
      te[8] = t13 * detInv;
      te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
      te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
      te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
      te[12] = t14 * detInv;
      te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
      te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
      te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
      return this;
    }
    scale(v) {
      const te = this.elements;
      const x2 = v.x, y = v.y, z = v.z;
      te[0] *= x2;
      te[4] *= y;
      te[8] *= z;
      te[1] *= x2;
      te[5] *= y;
      te[9] *= z;
      te[2] *= x2;
      te[6] *= y;
      te[10] *= z;
      te[3] *= x2;
      te[7] *= y;
      te[11] *= z;
      return this;
    }
    getMaxScaleOnAxis() {
      const te = this.elements;
      const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
      const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
      const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    makeTranslation(x2, y, z) {
      if (x2.isVector3) {
        this.set(
          1,
          0,
          0,
          x2.x,
          0,
          1,
          0,
          x2.y,
          0,
          0,
          1,
          x2.z,
          0,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          0,
          x2,
          0,
          1,
          0,
          y,
          0,
          0,
          1,
          z,
          0,
          0,
          0,
          1
        );
      }
      return this;
    }
    makeRotationX(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        1,
        0,
        0,
        0,
        0,
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationY(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        0,
        s,
        0,
        0,
        1,
        0,
        0,
        -s,
        0,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationZ(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationAxis(axis, angle) {
      const c = Math.cos(angle);
      const s = Math.sin(angle);
      const t = 1 - c;
      const x2 = axis.x, y = axis.y, z = axis.z;
      const tx = t * x2, ty = t * y;
      this.set(
        tx * x2 + c,
        tx * y - s * z,
        tx * z + s * y,
        0,
        tx * y + s * z,
        ty * y + c,
        ty * z - s * x2,
        0,
        tx * z - s * y,
        ty * z + s * x2,
        t * z * z + c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeScale(x2, y, z) {
      this.set(
        x2,
        0,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        0,
        z,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeShear(xy, xz, yx, yz, zx, zy) {
      this.set(
        1,
        yx,
        zx,
        0,
        xy,
        1,
        zy,
        0,
        xz,
        yz,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    compose(position, quaternion, scale) {
      const te = this.elements;
      const x2 = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
      const x22 = x2 + x2, y2 = y + y, z2 = z + z;
      const xx = x2 * x22, xy = x2 * y2, xz = x2 * z2;
      const yy = y * y2, yz = y * z2, zz = z * z2;
      const wx = w * x22, wy = w * y2, wz = w * z2;
      const sx = scale.x, sy = scale.y, sz = scale.z;
      te[0] = (1 - (yy + zz)) * sx;
      te[1] = (xy + wz) * sx;
      te[2] = (xz - wy) * sx;
      te[3] = 0;
      te[4] = (xy - wz) * sy;
      te[5] = (1 - (xx + zz)) * sy;
      te[6] = (yz + wx) * sy;
      te[7] = 0;
      te[8] = (xz + wy) * sz;
      te[9] = (yz - wx) * sz;
      te[10] = (1 - (xx + yy)) * sz;
      te[11] = 0;
      te[12] = position.x;
      te[13] = position.y;
      te[14] = position.z;
      te[15] = 1;
      return this;
    }
    decompose(position, quaternion, scale) {
      const te = this.elements;
      let sx = _v1$5.set(te[0], te[1], te[2]).length();
      const sy = _v1$5.set(te[4], te[5], te[6]).length();
      const sz = _v1$5.set(te[8], te[9], te[10]).length();
      const det = this.determinant();
      if (det < 0) sx = -sx;
      position.x = te[12];
      position.y = te[13];
      position.z = te[14];
      _m1$2.copy(this);
      const invSX = 1 / sx;
      const invSY = 1 / sy;
      const invSZ = 1 / sz;
      _m1$2.elements[0] *= invSX;
      _m1$2.elements[1] *= invSX;
      _m1$2.elements[2] *= invSX;
      _m1$2.elements[4] *= invSY;
      _m1$2.elements[5] *= invSY;
      _m1$2.elements[6] *= invSY;
      _m1$2.elements[8] *= invSZ;
      _m1$2.elements[9] *= invSZ;
      _m1$2.elements[10] *= invSZ;
      quaternion.setFromRotationMatrix(_m1$2);
      scale.x = sx;
      scale.y = sy;
      scale.z = sz;
      return this;
    }
    makePerspective(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const x2 = 2 * near / (right - left);
      const y = 2 * near / (top - bottom);
      const a = (right + left) / (right - left);
      const b = (top + bottom) / (top - bottom);
      let c, d;
      if (coordinateSystem === WebGLCoordinateSystem) {
        c = -(far + near) / (far - near);
        d = -2 * far * near / (far - near);
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        c = -far / (far - near);
        d = -far * near / (far - near);
      } else {
        throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = x2;
      te[4] = 0;
      te[8] = a;
      te[12] = 0;
      te[1] = 0;
      te[5] = y;
      te[9] = b;
      te[13] = 0;
      te[2] = 0;
      te[6] = 0;
      te[10] = c;
      te[14] = d;
      te[3] = 0;
      te[7] = 0;
      te[11] = -1;
      te[15] = 0;
      return this;
    }
    makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const w = 1 / (right - left);
      const h = 1 / (top - bottom);
      const p = 1 / (far - near);
      const x2 = (right + left) * w;
      const y = (top + bottom) * h;
      let z, zInv;
      if (coordinateSystem === WebGLCoordinateSystem) {
        z = (far + near) * p;
        zInv = -2 * p;
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        z = near * p;
        zInv = -1 * p;
      } else {
        throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = 2 * w;
      te[4] = 0;
      te[8] = 0;
      te[12] = -x2;
      te[1] = 0;
      te[5] = 2 * h;
      te[9] = 0;
      te[13] = -y;
      te[2] = 0;
      te[6] = 0;
      te[10] = zInv;
      te[14] = -z;
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[15] = 1;
      return this;
    }
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i2 = 0; i2 < 16; i2++) {
        if (te[i2] !== me[i2]) return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i2 = 0; i2 < 16; i2++) {
        this.elements[i2] = array[i2 + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      array[offset + 9] = te[9];
      array[offset + 10] = te[10];
      array[offset + 11] = te[11];
      array[offset + 12] = te[12];
      array[offset + 13] = te[13];
      array[offset + 14] = te[14];
      array[offset + 15] = te[15];
      return array;
    }
  }
  const _v1$5 = /* @__PURE__ */ new Vector3();
  const _m1$2 = /* @__PURE__ */ new Matrix4();
  const _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
  const _one = /* @__PURE__ */ new Vector3(1, 1, 1);
  const _x = /* @__PURE__ */ new Vector3();
  const _y = /* @__PURE__ */ new Vector3();
  const _z = /* @__PURE__ */ new Vector3();
  const _matrix$2 = /* @__PURE__ */ new Matrix4();
  const _quaternion$3 = /* @__PURE__ */ new Quaternion();
  class Euler {
    constructor(x2 = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER) {
      this.isEuler = true;
      this._x = x2;
      this._y = y;
      this._z = z;
      this._order = order;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get order() {
      return this._order;
    }
    set order(value) {
      this._order = value;
      this._onChangeCallback();
    }
    set(x2, y, z, order = this._order) {
      this._x = x2;
      this._y = y;
      this._z = z;
      this._order = order;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(euler) {
      this._x = euler._x;
      this._y = euler._y;
      this._z = euler._z;
      this._order = euler._order;
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m, order = this._order, update = true) {
      const te = m.elements;
      const m11 = te[0], m12 = te[4], m13 = te[8];
      const m21 = te[1], m22 = te[5], m23 = te[9];
      const m31 = te[2], m32 = te[6], m33 = te[10];
      switch (order) {
        case "XYZ":
          this._y = Math.asin(clamp(m13, -1, 1));
          if (Math.abs(m13) < 0.9999999) {
            this._x = Math.atan2(-m23, m33);
            this._z = Math.atan2(-m12, m11);
          } else {
            this._x = Math.atan2(m32, m22);
            this._z = 0;
          }
          break;
        case "YXZ":
          this._x = Math.asin(-clamp(m23, -1, 1));
          if (Math.abs(m23) < 0.9999999) {
            this._y = Math.atan2(m13, m33);
            this._z = Math.atan2(m21, m22);
          } else {
            this._y = Math.atan2(-m31, m11);
            this._z = 0;
          }
          break;
        case "ZXY":
          this._x = Math.asin(clamp(m32, -1, 1));
          if (Math.abs(m32) < 0.9999999) {
            this._y = Math.atan2(-m31, m33);
            this._z = Math.atan2(-m12, m22);
          } else {
            this._y = 0;
            this._z = Math.atan2(m21, m11);
          }
          break;
        case "ZYX":
          this._y = Math.asin(-clamp(m31, -1, 1));
          if (Math.abs(m31) < 0.9999999) {
            this._x = Math.atan2(m32, m33);
            this._z = Math.atan2(m21, m11);
          } else {
            this._x = 0;
            this._z = Math.atan2(-m12, m22);
          }
          break;
        case "YZX":
          this._z = Math.asin(clamp(m21, -1, 1));
          if (Math.abs(m21) < 0.9999999) {
            this._x = Math.atan2(-m23, m22);
            this._y = Math.atan2(-m31, m11);
          } else {
            this._x = 0;
            this._y = Math.atan2(m13, m33);
          }
          break;
        case "XZY":
          this._z = Math.asin(-clamp(m12, -1, 1));
          if (Math.abs(m12) < 0.9999999) {
            this._x = Math.atan2(m32, m22);
            this._y = Math.atan2(m13, m11);
          } else {
            this._x = Math.atan2(-m23, m33);
            this._y = 0;
          }
          break;
        default:
          console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
      }
      this._order = order;
      if (update === true) this._onChangeCallback();
      return this;
    }
    setFromQuaternion(q, order, update) {
      _matrix$2.makeRotationFromQuaternion(q);
      return this.setFromRotationMatrix(_matrix$2, order, update);
    }
    setFromVector3(v, order = this._order) {
      return this.set(v.x, v.y, v.z, order);
    }
    reorder(newOrder) {
      _quaternion$3.setFromEuler(this);
      return this.setFromQuaternion(_quaternion$3, newOrder);
    }
    equals(euler) {
      return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
    }
    fromArray(array) {
      this._x = array[0];
      this._y = array[1];
      this._z = array[2];
      if (array[3] !== void 0) this._order = array[3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._order;
      return array;
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._order;
    }
  }
  Euler.DEFAULT_ORDER = "XYZ";
  class Layers {
    constructor() {
      this.mask = 1 | 0;
    }
    set(channel) {
      this.mask = (1 << channel | 0) >>> 0;
    }
    enable(channel) {
      this.mask |= 1 << channel | 0;
    }
    enableAll() {
      this.mask = 4294967295 | 0;
    }
    toggle(channel) {
      this.mask ^= 1 << channel | 0;
    }
    disable(channel) {
      this.mask &= ~(1 << channel | 0);
    }
    disableAll() {
      this.mask = 0;
    }
    test(layers) {
      return (this.mask & layers.mask) !== 0;
    }
    isEnabled(channel) {
      return (this.mask & (1 << channel | 0)) !== 0;
    }
  }
  let _object3DId = 0;
  const _v1$4 = /* @__PURE__ */ new Vector3();
  const _q1 = /* @__PURE__ */ new Quaternion();
  const _m1$1 = /* @__PURE__ */ new Matrix4();
  const _target = /* @__PURE__ */ new Vector3();
  const _position$3 = /* @__PURE__ */ new Vector3();
  const _scale$2 = /* @__PURE__ */ new Vector3();
  const _quaternion$2 = /* @__PURE__ */ new Quaternion();
  const _xAxis = /* @__PURE__ */ new Vector3(1, 0, 0);
  const _yAxis = /* @__PURE__ */ new Vector3(0, 1, 0);
  const _zAxis = /* @__PURE__ */ new Vector3(0, 0, 1);
  const _addedEvent = { type: "added" };
  const _removedEvent = { type: "removed" };
  const _childaddedEvent = { type: "childadded", child: null };
  const _childremovedEvent = { type: "childremoved", child: null };
  class Object3D extends EventDispatcher {
    constructor() {
      super();
      this.isObject3D = true;
      Object.defineProperty(this, "id", { value: _object3DId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Object3D";
      this.parent = null;
      this.children = [];
      this.up = Object3D.DEFAULT_UP.clone();
      const position = new Vector3();
      const rotation = new Euler();
      const quaternion = new Quaternion();
      const scale = new Vector3(1, 1, 1);
      function onRotationChange() {
        quaternion.setFromEuler(rotation, false);
      }
      function onQuaternionChange() {
        rotation.setFromQuaternion(quaternion, void 0, false);
      }
      rotation._onChange(onRotationChange);
      quaternion._onChange(onQuaternionChange);
      Object.defineProperties(this, {
        position: {
          configurable: true,
          enumerable: true,
          value: position
        },
        rotation: {
          configurable: true,
          enumerable: true,
          value: rotation
        },
        quaternion: {
          configurable: true,
          enumerable: true,
          value: quaternion
        },
        scale: {
          configurable: true,
          enumerable: true,
          value: scale
        },
        modelViewMatrix: {
          value: new Matrix4()
        },
        normalMatrix: {
          value: new Matrix3()
        }
      });
      this.matrix = new Matrix4();
      this.matrixWorld = new Matrix4();
      this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
      this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
      this.matrixWorldNeedsUpdate = false;
      this.layers = new Layers();
      this.visible = true;
      this.castShadow = false;
      this.receiveShadow = false;
      this.frustumCulled = true;
      this.renderOrder = 0;
      this.animations = [];
      this.userData = {};
    }
    onBeforeShadow() {
    }
    onAfterShadow() {
    }
    onBeforeRender() {
    }
    onAfterRender() {
    }
    applyMatrix4(matrix) {
      if (this.matrixAutoUpdate) this.updateMatrix();
      this.matrix.premultiply(matrix);
      this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(q) {
      this.quaternion.premultiply(q);
      return this;
    }
    setRotationFromAxisAngle(axis, angle) {
      this.quaternion.setFromAxisAngle(axis, angle);
    }
    setRotationFromEuler(euler) {
      this.quaternion.setFromEuler(euler, true);
    }
    setRotationFromMatrix(m) {
      this.quaternion.setFromRotationMatrix(m);
    }
    setRotationFromQuaternion(q) {
      this.quaternion.copy(q);
    }
    rotateOnAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.multiply(_q1);
      return this;
    }
    rotateOnWorldAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.premultiply(_q1);
      return this;
    }
    rotateX(angle) {
      return this.rotateOnAxis(_xAxis, angle);
    }
    rotateY(angle) {
      return this.rotateOnAxis(_yAxis, angle);
    }
    rotateZ(angle) {
      return this.rotateOnAxis(_zAxis, angle);
    }
    translateOnAxis(axis, distance) {
      _v1$4.copy(axis).applyQuaternion(this.quaternion);
      this.position.add(_v1$4.multiplyScalar(distance));
      return this;
    }
    translateX(distance) {
      return this.translateOnAxis(_xAxis, distance);
    }
    translateY(distance) {
      return this.translateOnAxis(_yAxis, distance);
    }
    translateZ(distance) {
      return this.translateOnAxis(_zAxis, distance);
    }
    localToWorld(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
    }
    lookAt(x2, y, z) {
      if (x2.isVector3) {
        _target.copy(x2);
      } else {
        _target.set(x2, y, z);
      }
      const parent = this.parent;
      this.updateWorldMatrix(true, false);
      _position$3.setFromMatrixPosition(this.matrixWorld);
      if (this.isCamera || this.isLight) {
        _m1$1.lookAt(_position$3, _target, this.up);
      } else {
        _m1$1.lookAt(_target, _position$3, this.up);
      }
      this.quaternion.setFromRotationMatrix(_m1$1);
      if (parent) {
        _m1$1.extractRotation(parent.matrixWorld);
        _q1.setFromRotationMatrix(_m1$1);
        this.quaternion.premultiply(_q1.invert());
      }
    }
    add(object) {
      if (arguments.length > 1) {
        for (let i2 = 0; i2 < arguments.length; i2++) {
          this.add(arguments[i2]);
        }
        return this;
      }
      if (object === this) {
        console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
        return this;
      }
      if (object && object.isObject3D) {
        object.removeFromParent();
        object.parent = this;
        this.children.push(object);
        object.dispatchEvent(_addedEvent);
        _childaddedEvent.child = object;
        this.dispatchEvent(_childaddedEvent);
        _childaddedEvent.child = null;
      } else {
        console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
      }
      return this;
    }
    remove(object) {
      if (arguments.length > 1) {
        for (let i2 = 0; i2 < arguments.length; i2++) {
          this.remove(arguments[i2]);
        }
        return this;
      }
      const index = this.children.indexOf(object);
      if (index !== -1) {
        object.parent = null;
        this.children.splice(index, 1);
        object.dispatchEvent(_removedEvent);
        _childremovedEvent.child = object;
        this.dispatchEvent(_childremovedEvent);
        _childremovedEvent.child = null;
      }
      return this;
    }
    removeFromParent() {
      const parent = this.parent;
      if (parent !== null) {
        parent.remove(this);
      }
      return this;
    }
    clear() {
      return this.remove(...this.children);
    }
    attach(object) {
      this.updateWorldMatrix(true, false);
      _m1$1.copy(this.matrixWorld).invert();
      if (object.parent !== null) {
        object.parent.updateWorldMatrix(true, false);
        _m1$1.multiply(object.parent.matrixWorld);
      }
      object.applyMatrix4(_m1$1);
      object.removeFromParent();
      object.parent = this;
      this.children.push(object);
      object.updateWorldMatrix(false, true);
      object.dispatchEvent(_addedEvent);
      _childaddedEvent.child = object;
      this.dispatchEvent(_childaddedEvent);
      _childaddedEvent.child = null;
      return this;
    }
    getObjectById(id) {
      return this.getObjectByProperty("id", id);
    }
    getObjectByName(name) {
      return this.getObjectByProperty("name", name);
    }
    getObjectByProperty(name, value) {
      if (this[name] === value) return this;
      for (let i2 = 0, l = this.children.length; i2 < l; i2++) {
        const child = this.children[i2];
        const object = child.getObjectByProperty(name, value);
        if (object !== void 0) {
          return object;
        }
      }
      return void 0;
    }
    getObjectsByProperty(name, value, result = []) {
      if (this[name] === value) result.push(this);
      const children = this.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        children[i2].getObjectsByProperty(name, value, result);
      }
      return result;
    }
    getWorldPosition(target) {
      this.updateWorldMatrix(true, false);
      return target.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, target, _scale$2);
      return target;
    }
    getWorldScale(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, _quaternion$2, target);
      return target;
    }
    getWorldDirection(target) {
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(e[8], e[9], e[10]).normalize();
    }
    raycast() {
    }
    traverse(callback) {
      callback(this);
      const children = this.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        children[i2].traverse(callback);
      }
    }
    traverseVisible(callback) {
      if (this.visible === false) return;
      callback(this);
      const children = this.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        children[i2].traverseVisible(callback);
      }
    }
    traverseAncestors(callback) {
      const parent = this.parent;
      if (parent !== null) {
        callback(parent);
        parent.traverseAncestors(callback);
      }
    }
    updateMatrix() {
      this.matrix.compose(this.position, this.quaternion, this.scale);
      this.matrixWorldNeedsUpdate = true;
    }
    updateMatrixWorld(force) {
      if (this.matrixAutoUpdate) this.updateMatrix();
      if (this.matrixWorldNeedsUpdate || force) {
        if (this.matrixWorldAutoUpdate === true) {
          if (this.parent === null) {
            this.matrixWorld.copy(this.matrix);
          } else {
            this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
          }
        }
        this.matrixWorldNeedsUpdate = false;
        force = true;
      }
      const children = this.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        const child = children[i2];
        child.updateMatrixWorld(force);
      }
    }
    updateWorldMatrix(updateParents, updateChildren) {
      const parent = this.parent;
      if (updateParents === true && parent !== null) {
        parent.updateWorldMatrix(true, false);
      }
      if (this.matrixAutoUpdate) this.updateMatrix();
      if (this.matrixWorldAutoUpdate === true) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
      }
      if (updateChildren === true) {
        const children = this.children;
        for (let i2 = 0, l = children.length; i2 < l; i2++) {
          const child = children[i2];
          child.updateWorldMatrix(false, true);
        }
      }
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      const output = {};
      if (isRootObject) {
        meta = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
          skeletons: {},
          animations: {},
          nodes: {}
        };
        output.metadata = {
          version: 4.6,
          type: "Object",
          generator: "Object3D.toJSON"
        };
      }
      const object = {};
      object.uuid = this.uuid;
      object.type = this.type;
      if (this.name !== "") object.name = this.name;
      if (this.castShadow === true) object.castShadow = true;
      if (this.receiveShadow === true) object.receiveShadow = true;
      if (this.visible === false) object.visible = false;
      if (this.frustumCulled === false) object.frustumCulled = false;
      if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
      if (Object.keys(this.userData).length > 0) object.userData = this.userData;
      object.layers = this.layers.mask;
      object.matrix = this.matrix.toArray();
      object.up = this.up.toArray();
      if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
      if (this.isInstancedMesh) {
        object.type = "InstancedMesh";
        object.count = this.count;
        object.instanceMatrix = this.instanceMatrix.toJSON();
        if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
      }
      if (this.isBatchedMesh) {
        object.type = "BatchedMesh";
        object.perObjectFrustumCulled = this.perObjectFrustumCulled;
        object.sortObjects = this.sortObjects;
        object.drawRanges = this._drawRanges;
        object.reservedRanges = this._reservedRanges;
        object.visibility = this._visibility;
        object.active = this._active;
        object.bounds = this._bounds.map((bound) => ({
          boxInitialized: bound.boxInitialized,
          boxMin: bound.box.min.toArray(),
          boxMax: bound.box.max.toArray(),
          sphereInitialized: bound.sphereInitialized,
          sphereRadius: bound.sphere.radius,
          sphereCenter: bound.sphere.center.toArray()
        }));
        object.maxInstanceCount = this._maxInstanceCount;
        object.maxVertexCount = this._maxVertexCount;
        object.maxIndexCount = this._maxIndexCount;
        object.geometryInitialized = this._geometryInitialized;
        object.geometryCount = this._geometryCount;
        object.matricesTexture = this._matricesTexture.toJSON(meta);
        if (this._colorsTexture !== null) object.colorsTexture = this._colorsTexture.toJSON(meta);
        if (this.boundingSphere !== null) {
          object.boundingSphere = {
            center: object.boundingSphere.center.toArray(),
            radius: object.boundingSphere.radius
          };
        }
        if (this.boundingBox !== null) {
          object.boundingBox = {
            min: object.boundingBox.min.toArray(),
            max: object.boundingBox.max.toArray()
          };
        }
      }
      function serialize(library, element) {
        if (library[element.uuid] === void 0) {
          library[element.uuid] = element.toJSON(meta);
        }
        return element.uuid;
      }
      if (this.isScene) {
        if (this.background) {
          if (this.background.isColor) {
            object.background = this.background.toJSON();
          } else if (this.background.isTexture) {
            object.background = this.background.toJSON(meta).uuid;
          }
        }
        if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
          object.environment = this.environment.toJSON(meta).uuid;
        }
      } else if (this.isMesh || this.isLine || this.isPoints) {
        object.geometry = serialize(meta.geometries, this.geometry);
        const parameters = this.geometry.parameters;
        if (parameters !== void 0 && parameters.shapes !== void 0) {
          const shapes = parameters.shapes;
          if (Array.isArray(shapes)) {
            for (let i2 = 0, l = shapes.length; i2 < l; i2++) {
              const shape = shapes[i2];
              serialize(meta.shapes, shape);
            }
          } else {
            serialize(meta.shapes, shapes);
          }
        }
      }
      if (this.isSkinnedMesh) {
        object.bindMode = this.bindMode;
        object.bindMatrix = this.bindMatrix.toArray();
        if (this.skeleton !== void 0) {
          serialize(meta.skeletons, this.skeleton);
          object.skeleton = this.skeleton.uuid;
        }
      }
      if (this.material !== void 0) {
        if (Array.isArray(this.material)) {
          const uuids = [];
          for (let i2 = 0, l = this.material.length; i2 < l; i2++) {
            uuids.push(serialize(meta.materials, this.material[i2]));
          }
          object.material = uuids;
        } else {
          object.material = serialize(meta.materials, this.material);
        }
      }
      if (this.children.length > 0) {
        object.children = [];
        for (let i2 = 0; i2 < this.children.length; i2++) {
          object.children.push(this.children[i2].toJSON(meta).object);
        }
      }
      if (this.animations.length > 0) {
        object.animations = [];
        for (let i2 = 0; i2 < this.animations.length; i2++) {
          const animation = this.animations[i2];
          object.animations.push(serialize(meta.animations, animation));
        }
      }
      if (isRootObject) {
        const geometries = extractFromCache(meta.geometries);
        const materials = extractFromCache(meta.materials);
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        const shapes = extractFromCache(meta.shapes);
        const skeletons = extractFromCache(meta.skeletons);
        const animations = extractFromCache(meta.animations);
        const nodes = extractFromCache(meta.nodes);
        if (geometries.length > 0) output.geometries = geometries;
        if (materials.length > 0) output.materials = materials;
        if (textures.length > 0) output.textures = textures;
        if (images.length > 0) output.images = images;
        if (shapes.length > 0) output.shapes = shapes;
        if (skeletons.length > 0) output.skeletons = skeletons;
        if (animations.length > 0) output.animations = animations;
        if (nodes.length > 0) output.nodes = nodes;
      }
      output.object = object;
      return output;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data = cache[key];
          delete data.metadata;
          values.push(data);
        }
        return values;
      }
    }
    clone(recursive) {
      return new this.constructor().copy(this, recursive);
    }
    copy(source, recursive = true) {
      this.name = source.name;
      this.up.copy(source.up);
      this.position.copy(source.position);
      this.rotation.order = source.rotation.order;
      this.quaternion.copy(source.quaternion);
      this.scale.copy(source.scale);
      this.matrix.copy(source.matrix);
      this.matrixWorld.copy(source.matrixWorld);
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
      this.layers.mask = source.layers.mask;
      this.visible = source.visible;
      this.castShadow = source.castShadow;
      this.receiveShadow = source.receiveShadow;
      this.frustumCulled = source.frustumCulled;
      this.renderOrder = source.renderOrder;
      this.animations = source.animations.slice();
      this.userData = JSON.parse(JSON.stringify(source.userData));
      if (recursive === true) {
        for (let i2 = 0; i2 < source.children.length; i2++) {
          const child = source.children[i2];
          this.add(child.clone());
        }
      }
      return this;
    }
  }
  Object3D.DEFAULT_UP = /* @__PURE__ */ new Vector3(0, 1, 0);
  Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
  Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
  const _v0$1 = /* @__PURE__ */ new Vector3();
  const _v1$3 = /* @__PURE__ */ new Vector3();
  const _v2$2 = /* @__PURE__ */ new Vector3();
  const _v3$2 = /* @__PURE__ */ new Vector3();
  const _vab = /* @__PURE__ */ new Vector3();
  const _vac = /* @__PURE__ */ new Vector3();
  const _vbc = /* @__PURE__ */ new Vector3();
  const _vap = /* @__PURE__ */ new Vector3();
  const _vbp = /* @__PURE__ */ new Vector3();
  const _vcp = /* @__PURE__ */ new Vector3();
  const _v40 = /* @__PURE__ */ new Vector4();
  const _v41 = /* @__PURE__ */ new Vector4();
  const _v42 = /* @__PURE__ */ new Vector4();
  class Triangle {
    constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
      this.a = a;
      this.b = b;
      this.c = c;
    }
    static getNormal(a, b, c, target) {
      target.subVectors(c, b);
      _v0$1.subVectors(a, b);
      target.cross(_v0$1);
      const targetLengthSq = target.lengthSq();
      if (targetLengthSq > 0) {
        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
      }
      return target.set(0, 0, 0);
    }
    // static/instance method to calculate barycentric coordinates
    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
    static getBarycoord(point, a, b, c, target) {
      _v0$1.subVectors(c, a);
      _v1$3.subVectors(b, a);
      _v2$2.subVectors(point, a);
      const dot00 = _v0$1.dot(_v0$1);
      const dot01 = _v0$1.dot(_v1$3);
      const dot02 = _v0$1.dot(_v2$2);
      const dot11 = _v1$3.dot(_v1$3);
      const dot12 = _v1$3.dot(_v2$2);
      const denom = dot00 * dot11 - dot01 * dot01;
      if (denom === 0) {
        target.set(0, 0, 0);
        return null;
      }
      const invDenom = 1 / denom;
      const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
      return target.set(1 - u - v, v, u);
    }
    static containsPoint(point, a, b, c) {
      if (this.getBarycoord(point, a, b, c, _v3$2) === null) {
        return false;
      }
      return _v3$2.x >= 0 && _v3$2.y >= 0 && _v3$2.x + _v3$2.y <= 1;
    }
    static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {
      if (this.getBarycoord(point, p1, p2, p3, _v3$2) === null) {
        target.x = 0;
        target.y = 0;
        if ("z" in target) target.z = 0;
        if ("w" in target) target.w = 0;
        return null;
      }
      target.setScalar(0);
      target.addScaledVector(v1, _v3$2.x);
      target.addScaledVector(v2, _v3$2.y);
      target.addScaledVector(v3, _v3$2.z);
      return target;
    }
    static getInterpolatedAttribute(attr, i1, i2, i3, barycoord, target) {
      _v40.setScalar(0);
      _v41.setScalar(0);
      _v42.setScalar(0);
      _v40.fromBufferAttribute(attr, i1);
      _v41.fromBufferAttribute(attr, i2);
      _v42.fromBufferAttribute(attr, i3);
      target.setScalar(0);
      target.addScaledVector(_v40, barycoord.x);
      target.addScaledVector(_v41, barycoord.y);
      target.addScaledVector(_v42, barycoord.z);
      return target;
    }
    static isFrontFacing(a, b, c, direction) {
      _v0$1.subVectors(c, b);
      _v1$3.subVectors(a, b);
      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
    }
    set(a, b, c) {
      this.a.copy(a);
      this.b.copy(b);
      this.c.copy(c);
      return this;
    }
    setFromPointsAndIndices(points, i0, i1, i2) {
      this.a.copy(points[i0]);
      this.b.copy(points[i1]);
      this.c.copy(points[i2]);
      return this;
    }
    setFromAttributeAndIndices(attribute, i0, i1, i2) {
      this.a.fromBufferAttribute(attribute, i0);
      this.b.fromBufferAttribute(attribute, i1);
      this.c.fromBufferAttribute(attribute, i2);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(triangle) {
      this.a.copy(triangle.a);
      this.b.copy(triangle.b);
      this.c.copy(triangle.c);
      return this;
    }
    getArea() {
      _v0$1.subVectors(this.c, this.b);
      _v1$3.subVectors(this.a, this.b);
      return _v0$1.cross(_v1$3).length() * 0.5;
    }
    getMidpoint(target) {
      return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(target) {
      return Triangle.getNormal(this.a, this.b, this.c, target);
    }
    getPlane(target) {
      return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(point, target) {
      return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
    }
    getInterpolation(point, v1, v2, v3, target) {
      return Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);
    }
    containsPoint(point) {
      return Triangle.containsPoint(point, this.a, this.b, this.c);
    }
    isFrontFacing(direction) {
      return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
    }
    intersectsBox(box) {
      return box.intersectsTriangle(this);
    }
    closestPointToPoint(p, target) {
      const a = this.a, b = this.b, c = this.c;
      let v, w;
      _vab.subVectors(b, a);
      _vac.subVectors(c, a);
      _vap.subVectors(p, a);
      const d1 = _vab.dot(_vap);
      const d2 = _vac.dot(_vap);
      if (d1 <= 0 && d2 <= 0) {
        return target.copy(a);
      }
      _vbp.subVectors(p, b);
      const d3 = _vab.dot(_vbp);
      const d4 = _vac.dot(_vbp);
      if (d3 >= 0 && d4 <= d3) {
        return target.copy(b);
      }
      const vc = d1 * d4 - d3 * d2;
      if (vc <= 0 && d1 >= 0 && d3 <= 0) {
        v = d1 / (d1 - d3);
        return target.copy(a).addScaledVector(_vab, v);
      }
      _vcp.subVectors(p, c);
      const d5 = _vab.dot(_vcp);
      const d6 = _vac.dot(_vcp);
      if (d6 >= 0 && d5 <= d6) {
        return target.copy(c);
      }
      const vb = d5 * d2 - d1 * d6;
      if (vb <= 0 && d2 >= 0 && d6 <= 0) {
        w = d2 / (d2 - d6);
        return target.copy(a).addScaledVector(_vac, w);
      }
      const va = d3 * d6 - d5 * d4;
      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
        _vbc.subVectors(c, b);
        w = (d4 - d3) / (d4 - d3 + (d5 - d6));
        return target.copy(b).addScaledVector(_vbc, w);
      }
      const denom = 1 / (va + vb + vc);
      v = vb * denom;
      w = vc * denom;
      return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
    }
    equals(triangle) {
      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
  }
  const _colorKeywords = {
    "aliceblue": 15792383,
    "antiquewhite": 16444375,
    "aqua": 65535,
    "aquamarine": 8388564,
    "azure": 15794175,
    "beige": 16119260,
    "bisque": 16770244,
    "black": 0,
    "blanchedalmond": 16772045,
    "blue": 255,
    "blueviolet": 9055202,
    "brown": 10824234,
    "burlywood": 14596231,
    "cadetblue": 6266528,
    "chartreuse": 8388352,
    "chocolate": 13789470,
    "coral": 16744272,
    "cornflowerblue": 6591981,
    "cornsilk": 16775388,
    "crimson": 14423100,
    "cyan": 65535,
    "darkblue": 139,
    "darkcyan": 35723,
    "darkgoldenrod": 12092939,
    "darkgray": 11119017,
    "darkgreen": 25600,
    "darkgrey": 11119017,
    "darkkhaki": 12433259,
    "darkmagenta": 9109643,
    "darkolivegreen": 5597999,
    "darkorange": 16747520,
    "darkorchid": 10040012,
    "darkred": 9109504,
    "darksalmon": 15308410,
    "darkseagreen": 9419919,
    "darkslateblue": 4734347,
    "darkslategray": 3100495,
    "darkslategrey": 3100495,
    "darkturquoise": 52945,
    "darkviolet": 9699539,
    "deeppink": 16716947,
    "deepskyblue": 49151,
    "dimgray": 6908265,
    "dimgrey": 6908265,
    "dodgerblue": 2003199,
    "firebrick": 11674146,
    "floralwhite": 16775920,
    "forestgreen": 2263842,
    "fuchsia": 16711935,
    "gainsboro": 14474460,
    "ghostwhite": 16316671,
    "gold": 16766720,
    "goldenrod": 14329120,
    "gray": 8421504,
    "green": 32768,
    "greenyellow": 11403055,
    "grey": 8421504,
    "honeydew": 15794160,
    "hotpink": 16738740,
    "indianred": 13458524,
    "indigo": 4915330,
    "ivory": 16777200,
    "khaki": 15787660,
    "lavender": 15132410,
    "lavenderblush": 16773365,
    "lawngreen": 8190976,
    "lemonchiffon": 16775885,
    "lightblue": 11393254,
    "lightcoral": 15761536,
    "lightcyan": 14745599,
    "lightgoldenrodyellow": 16448210,
    "lightgray": 13882323,
    "lightgreen": 9498256,
    "lightgrey": 13882323,
    "lightpink": 16758465,
    "lightsalmon": 16752762,
    "lightseagreen": 2142890,
    "lightskyblue": 8900346,
    "lightslategray": 7833753,
    "lightslategrey": 7833753,
    "lightsteelblue": 11584734,
    "lightyellow": 16777184,
    "lime": 65280,
    "limegreen": 3329330,
    "linen": 16445670,
    "magenta": 16711935,
    "maroon": 8388608,
    "mediumaquamarine": 6737322,
    "mediumblue": 205,
    "mediumorchid": 12211667,
    "mediumpurple": 9662683,
    "mediumseagreen": 3978097,
    "mediumslateblue": 8087790,
    "mediumspringgreen": 64154,
    "mediumturquoise": 4772300,
    "mediumvioletred": 13047173,
    "midnightblue": 1644912,
    "mintcream": 16121850,
    "mistyrose": 16770273,
    "moccasin": 16770229,
    "navajowhite": 16768685,
    "navy": 128,
    "oldlace": 16643558,
    "olive": 8421376,
    "olivedrab": 7048739,
    "orange": 16753920,
    "orangered": 16729344,
    "orchid": 14315734,
    "palegoldenrod": 15657130,
    "palegreen": 10025880,
    "paleturquoise": 11529966,
    "palevioletred": 14381203,
    "papayawhip": 16773077,
    "peachpuff": 16767673,
    "peru": 13468991,
    "pink": 16761035,
    "plum": 14524637,
    "powderblue": 11591910,
    "purple": 8388736,
    "rebeccapurple": 6697881,
    "red": 16711680,
    "rosybrown": 12357519,
    "royalblue": 4286945,
    "saddlebrown": 9127187,
    "salmon": 16416882,
    "sandybrown": 16032864,
    "seagreen": 3050327,
    "seashell": 16774638,
    "sienna": 10506797,
    "silver": 12632256,
    "skyblue": 8900331,
    "slateblue": 6970061,
    "slategray": 7372944,
    "slategrey": 7372944,
    "snow": 16775930,
    "springgreen": 65407,
    "steelblue": 4620980,
    "tan": 13808780,
    "teal": 32896,
    "thistle": 14204888,
    "tomato": 16737095,
    "turquoise": 4251856,
    "violet": 15631086,
    "wheat": 16113331,
    "white": 16777215,
    "whitesmoke": 16119285,
    "yellow": 16776960,
    "yellowgreen": 10145074
  };
  const _hslA = { h: 0, s: 0, l: 0 };
  const _hslB = { h: 0, s: 0, l: 0 };
  function hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 1 / 2) return q;
    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
    return p;
  }
  class Color {
    constructor(r, g, b) {
      this.isColor = true;
      this.r = 1;
      this.g = 1;
      this.b = 1;
      return this.set(r, g, b);
    }
    set(r, g, b) {
      if (g === void 0 && b === void 0) {
        const value = r;
        if (value && value.isColor) {
          this.copy(value);
        } else if (typeof value === "number") {
          this.setHex(value);
        } else if (typeof value === "string") {
          this.setStyle(value);
        }
      } else {
        this.setRGB(r, g, b);
      }
      return this;
    }
    setScalar(scalar) {
      this.r = scalar;
      this.g = scalar;
      this.b = scalar;
      return this;
    }
    setHex(hex, colorSpace = SRGBColorSpace) {
      hex = Math.floor(hex);
      this.r = (hex >> 16 & 255) / 255;
      this.g = (hex >> 8 & 255) / 255;
      this.b = (hex & 255) / 255;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
      this.r = r;
      this.g = g;
      this.b = b;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
      h = euclideanModulo(h, 1);
      s = clamp(s, 0, 1);
      l = clamp(l, 0, 1);
      if (s === 0) {
        this.r = this.g = this.b = l;
      } else {
        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        const q = 2 * l - p;
        this.r = hue2rgb(q, p, h + 1 / 3);
        this.g = hue2rgb(q, p, h);
        this.b = hue2rgb(q, p, h - 1 / 3);
      }
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setStyle(style, colorSpace = SRGBColorSpace) {
      function handleAlpha(string) {
        if (string === void 0) return;
        if (parseFloat(string) < 1) {
          console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
        }
      }
      let m;
      if (m = /^(\\w+)\\(([^\\)]*)\\)/.exec(style)) {
        let color;
        const name = m[1];
        const components = m[2];
        switch (name) {
          case "rgb":
          case "rgba":
            if (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(255, parseInt(color[1], 10)) / 255,
                Math.min(255, parseInt(color[2], 10)) / 255,
                Math.min(255, parseInt(color[3], 10)) / 255,
                colorSpace
              );
            }
            if (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(100, parseInt(color[1], 10)) / 100,
                Math.min(100, parseInt(color[2], 10)) / 100,
                Math.min(100, parseInt(color[3], 10)) / 100,
                colorSpace
              );
            }
            break;
          case "hsl":
          case "hsla":
            if (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setHSL(
                parseFloat(color[1]) / 360,
                parseFloat(color[2]) / 100,
                parseFloat(color[3]) / 100,
                colorSpace
              );
            }
            break;
          default:
            console.warn("THREE.Color: Unknown color model " + style);
        }
      } else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {
        const hex = m[1];
        const size = hex.length;
        if (size === 3) {
          return this.setRGB(
            parseInt(hex.charAt(0), 16) / 15,
            parseInt(hex.charAt(1), 16) / 15,
            parseInt(hex.charAt(2), 16) / 15,
            colorSpace
          );
        } else if (size === 6) {
          return this.setHex(parseInt(hex, 16), colorSpace);
        } else {
          console.warn("THREE.Color: Invalid hex color " + style);
        }
      } else if (style && style.length > 0) {
        return this.setColorName(style, colorSpace);
      }
      return this;
    }
    setColorName(style, colorSpace = SRGBColorSpace) {
      const hex = _colorKeywords[style.toLowerCase()];
      if (hex !== void 0) {
        this.setHex(hex, colorSpace);
      } else {
        console.warn("THREE.Color: Unknown color " + style);
      }
      return this;
    }
    clone() {
      return new this.constructor(this.r, this.g, this.b);
    }
    copy(color) {
      this.r = color.r;
      this.g = color.g;
      this.b = color.b;
      return this;
    }
    copySRGBToLinear(color) {
      this.r = SRGBToLinear(color.r);
      this.g = SRGBToLinear(color.g);
      this.b = SRGBToLinear(color.b);
      return this;
    }
    copyLinearToSRGB(color) {
      this.r = LinearToSRGB(color.r);
      this.g = LinearToSRGB(color.g);
      this.b = LinearToSRGB(color.b);
      return this;
    }
    convertSRGBToLinear() {
      this.copySRGBToLinear(this);
      return this;
    }
    convertLinearToSRGB() {
      this.copyLinearToSRGB(this);
      return this;
    }
    getHex(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));
    }
    getHexString(colorSpace = SRGBColorSpace) {
      return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
    }
    getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      const max2 = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      let hue, saturation;
      const lightness = (min + max2) / 2;
      if (min === max2) {
        hue = 0;
        saturation = 0;
      } else {
        const delta = max2 - min;
        saturation = lightness <= 0.5 ? delta / (max2 + min) : delta / (2 - max2 - min);
        switch (max2) {
          case r:
            hue = (g - b) / delta + (g < b ? 6 : 0);
            break;
          case g:
            hue = (b - r) / delta + 2;
            break;
          case b:
            hue = (r - g) / delta + 4;
            break;
        }
        hue /= 6;
      }
      target.h = hue;
      target.s = saturation;
      target.l = lightness;
      return target;
    }
    getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      target.r = _color.r;
      target.g = _color.g;
      target.b = _color.b;
      return target;
    }
    getStyle(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      if (colorSpace !== SRGBColorSpace) {
        return \`color(\${colorSpace} \${r.toFixed(3)} \${g.toFixed(3)} \${b.toFixed(3)})\`;
      }
      return \`rgb(\${Math.round(r * 255)},\${Math.round(g * 255)},\${Math.round(b * 255)})\`;
    }
    offsetHSL(h, s, l) {
      this.getHSL(_hslA);
      return this.setHSL(_hslA.h + h, _hslA.s + s, _hslA.l + l);
    }
    add(color) {
      this.r += color.r;
      this.g += color.g;
      this.b += color.b;
      return this;
    }
    addColors(color1, color2) {
      this.r = color1.r + color2.r;
      this.g = color1.g + color2.g;
      this.b = color1.b + color2.b;
      return this;
    }
    addScalar(s) {
      this.r += s;
      this.g += s;
      this.b += s;
      return this;
    }
    sub(color) {
      this.r = Math.max(0, this.r - color.r);
      this.g = Math.max(0, this.g - color.g);
      this.b = Math.max(0, this.b - color.b);
      return this;
    }
    multiply(color) {
      this.r *= color.r;
      this.g *= color.g;
      this.b *= color.b;
      return this;
    }
    multiplyScalar(s) {
      this.r *= s;
      this.g *= s;
      this.b *= s;
      return this;
    }
    lerp(color, alpha) {
      this.r += (color.r - this.r) * alpha;
      this.g += (color.g - this.g) * alpha;
      this.b += (color.b - this.b) * alpha;
      return this;
    }
    lerpColors(color1, color2, alpha) {
      this.r = color1.r + (color2.r - color1.r) * alpha;
      this.g = color1.g + (color2.g - color1.g) * alpha;
      this.b = color1.b + (color2.b - color1.b) * alpha;
      return this;
    }
    lerpHSL(color, alpha) {
      this.getHSL(_hslA);
      color.getHSL(_hslB);
      const h = lerp(_hslA.h, _hslB.h, alpha);
      const s = lerp(_hslA.s, _hslB.s, alpha);
      const l = lerp(_hslA.l, _hslB.l, alpha);
      this.setHSL(h, s, l);
      return this;
    }
    setFromVector3(v) {
      this.r = v.x;
      this.g = v.y;
      this.b = v.z;
      return this;
    }
    applyMatrix3(m) {
      const r = this.r, g = this.g, b = this.b;
      const e = m.elements;
      this.r = e[0] * r + e[3] * g + e[6] * b;
      this.g = e[1] * r + e[4] * g + e[7] * b;
      this.b = e[2] * r + e[5] * g + e[8] * b;
      return this;
    }
    equals(c) {
      return c.r === this.r && c.g === this.g && c.b === this.b;
    }
    fromArray(array, offset = 0) {
      this.r = array[offset];
      this.g = array[offset + 1];
      this.b = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.r;
      array[offset + 1] = this.g;
      array[offset + 2] = this.b;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.r = attribute.getX(index);
      this.g = attribute.getY(index);
      this.b = attribute.getZ(index);
      return this;
    }
    toJSON() {
      return this.getHex();
    }
    *[Symbol.iterator]() {
      yield this.r;
      yield this.g;
      yield this.b;
    }
  }
  const _color = /* @__PURE__ */ new Color();
  Color.NAMES = _colorKeywords;
  let _materialId = 0;
  class Material extends EventDispatcher {
    constructor() {
      super();
      this.isMaterial = true;
      Object.defineProperty(this, "id", { value: _materialId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Material";
      this.blending = NormalBlending;
      this.side = FrontSide;
      this.vertexColors = false;
      this.opacity = 1;
      this.transparent = false;
      this.alphaHash = false;
      this.blendSrc = SrcAlphaFactor;
      this.blendDst = OneMinusSrcAlphaFactor;
      this.blendEquation = AddEquation;
      this.blendSrcAlpha = null;
      this.blendDstAlpha = null;
      this.blendEquationAlpha = null;
      this.blendColor = new Color(0, 0, 0);
      this.blendAlpha = 0;
      this.depthFunc = LessEqualDepth;
      this.depthTest = true;
      this.depthWrite = true;
      this.stencilWriteMask = 255;
      this.stencilFunc = AlwaysStencilFunc;
      this.stencilRef = 0;
      this.stencilFuncMask = 255;
      this.stencilFail = KeepStencilOp;
      this.stencilZFail = KeepStencilOp;
      this.stencilZPass = KeepStencilOp;
      this.stencilWrite = false;
      this.clippingPlanes = null;
      this.clipIntersection = false;
      this.clipShadows = false;
      this.shadowSide = null;
      this.colorWrite = true;
      this.precision = null;
      this.polygonOffset = false;
      this.polygonOffsetFactor = 0;
      this.polygonOffsetUnits = 0;
      this.dithering = false;
      this.alphaToCoverage = false;
      this.premultipliedAlpha = false;
      this.forceSinglePass = false;
      this.visible = true;
      this.toneMapped = true;
      this.userData = {};
      this.version = 0;
      this._alphaTest = 0;
    }
    get alphaTest() {
      return this._alphaTest;
    }
    set alphaTest(value) {
      if (this._alphaTest > 0 !== value > 0) {
        this.version++;
      }
      this._alphaTest = value;
    }
    // onBeforeRender and onBeforeCompile only supported in WebGLRenderer
    onBeforeRender() {
    }
    onBeforeCompile() {
    }
    customProgramCacheKey() {
      return this.onBeforeCompile.toString();
    }
    setValues(values) {
      if (values === void 0) return;
      for (const key in values) {
        const newValue = values[key];
        if (newValue === void 0) {
          console.warn(\`THREE.Material: parameter '\${key}' has value of undefined.\`);
          continue;
        }
        const currentValue = this[key];
        if (currentValue === void 0) {
          console.warn(\`THREE.Material: '\${key}' is not a property of THREE.\${this.type}.\`);
          continue;
        }
        if (currentValue && currentValue.isColor) {
          currentValue.set(newValue);
        } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
          currentValue.copy(newValue);
        } else {
          this[key] = newValue;
        }
      }
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (isRootObject) {
        meta = {
          textures: {},
          images: {}
        };
      }
      const data = {
        metadata: {
          version: 4.6,
          type: "Material",
          generator: "Material.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "") data.name = this.name;
      if (this.color && this.color.isColor) data.color = this.color.getHex();
      if (this.roughness !== void 0) data.roughness = this.roughness;
      if (this.metalness !== void 0) data.metalness = this.metalness;
      if (this.sheen !== void 0) data.sheen = this.sheen;
      if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
      if (this.sheenRoughness !== void 0) data.sheenRoughness = this.sheenRoughness;
      if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
      if (this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
      if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
      if (this.specularIntensity !== void 0) data.specularIntensity = this.specularIntensity;
      if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
      if (this.shininess !== void 0) data.shininess = this.shininess;
      if (this.clearcoat !== void 0) data.clearcoat = this.clearcoat;
      if (this.clearcoatRoughness !== void 0) data.clearcoatRoughness = this.clearcoatRoughness;
      if (this.clearcoatMap && this.clearcoatMap.isTexture) {
        data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
      }
      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
        data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
      }
      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
      }
      if (this.dispersion !== void 0) data.dispersion = this.dispersion;
      if (this.iridescence !== void 0) data.iridescence = this.iridescence;
      if (this.iridescenceIOR !== void 0) data.iridescenceIOR = this.iridescenceIOR;
      if (this.iridescenceThicknessRange !== void 0) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
      if (this.iridescenceMap && this.iridescenceMap.isTexture) {
        data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
      }
      if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
        data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
      }
      if (this.anisotropy !== void 0) data.anisotropy = this.anisotropy;
      if (this.anisotropyRotation !== void 0) data.anisotropyRotation = this.anisotropyRotation;
      if (this.anisotropyMap && this.anisotropyMap.isTexture) {
        data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
      }
      if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
      if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
      if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
      if (this.lightMap && this.lightMap.isTexture) {
        data.lightMap = this.lightMap.toJSON(meta).uuid;
        data.lightMapIntensity = this.lightMapIntensity;
      }
      if (this.aoMap && this.aoMap.isTexture) {
        data.aoMap = this.aoMap.toJSON(meta).uuid;
        data.aoMapIntensity = this.aoMapIntensity;
      }
      if (this.bumpMap && this.bumpMap.isTexture) {
        data.bumpMap = this.bumpMap.toJSON(meta).uuid;
        data.bumpScale = this.bumpScale;
      }
      if (this.normalMap && this.normalMap.isTexture) {
        data.normalMap = this.normalMap.toJSON(meta).uuid;
        data.normalMapType = this.normalMapType;
        data.normalScale = this.normalScale.toArray();
      }
      if (this.displacementMap && this.displacementMap.isTexture) {
        data.displacementMap = this.displacementMap.toJSON(meta).uuid;
        data.displacementScale = this.displacementScale;
        data.displacementBias = this.displacementBias;
      }
      if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
      if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
      if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
      if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
      if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
      if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
      if (this.envMap && this.envMap.isTexture) {
        data.envMap = this.envMap.toJSON(meta).uuid;
        if (this.combine !== void 0) data.combine = this.combine;
      }
      if (this.envMapRotation !== void 0) data.envMapRotation = this.envMapRotation.toArray();
      if (this.envMapIntensity !== void 0) data.envMapIntensity = this.envMapIntensity;
      if (this.reflectivity !== void 0) data.reflectivity = this.reflectivity;
      if (this.refractionRatio !== void 0) data.refractionRatio = this.refractionRatio;
      if (this.gradientMap && this.gradientMap.isTexture) {
        data.gradientMap = this.gradientMap.toJSON(meta).uuid;
      }
      if (this.transmission !== void 0) data.transmission = this.transmission;
      if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
      if (this.thickness !== void 0) data.thickness = this.thickness;
      if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
      if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;
      if (this.attenuationColor !== void 0) data.attenuationColor = this.attenuationColor.getHex();
      if (this.size !== void 0) data.size = this.size;
      if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
      if (this.sizeAttenuation !== void 0) data.sizeAttenuation = this.sizeAttenuation;
      if (this.blending !== NormalBlending) data.blending = this.blending;
      if (this.side !== FrontSide) data.side = this.side;
      if (this.vertexColors === true) data.vertexColors = true;
      if (this.opacity < 1) data.opacity = this.opacity;
      if (this.transparent === true) data.transparent = true;
      if (this.blendSrc !== SrcAlphaFactor) data.blendSrc = this.blendSrc;
      if (this.blendDst !== OneMinusSrcAlphaFactor) data.blendDst = this.blendDst;
      if (this.blendEquation !== AddEquation) data.blendEquation = this.blendEquation;
      if (this.blendSrcAlpha !== null) data.blendSrcAlpha = this.blendSrcAlpha;
      if (this.blendDstAlpha !== null) data.blendDstAlpha = this.blendDstAlpha;
      if (this.blendEquationAlpha !== null) data.blendEquationAlpha = this.blendEquationAlpha;
      if (this.blendColor && this.blendColor.isColor) data.blendColor = this.blendColor.getHex();
      if (this.blendAlpha !== 0) data.blendAlpha = this.blendAlpha;
      if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;
      if (this.depthTest === false) data.depthTest = this.depthTest;
      if (this.depthWrite === false) data.depthWrite = this.depthWrite;
      if (this.colorWrite === false) data.colorWrite = this.colorWrite;
      if (this.stencilWriteMask !== 255) data.stencilWriteMask = this.stencilWriteMask;
      if (this.stencilFunc !== AlwaysStencilFunc) data.stencilFunc = this.stencilFunc;
      if (this.stencilRef !== 0) data.stencilRef = this.stencilRef;
      if (this.stencilFuncMask !== 255) data.stencilFuncMask = this.stencilFuncMask;
      if (this.stencilFail !== KeepStencilOp) data.stencilFail = this.stencilFail;
      if (this.stencilZFail !== KeepStencilOp) data.stencilZFail = this.stencilZFail;
      if (this.stencilZPass !== KeepStencilOp) data.stencilZPass = this.stencilZPass;
      if (this.stencilWrite === true) data.stencilWrite = this.stencilWrite;
      if (this.rotation !== void 0 && this.rotation !== 0) data.rotation = this.rotation;
      if (this.polygonOffset === true) data.polygonOffset = true;
      if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
      if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
      if (this.linewidth !== void 0 && this.linewidth !== 1) data.linewidth = this.linewidth;
      if (this.dashSize !== void 0) data.dashSize = this.dashSize;
      if (this.gapSize !== void 0) data.gapSize = this.gapSize;
      if (this.scale !== void 0) data.scale = this.scale;
      if (this.dithering === true) data.dithering = true;
      if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
      if (this.alphaHash === true) data.alphaHash = true;
      if (this.alphaToCoverage === true) data.alphaToCoverage = true;
      if (this.premultipliedAlpha === true) data.premultipliedAlpha = true;
      if (this.forceSinglePass === true) data.forceSinglePass = true;
      if (this.wireframe === true) data.wireframe = true;
      if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
      if (this.wireframeLinecap !== "round") data.wireframeLinecap = this.wireframeLinecap;
      if (this.wireframeLinejoin !== "round") data.wireframeLinejoin = this.wireframeLinejoin;
      if (this.flatShading === true) data.flatShading = true;
      if (this.visible === false) data.visible = false;
      if (this.toneMapped === false) data.toneMapped = false;
      if (this.fog === false) data.fog = false;
      if (Object.keys(this.userData).length > 0) data.userData = this.userData;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data2 = cache[key];
          delete data2.metadata;
          values.push(data2);
        }
        return values;
      }
      if (isRootObject) {
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        if (textures.length > 0) data.textures = textures;
        if (images.length > 0) data.images = images;
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.blending = source.blending;
      this.side = source.side;
      this.vertexColors = source.vertexColors;
      this.opacity = source.opacity;
      this.transparent = source.transparent;
      this.blendSrc = source.blendSrc;
      this.blendDst = source.blendDst;
      this.blendEquation = source.blendEquation;
      this.blendSrcAlpha = source.blendSrcAlpha;
      this.blendDstAlpha = source.blendDstAlpha;
      this.blendEquationAlpha = source.blendEquationAlpha;
      this.blendColor.copy(source.blendColor);
      this.blendAlpha = source.blendAlpha;
      this.depthFunc = source.depthFunc;
      this.depthTest = source.depthTest;
      this.depthWrite = source.depthWrite;
      this.stencilWriteMask = source.stencilWriteMask;
      this.stencilFunc = source.stencilFunc;
      this.stencilRef = source.stencilRef;
      this.stencilFuncMask = source.stencilFuncMask;
      this.stencilFail = source.stencilFail;
      this.stencilZFail = source.stencilZFail;
      this.stencilZPass = source.stencilZPass;
      this.stencilWrite = source.stencilWrite;
      const srcPlanes = source.clippingPlanes;
      let dstPlanes = null;
      if (srcPlanes !== null) {
        const n = srcPlanes.length;
        dstPlanes = new Array(n);
        for (let i2 = 0; i2 !== n; ++i2) {
          dstPlanes[i2] = srcPlanes[i2].clone();
        }
      }
      this.clippingPlanes = dstPlanes;
      this.clipIntersection = source.clipIntersection;
      this.clipShadows = source.clipShadows;
      this.shadowSide = source.shadowSide;
      this.colorWrite = source.colorWrite;
      this.precision = source.precision;
      this.polygonOffset = source.polygonOffset;
      this.polygonOffsetFactor = source.polygonOffsetFactor;
      this.polygonOffsetUnits = source.polygonOffsetUnits;
      this.dithering = source.dithering;
      this.alphaTest = source.alphaTest;
      this.alphaHash = source.alphaHash;
      this.alphaToCoverage = source.alphaToCoverage;
      this.premultipliedAlpha = source.premultipliedAlpha;
      this.forceSinglePass = source.forceSinglePass;
      this.visible = source.visible;
      this.toneMapped = source.toneMapped;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    set needsUpdate(value) {
      if (value === true) this.version++;
    }
    onBuild() {
      console.warn("Material: onBuild() has been removed.");
    }
  }
  class MeshBasicMaterial extends Material {
    constructor(parameters) {
      super();
      this.isMeshBasicMaterial = true;
      this.type = "MeshBasicMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.specularMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.envMapRotation = new Euler();
      this.combine = MultiplyOperation;
      this.reflectivity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.envMapRotation.copy(source.envMapRotation);
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.fog = source.fog;
      return this;
    }
  }
  const _vector$9 = /* @__PURE__ */ new Vector3();
  const _vector2$1 = /* @__PURE__ */ new Vector2();
  class BufferAttribute {
    constructor(array, itemSize, normalized = false) {
      if (Array.isArray(array)) {
        throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
      }
      this.isBufferAttribute = true;
      this.name = "";
      this.array = array;
      this.itemSize = itemSize;
      this.count = array !== void 0 ? array.length / itemSize : 0;
      this.normalized = normalized;
      this.usage = StaticDrawUsage;
      this.updateRanges = [];
      this.gpuType = FloatType;
      this.version = 0;
    }
    onUploadCallback() {
    }
    set needsUpdate(value) {
      if (value === true) this.version++;
    }
    setUsage(value) {
      this.usage = value;
      return this;
    }
    addUpdateRange(start, count) {
      this.updateRanges.push({ start, count });
    }
    clearUpdateRanges() {
      this.updateRanges.length = 0;
    }
    copy(source) {
      this.name = source.name;
      this.array = new source.array.constructor(source.array);
      this.itemSize = source.itemSize;
      this.count = source.count;
      this.normalized = source.normalized;
      this.usage = source.usage;
      this.gpuType = source.gpuType;
      return this;
    }
    copyAt(index1, attribute, index2) {
      index1 *= this.itemSize;
      index2 *= attribute.itemSize;
      for (let i2 = 0, l = this.itemSize; i2 < l; i2++) {
        this.array[index1 + i2] = attribute.array[index2 + i2];
      }
      return this;
    }
    copyArray(array) {
      this.array.set(array);
      return this;
    }
    applyMatrix3(m) {
      if (this.itemSize === 2) {
        for (let i2 = 0, l = this.count; i2 < l; i2++) {
          _vector2$1.fromBufferAttribute(this, i2);
          _vector2$1.applyMatrix3(m);
          this.setXY(i2, _vector2$1.x, _vector2$1.y);
        }
      } else if (this.itemSize === 3) {
        for (let i2 = 0, l = this.count; i2 < l; i2++) {
          _vector$9.fromBufferAttribute(this, i2);
          _vector$9.applyMatrix3(m);
          this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
        }
      }
      return this;
    }
    applyMatrix4(m) {
      for (let i2 = 0, l = this.count; i2 < l; i2++) {
        _vector$9.fromBufferAttribute(this, i2);
        _vector$9.applyMatrix4(m);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    applyNormalMatrix(m) {
      for (let i2 = 0, l = this.count; i2 < l; i2++) {
        _vector$9.fromBufferAttribute(this, i2);
        _vector$9.applyNormalMatrix(m);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    transformDirection(m) {
      for (let i2 = 0, l = this.count; i2 < l; i2++) {
        _vector$9.fromBufferAttribute(this, i2);
        _vector$9.transformDirection(m);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    set(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    }
    getComponent(index, component) {
      let value = this.array[index * this.itemSize + component];
      if (this.normalized) value = denormalize(value, this.array);
      return value;
    }
    setComponent(index, component, value) {
      if (this.normalized) value = normalize$1(value, this.array);
      this.array[index * this.itemSize + component] = value;
      return this;
    }
    getX(index) {
      let x2 = this.array[index * this.itemSize];
      if (this.normalized) x2 = denormalize(x2, this.array);
      return x2;
    }
    setX(index, x2) {
      if (this.normalized) x2 = normalize$1(x2, this.array);
      this.array[index * this.itemSize] = x2;
      return this;
    }
    getY(index) {
      let y = this.array[index * this.itemSize + 1];
      if (this.normalized) y = denormalize(y, this.array);
      return y;
    }
    setY(index, y) {
      if (this.normalized) y = normalize$1(y, this.array);
      this.array[index * this.itemSize + 1] = y;
      return this;
    }
    getZ(index) {
      let z = this.array[index * this.itemSize + 2];
      if (this.normalized) z = denormalize(z, this.array);
      return z;
    }
    setZ(index, z) {
      if (this.normalized) z = normalize$1(z, this.array);
      this.array[index * this.itemSize + 2] = z;
      return this;
    }
    getW(index) {
      let w = this.array[index * this.itemSize + 3];
      if (this.normalized) w = denormalize(w, this.array);
      return w;
    }
    setW(index, w) {
      if (this.normalized) w = normalize$1(w, this.array);
      this.array[index * this.itemSize + 3] = w;
      return this;
    }
    setXY(index, x2, y) {
      index *= this.itemSize;
      if (this.normalized) {
        x2 = normalize$1(x2, this.array);
        y = normalize$1(y, this.array);
      }
      this.array[index + 0] = x2;
      this.array[index + 1] = y;
      return this;
    }
    setXYZ(index, x2, y, z) {
      index *= this.itemSize;
      if (this.normalized) {
        x2 = normalize$1(x2, this.array);
        y = normalize$1(y, this.array);
        z = normalize$1(z, this.array);
      }
      this.array[index + 0] = x2;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      return this;
    }
    setXYZW(index, x2, y, z, w) {
      index *= this.itemSize;
      if (this.normalized) {
        x2 = normalize$1(x2, this.array);
        y = normalize$1(y, this.array);
        z = normalize$1(z, this.array);
        w = normalize$1(w, this.array);
      }
      this.array[index + 0] = x2;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      this.array[index + 3] = w;
      return this;
    }
    onUpload(callback) {
      this.onUploadCallback = callback;
      return this;
    }
    clone() {
      return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
      const data = {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.from(this.array),
        normalized: this.normalized
      };
      if (this.name !== "") data.name = this.name;
      if (this.usage !== StaticDrawUsage) data.usage = this.usage;
      return data;
    }
  }
  class Uint16BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint16Array(array), itemSize, normalized);
    }
  }
  class Uint32BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint32Array(array), itemSize, normalized);
    }
  }
  class Float32BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Float32Array(array), itemSize, normalized);
    }
  }
  let _id$1 = 0;
  const _m1 = /* @__PURE__ */ new Matrix4();
  const _obj = /* @__PURE__ */ new Object3D();
  const _offset = /* @__PURE__ */ new Vector3();
  const _box$2 = /* @__PURE__ */ new Box3();
  const _boxMorphTargets = /* @__PURE__ */ new Box3();
  const _vector$8 = /* @__PURE__ */ new Vector3();
  class BufferGeometry extends EventDispatcher {
    constructor() {
      super();
      this.isBufferGeometry = true;
      Object.defineProperty(this, "id", { value: _id$1++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "BufferGeometry";
      this.index = null;
      this.indirect = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.morphTargetsRelative = false;
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      this.drawRange = { start: 0, count: Infinity };
      this.userData = {};
    }
    getIndex() {
      return this.index;
    }
    setIndex(index) {
      if (Array.isArray(index)) {
        this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
      } else {
        this.index = index;
      }
      return this;
    }
    setIndirect(indirect) {
      this.indirect = indirect;
      return this;
    }
    getIndirect() {
      return this.indirect;
    }
    getAttribute(name) {
      return this.attributes[name];
    }
    setAttribute(name, attribute) {
      this.attributes[name] = attribute;
      return this;
    }
    deleteAttribute(name) {
      delete this.attributes[name];
      return this;
    }
    hasAttribute(name) {
      return this.attributes[name] !== void 0;
    }
    addGroup(start, count, materialIndex = 0) {
      this.groups.push({
        start,
        count,
        materialIndex
      });
    }
    clearGroups() {
      this.groups = [];
    }
    setDrawRange(start, count) {
      this.drawRange.start = start;
      this.drawRange.count = count;
    }
    applyMatrix4(matrix) {
      const position = this.attributes.position;
      if (position !== void 0) {
        position.applyMatrix4(matrix);
        position.needsUpdate = true;
      }
      const normal = this.attributes.normal;
      if (normal !== void 0) {
        const normalMatrix = new Matrix3().getNormalMatrix(matrix);
        normal.applyNormalMatrix(normalMatrix);
        normal.needsUpdate = true;
      }
      const tangent = this.attributes.tangent;
      if (tangent !== void 0) {
        tangent.transformDirection(matrix);
        tangent.needsUpdate = true;
      }
      if (this.boundingBox !== null) {
        this.computeBoundingBox();
      }
      if (this.boundingSphere !== null) {
        this.computeBoundingSphere();
      }
      return this;
    }
    applyQuaternion(q) {
      _m1.makeRotationFromQuaternion(q);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateX(angle) {
      _m1.makeRotationX(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateY(angle) {
      _m1.makeRotationY(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateZ(angle) {
      _m1.makeRotationZ(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    translate(x2, y, z) {
      _m1.makeTranslation(x2, y, z);
      this.applyMatrix4(_m1);
      return this;
    }
    scale(x2, y, z) {
      _m1.makeScale(x2, y, z);
      this.applyMatrix4(_m1);
      return this;
    }
    lookAt(vector) {
      _obj.lookAt(vector);
      _obj.updateMatrix();
      this.applyMatrix4(_obj.matrix);
      return this;
    }
    center() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(_offset).negate();
      this.translate(_offset.x, _offset.y, _offset.z);
      return this;
    }
    setFromPoints(points) {
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute === void 0) {
        const position = [];
        for (let i2 = 0, l = points.length; i2 < l; i2++) {
          const point = points[i2];
          position.push(point.x, point.y, point.z || 0);
        }
        this.setAttribute("position", new Float32BufferAttribute(position, 3));
      } else {
        const l = Math.min(points.length, positionAttribute.count);
        for (let i2 = 0; i2 < l; i2++) {
          const point = points[i2];
          positionAttribute.setXYZ(i2, point.x, point.y, point.z || 0);
        }
        if (points.length > positionAttribute.count) {
          console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.");
        }
        positionAttribute.needsUpdate = true;
      }
      return this;
    }
    computeBoundingBox() {
      if (this.boundingBox === null) {
        this.boundingBox = new Box3();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this);
        this.boundingBox.set(
          new Vector3(-Infinity, -Infinity, -Infinity),
          new Vector3(Infinity, Infinity, Infinity)
        );
        return;
      }
      if (position !== void 0) {
        this.boundingBox.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
            const morphAttribute = morphAttributesPosition[i2];
            _box$2.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(this.boundingBox.min, _box$2.min);
              this.boundingBox.expandByPoint(_vector$8);
              _vector$8.addVectors(this.boundingBox.max, _box$2.max);
              this.boundingBox.expandByPoint(_vector$8);
            } else {
              this.boundingBox.expandByPoint(_box$2.min);
              this.boundingBox.expandByPoint(_box$2.max);
            }
          }
        }
      } else {
        this.boundingBox.makeEmpty();
      }
      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      }
    }
    computeBoundingSphere() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this);
        this.boundingSphere.set(new Vector3(), Infinity);
        return;
      }
      if (position) {
        const center = this.boundingSphere.center;
        _box$2.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
            const morphAttribute = morphAttributesPosition[i2];
            _boxMorphTargets.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(_box$2.min, _boxMorphTargets.min);
              _box$2.expandByPoint(_vector$8);
              _vector$8.addVectors(_box$2.max, _boxMorphTargets.max);
              _box$2.expandByPoint(_vector$8);
            } else {
              _box$2.expandByPoint(_boxMorphTargets.min);
              _box$2.expandByPoint(_boxMorphTargets.max);
            }
          }
        }
        _box$2.getCenter(center);
        let maxRadiusSq = 0;
        for (let i2 = 0, il = position.count; i2 < il; i2++) {
          _vector$8.fromBufferAttribute(position, i2);
          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
        }
        if (morphAttributesPosition) {
          for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
            const morphAttribute = morphAttributesPosition[i2];
            const morphTargetsRelative = this.morphTargetsRelative;
            for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
              _vector$8.fromBufferAttribute(morphAttribute, j);
              if (morphTargetsRelative) {
                _offset.fromBufferAttribute(position, j);
                _vector$8.add(_offset);
              }
              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
            }
          }
        }
        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
        if (isNaN(this.boundingSphere.radius)) {
          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      }
    }
    computeTangents() {
      const index = this.index;
      const attributes = this.attributes;
      if (index === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
        console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
        return;
      }
      const positionAttribute = attributes.position;
      const normalAttribute = attributes.normal;
      const uvAttribute = attributes.uv;
      if (this.hasAttribute("tangent") === false) {
        this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * positionAttribute.count), 4));
      }
      const tangentAttribute = this.getAttribute("tangent");
      const tan1 = [], tan2 = [];
      for (let i2 = 0; i2 < positionAttribute.count; i2++) {
        tan1[i2] = new Vector3();
        tan2[i2] = new Vector3();
      }
      const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
      function handleTriangle(a, b, c) {
        vA.fromBufferAttribute(positionAttribute, a);
        vB.fromBufferAttribute(positionAttribute, b);
        vC.fromBufferAttribute(positionAttribute, c);
        uvA.fromBufferAttribute(uvAttribute, a);
        uvB.fromBufferAttribute(uvAttribute, b);
        uvC.fromBufferAttribute(uvAttribute, c);
        vB.sub(vA);
        vC.sub(vA);
        uvB.sub(uvA);
        uvC.sub(uvA);
        const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
        if (!isFinite(r)) return;
        sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
        tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
        tan1[a].add(sdir);
        tan1[b].add(sdir);
        tan1[c].add(sdir);
        tan2[a].add(tdir);
        tan2[b].add(tdir);
        tan2[c].add(tdir);
      }
      let groups = this.groups;
      if (groups.length === 0) {
        groups = [{
          start: 0,
          count: index.count
        }];
      }
      for (let i2 = 0, il = groups.length; i2 < il; ++i2) {
        const group = groups[i2];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleTriangle(
            index.getX(j + 0),
            index.getX(j + 1),
            index.getX(j + 2)
          );
        }
      }
      const tmp = new Vector3(), tmp2 = new Vector3();
      const n = new Vector3(), n2 = new Vector3();
      function handleVertex(v) {
        n.fromBufferAttribute(normalAttribute, v);
        n2.copy(n);
        const t = tan1[v];
        tmp.copy(t);
        tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
        tmp2.crossVectors(n2, t);
        const test = tmp2.dot(tan2[v]);
        const w = test < 0 ? -1 : 1;
        tangentAttribute.setXYZW(v, tmp.x, tmp.y, tmp.z, w);
      }
      for (let i2 = 0, il = groups.length; i2 < il; ++i2) {
        const group = groups[i2];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleVertex(index.getX(j + 0));
          handleVertex(index.getX(j + 1));
          handleVertex(index.getX(j + 2));
        }
      }
    }
    computeVertexNormals() {
      const index = this.index;
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute !== void 0) {
        let normalAttribute = this.getAttribute("normal");
        if (normalAttribute === void 0) {
          normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
          this.setAttribute("normal", normalAttribute);
        } else {
          for (let i2 = 0, il = normalAttribute.count; i2 < il; i2++) {
            normalAttribute.setXYZ(i2, 0, 0, 0);
          }
        }
        const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
        const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
        const cb = new Vector3(), ab = new Vector3();
        if (index) {
          for (let i2 = 0, il = index.count; i2 < il; i2 += 3) {
            const vA = index.getX(i2 + 0);
            const vB = index.getX(i2 + 1);
            const vC = index.getX(i2 + 2);
            pA.fromBufferAttribute(positionAttribute, vA);
            pB.fromBufferAttribute(positionAttribute, vB);
            pC.fromBufferAttribute(positionAttribute, vC);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            nA.fromBufferAttribute(normalAttribute, vA);
            nB.fromBufferAttribute(normalAttribute, vB);
            nC.fromBufferAttribute(normalAttribute, vC);
            nA.add(cb);
            nB.add(cb);
            nC.add(cb);
            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
          }
        } else {
          for (let i2 = 0, il = positionAttribute.count; i2 < il; i2 += 3) {
            pA.fromBufferAttribute(positionAttribute, i2 + 0);
            pB.fromBufferAttribute(positionAttribute, i2 + 1);
            pC.fromBufferAttribute(positionAttribute, i2 + 2);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            normalAttribute.setXYZ(i2 + 0, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i2 + 1, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i2 + 2, cb.x, cb.y, cb.z);
          }
        }
        this.normalizeNormals();
        normalAttribute.needsUpdate = true;
      }
    }
    normalizeNormals() {
      const normals = this.attributes.normal;
      for (let i2 = 0, il = normals.count; i2 < il; i2++) {
        _vector$8.fromBufferAttribute(normals, i2);
        _vector$8.normalize();
        normals.setXYZ(i2, _vector$8.x, _vector$8.y, _vector$8.z);
      }
    }
    toNonIndexed() {
      function convertBufferAttribute(attribute, indices2) {
        const array = attribute.array;
        const itemSize = attribute.itemSize;
        const normalized = attribute.normalized;
        const array2 = new array.constructor(indices2.length * itemSize);
        let index = 0, index2 = 0;
        for (let i2 = 0, l = indices2.length; i2 < l; i2++) {
          if (attribute.isInterleavedBufferAttribute) {
            index = indices2[i2] * attribute.data.stride + attribute.offset;
          } else {
            index = indices2[i2] * itemSize;
          }
          for (let j = 0; j < itemSize; j++) {
            array2[index2++] = array[index++];
          }
        }
        return new BufferAttribute(array2, itemSize, normalized);
      }
      if (this.index === null) {
        console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
        return this;
      }
      const geometry2 = new BufferGeometry();
      const indices = this.index.array;
      const attributes = this.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        const newAttribute = convertBufferAttribute(attribute, indices);
        geometry2.setAttribute(name, newAttribute);
      }
      const morphAttributes = this.morphAttributes;
      for (const name in morphAttributes) {
        const morphArray = [];
        const morphAttribute = morphAttributes[name];
        for (let i2 = 0, il = morphAttribute.length; i2 < il; i2++) {
          const attribute = morphAttribute[i2];
          const newAttribute = convertBufferAttribute(attribute, indices);
          morphArray.push(newAttribute);
        }
        geometry2.morphAttributes[name] = morphArray;
      }
      geometry2.morphTargetsRelative = this.morphTargetsRelative;
      const groups = this.groups;
      for (let i2 = 0, l = groups.length; i2 < l; i2++) {
        const group = groups[i2];
        geometry2.addGroup(group.start, group.count, group.materialIndex);
      }
      return geometry2;
    }
    toJSON() {
      const data = {
        metadata: {
          version: 4.6,
          type: "BufferGeometry",
          generator: "BufferGeometry.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "") data.name = this.name;
      if (Object.keys(this.userData).length > 0) data.userData = this.userData;
      if (this.parameters !== void 0) {
        const parameters = this.parameters;
        for (const key in parameters) {
          if (parameters[key] !== void 0) data[key] = parameters[key];
        }
        return data;
      }
      data.data = { attributes: {} };
      const index = this.index;
      if (index !== null) {
        data.data.index = {
          type: index.array.constructor.name,
          array: Array.prototype.slice.call(index.array)
        };
      }
      const attributes = this.attributes;
      for (const key in attributes) {
        const attribute = attributes[key];
        data.data.attributes[key] = attribute.toJSON(data.data);
      }
      const morphAttributes = {};
      let hasMorphAttributes = false;
      for (const key in this.morphAttributes) {
        const attributeArray = this.morphAttributes[key];
        const array = [];
        for (let i2 = 0, il = attributeArray.length; i2 < il; i2++) {
          const attribute = attributeArray[i2];
          array.push(attribute.toJSON(data.data));
        }
        if (array.length > 0) {
          morphAttributes[key] = array;
          hasMorphAttributes = true;
        }
      }
      if (hasMorphAttributes) {
        data.data.morphAttributes = morphAttributes;
        data.data.morphTargetsRelative = this.morphTargetsRelative;
      }
      const groups = this.groups;
      if (groups.length > 0) {
        data.data.groups = JSON.parse(JSON.stringify(groups));
      }
      const boundingSphere = this.boundingSphere;
      if (boundingSphere !== null) {
        data.data.boundingSphere = {
          center: boundingSphere.center.toArray(),
          radius: boundingSphere.radius
        };
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      const data = {};
      this.name = source.name;
      const index = source.index;
      if (index !== null) {
        this.setIndex(index.clone(data));
      }
      const attributes = source.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        this.setAttribute(name, attribute.clone(data));
      }
      const morphAttributes = source.morphAttributes;
      for (const name in morphAttributes) {
        const array = [];
        const morphAttribute = morphAttributes[name];
        for (let i2 = 0, l = morphAttribute.length; i2 < l; i2++) {
          array.push(morphAttribute[i2].clone(data));
        }
        this.morphAttributes[name] = array;
      }
      this.morphTargetsRelative = source.morphTargetsRelative;
      const groups = source.groups;
      for (let i2 = 0, l = groups.length; i2 < l; i2++) {
        const group = groups[i2];
        this.addGroup(group.start, group.count, group.materialIndex);
      }
      const boundingBox = source.boundingBox;
      if (boundingBox !== null) {
        this.boundingBox = boundingBox.clone();
      }
      const boundingSphere = source.boundingSphere;
      if (boundingSphere !== null) {
        this.boundingSphere = boundingSphere.clone();
      }
      this.drawRange.start = source.drawRange.start;
      this.drawRange.count = source.drawRange.count;
      this.userData = source.userData;
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  }
  const _inverseMatrix$3 = /* @__PURE__ */ new Matrix4();
  const _ray$3 = /* @__PURE__ */ new Ray();
  const _sphere$6 = /* @__PURE__ */ new Sphere();
  const _sphereHitAt = /* @__PURE__ */ new Vector3();
  const _vA$1 = /* @__PURE__ */ new Vector3();
  const _vB$1 = /* @__PURE__ */ new Vector3();
  const _vC$1 = /* @__PURE__ */ new Vector3();
  const _tempA = /* @__PURE__ */ new Vector3();
  const _morphA = /* @__PURE__ */ new Vector3();
  const _intersectionPoint = /* @__PURE__ */ new Vector3();
  const _intersectionPointWorld = /* @__PURE__ */ new Vector3();
  class Mesh extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
      super();
      this.isMesh = true;
      this.type = "Mesh";
      this.geometry = geometry;
      this.material = material;
      this.updateMorphTargets();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.morphTargetInfluences !== void 0) {
        this.morphTargetInfluences = source.morphTargetInfluences.slice();
      }
      if (source.morphTargetDictionary !== void 0) {
        this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
      }
      this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
      this.geometry = source.geometry;
      return this;
    }
    updateMorphTargets() {
      const geometry = this.geometry;
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
            const name = morphAttribute[m].name || String(m);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name] = m;
          }
        }
      }
    }
    getVertexPosition(index, target) {
      const geometry = this.geometry;
      const position = geometry.attributes.position;
      const morphPosition = geometry.morphAttributes.position;
      const morphTargetsRelative = geometry.morphTargetsRelative;
      target.fromBufferAttribute(position, index);
      const morphInfluences = this.morphTargetInfluences;
      if (morphPosition && morphInfluences) {
        _morphA.set(0, 0, 0);
        for (let i2 = 0, il = morphPosition.length; i2 < il; i2++) {
          const influence = morphInfluences[i2];
          const morphAttribute = morphPosition[i2];
          if (influence === 0) continue;
          _tempA.fromBufferAttribute(morphAttribute, index);
          if (morphTargetsRelative) {
            _morphA.addScaledVector(_tempA, influence);
          } else {
            _morphA.addScaledVector(_tempA.sub(target), influence);
          }
        }
        target.add(_morphA);
      }
      return target;
    }
    raycast(raycaster, intersects) {
      const geometry = this.geometry;
      const material = this.material;
      const matrixWorld = this.matrixWorld;
      if (material === void 0) return;
      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      _sphere$6.copy(geometry.boundingSphere);
      _sphere$6.applyMatrix4(matrixWorld);
      _ray$3.copy(raycaster.ray).recast(raycaster.near);
      if (_sphere$6.containsPoint(_ray$3.origin) === false) {
        if (_ray$3.intersectSphere(_sphere$6, _sphereHitAt) === null) return;
        if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;
      }
      _inverseMatrix$3.copy(matrixWorld).invert();
      _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);
      if (geometry.boundingBox !== null) {
        if (_ray$3.intersectsBox(geometry.boundingBox) === false) return;
      }
      this._computeIntersections(raycaster, intersects, _ray$3);
    }
    _computeIntersections(raycaster, intersects, rayLocalSpace) {
      let intersection;
      const geometry = this.geometry;
      const material = this.material;
      const index = geometry.index;
      const position = geometry.attributes.position;
      const uv = geometry.attributes.uv;
      const uv1 = geometry.attributes.uv1;
      const normal = geometry.attributes.normal;
      const groups = geometry.groups;
      const drawRange = geometry.drawRange;
      if (index !== null) {
        if (Array.isArray(material)) {
          for (let i2 = 0, il = groups.length; i2 < il; i2++) {
            const group = groups[i2];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = index.getX(j);
              const b = index.getX(j + 1);
              const c = index.getX(j + 2);
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i2 = start, il = end; i2 < il; i2 += 3) {
            const a = index.getX(i2);
            const b = index.getX(i2 + 1);
            const c = index.getX(i2 + 2);
            intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i2 / 3);
              intersects.push(intersection);
            }
          }
        }
      } else if (position !== void 0) {
        if (Array.isArray(material)) {
          for (let i2 = 0, il = groups.length; i2 < il; i2++) {
            const group = groups[i2];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = j;
              const b = j + 1;
              const c = j + 2;
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(position.count, drawRange.start + drawRange.count);
          for (let i2 = start, il = end; i2 < il; i2 += 3) {
            const a = i2;
            const b = i2 + 1;
            const c = i2 + 2;
            intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i2 / 3);
              intersects.push(intersection);
            }
          }
        }
      }
    }
  }
  function checkIntersection$1(object, material, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === BackSide) {
      intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    } else {
      intersect = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point);
    }
    if (intersect === null) return null;
    _intersectionPointWorld.copy(point);
    _intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far) return null;
    return {
      distance,
      point: _intersectionPointWorld.clone(),
      object
    };
  }
  function checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {
    object.getVertexPosition(a, _vA$1);
    object.getVertexPosition(b, _vB$1);
    object.getVertexPosition(c, _vC$1);
    const intersection = checkIntersection$1(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
    if (intersection) {
      const barycoord = new Vector3();
      Triangle.getBarycoord(_intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord);
      if (uv) {
        intersection.uv = Triangle.getInterpolatedAttribute(uv, a, b, c, barycoord, new Vector2());
      }
      if (uv1) {
        intersection.uv1 = Triangle.getInterpolatedAttribute(uv1, a, b, c, barycoord, new Vector2());
      }
      if (normal) {
        intersection.normal = Triangle.getInterpolatedAttribute(normal, a, b, c, barycoord, new Vector3());
        if (intersection.normal.dot(ray.direction) > 0) {
          intersection.normal.multiplyScalar(-1);
        }
      }
      const face = {
        a,
        b,
        c,
        normal: new Vector3(),
        materialIndex: 0
      };
      Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
      intersection.face = face;
      intersection.barycoord = barycoord;
    }
    return intersection;
  }
  function cloneUniforms(src) {
    const dst = {};
    for (const u in src) {
      dst[u] = {};
      for (const p in src[u]) {
        const property = src[u][p];
        if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
          if (property.isRenderTargetTexture) {
            console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
            dst[u][p] = null;
          } else {
            dst[u][p] = property.clone();
          }
        } else if (Array.isArray(property)) {
          dst[u][p] = property.slice();
        } else {
          dst[u][p] = property;
        }
      }
    }
    return dst;
  }
  function cloneUniformsGroups(src) {
    const dst = [];
    for (let u = 0; u < src.length; u++) {
      dst.push(src[u].clone());
    }
    return dst;
  }
  var default_vertex = "void main() {\\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}";
  var default_fragment = "void main() {\\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}";
  class ShaderMaterial extends Material {
    constructor(parameters) {
      super();
      this.isShaderMaterial = true;
      this.type = "ShaderMaterial";
      this.defines = {};
      this.uniforms = {};
      this.uniformsGroups = [];
      this.vertexShader = default_vertex;
      this.fragmentShader = default_fragment;
      this.linewidth = 1;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.fog = false;
      this.lights = false;
      this.clipping = false;
      this.forceSinglePass = true;
      this.extensions = {
        clipCullDistance: false,
        // set to use vertex shader clipping
        multiDraw: false
        // set to use vertex shader multi_draw / enable gl_DrawID
      };
      this.defaultAttributeValues = {
        "color": [1, 1, 1],
        "uv": [0, 0],
        "uv1": [0, 0]
      };
      this.index0AttributeName = void 0;
      this.uniformsNeedUpdate = false;
      this.glslVersion = null;
      if (parameters !== void 0) {
        this.setValues(parameters);
      }
    }
    copy(source) {
      super.copy(source);
      this.fragmentShader = source.fragmentShader;
      this.vertexShader = source.vertexShader;
      this.uniforms = cloneUniforms(source.uniforms);
      this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);
      this.defines = Object.assign({}, source.defines);
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.fog = source.fog;
      this.lights = source.lights;
      this.clipping = source.clipping;
      this.extensions = Object.assign({}, source.extensions);
      this.glslVersion = source.glslVersion;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.glslVersion = this.glslVersion;
      data.uniforms = {};
      for (const name in this.uniforms) {
        const uniform = this.uniforms[name];
        const value = uniform.value;
        if (value && value.isTexture) {
          data.uniforms[name] = {
            type: "t",
            value: value.toJSON(meta).uuid
          };
        } else if (value && value.isColor) {
          data.uniforms[name] = {
            type: "c",
            value: value.getHex()
          };
        } else if (value && value.isVector2) {
          data.uniforms[name] = {
            type: "v2",
            value: value.toArray()
          };
        } else if (value && value.isVector3) {
          data.uniforms[name] = {
            type: "v3",
            value: value.toArray()
          };
        } else if (value && value.isVector4) {
          data.uniforms[name] = {
            type: "v4",
            value: value.toArray()
          };
        } else if (value && value.isMatrix3) {
          data.uniforms[name] = {
            type: "m3",
            value: value.toArray()
          };
        } else if (value && value.isMatrix4) {
          data.uniforms[name] = {
            type: "m4",
            value: value.toArray()
          };
        } else {
          data.uniforms[name] = {
            value
          };
        }
      }
      if (Object.keys(this.defines).length > 0) data.defines = this.defines;
      data.vertexShader = this.vertexShader;
      data.fragmentShader = this.fragmentShader;
      data.lights = this.lights;
      data.clipping = this.clipping;
      const extensions = {};
      for (const key in this.extensions) {
        if (this.extensions[key] === true) extensions[key] = true;
      }
      if (Object.keys(extensions).length > 0) data.extensions = extensions;
      return data;
    }
  }
  class Camera extends Object3D {
    constructor() {
      super();
      this.isCamera = true;
      this.type = "Camera";
      this.matrixWorldInverse = new Matrix4();
      this.projectionMatrix = new Matrix4();
      this.projectionMatrixInverse = new Matrix4();
      this.coordinateSystem = WebGLCoordinateSystem;
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.matrixWorldInverse.copy(source.matrixWorldInverse);
      this.projectionMatrix.copy(source.projectionMatrix);
      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
      this.coordinateSystem = source.coordinateSystem;
      return this;
    }
    getWorldDirection(target) {
      return super.getWorldDirection(target).negate();
    }
    updateMatrixWorld(force) {
      super.updateMatrixWorld(force);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(updateParents, updateChildren) {
      super.updateWorldMatrix(updateParents, updateChildren);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
      return new this.constructor().copy(this);
    }
  }
  class Scene extends Object3D {
    constructor() {
      super();
      this.isScene = true;
      this.type = "Scene";
      this.background = null;
      this.environment = null;
      this.fog = null;
      this.backgroundBlurriness = 0;
      this.backgroundIntensity = 1;
      this.backgroundRotation = new Euler();
      this.environmentIntensity = 1;
      this.environmentRotation = new Euler();
      this.overrideMaterial = null;
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
      }
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.background !== null) this.background = source.background.clone();
      if (source.environment !== null) this.environment = source.environment.clone();
      if (source.fog !== null) this.fog = source.fog.clone();
      this.backgroundBlurriness = source.backgroundBlurriness;
      this.backgroundIntensity = source.backgroundIntensity;
      this.backgroundRotation.copy(source.backgroundRotation);
      this.environmentIntensity = source.environmentIntensity;
      this.environmentRotation.copy(source.environmentRotation);
      if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      if (this.fog !== null) data.object.fog = this.fog.toJSON();
      if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;
      if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;
      data.object.backgroundRotation = this.backgroundRotation.toArray();
      if (this.environmentIntensity !== 1) data.object.environmentIntensity = this.environmentIntensity;
      data.object.environmentRotation = this.environmentRotation.toArray();
      return data;
    }
  }
  class DataTexture extends Texture {
    constructor(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace) {
      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);
      this.isDataTexture = true;
      this.image = { data, width, height };
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
    }
  }
  class PlaneGeometry extends BufferGeometry {
    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
      super();
      this.type = "PlaneGeometry";
      this.parameters = {
        width,
        height,
        widthSegments,
        heightSegments
      };
      const width_half = width / 2;
      const height_half = height / 2;
      const gridX = Math.floor(widthSegments);
      const gridY = Math.floor(heightSegments);
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      const segment_width = width / gridX;
      const segment_height = height / gridY;
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      for (let iy = 0; iy < gridY1; iy++) {
        const y = iy * segment_height - height_half;
        for (let ix = 0; ix < gridX1; ix++) {
          const x2 = ix * segment_width - width_half;
          vertices.push(x2, -y, 0);
          normals.push(0, 0, 1);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a = ix + gridX1 * iy;
          const b = ix + gridX1 * (iy + 1);
          const c = ix + 1 + gridX1 * (iy + 1);
          const d = ix + 1 + gridX1 * iy;
          indices.push(a, b, d);
          indices.push(b, c, d);
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    static fromJSON(data) {
      return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
    }
  }
  class RawShaderMaterial extends ShaderMaterial {
    constructor(parameters) {
      super(parameters);
      this.isRawShaderMaterial = true;
      this.type = "RawShaderMaterial";
    }
  }
  class Matrix2 {
    constructor(n11, n12, n21, n22) {
      Matrix2.prototype.isMatrix2 = true;
      this.elements = [
        1,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n21, n22);
      }
    }
    identity() {
      this.set(
        1,
        0,
        0,
        1
      );
      return this;
    }
    fromArray(array, offset = 0) {
      for (let i2 = 0; i2 < 4; i2++) {
        this.elements[i2] = array[i2 + offset];
      }
      return this;
    }
    set(n11, n12, n21, n22) {
      const te = this.elements;
      te[0] = n11;
      te[2] = n12;
      te[1] = n21;
      te[3] = n22;
      return this;
    }
  }
  if (typeof __THREE_DEVTOOLS__ !== "undefined") {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
      revision: REVISION
    } }));
  }
  if (typeof window !== "undefined") {
    if (window.__THREE__) {
      console.warn("WARNING: Multiple instances of Three.js being imported.");
    } else {
      window.__THREE__ = REVISION;
    }
  }
  const LN_SCALE_MIN = -9;
  const LN_SCALE_MAX = 9;
  const LN_RESCALE = (LN_SCALE_MAX - LN_SCALE_MIN) / 254;
  const SCALE_MIN = Math.exp(LN_SCALE_MIN);
  const SPLAT_TEX_WIDTH_BITS = 11;
  const SPLAT_TEX_HEIGHT_BITS = 11;
  const SPLAT_TEX_WIDTH = 1 << SPLAT_TEX_WIDTH_BITS;
  const SPLAT_TEX_HEIGHT = 1 << SPLAT_TEX_HEIGHT_BITS;
  const SPLAT_TEX_MIN_HEIGHT = 1;
  const WASM_SPLAT_SORT = true;
  function isIntType(type) {
    return type === "int" || type === "ivec2" || type === "ivec3" || type === "ivec4";
  }
  function isUintType(type) {
    return type === "uint" || type === "uvec2" || type === "uvec3" || type === "uvec4";
  }
  function isFloatType(type) {
    return type === "float" || type === "vec2" || type === "vec3" || type === "vec4";
  }
  function isMatFloatType(type) {
    return type === "mat2" || type === "mat2x2" || type === "mat2x3" || type === "mat2x4" || type === "mat3" || type === "mat3x2" || type === "mat3x3" || type === "mat3x4" || type === "mat4" || type === "mat4x2" || type === "mat4x3" || type === "mat4x4";
  }
  function isAllFloatType(type) {
    return isFloatType(type) || isMatFloatType(type);
  }
  function isMat2(type) {
    return type === "mat2" || type === "mat2x2";
  }
  function isMat3(type) {
    return type === "mat3" || type === "mat3x3";
  }
  function isMat4(type) {
    return type === "mat4" || type === "mat4x4";
  }
  function numberAsInt(value) {
    return Math.trunc(value).toString();
  }
  function numberAsUint(value) {
    const v = Math.max(0, Math.trunc(value));
    return \`\${v.toString()}u\`;
  }
  function numberAsFloat(value) {
    return value === Number.POSITIVE_INFINITY ? "INFINITY" : value === Number.NEGATIVE_INFINITY ? "-INFINITY" : Number.isInteger(value) ? value.toFixed(1) : value.toString();
  }
  function valType(val) {
    if (val instanceof DynoValue) {
      return val.type;
    }
    const value = val.dynoOut();
    return value.type;
  }
  class DynoValue {
    constructor(type) {
      this.__isDynoValue = true;
      this.type = type;
    }
  }
  class DynoOutput extends DynoValue {
    constructor(dyno2, key) {
      super(dyno2.outTypes[key]);
      this.dyno = dyno2;
      this.key = key;
    }
  }
  class DynoLiteral extends DynoValue {
    constructor(type, literal) {
      super(type);
      this.literal = literal;
    }
    getLiteral() {
      return this.literal;
    }
  }
  class DynoConst extends DynoLiteral {
    constructor(type, value) {
      super(type, "");
      this.value = value;
    }
    getLiteral() {
      const { type, value } = this;
      switch (type) {
        case "bool":
          return value ? "true" : "false";
        case "uint":
          return numberAsUint(value);
        case "int":
          return numberAsInt(value);
        case "float":
          return numberAsFloat(value);
        case "bvec2": {
          const v = value;
          return \`bvec2(\${v[0]}, \${v[1]})\`;
        }
        case "uvec2": {
          if (value instanceof Vector2) {
            return \`uvec2(\${numberAsUint(value.x)}, \${numberAsUint(value.y)})\`;
          }
          const v = value;
          return \`uvec2(\${numberAsUint(v[0])}, \${numberAsUint(v[1])})\`;
        }
        case "ivec2": {
          if (value instanceof Vector2) {
            return \`ivec2(\${numberAsInt(value.x)}, \${numberAsInt(value.y)})\`;
          }
          const v = value;
          return \`ivec2(\${numberAsInt(v[0])}, \${numberAsInt(v[1])})\`;
        }
        case "vec2": {
          if (value instanceof Vector2) {
            return \`vec2(\${numberAsFloat(value.x)}, \${numberAsFloat(value.y)})\`;
          }
          const v = value;
          return \`vec2(\${numberAsFloat(v[0])}, \${numberAsFloat(v[1])})\`;
        }
        case "bvec3": {
          const v = value;
          return \`bvec3(\${v[0]}, \${v[1]}, \${v[2]})\`;
        }
        case "uvec3": {
          if (value instanceof Vector3) {
            return \`uvec3(\${numberAsUint(value.x)}, \${numberAsUint(value.y)}, \${numberAsUint(value.z)})\`;
          }
          const v = value;
          return \`uvec3(\${numberAsUint(v[0])}, \${numberAsUint(v[1])}, \${numberAsUint(v[2])})\`;
        }
        case "ivec3": {
          if (value instanceof Vector3) {
            return \`ivec3(\${numberAsInt(value.x)}, \${numberAsInt(value.y)}, \${numberAsInt(value.z)})\`;
          }
          const v = value;
          return \`ivec3(\${numberAsInt(v[0])}, \${numberAsInt(v[1])}, \${numberAsInt(v[2])})\`;
        }
        case "vec3": {
          if (value instanceof Vector3) {
            return \`vec3(\${numberAsFloat(value.x)}, \${numberAsFloat(value.y)}, \${numberAsFloat(value.z)})\`;
          }
          const v = value;
          return \`vec3(\${numberAsFloat(v[0])}, \${numberAsFloat(v[1])}, \${numberAsFloat(v[2])})\`;
        }
        case "bvec4": {
          const v = value;
          return \`bvec4(\${v[0]}, \${v[1]}, \${v[2]}, \${v[3]})\`;
        }
        case "uvec4": {
          if (value instanceof Vector4) {
            return \`uvec4(\${numberAsUint(value.x)}, \${numberAsUint(value.y)}, \${numberAsUint(value.z)}, \${numberAsUint(value.w)})\`;
          }
          const v = value;
          return \`uvec4(\${numberAsUint(v[0])}, \${numberAsUint(v[1])}, \${numberAsUint(v[2])}, \${numberAsUint(v[3])})\`;
        }
        case "ivec4": {
          if (value instanceof Vector4) {
            return \`ivec4(\${numberAsInt(value.x)}, \${numberAsInt(value.y)}, \${numberAsInt(value.z)}, \${numberAsInt(value.w)})\`;
          }
          const v = value;
          return \`ivec4(\${numberAsInt(v[0])}, \${numberAsInt(v[1])}, \${numberAsInt(v[2])}, \${numberAsInt(v[3])})\`;
        }
        case "vec4": {
          if (value instanceof Vector4) {
            return \`vec4(\${numberAsFloat(value.x)}, \${numberAsFloat(value.y)}, \${numberAsFloat(value.z)}, \${numberAsFloat(value.w)})\`;
          }
          if (value instanceof Quaternion) {
            return \`vec4(\${numberAsFloat(value.x)}, \${numberAsFloat(value.y)}, \${numberAsFloat(value.z)}, \${numberAsFloat(value.w)})\`;
          }
          const v = value;
          return \`vec4(\${numberAsFloat(v[0])}, \${numberAsFloat(v[1])}, \${numberAsFloat(v[2])}, \${numberAsFloat(v[3])})\`;
        }
        case "mat2":
        case "mat2x2": {
          const m = value;
          const e = m instanceof Matrix2 ? m.elements : value;
          const arg = new Array(4).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat2x3": {
          const e = value;
          const arg = new Array(6).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat2x4": {
          const e = value;
          const arg = new Array(8).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat3":
        case "mat3x3": {
          const m = value;
          const e = m instanceof Matrix3 ? m.elements : value;
          const arg = new Array(9).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat3x2": {
          const e = value;
          const arg = new Array(6).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat3x4": {
          const e = value;
          const arg = new Array(12).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat4":
        case "mat4x4": {
          const m = value;
          const e = m instanceof Matrix4 ? m.elements : value;
          const arg = new Array(16).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat4x2": {
          const e = value;
          const arg = new Array(8).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat4x3": {
          const e = value;
          const arg = new Array(12).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        default:
          throw new Error(\`Type not implemented: \${String(type)}\`);
      }
    }
  }
  function dynoConst(type, value) {
    return new DynoConst(type, value);
  }
  const DEFAULT_INDENT = "    ";
  class Compilation {
    constructor({ indent } = {}) {
      this.globals = /* @__PURE__ */ new Set();
      this.statements = [];
      this.uniforms = {};
      this.declares = /* @__PURE__ */ new Set();
      this.updaters = [];
      this.sequence = 0;
      this.indent = DEFAULT_INDENT;
      this.indent = indent ?? DEFAULT_INDENT;
    }
    nextSequence() {
      return this.sequence++;
    }
  }
  class Dyno {
    constructor({
      inTypes,
      outTypes,
      inputs,
      update,
      globals,
      statements,
      generate
    }) {
      this.inTypes = inTypes ?? {};
      this.outTypes = outTypes ?? {};
      this.inputs = inputs ?? {};
      this.update = update;
      this.globals = globals;
      this.statements = statements;
      this.generate = generate ?? (({ inputs: inputs2, outputs, compile }) => {
        var _a2, _b2;
        return {
          globals: (_a2 = this.globals) == null ? void 0 : _a2.call(this, { inputs: inputs2, outputs, compile }),
          statements: (_b2 = this.statements) == null ? void 0 : _b2.call(this, { inputs: inputs2, outputs, compile })
        };
      });
    }
    get outputs() {
      const outputs = {};
      for (const key in this.outTypes) {
        outputs[key] = new DynoOutput(this, key);
      }
      return outputs;
    }
    apply(inputs) {
      Object.assign(this.inputs, inputs);
      return this.outputs;
    }
    compile({
      inputs,
      outputs,
      compile
    }) {
      const result = [
        \`// \${this.constructor.name}(\${Object.values(inputs).join(", ")}) => (\${Object.values(outputs).join(", ")})\`
      ];
      const declares = [];
      for (const key in outputs) {
        const name = outputs[key];
        if (name && !compile.declares.has(name)) {
          compile.declares.add(name);
          declares.push(key);
        }
      }
      const { globals, statements, uniforms } = this.generate({
        inputs,
        outputs,
        compile
      });
      for (const global of globals ?? []) {
        compile.globals.add(global);
      }
      for (const key in uniforms) {
        compile.uniforms[key] = uniforms[key];
      }
      if (this.update) {
        compile.updaters.push(this.update);
      }
      for (const key of declares) {
        const name = outputs[key];
        if (name) {
          if (!compile.uniforms[name]) {
            result.push(\`\${dynoDeclare(name, this.outTypes[key])};\`);
          }
        }
      }
      if (statements == null ? void 0 : statements.length) {
        result.push("{");
        result.push(...statements.map((line) => compile.indent + line));
        result.push("}");
      }
      return result;
    }
  }
  class DynoBlock extends Dyno {
    constructor({
      inTypes,
      outTypes,
      inputs,
      update,
      globals,
      construct
    }) {
      super({
        inTypes,
        outTypes,
        inputs,
        update,
        globals,
        generate: (args) => this.generateBlock(args)
      });
      this.construct = construct;
    }
    generateBlock({
      inputs,
      outputs,
      compile
    }) {
      var _a2, _b2;
      const blockInputs = {};
      const blockOutputs = {};
      for (const key in inputs) {
        if (inputs[key] != null) {
          blockInputs[key] = new DynoLiteral(this.inTypes[key], inputs[key]);
        }
      }
      for (const key in outputs) {
        if (outputs[key] != null) {
          blockOutputs[key] = new DynoValue(this.outTypes[key]);
        }
      }
      const options = { roots: [] };
      const returned = this.construct(blockInputs, blockOutputs, options);
      for (const global of ((_a2 = this.globals) == null ? void 0 : _a2.call(this, { inputs, outputs, compile })) ?? []) {
        compile.globals.add(global);
      }
      const ordering = [];
      const nodeOuts = /* @__PURE__ */ new Map();
      function visit(node, outKey, outName) {
        let outs = nodeOuts.get(node);
        if (!outs) {
          outs = {
            sequence: compile.nextSequence(),
            outNames: /* @__PURE__ */ new Map(),
            newOuts: /* @__PURE__ */ new Set()
          };
          nodeOuts.set(node, outs);
          for (const key in node.inputs) {
            let input = node.inputs[key];
            while (input) {
              if (input instanceof DynoValue) {
                if (input instanceof DynoOutput) {
                  visit(input.dyno, input.key);
                }
                break;
              }
              input = input.dynoOut();
            }
          }
          ordering.push(node);
        }
        if (outKey) {
          if (!outName) {
            outs.newOuts.add(outKey);
          }
          outs.outNames.set(outKey, outName ?? \`\${outKey}_\${outs.sequence}\`);
        }
      }
      for (const root of options.roots) {
        visit(root);
      }
      for (const key in blockOutputs) {
        let value = (returned == null ? void 0 : returned[key]) ?? blockOutputs[key];
        while (value) {
          if (value instanceof DynoValue) {
            if (value instanceof DynoOutput) {
              visit(value.dyno, value.key, outputs[key]);
            }
            break;
          }
          value = value.dynoOut();
        }
        blockOutputs[key] = value;
      }
      const steps = [];
      for (const dyno2 of ordering) {
        const inputs2 = {};
        const outputs2 = {};
        for (const key in dyno2.inputs) {
          let value = dyno2.inputs[key];
          while (value) {
            if (value instanceof DynoValue) {
              if (value instanceof DynoLiteral) {
                inputs2[key] = value.getLiteral();
              } else if (value instanceof DynoOutput) {
                const source = (_b2 = nodeOuts.get(value.dyno)) == null ? void 0 : _b2.outNames.get(value.key);
                if (!source) {
                  throw new Error(
                    \`Source not found for \${value.dyno.constructor.name}.\${value.key}\`
                  );
                }
                inputs2[key] = source;
              }
              break;
            }
            value = value.dynoOut();
          }
        }
        const outs = nodeOuts.get(dyno2) ?? { outNames: /* @__PURE__ */ new Map() };
        for (const [key, name] of outs.outNames.entries()) {
          outputs2[key] = name;
        }
        const newSteps = dyno2.compile({ inputs: inputs2, outputs: outputs2, compile });
        steps.push(newSteps);
      }
      const literalOutputs = [];
      for (const key in outputs) {
        if (blockOutputs[key] instanceof DynoLiteral) {
          literalOutputs.push(
            \`\${outputs[key]} = \${blockOutputs[key].getLiteral()};\`
          );
        }
      }
      if (literalOutputs.length > 0) {
        steps.push(literalOutputs);
      }
      const statements = steps.flatMap((step, index) => {
        return index === 0 ? step : ["", ...step];
      });
      return { statements };
    }
  }
  function dynoBlock(inTypes, outTypes, construct, { update, globals } = {}) {
    return new DynoBlock({ inTypes, outTypes, construct, update, globals });
  }
  function dyno({
    inTypes,
    outTypes,
    inputs,
    update,
    globals,
    statements,
    generate
  }) {
    return new Dyno({
      inTypes,
      outTypes,
      inputs,
      update,
      globals,
      statements,
      generate
    });
  }
  function dynoDeclare(name, type, count) {
    const typeStr = typeof type === "string" ? type : type.type;
    if (!typeStr) {
      throw new Error(\`Invalid DynoType: \${String(type)}\`);
    }
    return \`\${typeStr} \${name}\${count != null ? \`[\${count}]\` : ""}\`;
  }
  function unindentLines(s) {
    var _a2;
    let seenNonEmpty = false;
    const lines = s.split("\\n").map((line) => {
      const trimmedLine = line.trimEnd();
      if (seenNonEmpty) {
        return trimmedLine;
      }
      if (trimmedLine.length > 0) {
        seenNonEmpty = true;
        return trimmedLine;
      }
      return null;
    }).filter((line) => line != null);
    while (lines.length > 0 && lines[lines.length - 1].length === 0) {
      lines.pop();
    }
    if (lines.length === 0) {
      return [];
    }
    const indent = (_a2 = lines[0].match(/^\\s*/)) == null ? void 0 : _a2[0];
    if (!indent) {
      return lines;
    }
    const regex = new RegExp(\`^\${indent}\`);
    return lines.map((line) => line.replace(regex, ""));
  }
  function unindent(s) {
    return unindentLines(s).join("\\n");
  }
  class UnaryOp extends Dyno {
    constructor({
      a,
      outKey,
      outTypeFunc
    }) {
      const inTypes = { a: valType(a) };
      const outType = outTypeFunc(valType(a));
      const outTypes = { [outKey]: outType };
      super({ inTypes, outTypes, inputs: { a } });
      this.outKey = outKey;
    }
    dynoOut() {
      return new DynoOutput(this, this.outKey);
    }
  }
  class BinaryOp extends Dyno {
    constructor({
      a,
      b,
      outKey,
      outTypeFunc
    }) {
      const inTypes = { a: valType(a), b: valType(b) };
      const outType = outTypeFunc(valType(a), valType(b));
      const outTypes = { [outKey]: outType };
      super({ inTypes, outTypes, inputs: { a, b } });
      this.outKey = outKey;
    }
    dynoOut() {
      return new DynoOutput(this, this.outKey);
    }
  }
  const f32buffer = new Float32Array(1);
  const u32buffer = new Uint32Array(f32buffer.buffer);
  function toHalf(f) {
    f32buffer[0] = f;
    const bits2 = u32buffer[0];
    const sign = bits2 >> 31 & 1;
    const exp = bits2 >> 23 & 255;
    const frac = bits2 & 8388607;
    const halfSign = sign << 15;
    if (exp === 255) {
      if (frac !== 0) {
        return halfSign | 32767;
      }
      return halfSign | 31744;
    }
    const newExp = exp - 127 + 15;
    if (newExp >= 31) {
      return halfSign | 31744;
    }
    if (newExp <= 0) {
      if (newExp < -10) {
        return halfSign;
      }
      const subFrac = (frac | 8388608) >> 1 - newExp + 13;
      return halfSign | subFrac;
    }
    const halfFrac = frac >> 13;
    return halfSign | newExp << 10 | halfFrac;
  }
  function fromHalf(h) {
    const sign = h >> 15 & 1;
    const exp = h >> 10 & 31;
    const frac = h & 1023;
    let f32bits;
    if (exp === 0) {
      if (frac === 0) {
        f32bits = sign << 31;
      } else {
        let mant = frac;
        let e = -14;
        while ((mant & 1024) === 0) {
          mant <<= 1;
          e--;
        }
        mant &= 1023;
        const newExp = e + 127;
        const newFrac = mant << 13;
        f32bits = sign << 31 | newExp << 23 | newFrac;
      }
    } else if (exp === 31) {
      if (frac === 0) {
        f32bits = sign << 31 | 2139095040;
      } else {
        f32bits = sign << 31 | 2143289344;
      }
    } else {
      const newExp = exp - 15 + 127;
      const newFrac = frac << 13;
      f32bits = sign << 31 | newExp << 23 | newFrac;
    }
    u32buffer[0] = f32bits;
    return f32buffer[0];
  }
  function floatToUint8(v) {
    return Math.max(0, Math.min(255, Math.round(v * 255)));
  }
  function getArrayBuffers(ctx) {
    const buffers = [];
    const seen = /* @__PURE__ */ new Set();
    function traverse(obj) {
      if (obj && typeof obj === "object" && !seen.has(obj)) {
        seen.add(obj);
        if (obj instanceof ArrayBuffer) {
          buffers.push(obj);
        } else if (ArrayBuffer.isView(obj)) {
          buffers.push(obj.buffer);
        } else if (Array.isArray(obj)) {
          obj.forEach(traverse);
        } else {
          Object.values(obj).forEach(traverse);
        }
      }
    }
    traverse(ctx);
    return buffers;
  }
  function setPackedSplat(packedSplats, index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) {
    const uR = floatToUint8(r);
    const uG = floatToUint8(g);
    const uB = floatToUint8(b);
    const uA = floatToUint8(opacity);
    const uQuat = encodeQuatOctXy88R8(
      new Quaternion(quatX, quatY, quatZ, quatW)
    );
    const uQuatX = uQuat & 255;
    const uQuatY = uQuat >>> 8 & 255;
    const uQuatZ = uQuat >>> 16 & 255;
    const uScaleX = scaleX === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleX) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uScaleY = scaleY === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleY) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uScaleZ = scaleZ === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleZ) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uCenterX = toHalf(x2);
    const uCenterY = toHalf(y);
    const uCenterZ = toHalf(z);
    const i4 = index * 4;
    packedSplats[i4] = uR | uG << 8 | uB << 16 | uA << 24;
    packedSplats[i4 + 1] = uCenterX | uCenterY << 16;
    packedSplats[i4 + 2] = uCenterZ | uQuatX << 16 | uQuatY << 24;
    packedSplats[i4 + 3] = uScaleX | uScaleY << 8 | uScaleZ << 16 | uQuatZ << 24;
  }
  function setPackedSplatCenter(packedSplats, index, x2, y, z) {
    const uCenterX = toHalf(x2);
    const uCenterY = toHalf(y);
    const uCenterZ = toHalf(z);
    const i4 = index * 4;
    packedSplats[i4 + 1] = uCenterX | uCenterY << 16;
    packedSplats[i4 + 2] = uCenterZ | packedSplats[i4 + 2] & 4294901760;
  }
  function setPackedSplatScales(packedSplats, index, scaleX, scaleY, scaleZ) {
    const uScaleX = scaleX === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleX) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uScaleY = scaleY === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleY) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uScaleZ = scaleZ === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleZ) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const i4 = index * 4;
    packedSplats[i4 + 3] = uScaleX | uScaleY << 8 | uScaleZ << 16 | packedSplats[i4 + 3] & 4278190080;
  }
  function setPackedSplatQuat(packedSplats, index, quatX, quatY, quatZ, quatW) {
    const uQuat = encodeQuatOctXy88R8(
      new Quaternion(quatX, quatY, quatZ, quatW)
    );
    const uQuatX = uQuat & 255;
    const uQuatY = uQuat >>> 8 & 255;
    const uQuatZ = uQuat >>> 16 & 255;
    const i4 = index * 4;
    packedSplats[i4 + 2] = packedSplats[i4 + 2] & 65535 | uQuatX << 16 | uQuatY << 24;
    packedSplats[i4 + 3] = packedSplats[i4 + 3] & 16777215 | uQuatZ << 24;
  }
  function setPackedSplatRgb(packedSplats, index, r, g, b) {
    const uR = floatToUint8(r);
    const uG = floatToUint8(g);
    const uB = floatToUint8(b);
    const i4 = index * 4;
    packedSplats[i4] = uR | uG << 8 | uB << 16 | packedSplats[i4] & 4278190080;
  }
  function setPackedSplatOpacity(packedSplats, index, opacity) {
    const uA = floatToUint8(opacity);
    const i4 = index * 4;
    packedSplats[i4] = packedSplats[i4] & 16777215 | uA << 24;
  }
  const packedCenter = new Vector3();
  const packedScales = new Vector3();
  const packedQuaternion = new Quaternion();
  const packedColor = new Color();
  const packedFields = {
    center: packedCenter,
    scales: packedScales,
    quaternion: packedQuaternion,
    color: packedColor,
    opacity: 0
  };
  function unpackSplat(packedSplats, index) {
    const result = packedFields;
    const i4 = index * 4;
    const word0 = packedSplats[i4];
    const word1 = packedSplats[i4 + 1];
    const word2 = packedSplats[i4 + 2];
    const word3 = packedSplats[i4 + 3];
    result.color.set(
      (word0 & 255) / 255,
      (word0 >>> 8 & 255) / 255,
      (word0 >>> 16 & 255) / 255
    );
    result.opacity = (word0 >>> 24 & 255) / 255;
    result.center.set(
      fromHalf(word1 & 65535),
      fromHalf(word1 >>> 16 & 65535),
      fromHalf(word2 & 65535)
    );
    const uScalesX = word3 & 255;
    result.scales.x = uScalesX === 0 ? 0 : Math.exp(LN_SCALE_MIN + (uScalesX - 1) * LN_RESCALE);
    const uScalesY = word3 >>> 8 & 255;
    result.scales.y = uScalesY === 0 ? 0 : Math.exp(LN_SCALE_MIN + (uScalesY - 1) * LN_RESCALE);
    const uScalesZ = word3 >>> 16 & 255;
    result.scales.z = uScalesZ === 0 ? 0 : Math.exp(LN_SCALE_MIN + (uScalesZ - 1) * LN_RESCALE);
    const uQuat = word2 >>> 16 & 65535 | word3 >>> 8 & 16711680;
    decodeQuatOctXy88R8(uQuat, result.quaternion);
    return result;
  }
  function getTextureSize(numSplats) {
    const width = SPLAT_TEX_WIDTH;
    const height = Math.max(
      SPLAT_TEX_MIN_HEIGHT,
      Math.min(SPLAT_TEX_HEIGHT, Math.ceil(numSplats / width))
    );
    const depth = Math.ceil(numSplats / (width * height));
    const maxSplats = width * height * depth;
    return { width, height, depth, maxSplats };
  }
  function computeMaxSplats(numSplats) {
    const width = SPLAT_TEX_WIDTH;
    const height = Math.max(
      SPLAT_TEX_MIN_HEIGHT,
      Math.min(SPLAT_TEX_HEIGHT, Math.ceil(numSplats / width))
    );
    const depth = Math.ceil(numSplats / (width * height));
    return width * height * depth;
  }
  const IDENT_VERTEX_SHADER = unindent(\`
  precision highp float;

  in vec3 position;

  void main() {
    gl_Position = vec4(position.xy, 0.0, 1.0);
  }
\`);
  function encodeQuatOctXy88R8(q) {
    const qnorm = q.clone().normalize();
    if (qnorm.w < 0) {
      qnorm.set(-qnorm.x, -qnorm.y, -qnorm.z, -qnorm.w);
    }
    const theta = 2 * Math.acos(qnorm.w);
    const xyz_norm = Math.sqrt(
      qnorm.x * qnorm.x + qnorm.y * qnorm.y + qnorm.z * qnorm.z
    );
    const axis = xyz_norm < 1e-6 ? new Vector3(1, 0, 0) : new Vector3(qnorm.x, qnorm.y, qnorm.z).divideScalar(xyz_norm);
    const sum = Math.abs(axis.x) + Math.abs(axis.y) + Math.abs(axis.z);
    let p_x = axis.x / sum;
    let p_y = axis.y / sum;
    if (axis.z < 0) {
      const tmp = p_x;
      p_x = (1 - Math.abs(p_y)) * (p_x >= 0 ? 1 : -1);
      p_y = (1 - Math.abs(tmp)) * (p_y >= 0 ? 1 : -1);
    }
    const u_f = p_x * 0.5 + 0.5;
    const v_f = p_y * 0.5 + 0.5;
    const quantU = Math.round(u_f * 255);
    const quantV = Math.round(v_f * 255);
    const angleInt = Math.round(theta * (255 / Math.PI));
    return angleInt << 16 | quantV << 8 | quantU;
  }
  function decodeQuatOctXy88R8(encoded, out) {
    const quantU = encoded & 255;
    const quantV = encoded >>> 8 & 255;
    const angleInt = encoded >>> 16 & 255;
    const u_f = quantU / 255;
    const v_f = quantV / 255;
    let f_x = (u_f - 0.5) * 2;
    let f_y = (v_f - 0.5) * 2;
    const f_z = 1 - (Math.abs(f_x) + Math.abs(f_y));
    const t = Math.max(-f_z, 0);
    f_x += f_x >= 0 ? -t : t;
    f_y += f_y >= 0 ? -t : t;
    const axis = new Vector3(f_x, f_y, f_z).normalize();
    const theta = angleInt / 255 * Math.PI;
    const halfTheta = theta * 0.5;
    const s = Math.sin(halfTheta);
    const w = Math.cos(halfTheta);
    out.set(axis.x * s, axis.y * s, axis.z * s, w);
    return out;
  }
  function packSint8Bytes(b0, b1, b2, b3) {
    const clampedB0 = Math.max(-127, Math.min(127, b0 * 127));
    const clampedB1 = Math.max(-127, Math.min(127, b1 * 127));
    const clampedB2 = Math.max(-127, Math.min(127, b2 * 127));
    const clampedB3 = Math.max(-127, Math.min(127, b3 * 127));
    return clampedB0 & 255 | (clampedB1 & 255) << 8 | (clampedB2 & 255) << 16 | (clampedB3 & 255) << 24;
  }
  function encodeSh1Rgb(sh1Array, index, sh1Rgb) {
    const base = index * 2;
    for (let i2 = 0; i2 < 9; ++i2) {
      const value = Math.max(-63, Math.min(63, sh1Rgb[i2] * 63)) & 127;
      const bitStart = i2 * 7;
      const bitEnd = bitStart + 7;
      const wordStart = Math.floor(bitStart / 32);
      const bitOffset = bitStart - wordStart * 32;
      const firstWord = value << bitOffset & 4294967295;
      sh1Array[base + wordStart] |= firstWord;
      if (bitEnd > wordStart * 32 + 32) {
        const secondWord = value >>> 32 - bitOffset & 4294967295;
        sh1Array[base + wordStart + 1] |= secondWord;
      }
    }
  }
  function encodeSh2Rgb(sh2Array, index, sh2Rgb) {
    sh2Array[index * 4 + 0] = packSint8Bytes(
      sh2Rgb[0],
      sh2Rgb[1],
      sh2Rgb[2],
      sh2Rgb[3]
    );
    sh2Array[index * 4 + 1] = packSint8Bytes(
      sh2Rgb[4],
      sh2Rgb[5],
      sh2Rgb[6],
      sh2Rgb[7]
    );
    sh2Array[index * 4 + 2] = packSint8Bytes(
      sh2Rgb[8],
      sh2Rgb[9],
      sh2Rgb[10],
      sh2Rgb[11]
    );
    sh2Array[index * 4 + 3] = packSint8Bytes(
      sh2Rgb[12],
      sh2Rgb[13],
      sh2Rgb[14],
      0
    );
  }
  function encodeSh3Rgb(sh3Array, index, sh3Rgb) {
    const base = index * 4;
    for (let i2 = 0; i2 < 21; ++i2) {
      const value = Math.max(-31, Math.min(31, sh3Rgb[i2] * 31)) & 63;
      const bitStart = i2 * 6;
      const bitEnd = bitStart + 6;
      const wordStart = Math.floor(bitStart / 32);
      const bitOffset = bitStart - wordStart * 32;
      const firstWord = value << bitOffset & 4294967295;
      sh3Array[base + wordStart] |= firstWord;
      if (bitEnd > wordStart * 32 + 32) {
        const secondWord = value >>> 32 - bitOffset & 4294967295;
        sh3Array[base + wordStart + 1] |= secondWord;
      }
    }
  }
  function decompressPartialGzip(fileBytes, numBytes) {
    const chunks = [];
    let totalBytes = 0;
    let result = null;
    const gunzip = new Gunzip((data, final) => {
      chunks.push(data);
      totalBytes += data.length;
      if (final || totalBytes >= numBytes) {
        const allBytes = new Uint8Array(totalBytes);
        let offset2 = 0;
        for (const chunk of chunks) {
          allBytes.set(chunk, offset2);
          offset2 += chunk.length;
        }
        result = allBytes.slice(0, numBytes);
      }
    });
    const CHUNK_SIZE = 1024;
    let offset = 0;
    while (result == null && offset < fileBytes.length) {
      const chunk = fileBytes.slice(offset, offset + CHUNK_SIZE);
      gunzip.push(chunk, false);
      offset += CHUNK_SIZE;
    }
    if (result == null) {
      gunzip.push(new Uint8Array(), true);
      if (result == null) {
        throw new Error("Failed to decompress partial gzip");
      }
    }
    return result;
  }
  class GunzipReader {
    constructor({
      fileBytes,
      chunkBytes = 64 * 1024
    }) {
      this.fileBytes = fileBytes;
      this.chunkBytes = chunkBytes;
      this.offset = 0;
      this.chunks = [];
      this.totalBytes = 0;
      this.gunzip = new Gunzip((chunk, _final) => {
        this.chunks.push(chunk);
        this.totalBytes += chunk.length;
      });
    }
    read(numBytes) {
      while (this.totalBytes < numBytes && this.offset < this.fileBytes.length) {
        const end = Math.min(
          this.offset + this.chunkBytes,
          this.fileBytes.length
        );
        this.gunzip.push(this.fileBytes.subarray(this.offset, end), false);
        this.offset = end;
      }
      if (this.totalBytes < numBytes && this.offset >= this.fileBytes.length) {
        this.gunzip.push(new Uint8Array(0), true);
      }
      if (this.totalBytes < numBytes) {
        throw new Error(
          \`Unexpected EOF: needed \${numBytes}, got \${this.totalBytes}\`
        );
      }
      const allBytes = new Uint8Array(this.totalBytes);
      let outOffset = 0;
      for (const chunk of this.chunks) {
        allBytes.set(chunk, outOffset);
        outOffset += chunk.length;
      }
      const result = allBytes.subarray(0, numBytes);
      this.chunks = [allBytes.subarray(numBytes)];
      this.totalBytes -= numBytes;
      return result;
    }
  }
  function decodeAntiSplat(fileBytes, initNumSplats, splatCallback) {
    const numSplats = Math.floor(fileBytes.length / 32);
    if (numSplats * 32 !== fileBytes.length) {
      throw new Error("Invalid .splat file size");
    }
    initNumSplats(numSplats);
    const f32 = new Float32Array(fileBytes.buffer);
    for (let i2 = 0; i2 < numSplats; ++i2) {
      const i322 = i2 * 32;
      const i8 = i2 * 8;
      const x2 = f32[i8 + 0];
      const y = f32[i8 + 1];
      const z = f32[i8 + 2];
      const scaleX = f32[i8 + 3];
      const scaleY = f32[i8 + 4];
      const scaleZ = f32[i8 + 5];
      const r = fileBytes[i322 + 24] / 255;
      const g = fileBytes[i322 + 25] / 255;
      const b = fileBytes[i322 + 26] / 255;
      const opacity = fileBytes[i322 + 27] / 255;
      const quatW = (fileBytes[i322 + 28] - 128) / 128;
      const quatX = (fileBytes[i322 + 29] - 128) / 128;
      const quatY = (fileBytes[i322 + 30] - 128) / 128;
      const quatZ = (fileBytes[i322 + 31] - 128) / 128;
      splatCallback(
        i2,
        x2,
        y,
        z,
        scaleX,
        scaleY,
        scaleZ,
        quatX,
        quatY,
        quatZ,
        quatW,
        opacity,
        r,
        g,
        b
      );
    }
  }
  function unpackAntiSplat(fileBytes) {
    let numSplats = 0;
    let maxSplats = 0;
    let packedArray = new Uint32Array(0);
    decodeAntiSplat(
      fileBytes,
      (cbNumSplats) => {
        numSplats = cbNumSplats;
        maxSplats = computeMaxSplats(numSplats);
        packedArray = new Uint32Array(maxSplats * 4);
      },
      (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
        setPackedSplat(
          packedArray,
          index,
          x2,
          y,
          z,
          scaleX,
          scaleY,
          scaleZ,
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b
        );
      }
    );
    return { packedArray, numSplats };
  }
  const KSPLAT_COMPRESSION = {
    0: {
      bytesPerCenter: 12,
      bytesPerScale: 12,
      bytesPerRotation: 16,
      bytesPerColor: 4,
      bytesPerSphericalHarmonicsComponent: 4,
      scaleOffsetBytes: 12,
      rotationOffsetBytes: 24,
      colorOffsetBytes: 40,
      sphericalHarmonicsOffsetBytes: 44,
      scaleRange: 1
    },
    1: {
      bytesPerCenter: 6,
      bytesPerScale: 6,
      bytesPerRotation: 8,
      bytesPerColor: 4,
      bytesPerSphericalHarmonicsComponent: 2,
      scaleOffsetBytes: 6,
      rotationOffsetBytes: 12,
      colorOffsetBytes: 20,
      sphericalHarmonicsOffsetBytes: 24,
      scaleRange: 32767
    },
    2: {
      bytesPerCenter: 6,
      bytesPerScale: 6,
      bytesPerRotation: 8,
      bytesPerColor: 4,
      bytesPerSphericalHarmonicsComponent: 1,
      scaleOffsetBytes: 6,
      rotationOffsetBytes: 12,
      colorOffsetBytes: 20,
      sphericalHarmonicsOffsetBytes: 24,
      scaleRange: 32767
    }
  };
  const KSPLAT_SH_DEGREE_TO_COMPONENTS = {
    0: 0,
    1: 9,
    2: 24,
    3: 45
  };
  function decodeKsplat(fileBytes, initNumSplats, splatCallback, shCallback) {
    var _a2;
    const HEADER_BYTES = 4096;
    const SECTION_BYTES = 1024;
    let headerOffset = 0;
    const header = new DataView(fileBytes.buffer, headerOffset, HEADER_BYTES);
    headerOffset += HEADER_BYTES;
    const versionMajor = header.getUint8(0);
    const versionMinor = header.getUint8(1);
    if (versionMajor !== 0 || versionMinor < 1) {
      throw new Error(
        \`Unsupported .ksplat version: \${versionMajor}.\${versionMinor}\`
      );
    }
    const maxSectionCount = header.getUint32(4, true);
    header.getUint32(16, true);
    const compressionLevel = header.getUint16(20, true);
    if (compressionLevel < 0 || compressionLevel > 2) {
      throw new Error(\`Invalid .ksplat compression level: \${compressionLevel}\`);
    }
    header.getFloat32(36, true) || -1.5;
    header.getFloat32(40, true) || 1.5;
    let sectionBase = HEADER_BYTES + maxSectionCount * SECTION_BYTES;
    for (let section = 0; section < maxSectionCount; ++section) {
      const section2 = new DataView(fileBytes.buffer, headerOffset, SECTION_BYTES);
      headerOffset += SECTION_BYTES;
      const sectionSplatCount = section2.getUint32(0, true);
      const sectionMaxSplatCount = section2.getUint32(4, true);
      const bucketSize = section2.getUint32(8, true);
      const bucketCount = section2.getUint32(12, true);
      const bucketBlockSize = section2.getFloat32(16, true);
      const bucketStorageSizeBytes = section2.getUint16(20, true);
      const compressionScaleRange = (section2.getUint32(24, true) || ((_a2 = KSPLAT_COMPRESSION[compressionLevel]) == null ? void 0 : _a2.scaleRange)) ?? 1;
      const partiallyFilledBucketCount = section2.getUint32(36, true);
      const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;
      const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;
      const sphericalHarmonicsDegree = section2.getUint16(40, true);
      const shComponents = KSPLAT_SH_DEGREE_TO_COMPONENTS[sphericalHarmonicsDegree];
      const {
        bytesPerCenter,
        bytesPerScale,
        bytesPerRotation,
        bytesPerColor,
        bytesPerSphericalHarmonicsComponent,
        scaleOffsetBytes,
        rotationOffsetBytes,
        colorOffsetBytes,
        sphericalHarmonicsOffsetBytes
      } = KSPLAT_COMPRESSION[compressionLevel];
      const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor + shComponents * bytesPerSphericalHarmonicsComponent;
      const splatDataStorageSizeBytes = bytesPerSplat * sectionMaxSplatCount;
      const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;
      const sh1 = sphericalHarmonicsDegree >= 1 ? new Float32Array(3 * 3) : void 0;
      const sh2 = sphericalHarmonicsDegree >= 2 ? new Float32Array(5 * 3) : void 0;
      const sh3 = sphericalHarmonicsDegree >= 3 ? new Float32Array(7 * 3) : void 0;
      const compressionScaleFactor = bucketBlockSize / 2 / compressionScaleRange;
      const bucketsBase = sectionBase + bucketsMetaDataSizeBytes;
      const dataBase = sectionBase + bucketsStorageSizeBytes;
      const data = new DataView(
        fileBytes.buffer,
        dataBase,
        splatDataStorageSizeBytes
      );
      const bucketArray = new Float32Array(
        fileBytes.buffer,
        bucketsBase,
        bucketCount * 3
      );
      for (let i2 = 0; i2 < sectionSplatCount; ++i2) {
        const splatOffset = i2 * bytesPerSplat;
        const bucketIndex = Math.floor(i2 / bucketSize);
        const x2 = compressionLevel === 0 ? data.getFloat32(splatOffset + 0, true) : (data.getUint16(splatOffset + 0, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 0];
        const y = compressionLevel === 0 ? data.getFloat32(splatOffset + 4, true) : (data.getUint16(splatOffset + 2, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 1];
        const z = compressionLevel === 0 ? data.getFloat32(splatOffset + 8, true) : (data.getUint16(splatOffset + 4, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 2];
        const scaleX = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 0, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 0, true));
        const scaleY = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 4, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 2, true));
        const scaleZ = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 8, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 4, true));
        const quatW = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 0, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 0, true)
        );
        const quatX = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 4, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 2, true)
        );
        const quatY = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 8, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 4, true)
        );
        const quatZ = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 12, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 6, true)
        );
        const r = data.getUint8(splatOffset + colorOffsetBytes + 0) / 255;
        const g = data.getUint8(splatOffset + colorOffsetBytes + 1) / 255;
        const b = data.getUint8(splatOffset + colorOffsetBytes + 2) / 255;
        const opacity = data.getUint8(splatOffset + colorOffsetBytes + 3) / 255;
        splatCallback(
          i2,
          x2,
          y,
          z,
          scaleX,
          scaleY,
          scaleZ,
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b
        );
        if (sphericalHarmonicsDegree >= 1 && sh1) {
          shCallback == null ? void 0 : shCallback(i2, sh1, sh2, sh3);
        }
      }
      sectionBase += storageSizeBytes;
    }
  }
  function unpackKsplat(fileBytes) {
    var _a2;
    const HEADER_BYTES = 4096;
    const SECTION_BYTES = 1024;
    let headerOffset = 0;
    const header = new DataView(fileBytes.buffer, headerOffset, HEADER_BYTES);
    headerOffset += HEADER_BYTES;
    const versionMajor = header.getUint8(0);
    const versionMinor = header.getUint8(1);
    if (versionMajor !== 0 || versionMinor < 1) {
      throw new Error(
        \`Unsupported .ksplat version: \${versionMajor}.\${versionMinor}\`
      );
    }
    const maxSectionCount = header.getUint32(4, true);
    const splatCount = header.getUint32(16, true);
    const compressionLevel = header.getUint16(20, true);
    if (compressionLevel < 0 || compressionLevel > 2) {
      throw new Error(\`Invalid .ksplat compression level: \${compressionLevel}\`);
    }
    const minSphericalHarmonicsCoeff = header.getFloat32(36, true) || -1.5;
    const maxSphericalHarmonicsCoeff = header.getFloat32(40, true) || 1.5;
    const numSplats = splatCount;
    const maxSplats = computeMaxSplats(numSplats);
    const packedArray = new Uint32Array(maxSplats * 4);
    const extra = {};
    let sectionBase = HEADER_BYTES + maxSectionCount * SECTION_BYTES;
    for (let section = 0; section < maxSectionCount; ++section) {
      let getSh = function(splatOffset, component) {
        if (compressionLevel === 0) {
          return data.getFloat32(
            splatOffset + sphericalHarmonicsOffsetBytes + component * 4,
            true
          );
        }
        if (compressionLevel === 1) {
          return fromHalf(
            data.getUint16(
              splatOffset + sphericalHarmonicsOffsetBytes + component * 2,
              true
            )
          );
        }
        const t = data.getUint8(splatOffset + sphericalHarmonicsOffsetBytes + component) / 255;
        return minSphericalHarmonicsCoeff + t * (maxSphericalHarmonicsCoeff - minSphericalHarmonicsCoeff);
      };
      const section2 = new DataView(fileBytes.buffer, headerOffset, SECTION_BYTES);
      headerOffset += SECTION_BYTES;
      const sectionSplatCount = section2.getUint32(0, true);
      const sectionMaxSplatCount = section2.getUint32(4, true);
      const bucketSize = section2.getUint32(8, true);
      const bucketCount = section2.getUint32(12, true);
      const bucketBlockSize = section2.getFloat32(16, true);
      const bucketStorageSizeBytes = section2.getUint16(20, true);
      const compressionScaleRange = (section2.getUint32(24, true) || ((_a2 = KSPLAT_COMPRESSION[compressionLevel]) == null ? void 0 : _a2.scaleRange)) ?? 1;
      const partiallyFilledBucketCount = section2.getUint32(36, true);
      const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;
      const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;
      const sphericalHarmonicsDegree = section2.getUint16(40, true);
      const shComponents = KSPLAT_SH_DEGREE_TO_COMPONENTS[sphericalHarmonicsDegree];
      const {
        bytesPerCenter,
        bytesPerScale,
        bytesPerRotation,
        bytesPerColor,
        bytesPerSphericalHarmonicsComponent,
        scaleOffsetBytes,
        rotationOffsetBytes,
        colorOffsetBytes,
        sphericalHarmonicsOffsetBytes
      } = KSPLAT_COMPRESSION[compressionLevel];
      const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor + shComponents * bytesPerSphericalHarmonicsComponent;
      const splatDataStorageSizeBytes = bytesPerSplat * sectionMaxSplatCount;
      const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;
      const sh1Index = [0, 3, 6, 1, 4, 7, 2, 5, 8];
      const sh2Index = [
        9,
        14,
        19,
        10,
        15,
        20,
        11,
        16,
        21,
        12,
        17,
        22,
        13,
        18,
        23
      ];
      const sh3Index = [
        24,
        31,
        38,
        25,
        32,
        39,
        26,
        33,
        40,
        27,
        34,
        41,
        28,
        35,
        42,
        29,
        36,
        43,
        30,
        37,
        44
      ];
      const sh1 = sphericalHarmonicsDegree >= 1 ? new Float32Array(3 * 3) : void 0;
      const sh2 = sphericalHarmonicsDegree >= 2 ? new Float32Array(5 * 3) : void 0;
      const sh3 = sphericalHarmonicsDegree >= 3 ? new Float32Array(7 * 3) : void 0;
      const compressionScaleFactor = bucketBlockSize / 2 / compressionScaleRange;
      const bucketsBase = sectionBase + bucketsMetaDataSizeBytes;
      const dataBase = sectionBase + bucketsStorageSizeBytes;
      const data = new DataView(
        fileBytes.buffer,
        dataBase,
        splatDataStorageSizeBytes
      );
      const bucketArray = new Float32Array(
        fileBytes.buffer,
        bucketsBase,
        bucketCount * 3
      );
      for (let i2 = 0; i2 < sectionSplatCount; ++i2) {
        const splatOffset = i2 * bytesPerSplat;
        const bucketIndex = Math.floor(i2 / bucketSize);
        const x2 = compressionLevel === 0 ? data.getFloat32(splatOffset + 0, true) : (data.getUint16(splatOffset + 0, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 0];
        const y = compressionLevel === 0 ? data.getFloat32(splatOffset + 4, true) : (data.getUint16(splatOffset + 2, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 1];
        const z = compressionLevel === 0 ? data.getFloat32(splatOffset + 8, true) : (data.getUint16(splatOffset + 4, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 2];
        const scaleX = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 0, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 0, true));
        const scaleY = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 4, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 2, true));
        const scaleZ = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 8, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 4, true));
        const quatW = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 0, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 0, true)
        );
        const quatX = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 4, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 2, true)
        );
        const quatY = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 8, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 4, true)
        );
        const quatZ = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 12, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 6, true)
        );
        const r = data.getUint8(splatOffset + colorOffsetBytes + 0) / 255;
        const g = data.getUint8(splatOffset + colorOffsetBytes + 1) / 255;
        const b = data.getUint8(splatOffset + colorOffsetBytes + 2) / 255;
        const opacity = data.getUint8(splatOffset + colorOffsetBytes + 3) / 255;
        setPackedSplat(
          packedArray,
          i2,
          x2,
          y,
          z,
          scaleX,
          scaleY,
          scaleZ,
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b
        );
        if (sphericalHarmonicsDegree >= 1) {
          if (sh1) {
            if (!extra.sh1) {
              extra.sh1 = new Uint32Array(numSplats * 2);
            }
            for (const [i22, key] of sh1Index.entries()) {
              sh1[i22] = getSh(splatOffset, key);
            }
            encodeSh1Rgb(extra.sh1, i2, sh1);
          }
          if (sh2) {
            if (!extra.sh2) {
              extra.sh2 = new Uint32Array(numSplats * 4);
            }
            for (const [i22, key] of sh2Index.entries()) {
              sh2[i22] = getSh(splatOffset, key);
            }
            encodeSh2Rgb(extra.sh2, i2, sh2);
          }
          if (sh3) {
            if (!extra.sh3) {
              extra.sh3 = new Uint32Array(numSplats * 4);
            }
            for (const [i22, key] of sh3Index.entries()) {
              sh3[i22] = getSh(splatOffset, key);
            }
            encodeSh3Rgb(extra.sh3, i2, sh3);
          }
        }
      }
      sectionBase += storageSizeBytes;
    }
    return { packedArray, numSplats, extra };
  }
  const _PlyReader = class _PlyReader {
    // Create a PlyReader from a Uint8Array/ArrayBuffer, no parsing done yet
    constructor({ fileBytes }) {
      this.header = "";
      this.littleEndian = true;
      this.elements = {};
      this.comments = [];
      this.data = null;
      this.numSplats = 0;
      this.fileBytes = fileBytes instanceof ArrayBuffer ? new Uint8Array(fileBytes) : fileBytes;
    }
    // Identify and parse the PLY text header (assumed to be <64KB in size).
    // this.elements will contain all the elements in the file, typically
    // "vertex" contains the Gsplat data.
    async parseHeader() {
      const bufferStream = new ReadableStream({
        start: (controller) => {
          controller.enqueue(this.fileBytes.slice(0, 65536));
          controller.close();
        }
      });
      const decoder = bufferStream.pipeThrough(new TextDecoderStream()).getReader();
      this.header = "";
      const headerTerminator = "end_header\\n";
      while (true) {
        const { value, done } = await decoder.read();
        if (done) {
          throw new Error("Failed to read header");
        }
        this.header += value;
        const endHeader = this.header.indexOf(headerTerminator);
        if (endHeader >= 0) {
          this.header = this.header.slice(0, endHeader + headerTerminator.length);
          break;
        }
      }
      const headerLen = new TextEncoder().encode(this.header).length;
      this.data = new DataView(this.fileBytes.buffer, headerLen);
      this.elements = {};
      let curElement = null;
      this.comments = [];
      this.header.trim().split("\\n").forEach((line, lineIndex) => {
        const trimmedLine = line.trim();
        if (lineIndex === 0) {
          if (trimmedLine !== "ply") {
            throw new Error("Invalid PLY header");
          }
          return;
        }
        if (trimmedLine.length === 0) {
          return;
        }
        const fields = trimmedLine.split(" ");
        switch (fields[0]) {
          case "format":
            if (fields[1] === "binary_little_endian") {
              this.littleEndian = true;
            } else if (fields[1] === "binary_big_endian") {
              this.littleEndian = false;
            } else {
              throw new Error(\`Unsupported PLY format: \${fields[1]}\`);
            }
            if (fields[2] !== "1.0") {
              throw new Error(\`Unsupported PLY version: \${fields[2]}\`);
            }
            break;
          case "end_header":
            break;
          case "comment":
            this.comments.push(trimmedLine.slice("comment ".length));
            break;
          case "element": {
            const name = fields[1];
            curElement = {
              name,
              count: Number.parseInt(fields[2]),
              properties: {}
            };
            this.elements[name] = curElement;
            break;
          }
          case "property":
            if (curElement == null) {
              throw new Error("Property must be inside an element");
            }
            if (fields[1] === "list") {
              curElement.properties[fields[4]] = {
                isList: true,
                type: fields[3],
                countType: fields[2]
              };
            } else {
              curElement.properties[fields[2]] = {
                isList: false,
                type: fields[1]
              };
            }
            break;
        }
      });
      if (this.elements.vertex) {
        this.numSplats = this.elements.vertex.count;
      }
    }
    parseData(elementCallback) {
      let offset = 0;
      const data = this.data;
      if (data == null) {
        throw new Error("No data to parse");
      }
      for (const elementName in this.elements) {
        const element = this.elements[elementName];
        const { count, properties } = element;
        const item = {};
        const parsers = [];
        for (const [propertyName, property] of Object.entries(properties)) {
          if (!property.isList) {
            item[propertyName] = 0;
            parsers.push(() => {
              item[propertyName] = PARSE_FIELD[property.type](
                data,
                offset,
                this.littleEndian
              );
              offset += FIELD_BYTES[property.type];
            });
          } else {
            item[propertyName] = [];
            parsers.push(() => {
              const list = item[propertyName];
              list.length = PARSE_FIELD[property.countType](
                data,
                offset,
                this.littleEndian
              );
              offset += FIELD_BYTES[property.countType];
              for (let i2 = 0; i2 < list.length; i2++) {
                list[i2] = PARSE_FIELD[property.type](
                  data,
                  offset,
                  this.littleEndian
                );
                offset += FIELD_BYTES[property.type];
              }
            });
          }
        }
        const callback = elementCallback(element) ?? (() => {
        });
        for (let index = 0; index < count; index++) {
          for (const parser of parsers) {
            parser();
          }
          callback(index, item);
        }
      }
    }
    // Parse all the Gsplat data in the PLY file in go, invoking the given
    // callbacks for each Gsplat.
    parseSplats(splatCallback, shCallback) {
      if (this.elements.vertex == null) {
        throw new Error("No vertex element found");
      }
      let isSuperSplat = false;
      const ssChunks = [];
      let numSh = 0;
      let sh1Props = [];
      let sh2Props = [];
      let sh3Props = [];
      let sh1 = void 0;
      let sh2 = void 0;
      let sh3 = void 0;
      function prepareSh() {
        const num_f_rest = NUM_SH_TO_NUM_F_REST[numSh];
        sh1Props = new Array(3).fill(null).flatMap(
          (_, k) => [0, 1, 2].map((_2, d) => \`f_rest_\${k + d * num_f_rest / 3}\`)
        );
        sh2Props = new Array(5).fill(null).flatMap(
          (_, k) => [0, 1, 2].map((_2, d) => \`f_rest_\${3 + k + d * num_f_rest / 3}\`)
        );
        sh3Props = new Array(7).fill(null).flatMap(
          (_, k) => [0, 1, 2].map((_2, d) => \`f_rest_\${8 + k + d * num_f_rest / 3}\`)
        );
        sh1 = numSh >= 1 ? new Float32Array(3 * 3) : void 0;
        sh2 = numSh >= 2 ? new Float32Array(5 * 3) : void 0;
        sh3 = numSh >= 3 ? new Float32Array(7 * 3) : void 0;
      }
      function ssShCallback(index, item) {
        if (!sh1) {
          throw new Error("Missing sh1");
        }
        for (const [i2, key] of sh1Props.entries()) {
          sh1[i2] = item[key] * 8 / 255 - 4;
        }
        if (sh2) {
          for (const [i2, key] of sh2Props.entries()) {
            sh2[i2] = item[key] * 8 / 255 - 4;
          }
        }
        if (sh3) {
          for (const [i2, key] of sh3Props.entries()) {
            sh3[i2] = item[key] * 8 / 255 - 4;
          }
        }
        shCallback == null ? void 0 : shCallback(index, sh1, sh2, sh3);
      }
      function initSuperSplat(element) {
        const {
          min_x,
          min_y,
          min_z,
          max_x,
          max_y,
          max_z,
          min_scale_x,
          min_scale_y,
          min_scale_z,
          max_scale_x,
          max_scale_y,
          max_scale_z,
          min_r,
          min_g,
          min_b,
          max_r,
          max_g,
          max_b
        } = element.properties;
        if (!min_x || !min_y || !min_z || !max_x || !max_y || !max_z || !min_scale_x || !min_scale_y || !min_scale_z || !max_scale_x || !max_scale_y || !max_scale_z || !min_r || !min_g || !min_b || !max_r || !max_g || !max_b) {
          throw new Error("Missing PLY chunk properties");
        }
        isSuperSplat = true;
        return (index, item) => {
          const {
            min_x: min_x2,
            min_y: min_y2,
            min_z: min_z2,
            max_x: max_x2,
            max_y: max_y2,
            max_z: max_z2,
            min_scale_x: min_scale_x2,
            min_scale_y: min_scale_y2,
            min_scale_z: min_scale_z2,
            max_scale_x: max_scale_x2,
            max_scale_y: max_scale_y2,
            max_scale_z: max_scale_z2,
            min_r: min_r2,
            min_g: min_g2,
            min_b: min_b2,
            max_r: max_r2,
            max_g: max_g2,
            max_b: max_b2
          } = item;
          ssChunks.push({
            min_x: min_x2,
            min_y: min_y2,
            min_z: min_z2,
            max_x: max_x2,
            max_y: max_y2,
            max_z: max_z2,
            min_scale_x: min_scale_x2,
            min_scale_y: min_scale_y2,
            min_scale_z: min_scale_z2,
            max_scale_x: max_scale_x2,
            max_scale_y: max_scale_y2,
            max_scale_z: max_scale_z2,
            min_r: min_r2,
            min_g: min_g2,
            min_b: min_b2,
            max_r: max_r2,
            max_g: max_g2,
            max_b: max_b2
          });
        };
      }
      function decodeSuperSplat(element) {
        if (shCallback && element.name === "sh") {
          numSh = getNumSh(element.properties);
          prepareSh();
          return ssShCallback;
        }
        if (element.name !== "vertex") {
          return null;
        }
        const { packed_position, packed_rotation, packed_scale, packed_color } = element.properties;
        if (!packed_position || !packed_rotation || !packed_scale || !packed_color) {
          throw new Error(
            "Missing PLY properties: packed_position, packed_rotation, packed_scale, packed_color"
          );
        }
        const SQRT2 = Math.sqrt(2);
        return (index, item) => {
          const chunk = ssChunks[index >>> 8];
          if (chunk == null) {
            throw new Error("Missing PLY chunk");
          }
          const {
            min_x,
            min_y,
            min_z,
            max_x,
            max_y,
            max_z,
            min_scale_x,
            min_scale_y,
            min_scale_z,
            max_scale_x,
            max_scale_y,
            max_scale_z,
            min_r,
            min_g,
            min_b,
            max_r,
            max_g,
            max_b
          } = chunk;
          const { packed_position: packed_position2, packed_rotation: packed_rotation2, packed_scale: packed_scale2, packed_color: packed_color2 } = item;
          const x2 = (packed_position2 >>> 21 & 2047) / 2047 * (max_x - min_x) + min_x;
          const y = (packed_position2 >>> 11 & 1023) / 1023 * (max_y - min_y) + min_y;
          const z = (packed_position2 & 2047) / 2047 * (max_z - min_z) + min_z;
          const r0 = ((packed_rotation2 >>> 20 & 1023) / 1023 - 0.5) * SQRT2;
          const r1 = ((packed_rotation2 >>> 10 & 1023) / 1023 - 0.5) * SQRT2;
          const r2 = ((packed_rotation2 & 1023) / 1023 - 0.5) * SQRT2;
          const rr = Math.sqrt(Math.max(0, 1 - r0 * r0 - r1 * r1 - r2 * r2));
          const rOrder = packed_rotation2 >>> 30;
          const quatX = rOrder === 0 ? r0 : rOrder === 1 ? rr : r1;
          const quatY = rOrder <= 1 ? r1 : rOrder === 2 ? rr : r2;
          const quatZ = rOrder <= 2 ? r2 : rr;
          const quatW = rOrder === 0 ? rr : r0;
          const scaleX = Math.exp(
            (packed_scale2 >>> 21 & 2047) / 2047 * (max_scale_x - min_scale_x) + min_scale_x
          );
          const scaleY = Math.exp(
            (packed_scale2 >>> 11 & 1023) / 1023 * (max_scale_y - min_scale_y) + min_scale_y
          );
          const scaleZ = Math.exp(
            (packed_scale2 & 2047) / 2047 * (max_scale_z - min_scale_z) + min_scale_z
          );
          const r = (packed_color2 >>> 24 & 255) / 255 * (max_r - min_r) + min_r;
          const g = (packed_color2 >>> 16 & 255) / 255 * (max_g - min_g) + min_g;
          const b = (packed_color2 >>> 8 & 255) / 255 * (max_b - min_b) + min_b;
          const opacity = (packed_color2 & 255) / 255;
          splatCallback(
            index,
            x2,
            y,
            z,
            scaleX,
            scaleY,
            scaleZ,
            quatX,
            quatY,
            quatZ,
            quatW,
            opacity,
            r,
            g,
            b
          );
        };
      }
      const elementCallback = (element) => {
        if (element.name === "chunk") {
          return initSuperSplat(element);
        }
        if (isSuperSplat) {
          return decodeSuperSplat(element);
        }
        if (element.name !== "vertex") {
          return null;
        }
        const {
          x: x2,
          y,
          z,
          scale_0,
          scale_1,
          scale_2,
          rot_0,
          rot_1,
          rot_2,
          rot_3,
          opacity,
          f_dc_0,
          f_dc_1,
          f_dc_2,
          red,
          green,
          blue,
          alpha
        } = element.properties;
        if (!x2 || !y || !z) {
          throw new Error("Missing PLY properties: x, y, z");
        }
        const hasScales = scale_0 && scale_1 && scale_2;
        const hasRots = rot_0 && rot_1 && rot_2 && rot_3;
        const alphaDiv = alpha != null ? FIELD_SCALE[alpha.type] : 1;
        const redDiv = red != null ? FIELD_SCALE[red.type] : 1;
        const greenDiv = green != null ? FIELD_SCALE[green.type] : 1;
        const blueDiv = blue != null ? FIELD_SCALE[blue.type] : 1;
        numSh = getNumSh(element.properties);
        prepareSh();
        return (index, item) => {
          const scaleX = hasScales ? Math.exp(item.scale_0) : _PlyReader.defaultPointScale;
          const scaleY = hasScales ? Math.exp(item.scale_1) : _PlyReader.defaultPointScale;
          const scaleZ = hasScales ? Math.exp(item.scale_2) : _PlyReader.defaultPointScale;
          const quatX = hasRots ? item.rot_1 : 0;
          const quatY = hasRots ? item.rot_2 : 0;
          const quatZ = hasRots ? item.rot_3 : 0;
          const quatW = hasRots ? item.rot_0 : 1;
          const op = opacity != null ? 1 / (1 + Math.exp(-item.opacity)) : alpha != null ? item.alpha / alphaDiv : 1;
          const r = f_dc_0 != null ? item.f_dc_0 * SH_C0$1 + 0.5 : red != null ? item.red / redDiv : 1;
          const g = f_dc_1 != null ? item.f_dc_1 * SH_C0$1 + 0.5 : green != null ? item.green / greenDiv : 1;
          const b = f_dc_2 != null ? item.f_dc_2 * SH_C0$1 + 0.5 : blue != null ? item.blue / blueDiv : 1;
          splatCallback(
            index,
            item.x,
            item.y,
            item.z,
            scaleX,
            scaleY,
            scaleZ,
            quatX,
            quatY,
            quatZ,
            quatW,
            op,
            r,
            g,
            b
          );
          if (shCallback && sh1) {
            if (sh1) {
              for (const [i2, key] of sh1Props.entries()) {
                sh1[i2] = item[key];
              }
            }
            if (sh2) {
              for (const [i2, key] of sh2Props.entries()) {
                sh2[i2] = item[key];
              }
            }
            if (sh3) {
              for (const [i2, key] of sh3Props.entries()) {
                sh3[i2] = item[key];
              }
            }
            shCallback(index, sh1, sh2, sh3);
          }
        };
      };
      this.parseData(elementCallback);
    }
    // Inject RGBA values into original PLY file, which can be used to modify
    // the color/opacity of the Gsplats and write out the modified PLY file.
    injectRgba(rgba) {
      let offset = 0;
      const data = this.data;
      if (data == null) {
        throw new Error("No parsed data");
      }
      if (rgba.length !== this.numSplats * 4) {
        throw new Error("Invalid RGBA array length");
      }
      for (const elementName in this.elements) {
        const element = this.elements[elementName];
        const { count, properties } = element;
        const parsers = [];
        let rgbaOffset = 0;
        const isVertex = elementName === "vertex";
        if (isVertex) {
          for (const name of ["opacity", "f_dc_0", "f_dc_1", "f_dc_2"]) {
            if (!properties[name] || properties[name].type !== "float") {
              throw new Error(\`Can't injectRgba due to property: \${name}\`);
            }
          }
        }
        for (const [propertyName, property] of Object.entries(properties)) {
          if (!property.isList) {
            if (isVertex) {
              if (propertyName === "f_dc_0" || propertyName === "f_dc_1" || propertyName === "f_dc_2") {
                const component = Number.parseInt(
                  propertyName.slice("f_dc_".length)
                );
                parsers.push(() => {
                  const value = (rgba[rgbaOffset + component] / 255 - 0.5) / SH_C0$1;
                  SET_FIELD[property.type](
                    data,
                    offset,
                    this.littleEndian,
                    value
                  );
                });
              } else if (propertyName === "opacity") {
                parsers.push(() => {
                  const value = Math.max(
                    -100,
                    Math.min(
                      100,
                      -Math.log(1 / (rgba[rgbaOffset + 3] / 255) - 1)
                    )
                  );
                  SET_FIELD[property.type](
                    data,
                    offset,
                    this.littleEndian,
                    value
                  );
                });
              }
            }
            parsers.push(() => {
              offset += FIELD_BYTES[property.type];
            });
          } else {
            parsers.push(() => {
              const length = PARSE_FIELD[property.countType](
                data,
                offset,
                this.littleEndian
              );
              offset += FIELD_BYTES[property.countType];
              offset += length * FIELD_BYTES[property.type];
            });
          }
        }
        for (let index = 0; index < count; index++) {
          for (const parser of parsers) {
            parser();
          }
          if (isVertex) {
            rgbaOffset += 4;
          }
        }
      }
    }
  };
  _PlyReader.defaultPointScale = 1e-3;
  let PlyReader = _PlyReader;
  const SH_C0$1 = 0.28209479177387814;
  const PARSE_FIELD = {
    char: (data, offset, littleEndian) => {
      return data.getInt8(offset);
    },
    uchar: (data, offset, littleEndian) => {
      return data.getUint8(offset);
    },
    short: (data, offset, littleEndian) => {
      return data.getInt16(offset, littleEndian);
    },
    ushort: (data, offset, littleEndian) => {
      return data.getUint16(offset, littleEndian);
    },
    int: (data, offset, littleEndian) => {
      return data.getInt32(offset, littleEndian);
    },
    uint: (data, offset, littleEndian) => {
      return data.getUint32(offset, littleEndian);
    },
    float: (data, offset, littleEndian) => {
      return data.getFloat32(offset, littleEndian);
    },
    double: (data, offset, littleEndian) => {
      return data.getFloat64(offset, littleEndian);
    }
  };
  const SET_FIELD = {
    char: (data, offset, littleEndian, value) => {
      data.setInt8(offset, value);
    },
    uchar: (data, offset, littleEndian, value) => {
      data.setUint8(offset, value);
    },
    short: (data, offset, littleEndian, value) => {
      data.setInt16(offset, value, littleEndian);
    },
    ushort: (data, offset, littleEndian, value) => {
      data.setUint16(offset, value, littleEndian);
    },
    int: (data, offset, littleEndian, value) => {
      data.setInt32(offset, value, littleEndian);
    },
    uint: (data, offset, littleEndian, value) => {
      data.setUint32(offset, value, littleEndian);
    },
    float: (data, offset, littleEndian, value) => {
      data.setFloat32(offset, value, littleEndian);
    },
    double: (data, offset, littleEndian, value) => {
      data.setFloat64(offset, value, littleEndian);
    }
  };
  const FIELD_BYTES = {
    char: 1,
    uchar: 1,
    short: 2,
    ushort: 2,
    int: 4,
    uint: 4,
    float: 4,
    double: 8
  };
  const FIELD_SCALE = {
    char: 127,
    uchar: 255,
    short: 32767,
    ushort: 65535,
    int: 2147483647,
    uint: 4294967295,
    float: 1,
    double: 1
  };
  const NUM_F_REST_TO_NUM_SH = {
    0: 0,
    9: 1,
    24: 2,
    45: 3
  };
  const NUM_SH_TO_NUM_F_REST = {
    0: 0,
    1: 9,
    2: 24,
    3: 45
  };
  function getNumSh(properties) {
    let num_f_rest = 0;
    while (properties[\`f_rest_\${num_f_rest}\`]) {
      num_f_rest += 1;
    }
    const numSh = NUM_F_REST_TO_NUM_SH[num_f_rest];
    if (numSh == null) {
      throw new Error(\`Unsupported number of SH coefficients: \${num_f_rest}\`);
    }
    return numSh;
  }
  const Gsplat = { type: "Gsplat" };
  const TPackedSplats = { type: "PackedSplats" };
  const readPackedSplat = (packedSplats, index) => new ReadPackedSplat({ packedSplats, index });
  const readPackedSplatRange = (packedSplats, index, base, count) => new ReadPackedSplatRange({ packedSplats, index, base, count });
  const splitGsplat = (gsplat) => new SplitGsplat({ gsplat });
  const combineGsplat = ({
    gsplat,
    flags,
    index,
    center,
    scales,
    quaternion,
    rgba,
    rgb,
    opacity,
    x: x2,
    y,
    z,
    r,
    g,
    b
  }) => {
    return new CombineGsplat({
      gsplat,
      flags,
      index,
      center,
      scales,
      quaternion,
      rgba,
      rgb,
      opacity,
      x: x2,
      y,
      z,
      r,
      g,
      b
    });
  };
  const transformGsplat = (gsplat, {
    scale,
    rotate,
    translate,
    recolor
  }) => {
    return new TransformGsplat({ gsplat, scale, rotate, translate, recolor });
  };
  const defineGsplat = unindent(\`
  struct Gsplat {
    vec3 center;
    uint flags;
    vec3 scales;
    int index;
    vec4 quaternion;
    vec4 rgba;
  };
  const uint GSPLAT_FLAG_ACTIVE = 1u << 0u;

  bool isGsplatActive(uint flags) {
    return (flags & GSPLAT_FLAG_ACTIVE) != 0u;
  }
\`);
  const definePackedSplats = unindent(\`
  struct PackedSplats {
    usampler2DArray texture;
    int numSplats;
  };
\`);
  const defineReadPackedSplat = unindent(\`
  bool readPackedSplat(usampler2DArray texture, int numSplats, int index, out Gsplat gsplat) {
    if ((index >= 0) && (index < numSplats)) {
      uvec4 packed = texelFetch(texture, splatTexCoord(index), 0);
      unpackSplat(packed, gsplat.center, gsplat.scales, gsplat.quaternion, gsplat.rgba);
      return true;
    } else {
      return false;
    }
  }
\`);
  class ReadPackedSplat extends Dyno {
    constructor({
      packedSplats,
      index
    }) {
      super({
        inTypes: { packedSplats: TPackedSplats, index: "int" },
        outTypes: { gsplat: Gsplat },
        inputs: { packedSplats, index },
        globals: () => [defineGsplat, definePackedSplats, defineReadPackedSplat],
        statements: ({ inputs, outputs }) => {
          const { gsplat } = outputs;
          if (!gsplat) {
            return [];
          }
          const { packedSplats: packedSplats2, index: index2 } = inputs;
          let statements;
          if (packedSplats2 && index2) {
            statements = unindentLines(\`
            if (readPackedSplat(\${packedSplats2}.texture, \${packedSplats2}.numSplats, \${index2}, \${gsplat})) {
              bool zeroSize = all(equal(\${gsplat}.scales, vec3(0.0, 0.0, 0.0)));
              \${gsplat}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
            } else {
              \${gsplat}.flags = 0u;
            }
          \`);
          } else {
            statements = [\`\${gsplat}.flags = 0u;\`];
          }
          statements.push(\`\${gsplat}.index = \${index2 ?? "0"};\`);
          return statements;
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "gsplat");
    }
  }
  class ReadPackedSplatRange extends Dyno {
    constructor({
      packedSplats,
      index,
      base,
      count
    }) {
      super({
        inTypes: {
          packedSplats: TPackedSplats,
          index: "int",
          base: "int",
          count: "int"
        },
        outTypes: { gsplat: Gsplat },
        inputs: { packedSplats, index, base, count },
        globals: () => [defineGsplat, definePackedSplats, defineReadPackedSplat],
        statements: ({ inputs, outputs }) => {
          const { gsplat } = outputs;
          if (!gsplat) {
            return [];
          }
          const { packedSplats: packedSplats2, index: index2, base: base2, count: count2 } = inputs;
          let statements;
          if (packedSplats2 && index2 && base2 && count2) {
            statements = unindentLines(\`
            \${gsplat}.flags = 0u;
            if ((\${index2} >= \${base2}) && (\${index2} < (\${base2} + \${count2}))) {
              if (readPackedSplat(\${packedSplats2}.texture, \${packedSplats2}.numSplats, \${index2}, \${gsplat})) {
                bool zeroSize = all(equal(\${gsplat}.scales, vec3(0.0, 0.0, 0.0)));
                \${gsplat}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
              }
            }
          \`);
          } else {
            statements = [\`\${gsplat}.flags = 0u;\`];
          }
          statements.push(\`\${gsplat}.index = \${index2 ?? "0"};\`);
          return statements;
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "gsplat");
    }
  }
  class SplitGsplat extends Dyno {
    constructor({ gsplat }) {
      super({
        inTypes: { gsplat: Gsplat },
        outTypes: {
          flags: "uint",
          active: "bool",
          index: "int",
          center: "vec3",
          scales: "vec3",
          quaternion: "vec4",
          rgba: "vec4",
          rgb: "vec3",
          opacity: "float",
          x: "float",
          y: "float",
          z: "float",
          r: "float",
          g: "float",
          b: "float"
        },
        inputs: { gsplat },
        globals: () => [defineGsplat],
        statements: ({ inputs, outputs }) => {
          const { gsplat: gsplat2 } = inputs;
          const {
            flags,
            active,
            index,
            center,
            scales,
            quaternion,
            rgba,
            rgb,
            opacity,
            x: x2,
            y,
            z,
            r,
            g,
            b
          } = outputs;
          return [
            !flags ? null : \`\${flags} = \${gsplat2 ? \`\${gsplat2}.flags\` : "0u"};\`,
            !active ? null : \`\${active} = isGsplatActive(\${gsplat2 ? \`\${gsplat2}.flags\` : "0u"});\`,
            !index ? null : \`\${index} = \${gsplat2 ? \`\${gsplat2}.index\` : "0"};\`,
            !center ? null : \`\${center} = \${gsplat2 ? \`\${gsplat2}.center\` : "vec3(0.0, 0.0, 0.0)"};\`,
            !scales ? null : \`\${scales} = \${gsplat2 ? \`\${gsplat2}.scales\` : "vec3(0.0, 0.0, 0.0)"};\`,
            !quaternion ? null : \`\${quaternion} = \${gsplat2 ? \`\${gsplat2}.quaternion\` : "vec4(0.0, 0.0, 0.0, 1.0)"};\`,
            !rgba ? null : \`\${rgba} = \${gsplat2 ? \`\${gsplat2}.rgba\` : "vec4(0.0, 0.0, 0.0, 0.0)"};\`,
            !rgb ? null : \`\${rgb} = \${gsplat2 ? \`\${gsplat2}.rgba.rgb\` : "vec3(0.0, 0.0, 0.0)"};\`,
            !opacity ? null : \`\${opacity} = \${gsplat2 ? \`\${gsplat2}.rgba.a\` : "0.0"};\`,
            !x2 ? null : \`\${x2} = \${gsplat2 ? \`\${gsplat2}.center.x\` : "0.0"};\`,
            !y ? null : \`\${y} = \${gsplat2 ? \`\${gsplat2}.center.y\` : "0.0"};\`,
            !z ? null : \`\${z} = \${gsplat2 ? \`\${gsplat2}.center.z\` : "0.0"};\`,
            !r ? null : \`\${r} = \${gsplat2 ? \`\${gsplat2}.rgba.r\` : "0.0"};\`,
            !g ? null : \`\${g} = \${gsplat2 ? \`\${gsplat2}.rgba.g\` : "0.0"};\`,
            !b ? null : \`\${b} = \${gsplat2 ? \`\${gsplat2}.rgba.b\` : "0.0"};\`
          ].filter(Boolean);
        }
      });
    }
  }
  class CombineGsplat extends Dyno {
    constructor({
      gsplat,
      flags,
      index,
      center,
      scales,
      quaternion,
      rgba,
      rgb,
      opacity,
      x: x2,
      y,
      z,
      r,
      g,
      b
    }) {
      super({
        inTypes: {
          gsplat: Gsplat,
          flags: "uint",
          index: "int",
          center: "vec3",
          scales: "vec3",
          quaternion: "vec4",
          rgba: "vec4",
          rgb: "vec3",
          opacity: "float",
          x: "float",
          y: "float",
          z: "float",
          r: "float",
          g: "float",
          b: "float"
        },
        outTypes: { gsplat: Gsplat },
        inputs: {
          gsplat,
          flags,
          index,
          center,
          scales,
          quaternion,
          rgba,
          rgb,
          opacity,
          x: x2,
          y,
          z,
          r,
          g,
          b
        },
        globals: () => [defineGsplat],
        statements: ({ inputs, outputs }) => {
          const { gsplat: outGsplat } = outputs;
          if (!outGsplat) {
            return [];
          }
          const {
            gsplat: gsplat2,
            flags: flags2,
            index: index2,
            center: center2,
            scales: scales2,
            quaternion: quaternion2,
            rgba: rgba2,
            rgb: rgb2,
            opacity: opacity2,
            x: x22,
            y: y2,
            z: z2,
            r: r2,
            g: g2,
            b: b2
          } = inputs;
          return [
            \`\${outGsplat}.flags = \${flags2 ?? (gsplat2 ? \`\${gsplat2}.flags\` : "0u")};\`,
            \`\${outGsplat}.index = \${index2 ?? (gsplat2 ? \`\${gsplat2}.index\` : "0")};\`,
            \`\${outGsplat}.center = \${center2 ?? (gsplat2 ? \`\${gsplat2}.center\` : "vec3(0.0, 0.0, 0.0)")};\`,
            \`\${outGsplat}.scales = \${scales2 ?? (gsplat2 ? \`\${gsplat2}.scales\` : "vec3(0.0, 0.0, 0.0)")};\`,
            \`\${outGsplat}.quaternion = \${quaternion2 ?? (gsplat2 ? \`\${gsplat2}.quaternion\` : "vec4(0.0, 0.0, 0.0, 1.0)")};\`,
            \`\${outGsplat}.rgba = \${rgba2 ?? (gsplat2 ? \`\${gsplat2}.rgba\` : "vec4(0.0, 0.0, 0.0, 0.0)")};\`,
            !rgb2 ? null : \`\${outGsplat}.rgba.rgb = \${rgb2};\`,
            !opacity2 ? null : \`\${outGsplat}.rgba.a = \${opacity2};\`,
            !x22 ? null : \`\${outGsplat}.center.x = \${x22};\`,
            !y2 ? null : \`\${outGsplat}.center.y = \${y2};\`,
            !z2 ? null : \`\${outGsplat}.center.z = \${z2};\`,
            !r2 ? null : \`\${outGsplat}.rgba.r = \${r2};\`,
            !g2 ? null : \`\${outGsplat}.rgba.g = \${g2};\`,
            !b2 ? null : \`\${outGsplat}.rgba.b = \${b2};\`
          ].filter(Boolean);
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "gsplat");
    }
  }
  unindent(\`
  vec3 gsplatNormal(vec3 scales, vec4 quaternion) {
    float minScale = min(scales.x, min(scales.y, scales.z));
    vec3 normal;
    if (scales.z == minScale) {
      normal = vec3(0.0, 0.0, 1.0);
    } else if (scales.y == minScale) {
      normal = vec3(0.0, 1.0, 0.0);
    } else {
      normal = vec3(1.0, 0.0, 0.0);
    }
    return quatVec(quaternion, normal);
  }
\`);
  class TransformGsplat extends Dyno {
    constructor({
      gsplat,
      scale,
      rotate,
      translate,
      recolor
    }) {
      super({
        inTypes: {
          gsplat: Gsplat,
          scale: "float",
          rotate: "vec4",
          translate: "vec3",
          recolor: "vec4"
        },
        outTypes: { gsplat: Gsplat },
        inputs: { gsplat, scale, rotate, translate, recolor },
        globals: () => [defineGsplat],
        statements: ({ inputs, outputs, compile }) => {
          const { gsplat: gsplat2 } = outputs;
          if (!gsplat2 || !inputs.gsplat) {
            return [];
          }
          const { scale: scale2, rotate: rotate2, translate: translate2, recolor: recolor2 } = inputs;
          const indent = compile.indent;
          const statements = [
            \`\${gsplat2} = \${inputs.gsplat};\`,
            \`if (isGsplatActive(\${gsplat2}.flags)) {\`,
            scale2 ? \`\${indent}\${gsplat2}.center *= \${scale2};\` : null,
            rotate2 ? \`\${indent}\${gsplat2}.center = quatVec(\${rotate2}, \${gsplat2}.center);\` : null,
            translate2 ? \`\${indent}\${gsplat2}.center += \${translate2};\` : null,
            scale2 ? \`\${indent}\${gsplat2}.scales *= \${scale2};\` : null,
            rotate2 ? \`\${indent}\${gsplat2}.quaternion = quatQuat(\${rotate2}, \${gsplat2}.quaternion);\` : null,
            recolor2 ? \`\${indent}\${gsplat2}.rgba *= \${recolor2};\` : null,
            "}"
          ].filter(Boolean);
          return statements;
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "gsplat");
    }
  }
  const outputPackedSplat = (gsplat) => new OutputPackedSplat({ gsplat });
  class OutputPackedSplat extends Dyno {
    constructor({ gsplat }) {
      super({
        inTypes: { gsplat: Gsplat },
        inputs: { gsplat },
        globals: () => [defineGsplat],
        statements: ({ inputs, outputs }) => {
          const { output } = outputs;
          if (!output) {
            return [];
          }
          const { gsplat: gsplat2 } = inputs;
          if (gsplat2) {
            return unindentLines(\`
            if (isGsplatActive(\${gsplat2}.flags)) {
              \${output} = packSplat(\${gsplat2}.center, \${gsplat2}.scales, \${gsplat2}.quaternion, \${gsplat2}.rgba);
            } else {
              \${output} = uvec4(0u, 0u, 0u, 0u);
            }
          \`);
          }
          return [\`\${output} = uvec4(0u, 0u, 0u, 0u);\`];
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "output");
    }
  }
  class OutputRgba8 extends Dyno {
    constructor({ rgba8 }) {
      super({
        inTypes: { rgba8: "vec4" },
        inputs: { rgba8 },
        statements: ({ inputs, outputs }) => [
          \`target = \${inputs.rgba8 ?? "vec4(0.0, 0.0, 0.0, 0.0)"};\`
        ]
      });
    }
    dynoOut() {
      return new DynoOutput(this, "rgba8");
    }
  }
  class DynoUniform extends Dyno {
    constructor({
      key,
      type,
      count,
      value,
      update,
      globals
    }) {
      key = key ?? "value";
      super({
        outTypes: { [key]: type },
        update: () => {
          if (update) {
            const value2 = update(this.value);
            if (value2 !== void 0) {
              this.value = value2;
            }
          }
          this.uniform.value = this.value;
        },
        generate: ({ inputs, outputs }) => {
          const allGlobals = (globals == null ? void 0 : globals({ inputs, outputs })) ?? [];
          const uniforms = {};
          const name = outputs[key];
          if (name) {
            allGlobals.push(\`uniform \${dynoDeclare(name, type, count)};\`);
            uniforms[name] = this.uniform;
          }
          return { globals: allGlobals, uniforms };
        }
      });
      this.type = type;
      this.count = count;
      this.value = value;
      this.uniform = { value };
      this.outKey = key;
    }
    dynoOut() {
      return new DynoOutput(this, this.outKey);
    }
  }
  class DynoInt extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "int", value, update });
    }
  }
  class DynoFloat extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "float", value, update });
    }
  }
  class DynoVec3 extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "vec3", value, update });
    }
  }
  class DynoVec4 extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "vec4", value, update });
    }
  }
  class DynoUsampler2DArray extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "usampler2DArray", value, update });
    }
  }
  class DynoProgram {
    constructor({
      graph,
      inputs,
      outputs,
      template
    }) {
      this.graph = graph;
      this.template = template;
      this.inputs = inputs ?? {};
      this.outputs = outputs ?? {};
      const compile = new Compilation({ indent: this.template.indent });
      for (const key in this.outputs) {
        if (this.outputs[key]) {
          compile.declares.add(this.outputs[key]);
        }
      }
      const statements = graph.compile({
        inputs: this.inputs,
        outputs: this.outputs,
        compile
      });
      this.shader = template.generate({ globals: compile.globals, statements });
      this.uniforms = compile.uniforms;
      this.updaters = compile.updaters;
    }
    prepareMaterial() {
      return getMaterial(this);
    }
    update() {
      for (const updater of this.updaters) {
        updater();
      }
    }
  }
  class DynoProgramTemplate {
    constructor(template) {
      const globals = template.match(/^([ \\t]*)\\{\\{\\s*GLOBALS\\s*\\}\\}/m);
      const statements = template.match(/^([ \\t]*)\\{\\{\\s*STATEMENTS\\s*\\}\\}/m);
      if (!globals || !statements) {
        throw new Error(
          "Template must contain {{ GLOBALS }} and {{ STATEMENTS }}"
        );
      }
      this.before = template.substring(0, globals.index);
      this.between = template.substring(
        globals.index + globals[0].length,
        statements.index
      );
      this.after = template.substring(
        statements.index + statements[0].length
      );
      this.indent = statements[1];
    }
    generate({
      globals,
      statements
    }) {
      return this.before + Array.from(globals).join("\\n\\n") + this.between + statements.map((s) => this.indent + s).join("\\n") + this.after;
    }
  }
  const programMaterial = /* @__PURE__ */ new Map();
  function getMaterial(program) {
    let material = programMaterial.get(program);
    if (material) {
      return material;
    }
    material = new RawShaderMaterial({
      glslVersion: GLSL3,
      vertexShader: IDENT_VERTEX_SHADER,
      fragmentShader: program.shader,
      uniforms: program.uniforms
    });
    programMaterial.set(program, material);
    return material;
  }
  function addOutputType(a, b, operation = "add") {
    const error = () => {
      throw new Error(\`Invalid \${operation} types: \${a}, \${b}\`);
    };
    if (a === b) return a;
    if (a === "int") {
      if (isIntType(b)) return b;
      error();
    }
    if (b === "int") {
      if (isIntType(a)) return a;
      error();
    }
    if (a === "uint") {
      if (isUintType(b)) return b;
      error();
    }
    if (b === "uint") {
      if (isUintType(a)) return a;
      error();
    }
    if (a === "float") {
      if (isAllFloatType(b)) return b;
      error();
    }
    if (b === "float") {
      if (isAllFloatType(a)) return a;
      error();
    }
    throw new Error(\`Invalid \${operation} types: \${a}, \${b}\`);
  }
  function subOutputType(a, b) {
    return addOutputType(a, b, "sub");
  }
  function mulOutputType(a, b) {
    const error = () => {
      throw new Error(\`Invalid mul types: \${a}, \${b}\`);
    };
    const result = (value) => value;
    if (a === "int") {
      if (isIntType(b)) return result(b);
      error();
    }
    if (b === "int") {
      if (isIntType(a)) return result(a);
      error();
    }
    if (a === "uint") {
      if (isUintType(b)) return result(b);
      error();
    }
    if (b === "uint") {
      if (isUintType(a)) return result(a);
      error();
    }
    if (a === "float") {
      if (isAllFloatType(b)) return result(b);
      error();
    }
    if (b === "float") {
      if (isAllFloatType(a)) return result(a);
      error();
    }
    if (isIntType(a) || isUintType(a) || isIntType(b) || isUintType(b)) {
      if (a === b) return result(a);
      error();
    }
    if (a === "vec2") {
      if (b === "vec2" || isMat2(b)) return result("vec2");
      if (b === "mat3x2") return result("vec3");
      if (b === "mat4x2") return result("vec4");
      error();
    }
    if (a === "vec3") {
      if (b === "mat2x3") return result("vec2");
      if (b === "vec3" || isMat3(b)) return result("vec3");
      if (b === "mat4x3") return result("vec4");
      error();
    }
    if (a === "vec4") {
      if (b === "mat2x4") return result("vec2");
      if (b === "mat3x4") return result("vec3");
      if (b === "vec4" || isMat4(b)) return result("vec4");
      error();
    }
    if (b === "vec2") {
      if (isMat2(a)) return result("vec2");
      if (a === "mat2x3") return result("vec3");
      if (a === "mat2x4") return result("vec4");
      error();
    }
    if (b === "vec3") {
      if (a === "mat3x2") return result("vec2");
      if (isMat3(a)) return result("vec3");
      if (a === "mat3x4") return result("vec4");
      error();
    }
    if (b === "vec4") {
      if (a === "mat4x2") return result("vec2");
      if (a === "mat4x3") return result("vec3");
      if (isMat4(a)) return result("vec4");
      error();
    }
    if (isMat2(a)) {
      if (isMat2(b)) return result("mat2");
      if (b === "mat3x2") return result("mat3x2");
      if (b === "mat4x2") return result("mat4x2");
      error();
    }
    if (a === "mat2x3") {
      if (isMat2(b)) return result("mat2x3");
      if (b === "mat3x2") return result("mat3");
      if (b === "mat4x2") return result("mat4x3");
      error();
    }
    if (a === "mat2x4") {
      if (isMat2(b)) return result("mat2x4");
      if (b === "mat3x2") return result("mat3x4");
      if (b === "mat4x2") return result("mat4");
      error();
    }
    if (a === "mat3x2") {
      if (b === "mat2x3") return result("mat2");
      if (isMat3(b)) return result("mat3x2");
      if (b === "mat4x3") return result("mat4x2");
      error();
    }
    if (isMat3(a)) {
      if (b === "mat2x3") return result("mat2x3");
      if (isMat3(b)) return result("mat3");
      if (b === "mat4x3") return result("mat4x3");
      error();
    }
    if (a === "mat3x4") {
      if (b === "mat2x3") return result("mat2x4");
      if (isMat3(b)) return result("mat3x4");
      if (b === "mat4x3") return result("mat4");
      error();
    }
    if (a === "mat4x2") {
      if (b === "mat2x4") return result("mat2");
      if (b === "mat3x4") return result("mat3x2");
      if (isMat4(b)) return result("mat4x2");
      error();
    }
    if (a === "mat4x3") {
      if (b === "mat2x4") return result("mat2x3");
      if (b === "mat3x4") return result("mat3");
      if (isMat4(b)) return result("mat4x3");
      error();
    }
    if (isMat4(a)) {
      if (b === "mat2x4") return result("mat2x4");
      if (b === "mat3x4") return result("mat3x4");
      if (isMat4(b)) return result("mat4");
      error();
    }
    throw new Error(\`Invalid mul types: \${a}, \${b}\`);
  }
  const add = (a, b) => new Add({ a, b });
  const sub = (a, b) => new Sub({ a, b });
  const mul = (a, b) => new Mul({ a, b });
  class Add extends BinaryOp {
    constructor({ a, b }) {
      super({ a, b, outKey: "sum", outTypeFunc: addOutputType });
      this.statements = ({ inputs, outputs }) => {
        return [\`\${outputs.sum} = \${inputs.a} + \${inputs.b};\`];
      };
    }
  }
  class Sub extends BinaryOp {
    constructor({ a, b }) {
      super({ a, b, outKey: "difference", outTypeFunc: subOutputType });
      this.statements = ({ inputs, outputs }) => {
        return [\`\${outputs.difference} = \${inputs.a} - \${inputs.b};\`];
      };
    }
  }
  class Mul extends BinaryOp {
    constructor({ a, b }) {
      super({ a, b, outKey: "product", outTypeFunc: mulOutputType });
      this.statements = ({ inputs, outputs }) => {
        return [\`\${outputs.product} = \${inputs.a} * \${inputs.b};\`];
      };
    }
  }
  const normalize = (a) => new Normalize({ a });
  const extendVec = (a, b) => new ExtendVec({ a, b });
  class Normalize extends UnaryOp {
    constructor({ a }) {
      super({ a, outTypeFunc: (aType) => aType, outKey: "normalize" });
      this.statements = ({ inputs, outputs }) => [
        \`\${outputs.normalize} = normalize(\${inputs.a});\`
      ];
    }
  }
  function extendVecOutputType(type) {
    if (type === "float") return "vec2";
    if (type === "vec2") return "vec3";
    if (type === "vec3") return "vec4";
    throw new Error("Invalid type");
  }
  class ExtendVec extends BinaryOp {
    constructor({ a, b }) {
      const type = valType(a);
      const outType = extendVecOutputType(type);
      super({ a, b, outKey: "extend", outTypeFunc: () => outType });
      this.statements = ({ inputs, outputs }) => [
        \`\${outputs.extend} = \${outType}(\${inputs.a}, \${inputs.b});\`
      ];
    }
  }
  const transformPos = (position, {
    scale,
    scales,
    rotate,
    translate
  }) => {
    return new TransformPosition({ position, scale, scales, rotate, translate }).outputs.position;
  };
  const transformDir = (dir, {
    scale,
    scales,
    rotate
  }) => {
    return new TransformDir({ dir, scale, scales, rotate }).outputs.dir;
  };
  class TransformPosition extends Dyno {
    constructor({
      position,
      scale,
      scales,
      rotate,
      translate
    }) {
      super({
        inTypes: {
          position: "vec3",
          scale: "float",
          scales: "vec3",
          rotate: "vec4",
          translate: "vec3"
        },
        outTypes: { position: "vec3" },
        inputs: { position, scale, scales, rotate, translate },
        statements: ({ inputs, outputs }) => {
          const { position: position2 } = outputs;
          if (!position2) {
            return [];
          }
          const { scale: scale2, scales: scales2, rotate: rotate2, translate: translate2 } = inputs;
          return [
            \`\${position2} = \${inputs.position ?? "vec3(0.0, 0.0, 0.0)"};\`,
            !scale2 ? null : \`\${position2} *= \${scale2};\`,
            !scales2 ? null : \`\${position2} *= \${scales2};\`,
            !rotate2 ? null : \`\${position2} = quatVec(\${rotate2}, \${position2});\`,
            !translate2 ? null : \`\${position2} += \${translate2};\`
          ].filter(Boolean);
        }
      });
    }
  }
  class TransformDir extends Dyno {
    constructor({
      dir,
      scale,
      scales,
      rotate
    }) {
      super({
        inTypes: { dir: "vec3", scale: "float", scales: "vec3", rotate: "vec4" },
        outTypes: { dir: "vec3" },
        inputs: { dir, scale, scales, rotate },
        statements: ({ inputs, outputs }) => {
          const { dir: dir2 } = outputs;
          if (!dir2) {
            return [];
          }
          const { scale: scale2, scales: scales2, rotate: rotate2 } = inputs;
          return [
            \`\${dir2} = \${inputs.dir ?? "vec3(0.0, 0.0, 0.0)"};\`,
            !scale2 ? null : \`\${dir2} *= \${scale2};\`,
            !scales2 ? null : \`\${dir2} *= \${scales2};\`,
            !rotate2 ? null : \`\${dir2} = quatVec(\${rotate2}, \${dir2});\`
          ].filter(Boolean);
        }
      });
    }
  }
  var computeUvec4_default = "precision highp float;\\nprecision highp int;\\nprecision highp sampler2D;\\nprecision highp usampler2D;\\nprecision highp isampler2D;\\nprecision highp sampler2DArray;\\nprecision highp usampler2DArray;\\nprecision highp isampler2DArray;\\nprecision highp sampler3D;\\nprecision highp usampler3D;\\nprecision highp isampler3D;\\n\\n#include <splatDefines>\\n\\nuniform uint targetLayer;\\nuniform int targetBase;\\nuniform int targetCount;\\n\\nout uvec4 target;\\n\\n{{ GLOBALS }}\\n\\nvoid produceSplat(int index) {\\n    {{ STATEMENTS }}\\n}\\n\\nvoid main() {\\n    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);\\n    int index = targetIndex - targetBase;\\n\\n    if ((index >= 0) && (index < targetCount)) {\\n        produceSplat(index);\\n    } else {\\n        target = uvec4(0u, 0u, 0u, 0u);\\n    }\\n}";
  const _PackedSplats = class _PackedSplats {
    constructor(options = {}) {
      this.maxSplats = 0;
      this.numSplats = 0;
      this.packedArray = null;
      this.isInitialized = false;
      this.target = null;
      this.source = null;
      this.needsUpdate = true;
      this.extra = {};
      this.dyno = new DynoPackedSplats({ packedSplats: this });
      this.initialized = Promise.resolve(this);
      this.reinitialize(options);
    }
    reinitialize(options) {
      this.isInitialized = false;
      if (options.url || options.fileBytes || options.construct) {
        this.initialized = this.asyncInitialize(options).then(() => {
          this.isInitialized = true;
          return this;
        });
      } else {
        this.initialize(options);
        this.isInitialized = true;
        this.initialized = Promise.resolve(this);
      }
    }
    initialize(options) {
      if (options.packedArray) {
        this.packedArray = options.packedArray;
        this.maxSplats = Math.floor(this.packedArray.length / 4);
        this.maxSplats = Math.floor(this.maxSplats / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
        this.numSplats = Math.min(
          this.maxSplats,
          options.numSplats ?? Number.POSITIVE_INFINITY
        );
      } else {
        this.maxSplats = options.maxSplats ?? 0;
        this.numSplats = 0;
      }
      this.extra = options.extra ?? {};
    }
    async asyncInitialize(options) {
      let { url, fileBytes, construct } = options;
      if (url) {
        fileBytes = await fetch(url).then(async (response) => {
          if (!response.ok) {
            throw new Error(
              \`\${response.status} "\${response.statusText}" fetching URL: \${url}\`
            );
          }
          const arrayBuffer = await response.arrayBuffer();
          return arrayBuffer;
        });
      }
      if (fileBytes) {
        const unpacked = await unpackSplats({
          input: fileBytes,
          fileType: options.fileType,
          pathOrUrl: options.fileName ?? url
        });
        this.initialize(unpacked);
      }
      if (construct) {
        const maybePromise = construct(this);
        if (maybePromise instanceof Promise) {
          await maybePromise;
        }
      }
    }
    // Call this when you are finished with the PackedSplats and want to free
    // any buffers it holds.
    dispose() {
      if (this.target) {
        this.target.dispose();
        this.target = null;
      }
      if (this.source) {
        this.source.dispose();
        this.source = null;
      }
    }
    // Ensures that this.packedArray can fit numSplats Gsplats. If it's too small,
    // resize exponentially and copy over the original data.
    //
    // Typically you don't need to call this, because calling this.setSplat(index, ...)
    // and this.pushSplat(...) will automatically call ensureSplats() so we have
    // enough splats.
    ensureSplats(numSplats) {
      const targetSize = numSplats <= this.maxSplats ? this.maxSplats : (
        // Grow exponentially to avoid frequent reallocations
        Math.max(numSplats, 2 * this.maxSplats)
      );
      const currentSize = !this.packedArray ? 0 : this.packedArray.length / 4;
      if (!this.packedArray || targetSize > currentSize) {
        this.maxSplats = getTextureSize(targetSize).maxSplats;
        const newArray = new Uint32Array(this.maxSplats * 4);
        if (this.packedArray) {
          newArray.set(this.packedArray);
        }
        this.packedArray = newArray;
      }
      return this.packedArray;
    }
    // Ensure the extra array for the given level is large enough to hold numSplats
    ensureSplatsSh(level, numSplats) {
      let wordsPerSplat;
      let key;
      if (level === 0) {
        return this.ensureSplats(numSplats);
      }
      if (level === 1) {
        wordsPerSplat = 2;
        key = "sh1";
      } else if (level === 2) {
        wordsPerSplat = 4;
        key = "sh2";
      } else if (level === 3) {
        wordsPerSplat = 4;
        key = "sh3";
      } else {
        throw new Error(\`Invalid level: \${level}\`);
      }
      let maxSplats = !this.extra[key] ? 0 : this.extra[key].length / wordsPerSplat;
      const targetSize = numSplats <= maxSplats ? maxSplats : Math.max(numSplats, 2 * maxSplats);
      if (!this.extra[key] || targetSize > maxSplats) {
        maxSplats = getTextureSize(targetSize).maxSplats;
        const newArray = new Uint32Array(maxSplats * wordsPerSplat);
        if (this.extra[key]) {
          newArray.set(this.extra[key]);
        }
        this.extra[key] = newArray;
      }
      return this.extra[key];
    }
    // Unpack the 16-byte Gsplat data at index into the Three.js components
    // center: THREE.Vector3, scales: THREE.Vector3, quaternion: THREE.Quaternion,
    // opacity: number 0..1, color: THREE.Color 0..1.
    getSplat(index) {
      if (!this.packedArray || index >= this.numSplats) {
        throw new Error("Invalid index");
      }
      return unpackSplat(this.packedArray, index);
    }
    // Set all PackedSplat components at index with the provided Gsplat attributes
    // (can be the same objects returned by getSplat). Ensures there is capacity
    // for at least index+1 Gsplats.
    setSplat(index, center, scales, quaternion, opacity, color) {
      const packedSplats = this.ensureSplats(index + 1);
      setPackedSplat(
        packedSplats,
        index,
        center.x,
        center.y,
        center.z,
        scales.x,
        scales.y,
        scales.z,
        quaternion.x,
        quaternion.y,
        quaternion.z,
        quaternion.w,
        opacity,
        color.r,
        color.g,
        color.b
      );
      this.numSplats = Math.max(this.numSplats, index + 1);
    }
    // Effectively calls this.setSplat(this.numSplats++, center, ...), useful on
    // construction where you just want to iterate and create a collection of Gsplats.
    pushSplat(center, scales, quaternion, opacity, color) {
      const packedSplats = this.ensureSplats(this.numSplats + 1);
      setPackedSplat(
        packedSplats,
        this.numSplats,
        center.x,
        center.y,
        center.z,
        scales.x,
        scales.y,
        scales.z,
        quaternion.x,
        quaternion.y,
        quaternion.z,
        quaternion.w,
        opacity,
        color.r,
        color.g,
        color.b
      );
      ++this.numSplats;
    }
    // Iterate over Gsplats index 0..=(this.numSplats-1), unpack each Gsplat
    // and invoke the callback function with the Gsplat attributes.
    forEachSplat(callback) {
      if (!this.packedArray || !this.numSplats) {
        return;
      }
      for (let i2 = 0; i2 < this.numSplats; ++i2) {
        const unpacked = unpackSplat(this.packedArray, i2);
        callback(
          i2,
          unpacked.center,
          unpacked.scales,
          unpacked.quaternion,
          unpacked.opacity,
          unpacked.color
        );
      }
    }
    // Ensures our PackedSplats.target render target has enough space to generate
    // maxSplats total Gsplats, and reallocate if not large enough.
    ensureGenerate(maxSplats) {
      if (this.target && (maxSplats ?? 1) <= this.maxSplats) {
        return false;
      }
      this.dispose();
      const textureSize = getTextureSize(maxSplats ?? 1);
      const { width, height, depth } = textureSize;
      this.maxSplats = textureSize.maxSplats;
      this.target = new WebGLArrayRenderTarget(width, height, depth, {
        depthBuffer: false,
        stencilBuffer: false,
        generateMipmaps: false,
        magFilter: NearestFilter,
        minFilter: NearestFilter
      });
      this.target.texture.format = RGBAIntegerFormat;
      this.target.texture.type = UnsignedIntType;
      this.target.texture.internalFormat = "RGBA32UI";
      return true;
    }
    // Given an array of splatCounts (.numSplats for each
    // SplatGenerator/SplatMesh in the scene), compute a
    // "mapping layout" in the composite array of generated outputs.
    generateMapping(splatCounts) {
      let maxSplats = 0;
      const mapping = splatCounts.map((numSplats) => {
        const base = maxSplats;
        const rounded = Math.ceil(numSplats / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
        maxSplats += rounded;
        return { base, count: numSplats };
      });
      return { maxSplats, mapping };
    }
    // Returns a THREE.DataArrayTexture representing the PackedSplats content as
    // a Uint32x4 data array texture (2048 x 2048 x depth in size)
    getTexture() {
      if (this.target) {
        return this.target.texture;
      }
      if (this.source || this.packedArray) {
        const source = this.maybeUpdateSource();
        return source;
      }
      return _PackedSplats.getEmpty();
    }
    // Check if source texture needs to be created/updated
    maybeUpdateSource() {
      if (!this.packedArray) {
        throw new Error("No packed splats");
      }
      if (this.needsUpdate || !this.source) {
        this.needsUpdate = false;
        if (this.source) {
          const { width, height, depth } = this.source.image;
          if (this.maxSplats !== width * height * depth) {
            this.source.dispose();
            this.source = null;
          }
        }
        if (!this.source) {
          const { width, height, depth } = getTextureSize(this.maxSplats);
          this.source = new DataArrayTexture(
            this.packedArray,
            width,
            height,
            depth
          );
          this.source.format = RGBAIntegerFormat;
          this.source.type = UnsignedIntType;
          this.source.internalFormat = "RGBA32UI";
          this.source.needsUpdate = true;
        } else if (this.packedArray.buffer !== this.source.image.data.buffer) {
          this.source.image.data = new Uint8Array(this.packedArray.buffer);
        }
        this.source.needsUpdate = true;
      }
      return this.source;
    }
    // Can be used where you need an uninitialized THREE.DataArrayTexture like
    // a uniform you will update with the result of this.getTexture() later.
    static getEmpty() {
      if (!_PackedSplats.emptySource) {
        const { width, height, depth, maxSplats } = getTextureSize(1);
        const emptyArray = new Uint32Array(maxSplats * 4);
        _PackedSplats.emptySource = new DataArrayTexture(
          emptyArray,
          width,
          height,
          depth
        );
        _PackedSplats.emptySource.format = RGBAIntegerFormat;
        _PackedSplats.emptySource.type = UnsignedIntType;
        _PackedSplats.emptySource.internalFormat = "RGBA32UI";
        _PackedSplats.emptySource.needsUpdate = true;
      }
      return _PackedSplats.emptySource;
    }
    // Get a program and THREE.RawShaderMaterial for a given GsplatGenerator,
    // generating it if necessary and caching the result.
    prepareProgramMaterial(generator) {
      let program = _PackedSplats.generatorProgram.get(generator);
      if (!program) {
        const graph = dynoBlock(
          { index: "int" },
          { output: "uvec4" },
          ({ index }) => {
            generator.inputs.index = index;
            const gsplat = generator.outputs.gsplat;
            const output = outputPackedSplat(gsplat);
            return { output };
          }
        );
        if (!_PackedSplats.programTemplate) {
          _PackedSplats.programTemplate = new DynoProgramTemplate(
            computeUvec4_default
          );
        }
        program = new DynoProgram({
          graph,
          inputs: { index: "index" },
          outputs: { output: "target" },
          template: _PackedSplats.programTemplate
        });
        Object.assign(program.uniforms, {
          targetLayer: { value: 0 },
          targetBase: { value: 0 },
          targetCount: { value: 0 }
        });
        _PackedSplats.generatorProgram.set(generator, program);
      }
      const material = program.prepareMaterial();
      _PackedSplats.mesh.material = material;
      return { program, material };
    }
    saveRenderState(renderer) {
      return {
        xrPresenting: renderer.xr.isPresenting,
        autoClear: renderer.autoClear,
        scissorTest: renderer.getScissorTest(),
        pixelRatio: renderer.getPixelRatio()
      };
    }
    resetRenderState(renderer, state) {
      renderer.setRenderTarget(null);
      renderer.setPixelRatio(state.pixelRatio);
      renderer.xr.isPresenting = state.xrPresenting;
      renderer.autoClear = state.autoClear;
      renderer.setScissorTest(state.scissorTest);
    }
    // Executes a dyno program specified by generator which is any DynoBlock that
    // maps { index: "int" } to { gsplat: Gsplat }. This is called in
    // SparkRenderer.updateInternal() to re-generate Gsplats in the scene for
    // SplatGenerator instances whose version is newer than what was generated
    // for it last time.
    generate({
      generator,
      base,
      count,
      renderer
    }) {
      if (!this.target) {
        throw new Error("Target must be initialized with ensureSplats");
      }
      if (base + count > this.maxSplats) {
        throw new Error("Base + count exceeds maxSplats");
      }
      const { program, material } = this.prepareProgramMaterial(generator);
      program.update();
      const renderState = this.saveRenderState(renderer);
      const nextBase = Math.ceil((base + count) / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
      const layerSize = SPLAT_TEX_WIDTH * SPLAT_TEX_HEIGHT;
      material.uniforms.targetBase.value = base;
      material.uniforms.targetCount.value = count;
      while (base < nextBase) {
        const layer = Math.floor(base / layerSize);
        material.uniforms.targetLayer.value = layer;
        const layerBase = layer * layerSize;
        const layerYStart = Math.floor((base - layerBase) / SPLAT_TEX_WIDTH);
        const layerYEnd = Math.min(
          SPLAT_TEX_HEIGHT,
          Math.ceil((nextBase - layerBase) / SPLAT_TEX_WIDTH)
        );
        renderer.setPixelRatio(1);
        renderer.setRenderTarget(this.target, layer);
        renderer.xr.isPresenting = false;
        renderer.autoClear = false;
        renderer.setScissorTest(true);
        renderer.setScissor(
          0,
          layerYStart,
          SPLAT_TEX_WIDTH,
          layerYEnd - layerYStart
        );
        renderer.render(_PackedSplats.scene, _PackedSplats.camera);
        base += SPLAT_TEX_WIDTH * (layerYEnd - layerYStart);
      }
      this.resetRenderState(renderer, renderState);
      return { nextBase };
    }
  };
  _PackedSplats.emptySource = null;
  _PackedSplats.programTemplate = null;
  _PackedSplats.generatorProgram = /* @__PURE__ */ new Map();
  _PackedSplats.geometry = new PlaneGeometry(2, 2);
  _PackedSplats.mesh = new Mesh(
    _PackedSplats.geometry,
    new RawShaderMaterial({ visible: false })
  );
  _PackedSplats.scene = new Scene().add(_PackedSplats.mesh);
  _PackedSplats.camera = new Camera();
  let PackedSplats = _PackedSplats;
  class DynoPackedSplats extends DynoUniform {
    constructor({ packedSplats } = {}) {
      super({
        key: "packedSplats",
        type: TPackedSplats,
        globals: () => [definePackedSplats],
        value: {
          texture: PackedSplats.getEmpty(),
          numSplats: 0
        },
        update: (value) => {
          var _a2, _b2;
          value.texture = ((_a2 = this.packedSplats) == null ? void 0 : _a2.getTexture()) ?? PackedSplats.getEmpty();
          value.numSplats = ((_b2 = this.packedSplats) == null ? void 0 : _b2.numSplats) ?? 0;
          return value;
        }
      });
      this.packedSplats = packedSplats;
    }
  }
  var computeVec4_default = "precision highp float;\\nprecision highp int;\\nprecision highp sampler2D;\\nprecision highp usampler2D;\\nprecision highp isampler2D;\\nprecision highp sampler2DArray;\\nprecision highp usampler2DArray;\\nprecision highp isampler2DArray;\\nprecision highp sampler3D;\\nprecision highp usampler3D;\\nprecision highp isampler3D;\\n\\n#include <splatDefines>\\n\\nuniform uint targetLayer;\\nuniform int targetBase;\\nuniform int targetCount;\\n\\nout vec4 target;\\n\\n{{ GLOBALS }}\\n\\nvoid computeReadback(int index) {\\n    {{ STATEMENTS }}\\n}\\n\\nvoid main() {\\n    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);\\n    int index = targetIndex - targetBase;\\n\\n    if ((index >= 0) && (index < targetCount)) {\\n        computeReadback(index);\\n    } else {\\n        target = vec4(0.0, 0.0, 0.0, 0.0);\\n    }\\n}";
  const _Readback = class _Readback {
    constructor({ renderer } = {}) {
      this.renderer = renderer;
      this.capacity = 0;
      this.count = 0;
    }
    dispose() {
      if (this.target) {
        this.target.dispose();
        this.target = void 0;
      }
    }
    // Ensure we have a buffer large enough for the readback of count indices.
    // Pass in previous bufer of the desired type.
    ensureBuffer(count, buffer) {
      const roundedCount = Math.ceil(Math.max(1, count) / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
      const bytes = roundedCount * 4;
      if (buffer.byteLength >= bytes) {
        return buffer;
      }
      const newBuffer = new ArrayBuffer(bytes);
      if (buffer instanceof ArrayBuffer) {
        return newBuffer;
      }
      const ctor = buffer.constructor;
      return new ctor(newBuffer);
    }
    // Ensure our render target is large enough for the readback of capacity indices.
    ensureCapacity(capacity) {
      const { width, height, depth, maxSplats } = getTextureSize(capacity);
      if (!this.target || maxSplats > this.capacity) {
        this.dispose();
        this.capacity = maxSplats;
        this.target = new WebGLArrayRenderTarget(width, height, depth, {
          depthBuffer: false,
          stencilBuffer: false,
          generateMipmaps: false,
          magFilter: NearestFilter,
          minFilter: NearestFilter
        });
        this.target.texture.format = RGBAFormat;
        this.target.texture.type = UnsignedByteType;
        this.target.texture.internalFormat = "RGBA8";
      }
    }
    // Get a program and THREE.RawShaderMaterial for a given Rgba8Readback,
    // generating it if necessary and caching the result.
    prepareProgramMaterial(reader) {
      let program = _Readback.readbackProgram.get(reader);
      if (!program) {
        const graph = dynoBlock(
          { index: "int" },
          { rgba8: "vec4" },
          ({ index }) => {
            reader.inputs.index = index;
            const rgba8 = new OutputRgba8({ rgba8: reader.outputs.rgba8 });
            return { rgba8 };
          }
        );
        if (!_Readback.programTemplate) {
          _Readback.programTemplate = new DynoProgramTemplate(computeVec4_default);
        }
        program = new DynoProgram({
          graph,
          inputs: { index: "index" },
          outputs: { rgba8: "target" },
          template: _Readback.programTemplate
        });
        Object.assign(program.uniforms, {
          targetLayer: { value: 0 },
          targetBase: { value: 0 },
          targetCount: { value: 0 }
        });
        _Readback.readbackProgram.set(reader, program);
      }
      const material = program.prepareMaterial();
      _Readback.mesh.material = material;
      return { program, material };
    }
    saveRenderState(renderer) {
      return {
        xrPresenting: renderer.xr.isPresenting,
        autoClear: renderer.autoClear,
        scissorTest: renderer.getScissorTest(),
        pixelRatio: renderer.getPixelRatio()
      };
    }
    resetRenderState(renderer, state) {
      renderer.setRenderTarget(null);
      renderer.setPixelRatio(state.pixelRatio);
      renderer.xr.isPresenting = state.xrPresenting;
      renderer.autoClear = state.autoClear;
      renderer.setScissorTest(state.scissorTest);
    }
    process({
      count,
      material
    }) {
      const renderer = this.renderer;
      if (!renderer) {
        throw new Error("No renderer");
      }
      if (!this.target) {
        throw new Error("No target");
      }
      const layerSize = SPLAT_TEX_WIDTH * SPLAT_TEX_HEIGHT;
      material.uniforms.targetBase.value = 0;
      material.uniforms.targetCount.value = count;
      let baseIndex = 0;
      while (baseIndex < count) {
        const layer = Math.floor(baseIndex / layerSize);
        const layerBase = layer * layerSize;
        const layerYEnd = Math.min(
          SPLAT_TEX_HEIGHT,
          Math.ceil((count - layerBase) / SPLAT_TEX_WIDTH)
        );
        material.uniforms.targetLayer.value = layer;
        renderer.setPixelRatio(1);
        renderer.setRenderTarget(this.target, layer);
        renderer.xr.isPresenting = false;
        renderer.autoClear = false;
        renderer.setScissorTest(true);
        renderer.setScissor(0, 0, SPLAT_TEX_WIDTH, layerYEnd);
        renderer.render(_Readback.scene, _Readback.camera);
        baseIndex += SPLAT_TEX_WIDTH * layerYEnd;
      }
      this.count = count;
    }
    async read({
      readback
    }) {
      const renderer = this.renderer;
      if (!renderer) {
        throw new Error("No renderer");
      }
      if (!this.target) {
        throw new Error("No target");
      }
      const roundedCount = Math.ceil(this.count / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
      if (readback.byteLength < roundedCount * 4) {
        throw new Error(
          \`Readback buffer too small: \${readback.byteLength} < \${roundedCount * 4}\`
        );
      }
      const readbackUint8 = new Uint8Array(
        readback instanceof ArrayBuffer ? readback : readback.buffer
      );
      const layerSize = SPLAT_TEX_WIDTH * SPLAT_TEX_HEIGHT;
      let baseIndex = 0;
      const promises = [];
      while (baseIndex < this.count) {
        const layer = Math.floor(baseIndex / layerSize);
        const layerBase = layer * layerSize;
        const layerYEnd = Math.min(
          SPLAT_TEX_HEIGHT,
          Math.ceil((this.count - layerBase) / SPLAT_TEX_WIDTH)
        );
        renderer.setPixelRatio(1);
        renderer.setRenderTarget(this.target, layer);
        const readbackSize = SPLAT_TEX_WIDTH * layerYEnd * 4;
        const subReadback = readbackUint8.subarray(
          layerBase * 4,
          layerBase * 4 + readbackSize
        );
        const promise = renderer == null ? void 0 : renderer.readRenderTargetPixelsAsync(
          this.target,
          0,
          0,
          SPLAT_TEX_WIDTH,
          layerYEnd,
          subReadback
        );
        promises.push(promise);
        baseIndex += SPLAT_TEX_WIDTH * layerYEnd;
      }
      return Promise.all(promises).then(() => readback);
    }
    // Perform render operation to run the Rgba8Readback program
    // but don't perform the readback yet.
    render({
      reader,
      count,
      renderer
    }) {
      this.renderer = renderer || this.renderer;
      if (!this.renderer) {
        throw new Error("No renderer");
      }
      this.ensureCapacity(count);
      const { program, material } = this.prepareProgramMaterial(reader);
      program.update();
      const renderState = this.saveRenderState(this.renderer);
      this.process({ count, material });
      this.resetRenderState(this.renderer, renderState);
    }
    // Perform a readback of the render target, returning a buffer of the
    // given type.
    async readback({
      readback
    }) {
      if (!this.renderer) {
        throw new Error("No renderer");
      }
      const renderState = this.saveRenderState(this.renderer);
      const promise = this.read({ readback });
      this.resetRenderState(this.renderer, renderState);
      return promise;
    }
    // Perform a render and readback operation for the given Rgba8Readback,
    // and readback buffer (call ensureBuffer first).
    async renderReadback({
      reader,
      count,
      renderer,
      readback
    }) {
      this.renderer = renderer || this.renderer;
      if (!this.renderer) {
        throw new Error("No renderer");
      }
      this.ensureCapacity(count);
      const { program, material } = this.prepareProgramMaterial(reader);
      program.update();
      const renderState = this.saveRenderState(this.renderer);
      this.process({ count, material });
      const promise = this.read({ readback });
      this.resetRenderState(this.renderer, renderState);
      return promise;
    }
    getTexture() {
      var _a2;
      return (_a2 = this.target) == null ? void 0 : _a2.texture;
    }
  };
  _Readback.programTemplate = null;
  _Readback.readbackProgram = /* @__PURE__ */ new Map();
  _Readback.geometry = new PlaneGeometry(2, 2);
  _Readback.mesh = new Mesh(
    _Readback.geometry,
    new RawShaderMaterial({ visible: false })
  );
  _Readback.scene = new Scene().add(_Readback.mesh);
  _Readback.camera = new Camera();
  let Readback = _Readback;
  const _RgbaArray = class _RgbaArray {
    constructor(options = {}) {
      this.capacity = 0;
      this.count = 0;
      this.array = null;
      this.readback = null;
      this.source = null;
      this.needsUpdate = true;
      this.dyno = new DynoUniform({
        key: "rgbaArray",
        type: TRgbaArray,
        globals: () => [defineRgbaArray],
        value: {
          texture: _RgbaArray.getEmpty(),
          count: 0
        },
        update: (value) => {
          var _a2;
          value.texture = ((_a2 = this.readback) == null ? void 0 : _a2.getTexture()) ?? this.source ?? _RgbaArray.getEmpty();
          value.count = this.count;
          return value;
        }
      });
      if (options.array) {
        this.array = options.array;
        this.capacity = Math.floor(this.array.length / 4);
        this.capacity = Math.floor(this.capacity / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
        this.count = Math.min(
          this.capacity,
          options.count ?? Number.POSITIVE_INFINITY
        );
      } else {
        this.capacity = options.capacity ?? 0;
        this.count = 0;
      }
    }
    // Free up resources
    dispose() {
      if (this.readback) {
        this.readback.dispose();
        this.readback = null;
      }
      if (this.source) {
        this.source.dispose();
        this.source = null;
      }
    }
    // Ensure that our array is large enough to hold capacity RGBA8 values.
    ensureCapacity(capacity) {
      var _a2;
      if (!this.array || capacity > (((_a2 = this.array) == null ? void 0 : _a2.length) ?? 0) / 4) {
        this.capacity = getTextureSize(capacity).maxSplats;
        const newArray = new Uint8Array(this.capacity * 4);
        if (this.array) {
          newArray.set(this.array);
        }
        this.array = newArray;
      }
      return this.array;
    }
    // Get the THREE.DataArrayTexture from either the readback or the source.
    getTexture() {
      var _a2;
      let texture = (_a2 = this.readback) == null ? void 0 : _a2.getTexture();
      if (this.source || this.array) {
        texture = this.maybeUpdateSource();
      }
      return texture ?? _RgbaArray.getEmpty();
    }
    // Create or get a THREE.DataArrayTexture from the data array.
    maybeUpdateSource() {
      if (!this.array) {
        throw new Error("No array");
      }
      if (this.needsUpdate || !this.source) {
        this.needsUpdate = false;
        if (this.source) {
          const { width, height, depth } = this.source.image;
          if (this.capacity !== width * height * depth) {
            this.source.dispose();
            this.source = null;
          }
        }
        if (!this.source) {
          const { width, height, depth } = getTextureSize(this.capacity);
          this.source = new DataArrayTexture(
            this.array,
            width,
            height,
            depth
          );
          this.source.format = RGBAFormat;
          this.source.type = UnsignedByteType;
          this.source.internalFormat = "RGBA8";
          this.source.needsUpdate = true;
        } else if (this.array.buffer !== this.source.image.data.buffer) {
          this.source.image.data = new Uint8Array(this.array.buffer);
        }
        this.source.needsUpdate = true;
      }
      return this.source;
    }
    // Generate the RGBA8 values from a Rgba8Readback dyno program.
    render({
      reader,
      count,
      renderer
    }) {
      if (!this.readback) {
        this.readback = new Readback({ renderer });
      }
      this.readback.render({ reader, count, renderer });
      this.capacity = this.readback.capacity;
      this.count = this.readback.count;
    }
    // Extract the RGBA8 values from a PackedSplats collection.
    fromPackedSplats({
      packedSplats,
      base,
      count,
      renderer
    }) {
      const { dynoSplats, dynoBase, dynoCount, reader } = _RgbaArray.makeDynos();
      dynoSplats.packedSplats = packedSplats;
      dynoBase.value = base;
      dynoCount.value = count;
      this.render({ reader, count, renderer });
      return this;
    }
    // Read back the RGBA8 values from the readback buffer.
    async read() {
      if (!this.readback) {
        throw new Error("No readback");
      }
      if (!this.array || this.array.length < this.count * 4) {
        this.array = new Uint8Array(this.capacity * 4);
      }
      const result = await this.readback.readback({ readback: this.array });
      return result.subarray(0, this.count * 4);
    }
    // Can be used where you need an uninitialized THREE.DataArrayTexture like
    // a uniform you will update with the result of this.getTexture() later.
    static getEmpty() {
      if (!_RgbaArray.emptySource) {
        const emptyArray = new Uint8Array(1 * 4);
        _RgbaArray.emptySource = new DataArrayTexture(emptyArray, 1, 1, 1);
        _RgbaArray.emptySource.format = RGBAFormat;
        _RgbaArray.emptySource.type = UnsignedByteType;
        _RgbaArray.emptySource.internalFormat = "RGBA8";
        _RgbaArray.emptySource.needsUpdate = true;
      }
      return _RgbaArray.emptySource;
    }
    // Create a dyno program that can extract RGBA8 values from a PackedSplats
    static makeDynos() {
      if (!_RgbaArray.dynos) {
        const dynoSplats = new DynoPackedSplats();
        const dynoBase = new DynoInt({ value: 0 });
        const dynoCount = new DynoInt({ value: 0 });
        const reader = dynoBlock(
          { index: "int" },
          { rgba8: "vec4" },
          ({ index }) => {
            if (!index) {
              throw new Error("index is undefined");
            }
            index = add(index, dynoBase);
            const gsplat = readPackedSplatRange(
              dynoSplats,
              index,
              dynoBase,
              dynoCount
            );
            return { rgba8: splitGsplat(gsplat).outputs.rgba };
          }
        );
        _RgbaArray.dynos = { dynoSplats, dynoBase, dynoCount, reader };
      }
      return _RgbaArray.dynos;
    }
  };
  _RgbaArray.emptySource = null;
  _RgbaArray.dynos = null;
  let RgbaArray = _RgbaArray;
  const TRgbaArray = { type: "RgbaArray" };
  const defineRgbaArray = unindent(\`
  struct RgbaArray {
    sampler2DArray texture;
    int count;
  };
\`);
  function readRgbaArray(rgba, index) {
    const dyno2 = new Dyno({
      inTypes: { rgba: TRgbaArray, index: "int" },
      outTypes: { rgba: "vec4" },
      inputs: { rgba, index },
      globals: () => [defineRgbaArray],
      statements: ({ inputs, outputs }) => unindentLines(\`
        if ((index >= 0) && (index < \${inputs.rgba}.count)) {
          \${outputs.rgba} = texelFetch(\${inputs.rgba}.texture, splatTexCoord(index), 0);
        } else {
          \${outputs.rgba} = vec4(0.0, 0.0, 0.0, 0.0);
        }
      \`)
    });
    return dyno2.outputs.rgba;
  }
  function sdfTypeToNumber(type) {
    switch (type) {
      case "all":
        return 0;
      case "plane":
        return 1;
      case "sphere":
        return 2;
      case "box":
        return 3;
      case "ellipsoid":
        return 4;
      case "cylinder":
        return 5;
      case "capsule":
        return 6;
      case "infinite_cone":
        return 7;
      default:
        throw new Error(\`Unknown SDF type: \${type}\`);
    }
  }
  function rgbaBlendModeToNumber(mode) {
    switch (mode) {
      case "multiply":
        return 0;
      case "set_rgb":
        return 1;
      case "add_rgba":
        return 2;
      default:
        throw new Error(\`Unknown blend mode: \${mode}\`);
    }
  }
  class SplatEditSdf extends Object3D {
    constructor(options = {}) {
      super();
      const { type, invert, opacity, color, displace, radius } = options;
      this.type = type ?? "sphere";
      this.invert = invert ?? false;
      this.opacity = opacity ?? 1;
      this.color = color ?? new Color(1, 1, 1);
      this.displace = displace ?? new Vector3(0, 0, 0);
      this.radius = radius ?? 0;
    }
  }
  const _SplatEdit = class _SplatEdit extends Object3D {
    constructor(options = {}) {
      const {
        name,
        rgbaBlendMode = "multiply",
        sdfSmooth = 0,
        softEdge = 0,
        invert = false,
        sdfs = null
      } = options;
      super();
      this.rgbaBlendMode = rgbaBlendMode;
      this.sdfSmooth = sdfSmooth;
      this.softEdge = softEdge;
      this.invert = invert;
      this.sdfs = sdfs;
      this.ordering = _SplatEdit.nextOrdering++;
      this.name = name ?? \`Edit \${this.ordering}\`;
    }
    addSdf(sdf) {
      if (this.sdfs == null) {
        this.sdfs = [];
      }
      this.sdfs.push(sdf);
    }
    removeSdf(sdf) {
      if (this.sdfs == null) {
        return;
      }
      this.sdfs = this.sdfs.filter((s) => s !== sdf);
    }
  };
  _SplatEdit.nextOrdering = 1;
  let SplatEdit = _SplatEdit;
  class SplatEdits {
    constructor({ maxSdfs, maxEdits }) {
      this.maxSdfs = Math.max(16, maxSdfs ?? 0);
      this.numSdfs = 0;
      this.sdfData = new Uint32Array(this.maxSdfs * 8 * 4);
      this.sdfFloatData = new Float32Array(this.sdfData.buffer);
      this.sdfTexture = this.newSdfTexture(this.sdfData, this.maxSdfs);
      this.dynoSdfArray = new DynoUniform({
        key: "sdfArray",
        type: SdfArray,
        globals: () => [defineSdfArray],
        value: {
          numSdfs: 0,
          sdfTexture: this.sdfTexture
        },
        update: (uniform) => {
          uniform.numSdfs = this.numSdfs;
          uniform.sdfTexture = this.sdfTexture;
          return uniform;
        }
      });
      this.maxEdits = Math.max(16, maxEdits ?? 0);
      this.numEdits = 0;
      this.editData = new Uint32Array(this.maxEdits * 4);
      this.editFloatData = new Float32Array(this.editData.buffer);
      this.dynoNumEdits = new DynoInt({ value: 0 });
      this.dynoEdits = this.newEdits(this.editData, this.maxEdits);
    }
    newSdfTexture(data, maxSdfs) {
      const texture = new DataTexture(
        data,
        8,
        maxSdfs,
        RGBAIntegerFormat,
        UnsignedIntType
      );
      texture.internalFormat = "RGBA32UI";
      texture.needsUpdate = true;
      return texture;
    }
    newEdits(data, maxEdits) {
      return new DynoUniform({
        key: "edits",
        type: "uvec4",
        count: maxEdits,
        globals: () => [defineEdit],
        value: data
      });
    }
    // Ensure our SDF texture and edits uniform array have enough capacity.
    // Reallocate if not.
    ensureCapacity({
      maxSdfs,
      maxEdits
    }) {
      let dynoUpdated = false;
      if (maxSdfs > this.sdfTexture.image.height) {
        this.sdfTexture.dispose();
        this.maxSdfs = Math.max(this.maxSdfs * 2, maxSdfs);
        this.sdfData = new Uint32Array(this.maxSdfs * 8 * 4);
        this.sdfFloatData = new Float32Array(this.sdfData.buffer);
        this.sdfTexture = this.newSdfTexture(this.sdfData, this.maxSdfs);
      }
      if (maxEdits > (this.dynoEdits.count ?? 0)) {
        this.maxEdits = Math.max(this.maxEdits * 2, maxEdits);
        this.editData = new Uint32Array(this.maxEdits * 4);
        this.editFloatData = new Float32Array(this.editData.buffer);
        this.dynoEdits = this.newEdits(this.editData, this.maxEdits);
        dynoUpdated = true;
      }
      return dynoUpdated;
    }
    updateEditData(offset, value) {
      const updated = this.editData[offset] !== value;
      this.editData[offset] = value;
      return updated;
    }
    updateEditFloatData(offset, value) {
      tempFloat32[0] = value;
      const updated = this.editFloatData[offset] !== tempFloat32[0];
      if (updated) {
        this.editFloatData[offset] = tempFloat32[0];
      }
      return updated;
    }
    encodeEdit(editIndex, {
      sdfFirst,
      sdfCount,
      invert,
      rgbaBlendMode,
      softEdge,
      sdfSmooth
    }) {
      const base = editIndex * 4;
      let updated = false;
      updated = this.updateEditData(base + 0, rgbaBlendMode | (invert ? 1 << 8 : 0)) || updated;
      updated = this.updateEditData(base + 1, sdfFirst | sdfCount << 16) || updated;
      updated = this.updateEditFloatData(base + 2, softEdge) || updated;
      updated = this.updateEditFloatData(base + 3, sdfSmooth) || updated;
      return updated;
    }
    updateSdfData(offset, value) {
      const updated = this.sdfData[offset] !== value;
      this.sdfData[offset] = value;
      return updated;
    }
    updateSdfFloatData(offset, value) {
      tempFloat32[0] = value;
      const updated = this.sdfFloatData[offset] !== tempFloat32[0];
      if (updated) {
        this.sdfFloatData[offset] = tempFloat32[0];
      }
      return updated;
    }
    encodeSdf(sdfIndex, {
      sdfType,
      invert,
      center,
      quaternion,
      scale,
      sizes
    }, values) {
      const base = sdfIndex * (8 * 4);
      const flags = sdfType | (invert ? 1 << 8 : 0);
      let updated = false;
      updated = this.updateSdfFloatData(base + 0, (center == null ? void 0 : center.x) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 1, (center == null ? void 0 : center.y) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 2, (center == null ? void 0 : center.z) ?? 0) || updated;
      updated = this.updateSdfData(base + 3, flags) || updated;
      updated = this.updateSdfFloatData(base + 4, (quaternion == null ? void 0 : quaternion.x) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 5, (quaternion == null ? void 0 : quaternion.y) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 6, (quaternion == null ? void 0 : quaternion.z) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 7, (quaternion == null ? void 0 : quaternion.w) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 8, (scale == null ? void 0 : scale.x) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 9, (scale == null ? void 0 : scale.y) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 10, (scale == null ? void 0 : scale.z) ?? 0) || updated;
      updated = this.updateSdfData(base + 11, 0) || updated;
      updated = this.updateSdfFloatData(base + 12, (sizes == null ? void 0 : sizes.x) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 13, (sizes == null ? void 0 : sizes.y) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 14, (sizes == null ? void 0 : sizes.z) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 15, (sizes == null ? void 0 : sizes.w) ?? 0) || updated;
      const nValues = Math.min(4, values.length);
      for (let i2 = 0; i2 < nValues; ++i2) {
        const vBase = base + 16 + i2 * 4;
        updated = this.updateSdfFloatData(vBase + 0, values[i2].x) || updated;
        updated = this.updateSdfFloatData(vBase + 1, values[i2].y) || updated;
        updated = this.updateSdfFloatData(vBase + 2, values[i2].z) || updated;
        updated = this.updateSdfFloatData(vBase + 3, values[i2].w) || updated;
      }
      return updated;
    }
    // Update the SDFs and edits from an array of SplatEdits and their
    // associated SplatEditSdfs, updating it for the dyno shader program.
    update(edits) {
      const sdfCount = edits.reduce((total, { sdfs }) => total + sdfs.length, 0);
      const dynoUpdated = this.ensureCapacity({
        maxEdits: edits.length,
        maxSdfs: sdfCount
      });
      const values = [new Vector4(), new Vector4()];
      const center = new Vector3();
      const quaternion = new Quaternion();
      const scale = new Vector3();
      const sizes = new Vector4();
      let sdfIndex = 0;
      let updated = dynoUpdated;
      if (edits.length !== this.dynoNumEdits.value) {
        this.dynoNumEdits.value = edits.length;
        this.numEdits = edits.length;
        updated = true;
      }
      for (const [editIndex, { edit, sdfs }] of edits.entries()) {
        updated = this.encodeEdit(editIndex, {
          sdfFirst: sdfIndex,
          sdfCount: sdfs.length,
          invert: edit.invert,
          rgbaBlendMode: rgbaBlendModeToNumber(edit.rgbaBlendMode),
          softEdge: edit.softEdge,
          sdfSmooth: edit.sdfSmooth
        }) || updated;
        let sdfUpdated = false;
        for (const sdf of sdfs) {
          sizes.set(sdf.scale.x, sdf.scale.y, sdf.scale.z, sdf.radius);
          sdf.scale.setScalar(1);
          sdf.updateMatrixWorld();
          const worldToSdf = sdf.matrixWorld.clone().invert();
          worldToSdf.decompose(center, quaternion, scale);
          sdf.scale.set(sizes.x, sizes.y, sizes.z);
          sdf.updateMatrixWorld();
          values[0].set(sdf.color.r, sdf.color.g, sdf.color.b, sdf.opacity);
          values[1].set(sdf.displace.x, sdf.displace.y, sdf.displace.z, 1);
          sdfUpdated = this.encodeSdf(
            sdfIndex,
            {
              sdfType: sdfTypeToNumber(sdf.type),
              invert: sdf.invert,
              center,
              quaternion,
              scale,
              sizes
            },
            values
          ) || sdfUpdated;
          sdfIndex += 1;
        }
        this.numSdfs = sdfIndex;
        if (sdfUpdated) {
          this.sdfTexture.needsUpdate = true;
        }
        updated || (updated = sdfUpdated);
      }
      return { updated, dynoUpdated };
    }
    // Modify a Gsplat in a dyno shader program using the current edits and SDFs.
    modify(gsplat) {
      return applyGsplatRgbaDisplaceEdits(
        gsplat,
        this.dynoSdfArray,
        this.dynoNumEdits,
        this.dynoEdits
      );
    }
  }
  const SdfArray = { type: "SdfArray" };
  const defineSdfArray = unindent(\`
  struct SdfArray {
    int numSdfs;
    usampler2D sdfTexture;
  };

  void unpackSdfArray(
    usampler2D sdfTexture, int sdfIndex, out uint flags,
    out vec3 center, out vec4 quaternion, out vec3 scale, out vec4 sizes,
    int numValues, out vec4 values[4]
  ) {
    uvec4 temp = texelFetch(sdfTexture, ivec2(0, sdfIndex), 0);
    flags = temp.w;
    center = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(1, sdfIndex), 0);
    quaternion = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    temp = texelFetch(sdfTexture, ivec2(2, sdfIndex), 0);
    scale = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(3, sdfIndex), 0);
    sizes = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    for (int i = 0; i < numValues; ++i) {
      temp = texelFetch(sdfTexture, ivec2(4 + i, sdfIndex), 0);
      values[i] = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));
    }
  }

  const uint SDF_FLAG_TYPE = 0xFFu;
  const uint SDF_FLAG_INVERT = 1u << 8u;

  const uint SDF_TYPE_ALL = 0u;
  const uint SDF_TYPE_PLANE = 1u;
  const uint SDF_TYPE_SPHERE = 2u;
  const uint SDF_TYPE_BOX = 3u;
  const uint SDF_TYPE_ELLIPSOID = 4u;
  const uint SDF_TYPE_CYLINDER = 5u;
  const uint SDF_TYPE_CAPSULE = 6u;
  const uint SDF_TYPE_INFINITE_CONE = 7u;

  float evaluateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 outValues[4]
  ) {
    float distanceAccum = (smoothK == 0.0) ? 1.0 / 0.0 : 0.0;
    float maxExp = -1.0 / 0.0;
    for (int i = 0; i < numValues; ++i) {
        outValues[i] = vec4(0.0);
    }

    uint flags;
    vec3 center, scale;
    vec4 quaternion, sizes;
    vec4 values[4];

    int sdfLast = min(sdfFirst + sdfCount, numSdfs);
    for (int index = sdfFirst; index < sdfLast; ++index) {
      unpackSdfArray(sdfTexture, index, flags, center, quaternion, scale, sizes, numValues, values);
      uint sdfType = flags & SDF_FLAG_TYPE;
      vec3 sdfPos = quatVec(quaternion, pos * scale) + center;

      float distance;
      switch (sdfType) {
        case SDF_TYPE_ALL:
          distance = -1.0 / 0.0;
          break;
        case SDF_TYPE_PLANE: {
          distance = sdfPos.z;
          break;
        }
        case SDF_TYPE_SPHERE: {
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_BOX: {
          vec3 q = abs(sdfPos) - sizes.xyz + sizes.w;
          distance = length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - sizes.w;
          break;
        }
        case SDF_TYPE_ELLIPSOID: {
          vec3 sizes = sizes.xyz;
          float k0 = length(sdfPos / sizes);
          float k1 = length(sdfPos / dot(sizes, sizes));
          distance = k0 * (k0 - 1.0) / k1;
          break;
        }
        case SDF_TYPE_CYLINDER: {
          vec2 d = abs(vec2(length(sdfPos.xz), sdfPos.y)) - sizes.wy;
          distance = min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
          break;
        }
        case SDF_TYPE_CAPSULE: {
          sdfPos.y -= clamp(sdfPos.y, -0.5 * sizes.y, 0.5 * sizes.y);
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_INFINITE_CONE: {
          float angle = 0.25 * PI * sizes.w;
          vec2 c = vec2(sin(angle), cos(angle));
          vec2 q = vec2(length(sdfPos.xy), -sdfPos.z);
          float d = length(q - c * max(dot(q, c), 0.0));
          distance = d * (((q.x * c.y - q.y * c.x) < 0.0) ? -1.0 : 1.0);
          break;
        }
      }

      if ((flags & SDF_FLAG_INVERT) != 0u) {
        distance = -distance;
      }

      if (smoothK == 0.0) {
        if (distance < distanceAccum) {
          distanceAccum = distance;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] = values[i];
          }
        }
      } else {
        float scaledDistance = -distance / smoothK;
        if (scaledDistance > maxExp) {
          float scale = exp(maxExp - scaledDistance);
          distanceAccum *= scale;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] *= scale;
          }
          maxExp = scaledDistance;
        }

        float weight = exp(scaledDistance - maxExp);
        distanceAccum += weight;
        for (int i = 0; i < numValues; ++i) {
          outValues[i] += weight * values[i];
        }
      }
    }

    if (smoothK == 0.0) {
      return distanceAccum;
    } else {
      // Very distant SDFs may result in 0 accumulation
      if (distanceAccum == 0.0) {
        return 1.0 / 0.0;
      }
      for (int i = 0; i < numValues; ++i) {
        outValues[i] /= distanceAccum;
      }
      return (-log(distanceAccum) - maxExp) * smoothK;
    }
  }

  float modulateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 values[4],
    float softEdge, bool invert
  ) {
    float distance = evaluateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, numValues, values);
    if (invert) {
      distance = -distance;
    }

    return (softEdge == 0.0) ? ((distance < 0.0) ? 1.0 : 0.0)
      : clamp(-distance / softEdge + 0.5, 0.0, 1.0);
  }
\`);
  const defineEdit = unindent(\`
  const uint EDIT_FLAG_BLEND = 0xFFu;
  const uint EDIT_BLEND_MULTIPLY = 0u;
  const uint EDIT_BLEND_SET_RGB = 1u;
  const uint EDIT_BLEND_ADD_RGBA = 2u;
  const uint EDIT_FLAG_INVERT = 0x100u;

  void decodeEdit(
    uvec4 packedEdit, out int sdfFirst, out int sdfCount,
    out bool invert, out uint rgbaBlendMode, out float softEdge, out float sdfSmooth
  ) {
    rgbaBlendMode = packedEdit.x & EDIT_FLAG_BLEND;
    invert = (packedEdit.x & EDIT_FLAG_INVERT) != 0u;

    sdfFirst = int(packedEdit.y & 0xFFFFu);
    sdfCount = int(packedEdit.y >> 16u);

    softEdge = uintBitsToFloat(packedEdit.z);
    sdfSmooth = uintBitsToFloat(packedEdit.w);
  }

  void applyRgbaDisplaceEdit(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, inout vec3 pos,
    float smoothK, float softEdge, bool invert, uint rgbaBlendMode, inout vec4 rgba
  ) {
    vec4 values[4];
    float modulate = modulateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, 2, values, softEdge, invert);
    // On Android, moving values[0] is necessary to work around a compiler bug.
    vec4 sdfRgba = values[0];
    vec4 sdfDisplaceScale = values[1];

    vec4 target;
    switch (rgbaBlendMode) {
      case EDIT_BLEND_MULTIPLY:
        target = rgba * sdfRgba;
        break;
      case EDIT_BLEND_SET_RGB:
        target = vec4(sdfRgba.rgb, rgba.a * sdfRgba.a);
        break;
      case EDIT_BLEND_ADD_RGBA:
        target = rgba + sdfRgba;
        break;
      default:
        // Debug output if blend mode not set
        target = vec4(fract(pos), 1.0);
    }
    rgba = mix(rgba, target, modulate);
    pos += sdfDisplaceScale.xyz * modulate;
  }

  void applyPackedRgbaDisplaceEdit(uvec4 packedEdit, usampler2D sdfTexture, int numSdfs, inout vec3 pos, inout vec4 rgba) {
    int sdfFirst, sdfCount;
    bool invert;
    uint rgbaBlendMode;
    float softEdge, sdfSmooth;
    decodeEdit(packedEdit, sdfFirst, sdfCount, invert, rgbaBlendMode, softEdge, sdfSmooth);
    applyRgbaDisplaceEdit(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, sdfSmooth, softEdge, invert, rgbaBlendMode, rgba);
  }
\`);
  function applyGsplatRgbaDisplaceEdits(gsplat, sdfArray, numEdits, rgbaDisplaceEdits) {
    const dyno2 = new Dyno({
      inTypes: {
        gsplat: Gsplat,
        sdfArray: SdfArray,
        numEdits: "int",
        rgbaDisplaceEdits: "uvec4"
      },
      outTypes: { gsplat: Gsplat },
      globals: () => [defineSdfArray, defineEdit],
      inputs: { gsplat, sdfArray, numEdits, rgbaDisplaceEdits },
      statements: ({ inputs, outputs }) => {
        const { sdfArray: sdfArray2, numEdits: numEdits2, rgbaDisplaceEdits: rgbaDisplaceEdits2 } = inputs;
        const { gsplat: gsplat2 } = outputs;
        return unindentLines(\`
        \${gsplat2} = \${inputs.gsplat};
        if (isGsplatActive(\${gsplat2}.flags)) {
          for (int editIndex = 0; editIndex < \${numEdits2}; ++editIndex) {
            applyPackedRgbaDisplaceEdit(
              \${rgbaDisplaceEdits2}[editIndex], \${sdfArray2}.sdfTexture, \${sdfArray2}.numSdfs,
              \${gsplat2}.center, \${gsplat2}.rgba
            );
          }
        }
      \`);
      }
    });
    return dyno2.outputs.gsplat;
  }
  const tempFloat32 = new Float32Array(1);
  class SplatTransformer {
    // Create the dyno uniforms that parameterize the transform, setting them
    // to initial values that are different from any valid transform.
    constructor() {
      this.scale = new DynoFloat({ value: Number.NEGATIVE_INFINITY });
      this.rotate = new DynoVec4({
        value: new Quaternion(
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY
        )
      });
      this.translate = new DynoVec3({
        value: new Vector3(
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY
        )
      });
    }
    // Apply the transform to a Vec3 position in a dyno program.
    apply(position) {
      return transformPos(position, {
        scale: this.scale,
        rotate: this.rotate,
        translate: this.translate
      });
    }
    applyDir(dir) {
      return transformDir(dir, {
        rotate: this.rotate
      });
    }
    // Apply the transform to a Gsplat in a dyno program.
    applyGsplat(gsplat) {
      return transformGsplat(gsplat, {
        scale: this.scale,
        rotate: this.rotate,
        translate: this.translate
      });
    }
    // Update the uniforms to match the given transform matrix.
    updateFromMatrix(transform) {
      const scale = new Vector3();
      const quaternion = new Quaternion();
      const position = new Vector3();
      transform.decompose(position, quaternion, scale);
      const newScale = (scale.x + scale.y + scale.z) / 3;
      let updated = false;
      if (newScale !== this.scale.value) {
        this.scale.value = newScale;
        updated = true;
      }
      if (!position.equals(this.translate.value)) {
        this.translate.value.copy(position);
        updated = true;
      }
      if (!quaternion.equals(this.rotate.value)) {
        this.rotate.value.copy(quaternion);
        updated = true;
      }
      return updated;
    }
    // Update this transform to match the object's to-world transform.
    update(object) {
      object.updateMatrixWorld();
      return this.updateFromMatrix(object.matrixWorld);
    }
  }
  class SplatGenerator extends Object3D {
    constructor({
      numSplats,
      generator,
      construct,
      update
    }) {
      super();
      this.numSplats = numSplats ?? 0;
      this.generator = generator;
      this.frameUpdate = update;
      this.version = 0;
      if (construct) {
        const constructed = construct(this);
        Object.assign(this, constructed);
      }
    }
    updateVersion() {
      this.version += 1;
    }
    set needsUpdate(value) {
      if (value) {
        this.updateVersion();
      }
    }
  }
  const _SplatMesh = class _SplatMesh extends SplatGenerator {
    constructor(options = {}) {
      const transform = new SplatTransformer();
      const viewToWorld = new SplatTransformer();
      const worldToView = new SplatTransformer();
      const viewToObject = new SplatTransformer();
      const recolor = new DynoVec4({
        value: new Vector4(
          Number.NEGATIVE_INFINITY,
          Number.NEGATIVE_INFINITY,
          Number.NEGATIVE_INFINITY,
          Number.NEGATIVE_INFINITY
        )
      });
      const time = new DynoFloat({ value: 0 });
      const deltaTime = new DynoFloat({ value: 0 });
      const context = {
        transform,
        viewToWorld,
        worldToView,
        viewToObject,
        recolor,
        time,
        deltaTime
      };
      super({
        update: ({ time: time2, deltaTime: deltaTime2, viewToWorld: viewToWorld2, globalEdits }) => this.update({ time: time2, deltaTime: deltaTime2, viewToWorld: viewToWorld2, globalEdits })
      });
      this.isInitialized = false;
      this.recolor = new Color(1, 1, 1);
      this.opacity = 1;
      this.enableViewToObject = false;
      this.enableViewToWorld = false;
      this.enableWorldToView = false;
      this.skinning = null;
      this.edits = null;
      this.rgbaDisplaceEdits = null;
      this.splatRgba = null;
      this.maxSh = 3;
      this.packedSplats = options.packedSplats ?? new PackedSplats();
      this.numSplats = this.packedSplats.numSplats;
      this.editable = options.editable ?? true;
      this.onFrame = options.onFrame;
      this.context = context;
      this.objectModifier = options.objectModifier;
      this.worldModifier = options.worldModifier;
      this.updateGenerator();
      if (options.url || options.fileBytes || options.constructSplats || options.packedSplats && !options.packedSplats.isInitialized) {
        this.initialized = this.asyncInitialize(options).then(async () => {
          this.updateGenerator();
          this.isInitialized = true;
          if (options.onLoad) {
            const maybePromise = options.onLoad(this);
            if (maybePromise instanceof Promise) {
              await maybePromise;
            }
          }
          return this;
        });
      } else {
        this.isInitialized = true;
        this.initialized = Promise.resolve(this);
        if (options.onLoad) {
          const maybePromise = options.onLoad(this);
          if (maybePromise instanceof Promise) {
            this.initialized = maybePromise.then(() => this);
          }
        }
      }
    }
    async asyncInitialize(options) {
      const { url, fileBytes, fileType, fileName, maxSplats, constructSplats } = options;
      if (url || fileBytes || constructSplats) {
        const packedSplatsOptions = {
          url,
          fileBytes,
          fileType,
          fileName,
          maxSplats,
          construct: constructSplats
        };
        this.packedSplats.reinitialize(packedSplatsOptions);
      }
      if (this.packedSplats) {
        await this.packedSplats.initialized;
        this.numSplats = this.packedSplats.numSplats;
        this.updateGenerator();
      }
    }
    static async staticInitialize() {
      await __wbg_init();
      _SplatMesh.isStaticInitialized = true;
    }
    // Creates a new Gsplat with the provided parameters (all values in "float" space,
    // i.e. 0-1 for opacity and color) and adds it to the end of the packedSplats,
    // increasing numSplats by 1. If necessary, reallocates the buffer with an exponential
    // doubling strategy to fit the new data, so it's fairly efficient to just
    // pushSplat(...) each Gsplat you want to create in a loop.
    pushSplat(center, scales, quaternion, opacity, color) {
      this.packedSplats.pushSplat(center, scales, quaternion, opacity, color);
    }
    // This method iterates over all Gsplats in this instance's packedSplats,
    // invoking the provided callback with index: number in 0..=(this.numSplats-1) and
    // center: THREE.Vector3, scales: THREE.Vector3, quaternion: THREE.Quaternion,
    // opacity: number (0..1), and color: THREE.Color (rgb values in 0..1).
    // Note that the objects passed in as center etc. are the same for every callback
    // invocation: these objects are reused for efficiency. Changing these values has
    // no effect as they are decoded/unpacked copies of the underlying data. To update
    // the packedSplats, call .packedSplats.setSplat(index, center, scales,
    // quaternion, opacity, color).
    forEachSplat(callback) {
      this.packedSplats.forEachSplat(callback);
    }
    // Call this when you are finished with the SplatMesh and want to free
    // any buffers it holds (via packedSplats).
    dispose() {
      this.packedSplats.dispose();
    }
    constructGenerator(context) {
      const { transform, viewToObject, recolor } = context;
      const generator = dynoBlock(
        { index: "int" },
        { gsplat: Gsplat },
        ({ index }) => {
          if (!index) {
            throw new Error("index is undefined");
          }
          let gsplat = readPackedSplat(this.packedSplats.dyno, index);
          if (this.maxSh >= 1) {
            const { sh1Texture, sh2Texture, sh3Texture } = this.ensureShTextures();
            if (sh1Texture) {
              const viewCenterInObject = viewToObject.translate;
              const { center } = splitGsplat(gsplat).outputs;
              const viewDir = normalize(sub(center, viewCenterInObject));
              let rgb = evaluateSH1(gsplat, sh1Texture, viewDir);
              if (this.maxSh >= 2 && sh2Texture) {
                rgb = add(rgb, evaluateSH2(gsplat, sh2Texture, viewDir));
              }
              if (this.maxSh >= 3 && sh3Texture) {
                rgb = add(rgb, evaluateSH3(gsplat, sh3Texture, viewDir));
              }
              let { rgba } = splitGsplat(gsplat).outputs;
              rgba = add(rgba, extendVec(rgb, dynoConst("float", 0)));
              gsplat = combineGsplat({ gsplat, rgba });
            }
          }
          if (this.splatRgba) {
            const rgba = readRgbaArray(this.splatRgba.dyno, index);
            gsplat = combineGsplat({ gsplat, rgba });
          }
          if (this.skinning) {
            gsplat = this.skinning.modify(gsplat);
          }
          if (this.objectModifier) {
            gsplat = this.objectModifier.apply({ gsplat }).gsplat;
          }
          gsplat = transform.applyGsplat(gsplat);
          const recolorRgba = mul(recolor, splitGsplat(gsplat).outputs.rgba);
          gsplat = combineGsplat({ gsplat, rgba: recolorRgba });
          if (this.rgbaDisplaceEdits) {
            gsplat = this.rgbaDisplaceEdits.modify(gsplat);
          }
          if (this.worldModifier) {
            gsplat = this.worldModifier.apply({ gsplat }).gsplat;
          }
          return { gsplat };
        }
      );
      this.generator = generator;
    }
    // Call this whenever something changes in the Gsplat processing pipeline,
    // for example changing maxSh or updating objectModifier or worldModifier.
    // Compiled generators are cached for efficiency and re-use when the same
    // pipeline structure emerges after successive changes.
    updateGenerator() {
      this.constructGenerator(this.context);
    }
    // This is called automatically by SparkRenderer and you should not have to
    // call it. It updates parameters for the generated pipeline and calls
    // updateGenerator() if the pipeline needs to change.
    update({
      time,
      viewToWorld,
      deltaTime,
      globalEdits
    }) {
      var _a2;
      this.numSplats = this.packedSplats.numSplats;
      this.context.time.value = time;
      this.context.deltaTime.value = deltaTime;
      _SplatMesh.dynoTime.value = time;
      const { transform, viewToObject, recolor } = this.context;
      let updated = transform.update(this);
      if (this.context.viewToWorld.updateFromMatrix(viewToWorld) && this.enableViewToWorld) {
        updated = true;
      }
      const worldToView = viewToWorld.clone().invert();
      if (this.context.worldToView.updateFromMatrix(worldToView) && this.enableWorldToView) {
        updated = true;
      }
      const objectToWorld = new Matrix4().compose(
        transform.translate.value,
        transform.rotate.value,
        new Vector3().setScalar(transform.scale.value)
      );
      const worldToObject = objectToWorld.invert();
      const viewToObjectMatrix = worldToObject.multiply(viewToWorld);
      if (viewToObject.updateFromMatrix(viewToObjectMatrix) && (this.enableViewToObject || this.packedSplats.extra.sh1)) {
        updated = true;
      }
      const newRecolor = new Vector4(
        this.recolor.r,
        this.recolor.g,
        this.recolor.b,
        this.opacity
      );
      if (!newRecolor.equals(recolor.value)) {
        recolor.value.copy(newRecolor);
        updated = true;
      }
      const edits = this.editable ? (this.edits ?? []).concat(globalEdits) : [];
      if (this.editable && !this.edits) {
        this.traverseVisible((node) => {
          if (node instanceof SplatEdit) {
            edits.push(node);
          }
        });
      }
      edits.sort((a, b) => a.ordering - b.ordering);
      const editsSdfs = edits.map((edit) => {
        if (edit.sdfs != null) {
          return { edit, sdfs: edit.sdfs };
        }
        const sdfs = [];
        edit.traverseVisible((node) => {
          if (node instanceof SplatEditSdf) {
            sdfs.push(node);
          }
        });
        return { edit, sdfs };
      });
      if (editsSdfs.length > 0 && !this.rgbaDisplaceEdits) {
        const edits2 = editsSdfs.length;
        const sdfs = editsSdfs.reduce(
          (total, edit) => total + edit.sdfs.length,
          0
        );
        this.rgbaDisplaceEdits = new SplatEdits({
          maxEdits: edits2,
          maxSdfs: sdfs
        });
        this.updateGenerator();
      }
      if (this.rgbaDisplaceEdits) {
        const editResult = this.rgbaDisplaceEdits.update(editsSdfs);
        updated || (updated = editResult.updated);
        if (editResult.dynoUpdated) {
          this.updateGenerator();
        }
      }
      if (updated) {
        this.updateVersion();
      }
      (_a2 = this.onFrame) == null ? void 0 : _a2.call(this, { mesh: this, time, deltaTime });
    }
    // This method conforms to the standard THREE.Raycaster API, performing object-ray
    // intersections using this method to populate the provided intersects[] array
    // with each intersection point.
    raycast(raycaster, intersects) {
      if (!this.packedSplats.packedArray || !this.packedSplats.numSplats) {
        return;
      }
      const { near, far, ray } = raycaster;
      const worldToMesh = this.matrixWorld.clone().invert();
      const worldToMeshRot = new Matrix3().setFromMatrix4(worldToMesh);
      const origin = ray.origin.clone().applyMatrix4(worldToMesh);
      const direction = ray.direction.clone().applyMatrix3(worldToMeshRot);
      const scales = new Vector3();
      worldToMesh.decompose(new Vector3(), new Quaternion(), scales);
      (scales.x * scales.y * scales.z) ** (1 / 3);
      const RAYCAST_ELLIPSOID = true;
      const distances = raycast_splats(
        origin.x,
        origin.y,
        origin.z,
        direction.x,
        direction.y,
        direction.z,
        near,
        far,
        this.packedSplats.numSplats,
        this.packedSplats.packedArray,
        RAYCAST_ELLIPSOID
      );
      for (const distance of distances) {
        const point = ray.direction.clone().multiplyScalar(distance).add(ray.origin);
        intersects.push({
          distance,
          point,
          object: this
        });
      }
    }
    ensureShTextures() {
      if (!this.packedSplats.extra.sh1) {
        return {};
      }
      let sh1Texture = this.packedSplats.extra.sh1Texture;
      if (!sh1Texture) {
        let sh1 = this.packedSplats.extra.sh1;
        const { width, height, depth, maxSplats } = getTextureSize(
          sh1.length / 2
        );
        if (sh1.length < maxSplats * 2) {
          const newSh1 = new Uint32Array(maxSplats * 2);
          newSh1.set(sh1);
          this.packedSplats.extra.sh1 = newSh1;
          sh1 = newSh1;
        }
        const texture = new DataArrayTexture(sh1, width, height, depth);
        texture.format = RGIntegerFormat;
        texture.type = UnsignedIntType;
        texture.internalFormat = "RG32UI";
        texture.needsUpdate = true;
        sh1Texture = new DynoUsampler2DArray({
          value: texture,
          key: "sh1"
        });
        this.packedSplats.extra.sh1Texture = sh1Texture;
      }
      if (!this.packedSplats.extra.sh2) {
        return { sh1Texture };
      }
      let sh2Texture = this.packedSplats.extra.sh2Texture;
      if (!sh2Texture) {
        let sh2 = this.packedSplats.extra.sh2;
        const { width, height, depth, maxSplats } = getTextureSize(
          sh2.length / 4
        );
        if (sh2.length < maxSplats * 4) {
          const newSh2 = new Uint32Array(maxSplats * 4);
          newSh2.set(sh2);
          this.packedSplats.extra.sh2 = newSh2;
          sh2 = newSh2;
        }
        const texture = new DataArrayTexture(sh2, width, height, depth);
        texture.format = RGBAIntegerFormat;
        texture.type = UnsignedIntType;
        texture.internalFormat = "RGBA32UI";
        texture.needsUpdate = true;
        sh2Texture = new DynoUsampler2DArray({
          value: texture,
          key: "sh2"
        });
        this.packedSplats.extra.sh2Texture = sh2Texture;
      }
      if (!this.packedSplats.extra.sh3) {
        return { sh1Texture, sh2Texture };
      }
      let sh3Texture = this.packedSplats.extra.sh3Texture;
      if (!sh3Texture) {
        let sh3 = this.packedSplats.extra.sh3;
        const { width, height, depth, maxSplats } = getTextureSize(
          sh3.length / 4
        );
        if (sh3.length < maxSplats * 4) {
          const newSh3 = new Uint32Array(maxSplats * 4);
          newSh3.set(sh3);
          this.packedSplats.extra.sh3 = newSh3;
          sh3 = newSh3;
        }
        const texture = new DataArrayTexture(sh3, width, height, depth);
        texture.format = RGBAIntegerFormat;
        texture.type = UnsignedIntType;
        texture.internalFormat = "RGBA32UI";
        texture.needsUpdate = true;
        sh3Texture = new DynoUsampler2DArray({
          value: texture,
          key: "sh3"
        });
        this.packedSplats.extra.sh3Texture = sh3Texture;
      }
      return { sh1Texture, sh2Texture, sh3Texture };
    }
  };
  _SplatMesh.staticInitialized = _SplatMesh.staticInitialize();
  _SplatMesh.isStaticInitialized = false;
  _SplatMesh.dynoTime = new DynoFloat({ value: 0 });
  let SplatMesh = _SplatMesh;
  const defineEvaluateSH1 = unindent(\`
  vec3 evaluateSH1(Gsplat gsplat, usampler2DArray sh1, vec3 viewDir) {
    // Extract sint7 values packed into 2 x uint32
    uvec2 packed = texelFetch(sh1, splatTexCoord(gsplat.index), 0).rg;
    vec3 sh1_0 = vec3(ivec3(
      int(packed.x << 25u) >> 25,
      int(packed.x << 18u) >> 25,
      int(packed.x << 11u) >> 25
    )) / 63.0;
    vec3 sh1_1 = vec3(ivec3(
      int(packed.x << 4u) >> 25,
      int((packed.x >> 3u) | (packed.y << 29u)) >> 25,
      int(packed.y << 22u) >> 25
    )) / 63.0;
    vec3 sh1_2 = vec3(ivec3(
      int(packed.y << 15u) >> 25,
      int(packed.y << 8u) >> 25,
      int(packed.y << 1u) >> 25
    )) / 63.0;

    return sh1_0 * (-0.4886025 * viewDir.y)
      + sh1_1 * (0.4886025 * viewDir.z)
      + sh1_2 * (-0.4886025 * viewDir.x);
  }
\`);
  const defineEvaluateSH2 = unindent(\`
  vec3 evaluateSH2(Gsplat gsplat, usampler2DArray sh2, vec3 viewDir) {
    // Extract sint8 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh2, splatTexCoord(gsplat.index), 0);
    vec3 sh2_0 = vec3(ivec3(
      int(packed.x << 24u) >> 24,
      int(packed.x << 16u) >> 24,
      int(packed.x << 8u) >> 24
    )) / 127.0;
    vec3 sh2_1 = vec3(ivec3(
      int(packed.x) >> 24,
      int(packed.y << 24u) >> 24,
      int(packed.y << 16u) >> 24
    )) / 127.0;
    vec3 sh2_2 = vec3(ivec3(
      int(packed.y << 8u) >> 24,
      int(packed.y) >> 24,
      int(packed.z << 24u) >> 24
    )) / 127.0;
    vec3 sh2_3 = vec3(ivec3(
      int(packed.z << 16u) >> 24,
      int(packed.z << 8u) >> 24,
      int(packed.z) >> 24
    )) / 127.0;
    vec3 sh2_4 = vec3(ivec3(
      int(packed.w << 24u) >> 24,
      int(packed.w << 16u) >> 24,
      int(packed.w << 8u) >> 24
    )) / 127.0;

    return sh2_0 * (1.0925484 * viewDir.x * viewDir.y)
      + sh2_1 * (1.0925484 * viewDir.y * viewDir.z)
      + sh2_2 * (0.3153915 * (2.0 * viewDir.z * viewDir.z - viewDir.x * viewDir.x - viewDir.y * viewDir.y))
      + sh2_3 * (1.0925484 * viewDir.x * viewDir.z)
      + sh2_4 * (0.5462742 * (viewDir.x * viewDir.x - viewDir.y * viewDir.y));
  }
\`);
  const defineEvaluateSH3 = unindent(\`
  vec3 evaluateSH3(Gsplat gsplat, usampler2DArray sh3, vec3 viewDir) {
    // Extract sint6 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh3, splatTexCoord(gsplat.index), 0);
    vec3 sh3_0 = vec3(ivec3(
      int(packed.x << 26u) >> 26,
      int(packed.x << 20u) >> 26,
      int(packed.x << 14u) >> 26
    )) / 31.0;
    vec3 sh3_1 = vec3(ivec3(
      int(packed.x << 8u) >> 26,
      int(packed.x << 2u) >> 26,
      int((packed.x >> 4u) | (packed.y << 28u)) >> 26
    )) / 31.0;
    vec3 sh3_2 = vec3(ivec3(
      int(packed.y << 22u) >> 26,
      int(packed.y << 16u) >> 26,
      int(packed.y << 10u) >> 26
    )) / 31.0;
    vec3 sh3_3 = vec3(ivec3(
      int(packed.y << 4u) >> 26,
      int((packed.y >> 2u) | (packed.z << 30u)) >> 26,
      int(packed.z << 24u) >> 26
    )) / 31.0;
    vec3 sh3_4 = vec3(ivec3(
      int(packed.z << 18u) >> 26,
      int(packed.z << 12u) >> 26,
      int(packed.z << 6u) >> 26
    )) / 31.0;
    vec3 sh3_5 = vec3(ivec3(
      int(packed.z) >> 26,
      int(packed.w << 26u) >> 26,
      int(packed.w << 20u) >> 26
    )) / 31.0;
    vec3 sh3_6 = vec3(ivec3(
      int(packed.w << 14u) >> 26,
      int(packed.w << 8u) >> 26,
      int(packed.w << 2u) >> 26
    )) / 31.0;

    float xx = viewDir.x * viewDir.x;
    float yy = viewDir.y * viewDir.y;
    float zz = viewDir.z * viewDir.z;
    float xy = viewDir.x * viewDir.y;
    float yz = viewDir.y * viewDir.z;
    float zx = viewDir.z * viewDir.x;

    return sh3_0 * (-0.5900436 * viewDir.y * (3.0 * xx - yy))
      + sh3_1 * (2.8906114 * xy * viewDir.z) +
      + sh3_2 * (-0.4570458 * viewDir.y * (4.0 * zz - xx - yy))
      + sh3_3 * (0.3731763 * viewDir.z * (2.0 * zz - 3.0 * xx - 3.0 * yy))
      + sh3_4 * (-0.4570458 * viewDir.x * (4.0 * zz - xx - yy))
      + sh3_5 * (1.4453057 * viewDir.z * (xx - yy))
      + sh3_6 * (-0.5900436 * viewDir.x * (xx - 3.0 * yy));
  }
\`);
  function evaluateSH1(gsplat, sh1, viewDir) {
    return dyno({
      inTypes: { gsplat: Gsplat, sh1: "usampler2DArray", viewDir: "vec3" },
      outTypes: { rgb: "vec3" },
      inputs: { gsplat, sh1, viewDir },
      globals: () => [defineGsplat, defineEvaluateSH1],
      statements: ({ inputs, outputs }) => {
        const statements = unindentLines(\`
        if (isGsplatActive(\${inputs.gsplat}.flags)) {
          \${outputs.rgb} = evaluateSH1(\${inputs.gsplat}, \${inputs.sh1}, \${inputs.viewDir});
        } else {
          \${outputs.rgb} = vec3(0.0);
        }
      \`);
        return statements;
      }
    }).outputs.rgb;
  }
  function evaluateSH2(gsplat, sh2, viewDir) {
    return dyno({
      inTypes: { gsplat: Gsplat, sh2: "usampler2DArray", viewDir: "vec3" },
      outTypes: { rgb: "vec3" },
      inputs: { gsplat, sh2, viewDir },
      globals: () => [defineGsplat, defineEvaluateSH2],
      statements: ({ inputs, outputs }) => unindentLines(\`
        if (isGsplatActive(\${inputs.gsplat}.flags)) {
          \${outputs.rgb} = evaluateSH2(\${inputs.gsplat}, \${inputs.sh2}, \${inputs.viewDir});
        } else {
          \${outputs.rgb} = vec3(0.0);
        }
      \`)
    }).outputs.rgb;
  }
  function evaluateSH3(gsplat, sh3, viewDir) {
    return dyno({
      inTypes: { gsplat: Gsplat, sh3: "usampler2DArray", viewDir: "vec3" },
      outTypes: { rgb: "vec3" },
      inputs: { gsplat, sh3, viewDir },
      globals: () => [defineGsplat, defineEvaluateSH3],
      statements: ({ inputs, outputs }) => unindentLines(\`
        if (isGsplatActive(\${inputs.gsplat}.flags)) {
          \${outputs.rgb} = evaluateSH3(\${inputs.gsplat}, \${inputs.sh3}, \${inputs.viewDir});
        } else {
          \${outputs.rgb} = vec3(0.0);
        }
      \`)
    }).outputs.rgb;
  }
  function WorkerWrapper(options) {
    return new Worker(
      self.location.href,
      {
        name: options == null ? void 0 : options.name
      }
    );
  }
  class SplatWorker {
    constructor() {
      this.messages = {};
      this.messageIdNext = 0;
      this.worker = new WorkerWrapper();
      this.worker.onmessage = (event) => this.onMessage(event);
    }
    makeMessageId() {
      return ++this.messageIdNext;
    }
    makeMessagePromiseId() {
      const id = this.makeMessageId();
      const promise = new Promise((resolve, reject) => {
        this.messages[id] = { resolve, reject };
      });
      return { id, promise };
    }
    onMessage(event) {
      const { id, result, error } = event.data;
      const handler = this.messages[id];
      if (handler) {
        delete this.messages[id];
        if (error) {
          handler.reject(error);
        } else {
          handler.resolve(result);
        }
      }
    }
    // Invoke an RPC on the worker with the given name and arguments.
    // The normal usage of a worker is to run one activity at a time,
    // but this function allows for concurrent calls, tagging each request
    // with a unique message Id and awaiting a response to that same Id.
    // The method will automatically transfer any ArrayBuffers in the
    // arguments to the worker. If you'd like to transfer a copy of a
    // buffer then you must clone it before passing to this function.
    async call(name, args) {
      const { id, promise } = this.makeMessagePromiseId();
      this.worker.postMessage(
        { name, args, id },
        { transfer: getArrayBuffers(args) }
      );
      return promise;
    }
  }
  let maxWorkers = 4;
  let numWorkers = 0;
  const freeWorkers = [];
  const workerQueue = [];
  async function allocWorker() {
    const worker = freeWorkers.shift();
    if (worker) {
      return worker;
    }
    if (numWorkers < maxWorkers) {
      const worker2 = new SplatWorker();
      numWorkers += 1;
      return worker2;
    }
    return new Promise((resolve) => {
      workerQueue.push(resolve);
    });
  }
  function freeWorker(worker) {
    if (numWorkers > maxWorkers) {
      numWorkers -= 1;
      return;
    }
    const waiter = workerQueue.shift();
    if (waiter) {
      waiter(worker);
      return;
    }
    freeWorkers.push(worker);
  }
  async function withWorker(callback) {
    const worker = await allocWorker();
    try {
      return await callback(worker);
    } finally {
      freeWorker(worker);
    }
  }
  var SplatFileType = /* @__PURE__ */ ((SplatFileType2) => {
    SplatFileType2["PLY"] = "ply";
    SplatFileType2["SPZ"] = "spz";
    SplatFileType2["SPLAT"] = "splat";
    SplatFileType2["KSPLAT"] = "ksplat";
    return SplatFileType2;
  })(SplatFileType || {});
  function getSplatFileType(fileBytes) {
    const view = new DataView(fileBytes.buffer);
    if ((view.getUint32(0, true) & 16777215) === 7957616) {
      return "ply";
    }
    if ((view.getUint32(0, true) & 16777215) === 559903) {
      const header = decompressPartialGzip(fileBytes, 4);
      const gView = new DataView(header.buffer);
      if (gView.getUint32(0, true) === 1347635022) {
        return "spz";
      }
      return void 0;
    }
    return void 0;
  }
  function getFileExtension(pathOrUrl) {
    const noTrailing = pathOrUrl.split(/[?#]/, 1)[0];
    const lastSlash = Math.max(
      noTrailing.lastIndexOf("/"),
      noTrailing.lastIndexOf("\\\\")
    );
    const filename = noTrailing.slice(lastSlash + 1);
    const lastDot = filename.lastIndexOf(".");
    if (lastDot <= 0 || lastDot === filename.length - 1) {
      return "";
    }
    return filename.slice(lastDot + 1).toLowerCase();
  }
  function getSplatFileTypeFromPath(pathOrUrl) {
    const extension = getFileExtension(pathOrUrl);
    if (extension === "ply") {
      return "ply";
    }
    if (extension === "spz") {
      return "spz";
    }
    if (extension === "splat") {
      return "splat";
    }
    if (extension === "ksplat") {
      return "ksplat";
    }
    return void 0;
  }
  async function unpackSplats({
    input,
    fileType,
    pathOrUrl
  }) {
    const fileBytes = input instanceof ArrayBuffer ? new Uint8Array(input) : input;
    let splatFileType = fileType;
    if (!fileType) {
      splatFileType = getSplatFileType(fileBytes);
      if (!splatFileType && pathOrUrl) {
        splatFileType = getSplatFileTypeFromPath(pathOrUrl);
      }
    }
    switch (splatFileType) {
      case "ply": {
        const ply = new PlyReader({ fileBytes });
        await ply.parseHeader();
        const numSplats = ply.numSplats;
        const maxSplats = getTextureSize(numSplats).maxSplats;
        const args = { fileBytes, packedArray: new Uint32Array(maxSplats * 4) };
        return await withWorker(async (worker) => {
          const { packedArray, numSplats: numSplats2, extra } = await worker.call(
            "unpackPly",
            args
          );
          return { packedArray, numSplats: numSplats2, extra };
        });
      }
      case "spz": {
        return await withWorker(async (worker) => {
          const { packedArray, numSplats, extra } = await worker.call(
            "decodeSpz",
            {
              fileBytes
            }
          );
          return { packedArray, numSplats, extra };
        });
      }
      case "splat": {
        return await withWorker(async (worker) => {
          const { packedArray, numSplats } = await worker.call(
            "decodeAntiSplat",
            {
              fileBytes
            }
          );
          return { packedArray, numSplats };
        });
      }
      case "ksplat":
        return await withWorker(async (worker) => {
          const { packedArray, numSplats, extra } = await worker.call(
            "decodeKsplat",
            { fileBytes }
          );
          return { packedArray, numSplats, extra };
        });
      default: {
        throw new Error(\`Unknown splat file type: \${splatFileType}\`);
      }
    }
  }
  class SplatData {
    constructor({ maxSplats = 1 } = {}) {
      this.numSplats = 0;
      this.maxSplats = getTextureSize(maxSplats).maxSplats;
      this.centers = new Float32Array(this.maxSplats * 3);
      this.scales = new Float32Array(this.maxSplats * 3);
      this.quaternions = new Float32Array(this.maxSplats * 4);
      this.opacities = new Float32Array(this.maxSplats);
      this.colors = new Float32Array(this.maxSplats * 3);
    }
    pushSplat() {
      const index = this.numSplats;
      this.ensureIndex(index);
      this.numSplats += 1;
      return index;
    }
    unpushSplat(index) {
      if (index === this.numSplats - 1) {
        this.numSplats -= 1;
      } else {
        throw new Error("Cannot unpush splat from non-last position");
      }
    }
    ensureCapacity(numSplats) {
      if (numSplats > this.maxSplats) {
        const targetSplats = Math.max(numSplats, this.maxSplats * 2);
        const newCenters = new Float32Array(targetSplats * 3);
        const newScales = new Float32Array(targetSplats * 3);
        const newQuaternions = new Float32Array(targetSplats * 4);
        const newOpacities = new Float32Array(targetSplats);
        const newColors = new Float32Array(targetSplats * 3);
        newCenters.set(this.centers);
        newScales.set(this.scales);
        newQuaternions.set(this.quaternions);
        newOpacities.set(this.opacities);
        newColors.set(this.colors);
        this.centers = newCenters;
        this.scales = newScales;
        this.quaternions = newQuaternions;
        this.opacities = newOpacities;
        this.colors = newColors;
        if (this.sh1) {
          const newSh1 = new Float32Array(targetSplats * 9);
          newSh1.set(this.sh1);
          this.sh1 = newSh1;
        }
        if (this.sh2) {
          const newSh2 = new Float32Array(targetSplats * 15);
          newSh2.set(this.sh2);
          this.sh2 = newSh2;
        }
        if (this.sh3) {
          const newSh3 = new Float32Array(targetSplats * 21);
          newSh3.set(this.sh3);
          this.sh3 = newSh3;
        }
        this.maxSplats = targetSplats;
      }
    }
    ensureIndex(index) {
      this.ensureCapacity(index + 1);
    }
    setCenter(index, x2, y, z) {
      this.centers[index * 3] = x2;
      this.centers[index * 3 + 1] = y;
      this.centers[index * 3 + 2] = z;
    }
    setScale(index, scaleX, scaleY, scaleZ) {
      this.scales[index * 3] = scaleX;
      this.scales[index * 3 + 1] = scaleY;
      this.scales[index * 3 + 2] = scaleZ;
    }
    setQuaternion(index, x2, y, z, w) {
      this.quaternions[index * 4] = x2;
      this.quaternions[index * 4 + 1] = y;
      this.quaternions[index * 4 + 2] = z;
      this.quaternions[index * 4 + 3] = w;
    }
    setOpacity(index, opacity) {
      this.opacities[index] = opacity;
    }
    setColor(index, r, g, b) {
      this.colors[index * 3] = r;
      this.colors[index * 3 + 1] = g;
      this.colors[index * 3 + 2] = b;
    }
    setSh1(index, sh1) {
      if (!this.sh1) {
        this.sh1 = new Float32Array(this.maxSplats * 9);
      }
      for (let j = 0; j < 9; ++j) {
        this.sh1[index * 9 + j] = sh1[j];
      }
    }
    setSh2(index, sh2) {
      if (!this.sh2) {
        this.sh2 = new Float32Array(this.maxSplats * 15);
      }
      for (let j = 0; j < 15; ++j) {
        this.sh2[index * 15 + j] = sh2[j];
      }
    }
    setSh3(index, sh3) {
      if (!this.sh3) {
        this.sh3 = new Float32Array(this.maxSplats * 21);
      }
      for (let j = 0; j < 21; ++j) {
        this.sh3[index * 21 + j] = sh3[j];
      }
    }
  }
  class SpzReader {
    constructor({ fileBytes }) {
      this.fileBytes = fileBytes instanceof ArrayBuffer ? new Uint8Array(fileBytes) : fileBytes;
      this.reader = new GunzipReader({ fileBytes: this.fileBytes });
      const header = new DataView(this.reader.read(16).buffer);
      if (header.getUint32(0, true) !== 1347635022) {
        throw new Error("Invalid SPZ file");
      }
      this.version = header.getUint32(4, true);
      if (this.version < 1 || this.version > 2) {
        throw new Error(\`Unsupported SPZ version: \${this.version}\`);
      }
      this.numSplats = header.getUint32(8, true);
      this.shDegree = header.getUint8(12);
      this.fractionalBits = header.getUint8(13);
      this.flags = header.getUint8(14);
      this.flagAntiAlias = (this.flags & 1) !== 0;
      this.reserved = header.getUint8(15);
      this.parsed = false;
    }
    parseSplats(centerCallback, alphaCallback, rgbCallback, scalesCallback, quatCallback, shCallback) {
      if (this.parsed) {
        throw new Error("SPZ file already parsed");
      }
      this.parsed = true;
      if (this.version === 1) {
        const centerBytes = this.reader.read(this.numSplats * 3 * 2);
        const centerUint16 = new Uint16Array(centerBytes.buffer);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const x2 = fromHalf(centerUint16[i3]);
          const y = fromHalf(centerUint16[i3 + 1]);
          const z = fromHalf(centerUint16[i3 + 2]);
          centerCallback == null ? void 0 : centerCallback(i2, x2, y, z);
        }
      } else if (this.version === 2) {
        const fixed = 1 << this.fractionalBits;
        const centerBytes = this.reader.read(this.numSplats * 3 * 3);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i9 = i2 * 9;
          const x2 = ((centerBytes[i9 + 2] << 24 | centerBytes[i9 + 1] << 16 | centerBytes[i9] << 8) >> 8) / fixed;
          const y = ((centerBytes[i9 + 5] << 24 | centerBytes[i9 + 4] << 16 | centerBytes[i9 + 3] << 8) >> 8) / fixed;
          const z = ((centerBytes[i9 + 8] << 24 | centerBytes[i9 + 7] << 16 | centerBytes[i9 + 6] << 8) >> 8) / fixed;
          centerCallback == null ? void 0 : centerCallback(i2, x2, y, z);
        }
      } else {
        throw new Error("Unreachable");
      }
      {
        const bytes = this.reader.read(this.numSplats);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          alphaCallback == null ? void 0 : alphaCallback(i2, bytes[i2] / 255);
        }
      }
      {
        const rgbBytes = this.reader.read(this.numSplats * 3);
        const scale = SH_C0 / 0.15;
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const r = (rgbBytes[i3] / 255 - 0.5) * scale + 0.5;
          const g = (rgbBytes[i3 + 1] / 255 - 0.5) * scale + 0.5;
          const b = (rgbBytes[i3 + 2] / 255 - 0.5) * scale + 0.5;
          rgbCallback == null ? void 0 : rgbCallback(i2, r, g, b);
        }
      }
      {
        const scalesBytes = this.reader.read(this.numSplats * 3);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const scaleX = Math.exp(scalesBytes[i3] / 16 - 10);
          const scaleY = Math.exp(scalesBytes[i3 + 1] / 16 - 10);
          const scaleZ = Math.exp(scalesBytes[i3 + 2] / 16 - 10);
          scalesCallback == null ? void 0 : scalesCallback(i2, scaleX, scaleY, scaleZ);
        }
      }
      {
        const quatBytes = this.reader.read(this.numSplats * 3);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const quatX = quatBytes[i3] / 127.5 - 1;
          const quatY = quatBytes[i3 + 1] / 127.5 - 1;
          const quatZ = quatBytes[i3 + 2] / 127.5 - 1;
          const quatW = Math.sqrt(
            Math.max(0, 1 - quatX * quatX - quatY * quatY - quatZ * quatZ)
          );
          quatCallback == null ? void 0 : quatCallback(i2, quatX, quatY, quatZ, quatW);
        }
      }
      if (shCallback && this.shDegree >= 1) {
        const sh1 = new Float32Array(3 * 3);
        const sh2 = this.shDegree >= 2 ? new Float32Array(5 * 3) : void 0;
        const sh3 = this.shDegree >= 3 ? new Float32Array(7 * 3) : void 0;
        const shBytes = this.reader.read(
          this.numSplats * SH_DEGREE_TO_VECS[this.shDegree] * 3
        );
        let offset = 0;
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          for (let j = 0; j < 9; ++j) {
            sh1[j] = (shBytes[offset + j] - 128) / 128;
          }
          offset += 9;
          if (sh2) {
            for (let j = 0; j < 15; ++j) {
              sh2[j] = (shBytes[offset + j] - 128) / 128;
            }
            offset += 15;
          }
          if (sh3) {
            for (let j = 0; j < 21; ++j) {
              sh3[j] = (shBytes[offset + j] - 128) / 128;
            }
            offset += 21;
          }
          shCallback == null ? void 0 : shCallback(i2, sh1, sh2, sh3);
        }
      }
    }
  }
  const SH_DEGREE_TO_VECS = { 1: 3, 2: 8, 3: 15 };
  const SH_C0 = 0.28209479177387814;
  const SPZ_MAGIC = 1347635022;
  const SPZ_VERSION = 2;
  const FLAG_ANTIALIASED = 1;
  class SpzWriter {
    constructor({
      numSplats,
      shDegree,
      fractionalBits = 12,
      flagAntiAlias = true
    }) {
      this.clippedCount = 0;
      const splatSize = 9 + 1 + 3 + 3 + 3 + (shDegree >= 1 ? 9 : 0) + (shDegree >= 2 ? 15 : 0) + (shDegree >= 3 ? 21 : 0);
      const bufferSize = 16 + numSplats * splatSize;
      this.buffer = new ArrayBuffer(bufferSize);
      this.view = new DataView(this.buffer);
      this.view.setUint32(0, SPZ_MAGIC, true);
      this.view.setUint32(4, SPZ_VERSION, true);
      this.view.setUint32(8, numSplats, true);
      this.view.setUint8(12, shDegree);
      this.view.setUint8(13, fractionalBits);
      this.view.setUint8(14, flagAntiAlias ? FLAG_ANTIALIASED : 0);
      this.view.setUint8(15, 0);
      this.numSplats = numSplats;
      this.shDegree = shDegree;
      this.fractionalBits = fractionalBits;
      this.fraction = 1 << fractionalBits;
      this.flagAntiAlias = flagAntiAlias;
    }
    setCenter(index, x2, y, z) {
      const xRounded = Math.round(x2 * this.fraction);
      const xInt = Math.max(-8388607, Math.min(8388607, xRounded));
      const yRounded = Math.round(y * this.fraction);
      const yInt = Math.max(-8388607, Math.min(8388607, yRounded));
      const zRounded = Math.round(z * this.fraction);
      const zInt = Math.max(-8388607, Math.min(8388607, zRounded));
      const clipped = xRounded !== xInt || yRounded !== yInt || zRounded !== zInt;
      if (clipped) {
        this.clippedCount += 1;
      }
      const i9 = index * 9;
      const base = 16 + i9;
      this.view.setUint8(base, xInt & 255);
      this.view.setUint8(base + 1, xInt >> 8 & 255);
      this.view.setUint8(base + 2, xInt >> 16 & 255);
      this.view.setUint8(base + 3, yInt & 255);
      this.view.setUint8(base + 4, yInt >> 8 & 255);
      this.view.setUint8(base + 5, yInt >> 16 & 255);
      this.view.setUint8(base + 6, zInt & 255);
      this.view.setUint8(base + 7, zInt >> 8 & 255);
      this.view.setUint8(base + 8, zInt >> 16 & 255);
    }
    setAlpha(index, alpha) {
      const base = 16 + this.numSplats * 9 + index;
      this.view.setUint8(
        base,
        Math.max(0, Math.min(255, Math.round(alpha * 255)))
      );
    }
    static scaleRgb(r) {
      const v = ((r - 0.5) / (SH_C0 / 0.15) + 0.5) * 255;
      return Math.max(0, Math.min(255, Math.round(v)));
    }
    setRgb(index, r, g, b) {
      const base = 16 + this.numSplats * 10 + index * 3;
      this.view.setUint8(base, SpzWriter.scaleRgb(r));
      this.view.setUint8(base + 1, SpzWriter.scaleRgb(g));
      this.view.setUint8(base + 2, SpzWriter.scaleRgb(b));
    }
    setScale(index, scaleX, scaleY, scaleZ) {
      const base = 16 + this.numSplats * 13 + index * 3;
      this.view.setUint8(
        base,
        Math.max(0, Math.min(255, Math.round((Math.log(scaleX) + 10) * 16)))
      );
      this.view.setUint8(
        base + 1,
        Math.max(0, Math.min(255, Math.round((Math.log(scaleY) + 10) * 16)))
      );
      this.view.setUint8(
        base + 2,
        Math.max(0, Math.min(255, Math.round((Math.log(scaleZ) + 10) * 16)))
      );
    }
    setQuat(index, quatX, quatY, quatZ, quatW) {
      const base = 16 + this.numSplats * 16 + index * 3;
      const quatNeg = quatW < 0;
      this.view.setUint8(
        base,
        Math.max(
          0,
          Math.min(255, Math.round(((quatNeg ? -quatX : quatX) + 1) * 127.5))
        )
      );
      this.view.setUint8(
        base + 1,
        Math.max(
          0,
          Math.min(255, Math.round(((quatNeg ? -quatY : quatY) + 1) * 127.5))
        )
      );
      this.view.setUint8(
        base + 2,
        Math.max(
          0,
          Math.min(255, Math.round(((quatNeg ? -quatZ : quatZ) + 1) * 127.5))
        )
      );
    }
    static quantizeSh(sh, bits2) {
      const value = Math.round(sh * 128) + 128;
      const bucketSize = 1 << 8 - bits2;
      const quantized = Math.floor((value + bucketSize / 2) / bucketSize) * bucketSize;
      return Math.max(0, Math.min(255, quantized));
    }
    setSh(index, sh1, sh2, sh3) {
      const shVecs = SH_DEGREE_TO_VECS[this.shDegree] || 0;
      const base1 = 16 + this.numSplats * 19 + index * shVecs * 3;
      for (let j = 0; j < 9; ++j) {
        this.view.setUint8(base1 + j, SpzWriter.quantizeSh(sh1[j], 5));
      }
      if (sh2) {
        const base2 = base1 + 9;
        for (let j = 0; j < 15; ++j) {
          this.view.setUint8(base2 + j, SpzWriter.quantizeSh(sh2[j], 4));
        }
        if (sh3) {
          const base3 = base2 + 15;
          for (let j = 0; j < 21; ++j) {
            this.view.setUint8(base3 + j, SpzWriter.quantizeSh(sh3[j], 4));
          }
        }
      }
    }
    async finalize() {
      const input = new Uint8Array(this.buffer);
      const stream = new ReadableStream({
        async start(controller) {
          controller.enqueue(input);
          controller.close();
        }
      });
      const compressed = stream.pipeThrough(new CompressionStream("gzip"));
      const response = new Response(compressed);
      const buffer = await response.arrayBuffer();
      console.log(
        "Compressed",
        input.length,
        "bytes to",
        buffer.byteLength,
        "bytes"
      );
      return new Uint8Array(buffer);
    }
  }
  async function transcodeSpz(input) {
    var _a2, _b2, _c;
    const splats = new SplatData();
    const {
      inputs,
      clipXyz,
      maxSh,
      fractionalBits = 12,
      opacityThreshold
    } = input;
    for (const input2 of inputs) {
      let transformPos2 = function(pos) {
        pos.multiplyScalar(scale);
        pos.applyQuaternion(quaternion);
        pos.add(translate);
        return pos;
      }, transformScales = function(scales) {
        scales.multiplyScalar(scale);
        return scales;
      }, transformQuaternion = function(quat) {
        quat.premultiply(quaternion);
        return quat;
      }, withinClip = function(p) {
        return !clip || clip.containsPoint(p);
      }, withinOpacity = function(opacity) {
        return opacityThreshold !== void 0 ? opacity >= opacityThreshold : true;
      };
      const scale = ((_a2 = input2.transform) == null ? void 0 : _a2.scale) ?? 1;
      const quaternion = new Quaternion().fromArray(
        ((_b2 = input2.transform) == null ? void 0 : _b2.quaternion) ?? [0, 0, 0, 1]
      );
      const translate = new Vector3().fromArray(
        ((_c = input2.transform) == null ? void 0 : _c.translate) ?? [0, 0, 0]
      );
      const clip = clipXyz ? new Box3(
        new Vector3().fromArray(clipXyz.min),
        new Vector3().fromArray(clipXyz.max)
      ) : void 0;
      let fileType = input2.fileType;
      if (!fileType) {
        fileType = getSplatFileType(input2.fileBytes);
        if (!fileType && input2.pathOrUrl) {
          fileType = getSplatFileTypeFromPath(input2.pathOrUrl);
        }
      }
      switch (fileType) {
        case SplatFileType.PLY: {
          const ply = new PlyReader({ fileBytes: input2.fileBytes });
          await ply.parseHeader();
          let lastIndex = null;
          ply.parseSplats(
            (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
              const center = transformPos2(new Vector3(x2, y, z));
              if (withinClip(center) && withinOpacity(opacity)) {
                lastIndex = splats.pushSplat();
                splats.setCenter(lastIndex, center.x, center.y, center.z);
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(lastIndex, scales.x, scales.y, scales.z);
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  lastIndex,
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
                splats.setOpacity(lastIndex, opacity);
                splats.setColor(lastIndex, r, g, b);
              } else {
                lastIndex = null;
              }
            },
            (index, sh1, sh2, sh3) => {
              if (sh1 && lastIndex !== null) {
                splats.setSh1(lastIndex, sh1);
              }
              if (sh2 && lastIndex !== null) {
                splats.setSh2(lastIndex, sh2);
              }
              if (sh3 && lastIndex !== null) {
                splats.setSh3(lastIndex, sh3);
              }
            }
          );
          break;
        }
        case SplatFileType.SPZ: {
          const spz2 = new SpzReader({ fileBytes: input2.fileBytes });
          const mapping = new Int32Array(spz2.numSplats);
          mapping.fill(-1);
          const centers = new Float32Array(spz2.numSplats * 3);
          const center = new Vector3();
          spz2.parseSplats(
            (index, x2, y, z) => {
              const center2 = transformPos2(new Vector3(x2, y, z));
              centers[index * 3] = center2.x;
              centers[index * 3 + 1] = center2.y;
              centers[index * 3 + 2] = center2.z;
            },
            (index, alpha) => {
              center.fromArray(centers, index * 3);
              if (withinClip(center) && withinOpacity(alpha)) {
                mapping[index] = splats.pushSplat();
                splats.setCenter(mapping[index], center.x, center.y, center.z);
                splats.setOpacity(mapping[index], alpha);
              }
            },
            (index, r, g, b) => {
              if (mapping[index] >= 0) {
                splats.setColor(mapping[index], r, g, b);
              }
            },
            (index, scaleX, scaleY, scaleZ) => {
              if (mapping[index] >= 0) {
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(mapping[index], scales.x, scales.y, scales.z);
              }
            },
            (index, quatX, quatY, quatZ, quatW) => {
              if (mapping[index] >= 0) {
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  mapping[index],
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
              }
            },
            (index, sh1, sh2, sh3) => {
              if (mapping[index] >= 0) {
                splats.setSh1(mapping[index], sh1);
                if (sh2) {
                  splats.setSh2(mapping[index], sh2);
                }
                if (sh3) {
                  splats.setSh3(mapping[index], sh3);
                }
              }
            }
          );
          break;
        }
        case SplatFileType.SPLAT:
          decodeAntiSplat(
            input2.fileBytes,
            (numSplats) => {
            },
            (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
              const center = transformPos2(new Vector3(x2, y, z));
              if (withinClip(center) && withinOpacity(opacity)) {
                const index2 = splats.pushSplat();
                splats.setCenter(index2, center.x, center.y, center.z);
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(index2, scales.x, scales.y, scales.z);
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  index2,
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
                splats.setOpacity(index2, opacity);
                splats.setColor(index2, r, g, b);
              }
            }
          );
          break;
        case SplatFileType.KSPLAT: {
          let lastIndex = null;
          decodeKsplat(
            input2.fileBytes,
            (numSplats) => {
            },
            (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
              const center = transformPos2(new Vector3(x2, y, z));
              if (withinClip(center) && withinOpacity(opacity)) {
                lastIndex = splats.pushSplat();
                splats.setCenter(lastIndex, center.x, center.y, center.z);
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(lastIndex, scales.x, scales.y, scales.z);
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  lastIndex,
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
                splats.setOpacity(lastIndex, opacity);
                splats.setColor(lastIndex, r, g, b);
              } else {
                lastIndex = null;
              }
            },
            (index, sh1, sh2, sh3) => {
              if (lastIndex !== null) {
                splats.setSh1(lastIndex, sh1);
                if (sh2) {
                  splats.setSh2(lastIndex, sh2);
                }
                if (sh3) {
                  splats.setSh3(lastIndex, sh3);
                }
              }
            }
          );
          break;
        }
        default:
          throw new Error(\`transcodeSpz not implemented for \${fileType}\`);
      }
    }
    const shDegree = Math.min(
      maxSh ?? 3,
      splats.sh3 ? 3 : splats.sh2 ? 2 : splats.sh1 ? 1 : 0
    );
    const spz = new SpzWriter({
      numSplats: splats.numSplats,
      shDegree,
      fractionalBits,
      flagAntiAlias: true
    });
    for (let i2 = 0; i2 < splats.numSplats; ++i2) {
      const i3 = i2 * 3;
      const i4 = i2 * 4;
      spz.setCenter(
        i2,
        splats.centers[i3],
        splats.centers[i3 + 1],
        splats.centers[i3 + 2]
      );
      spz.setScale(
        i2,
        splats.scales[i3],
        splats.scales[i3 + 1],
        splats.scales[i3 + 2]
      );
      spz.setQuat(
        i2,
        splats.quaternions[i4],
        splats.quaternions[i4 + 1],
        splats.quaternions[i4 + 2],
        splats.quaternions[i4 + 3]
      );
      spz.setAlpha(i2, splats.opacities[i2]);
      spz.setRgb(
        i2,
        splats.colors[i3],
        splats.colors[i3 + 1],
        splats.colors[i3 + 2]
      );
      if (splats.sh1 && shDegree >= 1) {
        spz.setSh(
          i2,
          splats.sh1.slice(i2 * 9, (i2 + 1) * 9),
          shDegree >= 2 && splats.sh2 ? splats.sh2.slice(i2 * 15, (i2 + 1) * 15) : void 0,
          shDegree >= 3 && splats.sh3 ? splats.sh3.slice(i2 * 21, (i2 + 1) * 21) : void 0
        );
      }
    }
    const spzBytes = await spz.finalize();
    return { fileBytes: spzBytes, clippedCount: spz.clippedCount };
  }
  async function onMessage(event) {
    const { name, args, id } = event.data;
    let result = void 0;
    let error = void 0;
    try {
      switch (name) {
        case "unpackPly": {
          const { packedArray, fileBytes } = args;
          const decoded = await unpackPly({ packedArray, fileBytes });
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "decodeSpz": {
          const { fileBytes } = args;
          const decoded = unpackSpz(fileBytes);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "decodeAntiSplat": {
          const { fileBytes } = args;
          const decoded = unpackAntiSplat(fileBytes);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray
          };
          break;
        }
        case "decodeKsplat": {
          const { fileBytes } = args;
          const decoded = unpackKsplat(fileBytes);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "sortSplats": {
          const { maxSplats, totalSplats, readback, ordering } = args;
          result = {
            id,
            readback,
            ...sortSplats({ totalSplats, readback, ordering })
          };
          break;
        }
        case "sortDoubleSplats": {
          const { numSplats, readback, ordering } = args;
          result = {
            id,
            readback,
            ordering
          };
          if (WASM_SPLAT_SORT) {
            result = {
              id,
              readback,
              ordering,
              activeSplats: sort_splats(numSplats, readback, ordering)
            };
          }
          break;
        }
        case "transcodeSpz": {
          const input = args;
          const spzBytes = await transcodeSpz(input);
          result = {
            id,
            fileBytes: spzBytes,
            input
          };
          break;
        }
        default: {
          throw new Error(\`Unknown name: \${name}\`);
        }
      }
    } catch (e) {
      error = e;
    }
    self.postMessage(
      { id, result, error },
      { transfer: getArrayBuffers(result) }
    );
  }
  async function unpackPly({
    packedArray,
    fileBytes
  }) {
    const ply = new PlyReader({ fileBytes });
    await ply.parseHeader();
    const numSplats = ply.numSplats;
    const extra = {};
    const ZERO_CUTOFF = Math.exp(-20);
    ply.parseSplats(
      (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
        setPackedSplat(
          packedArray,
          index,
          x2,
          y,
          z,
          scaleX < ZERO_CUTOFF ? 0 : Math.max(SCALE_MIN, scaleX),
          scaleY < ZERO_CUTOFF ? 0 : Math.max(SCALE_MIN, scaleY),
          scaleZ < ZERO_CUTOFF ? 0 : Math.max(SCALE_MIN, scaleZ),
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b
        );
      },
      (index, sh1, sh2, sh3) => {
        if (sh1) {
          if (!extra.sh1) {
            extra.sh1 = new Uint32Array(numSplats * 2);
          }
          encodeSh1Rgb(extra.sh1, index, sh1);
        }
        if (sh2) {
          if (!extra.sh2) {
            extra.sh2 = new Uint32Array(numSplats * 4);
          }
          encodeSh2Rgb(extra.sh2, index, sh2);
        }
        if (sh3) {
          if (!extra.sh3) {
            extra.sh3 = new Uint32Array(numSplats * 4);
          }
          encodeSh3Rgb(extra.sh3, index, sh3);
        }
      }
    );
    return { packedArray, numSplats, extra };
  }
  function unpackSpz(fileBytes) {
    const spz = new SpzReader({ fileBytes });
    const numSplats = spz.numSplats;
    const maxSplats = computeMaxSplats(numSplats);
    const packedArray = new Uint32Array(maxSplats * 4);
    const extra = {};
    spz.parseSplats(
      (index, x2, y, z) => {
        setPackedSplatCenter(packedArray, index, x2, y, z);
      },
      (index, alpha) => {
        setPackedSplatOpacity(packedArray, index, alpha);
      },
      (index, r, g, b) => {
        setPackedSplatRgb(packedArray, index, r, g, b);
      },
      (index, scaleX, scaleY, scaleZ) => {
        setPackedSplatScales(packedArray, index, scaleX, scaleY, scaleZ);
      },
      (index, quatX, quatY, quatZ, quatW) => {
        setPackedSplatQuat(packedArray, index, quatX, quatY, quatZ, quatW);
      },
      (index, sh1, sh2, sh3) => {
        if (sh1) {
          if (!extra.sh1) {
            extra.sh1 = new Uint32Array(numSplats * 2);
          }
          encodeSh1Rgb(extra.sh1, index, sh1);
        }
        if (sh2) {
          if (!extra.sh2) {
            extra.sh2 = new Uint32Array(numSplats * 4);
          }
          encodeSh2Rgb(extra.sh2, index, sh2);
        }
        if (sh3) {
          if (!extra.sh3) {
            extra.sh3 = new Uint32Array(numSplats * 4);
          }
          encodeSh3Rgb(extra.sh3, index, sh3);
        }
      }
    );
    return { packedArray, numSplats, extra };
  }
  const DEPTH_INFINITY = 31744;
  const DEPTH_SIZE = DEPTH_INFINITY + 1;
  let depthArray = null;
  function sortSplats({
    totalSplats,
    readback,
    ordering
  }) {
    if (!depthArray) {
      depthArray = new Uint32Array(DEPTH_SIZE);
    }
    depthArray.fill(0);
    const readbackUint32 = readback.map((layer) => new Uint32Array(layer.buffer));
    const layerSize = readbackUint32[0].length;
    const numLayers = Math.ceil(totalSplats / layerSize);
    let layerBase = 0;
    for (let layer = 0; layer < numLayers; ++layer) {
      const readbackLayer = readbackUint32[layer];
      const layerSplats = Math.min(readbackLayer.length, totalSplats - layerBase);
      for (let i2 = 0; i2 < layerSplats; ++i2) {
        const pri = readbackLayer[i2] & 32767;
        if (pri < DEPTH_INFINITY) {
          depthArray[pri] += 1;
        }
      }
      layerBase += layerSplats;
    }
    let activeSplats = 0;
    for (let j = 0; j < DEPTH_SIZE; ++j) {
      const nextIndex = activeSplats + depthArray[j];
      depthArray[j] = activeSplats;
      activeSplats = nextIndex;
    }
    layerBase = 0;
    for (let layer = 0; layer < numLayers; ++layer) {
      const readbackLayer = readbackUint32[layer];
      const layerSplats = Math.min(readbackLayer.length, totalSplats - layerBase);
      for (let i2 = 0; i2 < layerSplats; ++i2) {
        const pri = readbackLayer[i2] & 32767;
        if (pri < DEPTH_INFINITY) {
          ordering[depthArray[pri]] = layerBase + i2;
          depthArray[pri] += 1;
        }
      }
      layerBase += layerSplats;
    }
    if (depthArray[DEPTH_SIZE - 1] !== activeSplats) {
      throw new Error(
        \`Expected \${activeSplats} active splats but got \${depthArray[DEPTH_SIZE - 1]}\`
      );
    }
    return { activeSplats, ordering };
  }
  function sortDoubleSplats({
    numSplats,
    readback,
    ordering
  }) {
    if (!depthArray) {
      depthArray = new Uint32Array(DEPTH_SIZE);
    }
    depthArray.fill(0);
    for (let i2 = 0; i2 < numSplats; ++i2) {
      const pri = readback[i2];
      if (pri < DEPTH_INFINITY) {
        depthArray[pri] += 1;
      }
    }
    let activeSplats = 0;
    for (let j = DEPTH_INFINITY - 1; j >= 0; --j) {
      const nextIndex = activeSplats + depthArray[j];
      depthArray[j] = activeSplats;
      activeSplats = nextIndex;
    }
    for (let i2 = 0; i2 < numSplats; ++i2) {
      const pri = readback[i2];
      if (pri < DEPTH_INFINITY) {
        ordering[depthArray[pri]] = i2;
        depthArray[pri] += 1;
      }
    }
    if (depthArray[0] !== activeSplats) {
      throw new Error(
        \`Expected \${activeSplats} active splats but got \${depthArray[0]}\`
      );
    }
    return { activeSplats, ordering };
  }
  const messageBuffer = [];
  function bufferMessage(event) {
    messageBuffer.push(event);
  }
  async function initialize() {
    self.addEventListener("message", bufferMessage);
    await __wbg_init();
    self.removeEventListener("message", bufferMessage);
    self.addEventListener("message", onMessage);
    for (const event of messageBuffer) {
      onMessage(event);
    }
    messageBuffer.length = 0;
  }
  initialize().catch(console.error);
})();
//# sourceMappingURL=worker-Do1mGyaZ.js.map
`,bo=typeof self<"u"&&self.Blob&&new Blob([Yc],{type:"text/javascript;charset=utf-8"});function tf(A){let t;try{if(t=bo&&(self.URL||self.webkitURL).createObjectURL(bo),!t)throw"";const e=new Worker(t,{name:A==null?void 0:A.name});return e.addEventListener("error",()=>{(self.URL||self.webkitURL).revokeObjectURL(t)}),e}catch{return new Worker("data:text/javascript;charset=utf-8,"+encodeURIComponent(Yc),{name:A==null?void 0:A.name})}finally{t&&(self.URL||self.webkitURL).revokeObjectURL(t)}}class ef{constructor(){this.messages={},this.messageIdNext=0,this.worker=new tf,this.worker.onmessage=t=>this.onMessage(t)}makeMessageId(){return++this.messageIdNext}makeMessagePromiseId(){const t=this.makeMessageId(),e=new Promise((n,i)=>{this.messages[t]={resolve:n,reject:i}});return{id:t,promise:e}}onMessage(t){const{id:e,result:n,error:i}=t.data,s=this.messages[e];s&&(delete this.messages[e],i?s.reject(i):s.resolve(n))}async call(t,e){const{id:n,promise:i}=this.makeMessagePromiseId();return this.worker.postMessage({name:t,args:e,id:n},{transfer:$E(e)}),i}}let Oc=4,ls=0;const Jc=[],qc=[];async function nf(){const A=Jc.shift();if(A)return A;if(ls<Oc){const t=new ef;return ls+=1,t}return new Promise(t=>{qc.push(t)})}function Af(A){if(ls>Oc){ls-=1;return}const t=qc.shift();if(t){t(A);return}Jc.push(A)}async function ei(A){const t=await nf();try{return await A(t)}finally{Af(t)}}function sf(A){const t=new DataView(A.buffer);if((t.getUint32(0,!0)&16777215)===7957616)return"ply";if((t.getUint32(0,!0)&16777215)===559903){const e=up(A,4);return new DataView(e.buffer).getUint32(0,!0)===1347635022?"spz":void 0}}function af(A){const t=A.split(/[?#]/,1)[0],e=Math.max(t.lastIndexOf("/"),t.lastIndexOf("\\")),n=t.slice(e+1),i=n.lastIndexOf(".");return i<=0||i===n.length-1?"":n.slice(i+1).toLowerCase()}function rf(A){const t=af(A);if(t==="ply")return"ply";if(t==="spz")return"spz";if(t==="splat")return"splat";if(t==="ksplat")return"ksplat"}async function of({input:A,fileType:t,pathOrUrl:e}){const n=A instanceof ArrayBuffer?new Uint8Array(A):A;let i=t;switch(t||(i=sf(n),!i&&e&&(i=rf(e))),i){case"ply":{const s=new Zp({fileBytes:n});await s.parseHeader();const a=s.numSplats,r=Ze(a).maxSplats,o={fileBytes:n,packedArray:new Uint32Array(r*4)};return await ei(async c=>{const{packedArray:g,numSplats:l,extra:h}=await c.call("unpackPly",o);return{packedArray:g,numSplats:l,extra:h}})}case"spz":return await ei(async s=>{const{packedArray:a,numSplats:r,extra:o}=await s.call("decodeSpz",{fileBytes:n});return{packedArray:a,numSplats:r,extra:o}});case"splat":return await ei(async s=>{const{packedArray:a,numSplats:r}=await s.call("decodeAntiSplat",{fileBytes:n});return{packedArray:a,numSplats:r}});case"ksplat":return await ei(async s=>{const{packedArray:a,numSplats:r,extra:o}=await s.call("decodeKsplat",{fileBytes:n});return{packedArray:a,numSplats:r,extra:o}});default:throw new Error(`Unknown splat file type: ${i}`)}}var cf=`precision highp float;
precision highp int;
precision highp sampler2D;
precision highp usampler2D;
precision highp isampler2D;
precision highp sampler2DArray;
precision highp usampler2DArray;
precision highp isampler2DArray;
precision highp sampler3D;
precision highp usampler3D;
precision highp isampler3D;

#include <splatDefines>

uniform uint targetLayer;
uniform int targetBase;
uniform int targetCount;

out uvec4 target;

{{ GLOBALS }}

void produceSplat(int index) {
    {{ STATEMENTS }}
}

void main() {
    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);
    int index = targetIndex - targetBase;

    if ((index >= 0) && (index < targetCount)) {
        produceSplat(index);
    } else {
        target = uvec4(0u, 0u, 0u, 0u);
    }
}`;const dn=class Ce{constructor(t={}){this.maxSplats=0,this.numSplats=0,this.packedArray=null,this.isInitialized=!1,this.target=null,this.source=null,this.needsUpdate=!0,this.extra={},this.dyno=new fr({packedSplats:this}),this.initialized=Promise.resolve(this),this.reinitialize(t)}reinitialize(t){this.isInitialized=!1,t.url||t.fileBytes||t.construct?this.initialized=this.asyncInitialize(t).then(()=>(this.isInitialized=!0,this)):(this.initialize(t),this.isInitialized=!0,this.initialized=Promise.resolve(this))}initialize(t){t.packedArray?(this.packedArray=t.packedArray,this.maxSplats=Math.floor(this.packedArray.length/4),this.maxSplats=Math.floor(this.maxSplats/Ae)*Ae,this.numSplats=Math.min(this.maxSplats,t.numSplats??Number.POSITIVE_INFINITY)):(this.maxSplats=t.maxSplats??0,this.numSplats=0),this.extra=t.extra??{}}async asyncInitialize(t){let{url:e,fileBytes:n,construct:i}=t;if(e&&(n=await fetch(e).then(async s=>{if(!s.ok)throw new Error(`${s.status} "${s.statusText}" fetching URL: ${e}`);return await s.arrayBuffer()})),n){const s=await of({input:n,fileType:t.fileType,pathOrUrl:t.fileName??e});this.initialize(s)}if(i){const s=i(this);s instanceof Promise&&await s}}dispose(){this.target&&(this.target.dispose(),this.target=null),this.source&&(this.source.dispose(),this.source=null)}ensureSplats(t){const e=t<=this.maxSplats?this.maxSplats:Math.max(t,2*this.maxSplats),n=this.packedArray?this.packedArray.length/4:0;if(!this.packedArray||e>n){this.maxSplats=Ze(e).maxSplats;const i=new Uint32Array(this.maxSplats*4);this.packedArray&&i.set(this.packedArray),this.packedArray=i}return this.packedArray}ensureSplatsSh(t,e){let n,i;if(t===0)return this.ensureSplats(e);if(t===1)n=2,i="sh1";else if(t===2)n=4,i="sh2";else if(t===3)n=4,i="sh3";else throw new Error(`Invalid level: ${t}`);let s=this.extra[i]?this.extra[i].length/n:0;const a=e<=s?s:Math.max(e,2*s);if(!this.extra[i]||a>s){s=Ze(a).maxSplats;const r=new Uint32Array(s*n);this.extra[i]&&r.set(this.extra[i]),this.extra[i]=r}return this.extra[i]}getSplat(t){if(!this.packedArray||t>=this.numSplats)throw new Error("Invalid index");return Do(this.packedArray,t)}setSplat(t,e,n,i,s,a){const r=this.ensureSplats(t+1);So(r,t,e.x,e.y,e.z,n.x,n.y,n.z,i.x,i.y,i.z,i.w,s,a.r,a.g,a.b),this.numSplats=Math.max(this.numSplats,t+1)}pushSplat(t,e,n,i,s){const a=this.ensureSplats(this.numSplats+1);So(a,this.numSplats,t.x,t.y,t.z,e.x,e.y,e.z,n.x,n.y,n.z,n.w,i,s.r,s.g,s.b),++this.numSplats}forEachSplat(t){if(!(!this.packedArray||!this.numSplats))for(let e=0;e<this.numSplats;++e){const n=Do(this.packedArray,e);t(e,n.center,n.scales,n.quaternion,n.opacity,n.color)}}ensureGenerate(t){if(this.target&&(t??1)<=this.maxSplats)return!1;this.dispose();const e=Ze(t??1),{width:n,height:i,depth:s}=e;return this.maxSplats=e.maxSplats,this.target=new Xo(n,i,s,{depthBuffer:!1,stencilBuffer:!1,generateMipmaps:!1,magFilter:ye,minFilter:ye}),this.target.texture.format=Dn,this.target.texture.type=ke,this.target.texture.internalFormat="RGBA32UI",!0}generateMapping(t){let e=0;const n=t.map(i=>{const s=e,a=Math.ceil(i/Ae)*Ae;return e+=a,{base:s,count:i}});return{maxSplats:e,mapping:n}}getTexture(){return this.target?this.target.texture:this.source||this.packedArray?this.maybeUpdateSource():Ce.getEmpty()}maybeUpdateSource(){if(!this.packedArray)throw new Error("No packed splats");if(this.needsUpdate||!this.source){if(this.needsUpdate=!1,this.source){const{width:t,height:e,depth:n}=this.source.image;this.maxSplats!==t*e*n&&(this.source.dispose(),this.source=null)}if(this.source)this.packedArray.buffer!==this.source.image.data.buffer&&(this.source.image.data=new Uint8Array(this.packedArray.buffer));else{const{width:t,height:e,depth:n}=Ze(this.maxSplats);this.source=new cn(this.packedArray,t,e,n),this.source.format=Dn,this.source.type=ke,this.source.internalFormat="RGBA32UI",this.source.needsUpdate=!0}this.source.needsUpdate=!0}return this.source}static getEmpty(){if(!Ce.emptySource){const{width:t,height:e,depth:n,maxSplats:i}=Ze(1),s=new Uint32Array(i*4);Ce.emptySource=new cn(s,t,e,n),Ce.emptySource.format=Dn,Ce.emptySource.type=ke,Ce.emptySource.internalFormat="RGBA32UI",Ce.emptySource.needsUpdate=!0}return Ce.emptySource}prepareProgramMaterial(t){let e=Ce.generatorProgram.get(t);if(!e){const i=Jn({index:"int"},{output:"uvec4"},({index:s})=>{t.inputs.index=s;const a=t.outputs.gsplat;return{output:kE(a)}});Ce.programTemplate||(Ce.programTemplate=new Mc(cf)),e=new _c({graph:i,inputs:{index:"index"},outputs:{output:"target"},template:Ce.programTemplate}),Object.assign(e.uniforms,{targetLayer:{value:0},targetBase:{value:0},targetCount:{value:0}}),Ce.generatorProgram.set(t,e)}const n=e.prepareMaterial();return Ce.mesh.material=n,{program:e,material:n}}saveRenderState(t){return{xrPresenting:t.xr.isPresenting,autoClear:t.autoClear,scissorTest:t.getScissorTest(),pixelRatio:t.getPixelRatio()}}resetRenderState(t,e){t.setRenderTarget(null),t.setPixelRatio(e.pixelRatio),t.xr.isPresenting=e.xrPresenting,t.autoClear=e.autoClear,t.setScissorTest(e.scissorTest)}generate({generator:t,base:e,count:n,renderer:i}){if(!this.target)throw new Error("Target must be initialized with ensureSplats");if(e+n>this.maxSplats)throw new Error("Base + count exceeds maxSplats");const{program:s,material:a}=this.prepareProgramMaterial(t);s.update();const r=this.saveRenderState(i),o=Math.ceil((e+n)/Ae)*Ae,c=Ae*aA;for(a.uniforms.targetBase.value=e,a.uniforms.targetCount.value=n;e<o;){const g=Math.floor(e/c);a.uniforms.targetLayer.value=g;const l=g*c,h=Math.floor((e-l)/Ae),d=Math.min(aA,Math.ceil((o-l)/Ae));i.setPixelRatio(1),i.setRenderTarget(this.target,g),i.xr.isPresenting=!1,i.autoClear=!1,i.setScissorTest(!0),i.setScissor(0,h,Ae,d-h),i.render(Ce.scene,Ce.camera),e+=Ae*(d-h)}return this.resetRenderState(i,r),{nextBase:o}}};dn.emptySource=null;dn.programTemplate=null;dn.generatorProgram=new Map;dn.geometry=new JA(2,2);dn.mesh=new Je(dn.geometry,new lr({visible:!1}));dn.scene=new zn().add(dn.mesh);dn.camera=new us;let YA=dn;class fr extends un{constructor({packedSplats:t}={}){super({key:"packedSplats",type:ps,globals:()=>[dr],value:{texture:YA.getEmpty(),numSplats:0},update:e=>{var n,i;return e.texture=((n=this.packedSplats)==null?void 0:n.getTexture())??YA.getEmpty(),e.numSplats=((i=this.packedSplats)==null?void 0:i.numSplats)??0,e}}),this.packedSplats=t}}class $a extends _g{constructor(t,e){super(),this.ordering=t,this.setAttribute("position",new qe(lf,3)),this.setIndex(new qe(gf,1)),this._maxInstanceCount=t.length,this.instanceCount=e,this.attribute=new mg(t,1,!1,1),this.attribute.setUsage(ql),this.setAttribute("splatIndex",this.attribute)}update(t,e){this.ordering=t,this.attribute.array=t,this.instanceCount=e,this.attribute.addUpdateRange(0,e),this.attribute.needsUpdate=!0}}const lf=new Float32Array([-1,-1,0,1,-1,0,1,1,0,-1,1,0]),gf=new Uint16Array([0,1,2,0,2,3]),Br=class ni{constructor(t){if(this.lastTime=null,this.encodeLinear=!1,this.superXY=1,this.display=null,this.sorting=null,this.pending=null,this.sortingCheck=!1,this.readback=new Uint16Array(0),this.spark=t.spark,this.camera=t.camera,this.viewToWorld=t.viewToWorld??new ne,t.target){const{width:e,height:n,doubleBuffer:i}=t.target,s=Math.max(1,Math.min(4,t.target.superXY??1));if(this.superXY=s,e*s>8192||n*s>8192)throw new Error("Target size too large");this.target=new ln(e*s,n*s,{format:me,type:Le,colorSpace:Ne}),i&&(this.back=new ln(e*s,n*s,{format:me,type:Le,colorSpace:Ne})),this.encodeLinear=!0}this.onTextureUpdated=t.onTextureUpdated,this.sortRadial=t.sortRadial??!0,this.sortDistance=t.sortDistance,this.sortCoorient=t.sortCoorient,this.depthBias=t.depthBias,this.sort360=t.sort360,this.orderingFreelist=new tp({allocate:e=>new Uint32Array(e),valid:(e,n)=>e.length===n}),this.autoUpdate=!1,this.setAutoUpdate(t.autoUpdate??!1)}dispose(){var t;this.setAutoUpdate(!1),this.target&&(this.target.dispose(),this.target=void 0),this.back&&(this.back.dispose(),this.back=void 0),this.display&&(this.spark.releaseAccumulator(this.display.accumulator),this.display.geometry.dispose(),this.display=null),(t=this.pending)!=null&&t.accumulator&&(this.spark.releaseAccumulator(this.pending.accumulator),this.pending=null)}setAutoUpdate(t){!this.autoUpdate&&t?this.spark.autoViewpoints.push(this):this.autoUpdate&&!t&&(this.spark.autoViewpoints=this.spark.autoViewpoints.filter(e=>e!==this)),this.autoUpdate=t}async prepare({scene:t,camera:e,viewToWorld:n,update:i,forceOrigin:s}){var a;for(n?this.viewToWorld=n:(this.camera=e??this.camera,this.camera&&(this.camera.updateMatrixWorld(),this.viewToWorld=this.camera.matrixWorld.clone()));i??!0;){const o=s?this.viewToWorld:void 0;if(this.spark.updateInternal({scene:t,originToWorld:o}))break;await new Promise(g=>setTimeout(g,10))}const r=this.spark.active;r!==((a=this.display)==null?void 0:a.accumulator)&&(this.spark.active.refCount+=1),await this.sortUpdate({accumulator:r,viewToWorld:this.viewToWorld})}renderTarget({scene:t,camera:e}){var n;const i=this.back??this.target;if(!i)throw new Error("Must initialize SparkViewpoint with target");if(e=e??this.camera,!e)throw new Error("Must provide camera");if(e instanceof Oe){const s=new Oe().copy(e,!1);s.aspect=i.width/i.height,s.updateProjectionMatrix(),e=s}this.viewToWorld=e.matrixWorld.clone();try{this.spark.renderer.setRenderTarget(i),this.spark.prepareViewpoint(this),this.spark.renderer.render(t,e)}finally{this.spark.prepareViewpoint(this.spark.defaultView),this.spark.renderer.setRenderTarget(null)}i!==this.target&&([this.target,this.back]=[this.back,this.target]),(n=this.onTextureUpdated)==null||n.call(this,i.texture)}async readTarget(){if(!this.target)throw new Error("Must initialize SparkViewpoint with target");const{width:t,height:e}=this.target,n=t*e*4;(!this.superPixels||this.superPixels.length<n)&&(this.superPixels=new Uint8Array(n)),await this.spark.renderer.readRenderTargetPixelsAsync(this.target,0,0,t,e,this.superPixels);const{superXY:i}=this;if(i===1)return this.superPixels;const s=t/i,a=e/i,r=s*a*4;(!this.pixels||this.pixels.length<r)&&(this.pixels=new Uint8Array(r));const{superPixels:o,pixels:c}=this,g=i*i;for(let l=0;l<a;l++){const h=l*s;for(let d=0;d<s;d++){const E=d*i;let f=0,I=0,u=0,x=0;for(let m=0;m<i;m++){const M=(l*i+m)*this.target.width;for(let S=0;S<i;S++){const D=(M+E+S)*4;f+=o[D],I+=o[D+1],u+=o[D+2],x+=o[D+3]}}const Q=(h+d)*4;c[Q]=f/g,c[Q+1]=I/g,c[Q+2]=u/g,c[Q+3]=x/g}}return c}async prepareRenderPixels({scene:t,camera:e,viewToWorld:n,update:i,forceOrigin:s}){return await this.prepare({scene:t,camera:e,viewToWorld:n,update:i,forceOrigin:s}),this.renderTarget({scene:t,camera:e}),this.readTarget()}autoPoll({accumulator:t}){var e,n,i,s;this.camera&&(this.camera.updateMatrixWorld(),this.viewToWorld=this.camera.matrixWorld.clone());let a=!1,r=!1;if(!this.display)a=!0;else if(t){a=!0;const{mappingVersion:c}=this.display.accumulator;t.mappingVersion===c&&(this.spark.releaseAccumulator(this.display.accumulator),this.display.accumulator=t,r=!0)}const o=((e=this.sorting)==null?void 0:e.viewToWorld)??((n=this.display)==null?void 0:n.viewToWorld);o&&!Xa({matrix1:this.viewToWorld,matrix2:o,maxDistance:this.sortDistance??.01,minCoorient:this.sortCoorient??this.sortRadial?.99:.999})&&(a=!0),a&&(t&&(t.refCount+=1),t&&((i=this.pending)!=null&&i.accumulator)&&this.pending.accumulator!==((s=this.display)==null?void 0:s.accumulator)&&this.spark.releaseAccumulator(this.pending.accumulator),this.pending={accumulator:t,viewToWorld:this.viewToWorld,displayed:r},this.driveSort())}async driveSort(){for(var t;;){if(this.sorting||!this.pending)return;const{viewToWorld:e,displayed:n}=this.pending;let i=this.pending.accumulator??((t=this.display)==null?void 0:t.accumulator);if(i||(i=this.spark.active,i.refCount+=1),this.pending=null,!i)throw new Error("No accumulator to sort");this.sorting={viewToWorld:e},await this.sortUpdate({accumulator:i,viewToWorld:e,displayed:n}),this.sorting=null}}async sortUpdate({accumulator:t,viewToWorld:e,displayed:n=!1}){if(this.sortingCheck)throw new Error("Only one sort at a time");this.sortingCheck=!0,t=t??this.spark.active;const{numSplats:i,maxSplats:s}=t.splats;let a=0,r=this.orderingFreelist.alloc(s);if(i>0){const{reader:o,doubleSortReader:c,dynoSortRadial:g,dynoOrigin:l,dynoDirection:h,dynoDepthBias:d,dynoSort360:E,dynoSplats:f}=ni.makeSorter(),I=Math.ceil(s/2);this.readback=o.ensureBuffer(I,this.readback);const u=t.toWorld.clone().invert(),x=e.clone().premultiply(u);g.value=this.sort360?!0:this.sortRadial,l.value.set(0,0,0).applyMatrix4(x),h.value.set(0,0,-1).applyMatrix4(x).sub(l.value).normalize(),d.value=this.depthBias??1,E.value=this.sort360??!1,f.packedSplats=t.splats,await o.renderReadback({renderer:this.spark.renderer,reader:c,count:Math.ceil(i/2),readback:this.readback});const Q=await ei(async m=>m.call("sortDoubleSplats",{numSplats:i,readback:this.readback,ordering:r}));this.readback=Q.readback,r=Q.ordering,a=Q.activeSplats}this.updateDisplay({accumulator:t,viewToWorld:e,ordering:r,activeSplats:a,displayed:n}),this.sortingCheck=!1}updateDisplay({accumulator:t,viewToWorld:e,ordering:n,activeSplats:i,displayed:s=!1}){if(!this.display)this.display={accumulator:t,viewToWorld:e,geometry:new $a(n,i)};else{!s&&t!==this.display.accumulator&&(this.spark.releaseAccumulator(this.display.accumulator),this.display.accumulator=t),this.display.viewToWorld=e;const a=this.display.geometry.ordering;a.length===n.length?this.display.geometry.update(n,i):(this.display.geometry.dispose(),this.display.geometry=new $a(n,i)),this.orderingFreelist.free(a)}this.spark.viewpoint===this&&this.spark.prepareViewpoint(this)}static makeSorter(){if(!ni.dynos){const t=new wo({value:!0}),e=new cs({value:new b}),n=new cs({value:new b}),i=new gi({value:1}),s=new wo({value:!1}),a=new fr,r=new Rc,o=Jn({index:"int"},{rgba8:"vec4"},({index:c})=>{if(!c)throw new Error("No index");const g={sortRadial:t,sortOrigin:e,sortDirection:n,sortDepthBias:i,sort360:s},l=bc(c,Ka("int",2)),h=os(a,l),d=Fo({gsplat:h,...g}),E=os(a,si(l,Ka("int",1))),f=Fo({gsplat:E,...g}),I=Sp({vectorType:"vec2",x:d,y:f});return{rgba8:mp(Qp(I))}});ni.dynos={dynoSortRadial:t,dynoOrigin:e,dynoDirection:n,dynoDepthBias:i,dynoSort360:s,dynoSplats:a,reader:r,doubleSortReader:o}}return ni.dynos}};Br.EMPTY_TEXTURE=new De;Br.dynos=null;let Ro=Br;const hf=Ge(`
  float computeSort(Gsplat gsplat, bool sortRadial, vec3 sortOrigin, vec3 sortDirection, float sortDepthBias, bool sort360) {
    if (!isGsplatActive(gsplat.flags)) {
      return INFINITY;
    }

    vec3 center = gsplat.center - sortOrigin;
    float biasedDepth = dot(center, sortDirection) + sortDepthBias;
    if (!sort360 && (biasedDepth <= 0.0)) {
      return INFINITY;
    }

    return sortRadial ? length(center) : biasedDepth;
  }
`);function Fo({gsplat:A,sortRadial:t,sortOrigin:e,sortDirection:n,sortDepthBias:i,sort360:s}){return Is({inTypes:{gsplat:Ee,sortRadial:"bool",sortOrigin:"vec3",sortDirection:"vec3",sortDepthBias:"float",sort360:"bool"},outTypes:{metric:"float"},globals:()=>[En,hf],inputs:{gsplat:A,sortRadial:t,sortOrigin:e,sortDirection:n,sortDepthBias:i,sort360:s},statements:({inputs:a,outputs:r})=>{const{gsplat:o,sortRadial:c,sortOrigin:g,sortDirection:l,sortDepthBias:h,sort360:d}=a;return In(`
        ${r.metric} = computeSort(${o}, ${c}, ${g}, ${l}, ${h}, ${d});
      `)}}).outputs.metric}class ia{constructor(){this.splats=new YA,this.toWorld=new ne,this.mapping=[],this.refCount=0,this.splatsVersion=-1,this.mappingVersion=-1}ensureGenerate(t){this.splats.ensureGenerate(t)&&(this.mapping=[])}generateSplats({renderer:t,modifier:e,generators:n,forceUpdate:i,originToWorld:s}){const a=this.mapping.reduce((c,g)=>(c.set(g.node,g),c),new Map);let r=0,o=0;for(const{node:c,generator:g,version:l,base:h,count:d}of n){const E=a.get(c);if((i||g!==(E==null?void 0:E.generator)||l!==(E==null?void 0:E.version)||h!==(E==null?void 0:E.base)||d!==(E==null?void 0:E.count))&&g&&d>0){const f=e.apply(g);try{this.splats.generate({generator:f,base:h,count:d,renderer:t})}catch(I){c.generator=void 0,c.generatorError=I}r+=1}o=Math.max(o,h+d)}return this.splats.numSplats=o,this.toWorld=s,this.mapping=n,r!==0}hasCorrespondence(t){return this.mapping.length!==t.mapping.length?!1:this.mapping.every(({node:e,base:n,count:i},s)=>{const{node:a,base:r,count:o}=t.mapping[s];return e===a&&n===r&&i===o})}}var uf=`const float LN_SCALE_MIN = -9.0;
const float LN_SCALE_MAX = 9.0;
const float LN_RESCALE = (LN_SCALE_MAX - LN_SCALE_MIN) / 254.0; 

const uint SPLAT_TEX_WIDTH_BITS = 11u;
const uint SPLAT_TEX_HEIGHT_BITS = 11u;
const uint SPLAT_TEX_DEPTH_BITS = 11u;
const uint SPLAT_TEX_LAYER_BITS = SPLAT_TEX_WIDTH_BITS + SPLAT_TEX_HEIGHT_BITS;

const uint SPLAT_TEX_WIDTH = 1u << SPLAT_TEX_WIDTH_BITS;
const uint SPLAT_TEX_HEIGHT = 1u << SPLAT_TEX_HEIGHT_BITS;
const uint SPLAT_TEX_DEPTH = 1u << SPLAT_TEX_DEPTH_BITS;

const uint SPLAT_TEX_WIDTH_MASK = SPLAT_TEX_WIDTH - 1u;
const uint SPLAT_TEX_HEIGHT_MASK = SPLAT_TEX_HEIGHT - 1u;
const uint SPLAT_TEX_DEPTH_MASK = SPLAT_TEX_DEPTH - 1u;

const uint F16_INF = 0x7c00u;
const float PI = 3.1415926535897932384626433832795;

const float INFINITY = 1.0 / 0.0;
const float NEG_INFINITY = -INFINITY;

const float MAX_PIXEL_RADIUS = 512.0;
const float MIN_ALPHA = 0.5 * (1.0 / 255.0); 
const float MAX_STDDEV = sqrt(8.0);

float sqr(float x) {
    return x * x;
}

float pow4(float x) {
    float x2 = x * x;
    return x2 * x2;
}

float pow8(float x) {
    float x4 = pow4(x);
    return x4 * x4;
}

vec3 srgbToLinear(vec3 rgb) {
    return pow(rgb, vec3(2.2));
}

vec3 linearToSrgb(vec3 rgb) {
    return pow(rgb, vec3(1.0 / 2.2));
}

uint encodeQuatOctXy88R8(vec4 q) {
    
    if (q.w < 0.0) {
        q = -q;
    }
    
    float theta = 2.0 * acos(q.w);
    float halfTheta = theta * 0.5;
    float s = sin(halfTheta);
    
    vec3 axis = (abs(s) < 1e-6) ? vec3(1.0, 0.0, 0.0) : q.xyz / s;
    
    
    
    float sum = abs(axis.x) + abs(axis.y) + abs(axis.z);
    vec2 p = vec2(axis.x, axis.y) / sum;
    
    if (axis.z < 0.0) {
        float oldPx = p.x;
        p.x = (1.0 - abs(p.y)) * (p.x >= 0.0 ? 1.0 : -1.0);
        p.y = (1.0 - abs(oldPx)) * (p.y >= 0.0 ? 1.0 : -1.0);
    }
    
    float u_f = p.x * 0.5 + 0.5;
    float v_f = p.y * 0.5 + 0.5;
    
    uint quantU = uint(clamp(round(u_f * 255.0), 0.0, 255.0));
    uint quantV = uint(clamp(round(v_f * 255.0), 0.0, 255.0));
    
    
    
    uint angleInt = uint(clamp(round((theta / 3.14159265359) * 255.0), 0.0, 255.0));
    
    
    return (angleInt << 16u) | (quantV << 8u) | quantU;
}

vec4 decodeQuatOctXy88R8(uint encoded) {
    
    uint quantU = encoded & uint(0xFFu);               
    uint quantV = (encoded >> 8u) & uint(0xFFu);         
    uint angleInt = encoded >> 16u;                      

    
    float u_f = float(quantU) / 255.0;
    float v_f = float(quantV) / 255.0;
    vec2 f = vec2(u_f * 2.0 - 1.0, v_f * 2.0 - 1.0);

    vec3 axis = vec3(f.xy, 1.0 - abs(f.x) - abs(f.y));
    float t = max(-axis.z, 0.0);
    axis.x += (axis.x >= 0.0) ? -t : t;
    axis.y += (axis.y >= 0.0) ? -t : t;
    axis = normalize(axis);
    
    
    float theta = (float(angleInt) / 255.0) * 3.14159265359;
    float halfTheta = theta * 0.5;
    float s = sin(halfTheta);
    float w = cos(halfTheta);
    
    return vec4(axis * s, w);
}

    

    

    

    

    

    

    

    

    

    

uvec4 packSplat(vec3 center, vec3 scales, vec4 quaternion, vec4 rgba) {
    uvec4 uRgba = uvec4(round(clamp(rgba * 255.0, 0.0, 255.0)));

    uint uQuat = encodeQuatOctXy88R8(quaternion);
    
    
    uvec3 uQuat3 = uvec3(uQuat & 0xffu, (uQuat >> 8u) & 0xffu, (uQuat >> 16u) & 0xffu);

    
    uvec3 uScales = uvec3(
        (scales.x == 0.0) ? 0u : uint(round(clamp((log(scales.x) - LN_SCALE_MIN) / LN_RESCALE, 0.0, 254.0))) + 1u,
        (scales.y == 0.0) ? 0u : uint(round(clamp((log(scales.y) - LN_SCALE_MIN) / LN_RESCALE, 0.0, 254.0))) + 1u,
        (scales.z == 0.0) ? 0u : uint(round(clamp((log(scales.z) - LN_SCALE_MIN) / LN_RESCALE, 0.0, 254.0))) + 1u
    );

    
    uint word0 = uRgba.r | (uRgba.g << 8u) | (uRgba.b << 16u) | (uRgba.a << 24u);
    uint word1 = packHalf2x16(center.xy);
    uint word2 = packHalf2x16(vec2(center.z, 0.0)) | (uQuat3.x << 16u) | (uQuat3.y << 24u);
    uint word3 = uScales.x | (uScales.y << 8u) | (uScales.z << 16u) | (uQuat3.z << 24u);
    return uvec4(word0, word1, word2, word3);
}

void unpackSplat(uvec4 packed, out vec3 center, out vec3 scales, out vec4 quaternion, out vec4 rgba) {
    uint word0 = packed.x, word1 = packed.y, word2 = packed.z, word3 = packed.w;

    uvec4 uRgba = uvec4(word0 & 0xffu, (word0 >> 8u) & 0xffu, (word0 >> 16u) & 0xffu, (word0 >> 24u) & 0xffu);
    rgba = vec4(uRgba) / 255.0;

    center = vec4(
        unpackHalf2x16(word1),
        unpackHalf2x16(word2 & 0xffffu)
    ).xyz;

    uvec3 uScales = uvec3(word3 & 0xffu, (word3 >> 8u) & 0xffu, (word3 >> 16u) & 0xffu);
    scales = vec3(
        (uScales.x == 0u) ? 0.0 : exp(LN_SCALE_MIN + float(uScales.x - 1u) * LN_RESCALE),
        (uScales.y == 0u) ? 0.0 : exp(LN_SCALE_MIN + float(uScales.y - 1u) * LN_RESCALE),
        (uScales.z == 0u) ? 0.0 : exp(LN_SCALE_MIN + float(uScales.z - 1u) * LN_RESCALE)
    );

    uint uQuat = ((word2 >> 16u) & 0xFFFFu) | ((word3 >> 8u) & 0xFF0000u);
    quaternion = decodeQuatOctXy88R8(uQuat);
    
    
}

vec3 quatVec(vec4 q, vec3 v) {
    
    vec3 t = 2.0 * cross(q.xyz, v);
    return v + q.w * t + cross(q.xyz, t);
}

vec4 quatQuat(vec4 q1, vec4 q2) {
    return vec4(
        q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
        q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,
        q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w,
        q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z
    );
}

mat3 scaleQuaternionToMatrix(vec3 s, vec4 q) {
    
    return mat3(
        s.x * (1.0 - 2.0 * (q.y * q.y + q.z * q.z)),
        s.x * (2.0 * (q.x * q.y + q.w * q.z)),
        s.x * (2.0 * (q.x * q.z - q.w * q.y)),
        s.y * (2.0 * (q.x * q.y - q.w * q.z)),
        s.y * (1.0 - 2.0 * (q.x * q.x + q.z * q.z)),
        s.y * (2.0 * (q.y * q.z + q.w * q.x)),
        s.z * (2.0 * (q.x * q.z + q.w * q.y)),
        s.z * (2.0 * (q.y * q.z - q.w * q.x)),
        s.z * (1.0 - 2.0 * (q.x * q.x + q.y * q.y))
    );
}

vec4 slerp(vec4 q1, vec4 q2, float t) {
    
    float cosHalfTheta = dot(q1, q2);

    
    if (abs(cosHalfTheta) >= 0.999) {
        return q1;
    }
    
    
    
    if (cosHalfTheta < 0.0) {
        q2 = -q2;
        cosHalfTheta = -cosHalfTheta;
    }

    
    float halfTheta = acos(cosHalfTheta);
    float sinHalfTheta = sqrt(1.0 - cosHalfTheta * cosHalfTheta);

    
    float ratioA = sin((1.0 - t) * halfTheta) / sinHalfTheta;
    float ratioB = sin(t * halfTheta) / sinHalfTheta;

    
    return q1 * ratioA + q2 * ratioB;
}

ivec3 splatTexCoord(int index) {
    uint x = uint(index) & SPLAT_TEX_WIDTH_MASK;
    uint y = (uint(index) >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK;
    uint z = uint(index) >> SPLAT_TEX_LAYER_BITS;
    return ivec3(x, y, z);
}`,df=`precision highp float;
precision highp int;

#include <splatDefines>

uniform bool encodeLinear;
uniform float maxStdDev;
uniform bool disableFalloff;
uniform float falloff;

out vec4 fragColor;

in vec4 vRgba;
in vec2 vSplatUv;
in vec3 vNdc;

void main() {
    float z = dot(vSplatUv, vSplatUv);
    if (z > (maxStdDev * maxStdDev)) {
        discard;
    }

    float alpha = vRgba.a;
    alpha *= mix(1.0, exp(-0.5 * z), falloff);
    if (alpha < MIN_ALPHA) {
        discard;
    }

    vec3 rgb = vRgba.rgb;
    if (encodeLinear) {
        rgb = srgbToLinear(rgb);
    }
    fragColor = vec4(rgb, alpha);
}`,If=`precision highp float;
precision highp int;
precision highp usampler2DArray;

#include <splatDefines>

attribute uint splatIndex;

out vec4 vRgba;
out vec2 vSplatUv;
out vec3 vNdc;

uniform vec2 renderSize;
uniform uint numSplats;
uniform vec4 renderToViewQuat;
uniform vec3 renderToViewPos;
uniform float maxStdDev;
uniform float time;
uniform float deltaTime;
uniform bool debugFlag;
uniform bool enable2DGS;
uniform float blurAmount;
uniform float preBlurAmount;
uniform float clipXY;

uniform usampler2DArray packedSplats;

void main() {
    
    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);

    if (uint(gl_InstanceID) >= numSplats) {
        return;
    }
    if (splatIndex == 0xffffffffu) {
        
        return;
    }

    ivec3 texCoord = ivec3(
        splatIndex & SPLAT_TEX_WIDTH_MASK,
        (splatIndex >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK,
        splatIndex >> SPLAT_TEX_LAYER_BITS
    );
    uvec4 packed = texelFetch(packedSplats, texCoord, 0);

    vec3 center, scales;
    vec4 quaternion, rgba;
    unpackSplat(packed, center, scales, quaternion, rgba);

    if (rgba.a < MIN_ALPHA) {
        return;
    }
    bvec3 zeroScales = equal(scales, vec3(0.0));
    if (all(zeroScales)) {
        return;
    }

    
    vec3 viewCenter = quatVec(renderToViewQuat, center) + renderToViewPos;

    
    if (viewCenter.z >= 0.0) {
        return;
    }

    
    vec4 clipCenter = projectionMatrix * vec4(viewCenter, 1.0);

    
    if (abs(clipCenter.z) >= clipCenter.w) {
        return;
    }

    
    float clip = clipXY * clipCenter.w;
    if (abs(clipCenter.x) > clip || abs(clipCenter.y) > clip) {
        return;
    }

    
    vec4 viewQuaternion = quatQuat(renderToViewQuat, quaternion);

    if (enable2DGS && any(zeroScales)) {
        vRgba = rgba;
        vSplatUv = position.xy * maxStdDev;

        vec3 offset;
        if (zeroScales.z) {
            offset = vec3(vSplatUv.xy * scales.xy, 0.0);
        } else if (zeroScales.y) {
            offset = vec3(vSplatUv.x * scales.x, 0.0, vSplatUv.y * scales.z);
        } else {
            offset = vec3(0.0, vSplatUv.xy * scales.yz);
        }

        vec3 viewPos = viewCenter + quatVec(viewQuaternion, offset);
        gl_Position = projectionMatrix * vec4(viewPos, 1.0);
        vNdc = gl_Position.xyz / gl_Position.w;
        return;
    }

    
    vec3 ndcCenter = clipCenter.xyz / clipCenter.w;

    
    mat3 RS = scaleQuaternionToMatrix(scales, viewQuaternion);
    mat3 cov3D = RS * transpose(RS);

    
    vec2 focal = 0.5 * renderSize * vec2(projectionMatrix[0][0], projectionMatrix[1][1]);
    float invZ = 1.0 / viewCenter.z;
    vec2 J1 = focal * invZ;
    vec2 J2 = -(J1 * viewCenter.xy) * invZ;
    mat3 J = mat3(
        J1.x, 0.0, J2.x,
        0.0, J1.y, J2.y,
        0.0, 0.0, 0.0
    );

    
    
    
    
    
    
    
    mat3 cov2D = transpose(J) * cov3D * J;
    float a = cov2D[0][0];
    float d = cov2D[1][1];
    float b = cov2D[0][1];

    
    a += preBlurAmount;
    d += preBlurAmount;

    
    float detOrig = a * d - b * b;
    a += blurAmount;
    d += blurAmount;
    float det = a * d - b * b;

    
    float blurAdjust = sqrt(max(0.0, detOrig / det));
    rgba.a *= blurAdjust;
    if (rgba.a < MIN_ALPHA) {
        return;
    }

    
    float eigenAvg = 0.5 * (a + d);
    float eigenDelta = sqrt(max(0.0, eigenAvg * eigenAvg - det));
    float eigen1 = eigenAvg + eigenDelta;
    float eigen2 = eigenAvg - eigenDelta;

    vec2 eigenVec1 = normalize(vec2((abs(b) < 0.001) ? 1.0 : b, eigen1 - a));
    vec2 eigenVec2 = vec2(eigenVec1.y, -eigenVec1.x);

    float scale1 = position.x * min(MAX_PIXEL_RADIUS, maxStdDev * sqrt(eigen1));
    float scale2 = position.y * min(MAX_PIXEL_RADIUS, maxStdDev * sqrt(eigen2));

    
    vec2 pixelOffset = eigenVec1 * scale1 + eigenVec2 * scale2;
    vec2 ndcOffset = (2.0 / renderSize) * pixelOffset;
    vec3 ndc = vec3(ndcCenter.xy + ndcOffset, ndcCenter.z);

    vRgba = rgba;
    vSplatUv = position.xy * maxStdDev;
    vNdc = ndc;
    gl_Position = vec4(ndc.xy * clipCenter.w, clipCenter.zw);
}`;let sa=null;function Ef(){return sa||(Lt.splatDefines=uf,sa={splatVertex:If,splatFragment:df}),sa}const No=5;let tr=!1,er=!1,Vc;function pf(A){let t=!1;return A instanceof ja?!0:(A.traverse(e=>{t=t||e instanceof ja}),t)}const Kc=zn.prototype.add;zn.prototype.add=function(A){return tr=tr||pf(A),er=er||A instanceof Wc,Kc.call(this,A),this};const ff=zn.prototype.onBeforeRender;zn.prototype.onBeforeRender=function(A){if(tr){if(!er){const t=Vc||new Wc({renderer:A});this.add(t)}zn.prototype.onBeforeRender=ff,zn.prototype.add=Kc}};const Cr=class Ye extends Je{constructor(t){const e=Ye.makeUniforms(),n=Ef(),i=new hn({glslVersion:ss,vertexShader:n.splatVertex,fragmentShader:n.splatFragment,uniforms:e,transparent:!0,blending:lA,depthTest:!0,depthWrite:!1,side:rn});super(To,i),this.autoViewpoints=[],this.rotateToAccumulator=new Ir({value:new fe}),this.translateToAccumulator=new cs({value:new b}),this.lastFrame=-1,this.lastUpdateTime=null,this.defaultCameras=[],this.pendingUpdate=null,this.envViewpoint=null,this.frustumCulled=!1,this.renderer=t.renderer,this.material=i,this.uniforms=e;const s=Jn({gsplat:Ee},{gsplat:Ee},({gsplat:a})=>{if(!a)throw new Error("gsplat not defined");return a=pc(a,{rotate:this.rotateToAccumulator,translate:this.translateToAccumulator}),{gsplat:a}});this.modifier=new Op(s),this.autoUpdate=t.autoUpdate??!0,this.preUpdate=t.preUpdate??!1,this.originDistance=t.originDistance??1,this.maxStdDev=t.maxStdDev??Math.sqrt(8),this.enable2DGS=t.enable2DGS??!0,this.preBlurAmount=t.preBlurAmount??0,this.blurAmount=t.blurAmount??.3,this.falloff=t.falloff??1,this.clipXY=t.clipXY??1.4,this.active=new ia,this.accumulatorCount=1,this.freeAccumulators=[];for(let a=0;a<1;++a)this.freeAccumulators.push(new ia),this.accumulatorCount+=1;this.defaultView=new Ro({...t.view,autoUpdate:!0,spark:this}),this.viewpoint=this.defaultView,this.prepareViewpoint(this.viewpoint),this.clock=t.clock?ap(t.clock):new oc,Vc=this}static makeUniforms(){return{renderSize:{value:new Xt},numSplats:{value:0},renderToViewQuat:{value:new fe},renderToViewPos:{value:new b},maxStdDev:{value:1},enable2DGS:{value:!1},preBlurAmount:{value:0},blurAmount:{value:.3},falloff:{value:1},clipXY:{value:1.4},packedSplats:{type:"t",value:YA.getEmpty()},time:{value:0},deltaTime:{value:0},encodeLinear:{value:!1},debugFlag:{value:!1}}}canAllocAccumulator(){return this.freeAccumulators.length>0||this.accumulatorCount<No}maybeAllocAccumulator(){let t=this.freeAccumulators.pop();if(t===void 0){if(this.accumulatorCount>=No)return null;t=new ia,this.accumulatorCount+=1}return t.refCount=1,t}releaseAccumulator(t){t.refCount-=1,t.refCount===0&&this.freeAccumulators.push(t)}newViewpoint(t){return new Ro({...t,spark:this})}onBeforeRender(t,e,n){var i,s;const a=this.time??this.clock.getElapsedTime(),r=a-(this.viewpoint.lastTime??a);this.viewpoint.lastTime=a;const o=t.info.render.frame,c=o!==this.lastFrame;this.lastFrame=o;const g=this.viewpoint;if(g===this.defaultView){if(c)if(!t.xr.isPresenting)this.defaultView.viewToWorld=n.matrixWorld.clone(),this.defaultCameras=[this.defaultView.viewToWorld];else{const E=t.xr.getCamera().cameras;this.defaultCameras=[E[0].matrixWorld,E[1].matrixWorld],this.defaultView.viewToWorld=Bf(this.defaultCameras)??new ne}this.autoUpdate&&this.update({scene:e,viewToWorld:this.defaultView.viewToWorld})}if(c&&(this.uniforms.time.value=a,this.uniforms.deltaTime.value=r,this.uniforms.debugFlag.value=performance.now()/1e3%2<1),g.target)this.uniforms.renderSize.value.set(g.target.width,g.target.height);else{const E=t.getSize(this.uniforms.renderSize.value);if(E.x===1&&E.y===1){const f=(i=t.xr.getSession())==null?void 0:i.renderState.baseLayer;f&&(E.x=f.framebufferWidth,E.y=f.framebufferHeight)}}this.uniforms.encodeLinear.value=g.encodeLinear,this.uniforms.maxStdDev.value=this.maxStdDev,this.uniforms.enable2DGS.value=this.enable2DGS,this.uniforms.preBlurAmount.value=this.preBlurAmount,this.uniforms.blurAmount.value=this.blurAmount,this.uniforms.falloff.value=this.falloff,this.uniforms.clipXY.value=this.clipXY;const l=((s=g.display)==null?void 0:s.accumulator.toWorld)??new ne,h=n.matrixWorld.clone().invert();l.clone().premultiply(h).decompose(this.uniforms.renderToViewPos.value,this.uniforms.renderToViewQuat.value,new b)}prepareViewpoint(t){if(this.viewpoint=t??this.viewpoint,this.viewpoint.display){const{accumulator:e,geometry:n}=this.viewpoint.display;this.uniforms.numSplats.value=e.splats.numSplats,this.uniforms.packedSplats.value=e.splats.getTexture(),this.geometry=n}else this.uniforms.numSplats.value=0,this.uniforms.packedSplats.value=YA.getEmpty(),this.geometry=To}update({scene:t,viewToWorld:e}){const n=this.matrixWorld.clone();this.preUpdate?this.updateInternal({scene:t,originToWorld:n,viewToWorld:e}):(this.pendingUpdate={scene:t,originToWorld:n},setTimeout(()=>{if(this.pendingUpdate){const{scene:i,originToWorld:s}=this.pendingUpdate;this.pendingUpdate=null,this.updateInternal({scene:i,originToWorld:s,viewToWorld:e})}},1))}updateInternal({scene:t,originToWorld:e,viewToWorld:n}){var i;if(!this.canAllocAccumulator())return!1;e||(e=this.active.toWorld),n=n??e.clone();const s=this.time??this.clock.getElapsedTime(),a=s-(this.lastUpdateTime??s);this.lastUpdateTime=s;const r=this.active.mapping.reduce((d,E)=>(d.set(E.node,E),d),new Map),{generators:o,globalEdits:c}=this.compileScene(t);for(const d of o)(i=d.frameUpdate)==null||i.call(d,{object:d,time:s,deltaTime:a,viewToWorld:n,globalEdits:c});for(const d of o){const E=r.get(d),f=d.generator?d.numSplats:0;(d.generator!==(E==null?void 0:E.generator)||f!==(E==null?void 0:E.count))&&d.updateVersion()}const l=!Xa({matrix1:e,matrix2:this.active.toWorld,maxDistance:this.originDistance})||o.length!==r.size||o.some(d=>{var E;return d.version!==((E=r.get(d))==null?void 0:E.version)});let h=null;if(l){if(h=this.maybeAllocAccumulator(),!h)throw new Error("Unreachable");const d=!Xa({matrix1:e,matrix2:this.active.toWorld,maxDistance:1e-5,minCoorient:.99999}),f=o.map((M,S)=>{const D=r.get(M);return D?[M.version-D.version,D.base,M]:[Number.POSITIVE_INFINITY,M.version,M]}).sort((M,S)=>M[0]!==S[0]?M[0]-S[0]:M[1]-S[1]).map(([M,S,D])=>D),I=f.map(M=>M.numSplats),{maxSplats:u,mapping:x}=h.splats.generateMapping(I),Q=f.map((M,S)=>{const{base:D,count:T}=x[S];return{node:M,generator:M.generator,version:M.version,base:D,count:T}});e.clone().invert().decompose(this.translateToAccumulator.value,this.rotateToAccumulator.value,new b),h.ensureGenerate(u),h.generateSplats({renderer:this.renderer,modifier:this.modifier,generators:Q,forceUpdate:d,originToWorld:e}),h.splatsVersion=this.active.splatsVersion+1;const m=h.hasCorrespondence(this.active);h.mappingVersion=this.active.mappingVersion+(m?0:1),this.releaseAccumulator(this.active),this.active=h,this.prepareViewpoint()}return setTimeout(()=>{for(const d of this.autoViewpoints)d.autoPoll({accumulator:h??void 0})},1),!0}compileScene(t){const e=[];t.traverse(i=>{i instanceof Hc&&e.push(i)});const n=new Set;return t.traverseVisible(i=>{if(i instanceof Uc){let s=i.parent;for(;s!=null&&!(s instanceof ja);)s=s.parent;s==null&&n.add(i)}}),{generators:e,globalEdits:Array.from(n)}}async renderEnvMap({renderer:t,scene:e,worldCenter:n,size:i=256,near:s=.1,far:a=1e3,hideObjects:r=[],update:o=!1}){var c,g;if(this.envViewpoint||(this.envViewpoint=this.newViewpoint({sort360:!0})),!Ye.cubeRender||Ye.cubeRender.target.width!==i||Ye.cubeRender.near!==s||Ye.cubeRender.far!==a){Ye.cubeRender&&Ye.cubeRender.target.dispose();const f=new sc(i,{format:me,generateMipmaps:!0,minFilter:Tl}),I=new Ac(s,a,f);Ye.cubeRender={target:f,camera:I,near:s,far:a}}Ye.pmrem||(Ye.pmrem=new qa(t??this.renderer));const l=new ne().setPosition(n);await((c=this.envViewpoint)==null?void 0:c.prepare({scene:e,viewToWorld:l,update:o}));const{target:h,camera:d}=Ye.cubeRender;d.position.copy(n);const E=new Map;for(const f of r)E.set(f,f.visible),f.visible=!1;this.prepareViewpoint(this.envViewpoint),d.update(t??this.renderer,e),this.prepareViewpoint(this.defaultView);for(const[f,I]of E.entries())f.visible=I;return(g=Ye.pmrem)==null?void 0:g.fromCubemap(h.texture).texture}recurseSetEnvMap(t,e){t.traverse(n=>{if(n instanceof Je)if(Array.isArray(n.material))for(const i of n.material)i instanceof Zr&&(i.envMap=e);else n.material instanceof Zr&&(n.material.envMap=e)})}getRgba({generator:t,rgba:e}){const n=this.active.mapping.find(({node:i})=>i===t);if(!n)throw new Error("Generator not found");return e=e??new Up,e.fromPackedSplats({packedSplats:this.active.splats,base:n.base,count:n.count,renderer:this.renderer}),e}async readRgba({generator:t,rgba:e}){return e=this.getRgba({generator:t,rgba:e}),e.read()}};Cr.cubeRender=null;Cr.pmrem=null;let Wc=Cr;const To=new $a(new Uint32Array(1),0);Jn({packedSplats:ps,index:"int"},{gsplat:Ee},({packedSplats:A,index:t})=>{if(!A||!t)throw new Error("Invalid input");return{gsplat:os(A,t)}});function Bf(A){if(A.length===0)return null;const t=new b,e=new fe,n=new b,i=[],s=[];for(const a of A)a.decompose(t,e,n),i.push(t),s.push(e);return new ne().compose(op(i),cp(s),new b(1,1,1))}Ge(`
  struct GsplatSkinning {
    int numSplats;
    int numBones;
    usampler2DArray skinTexture;
    sampler2D boneTexture;
  };
`);Ge(`
  void applyGsplatSkinning(
    int numSplats, int numBones,
    usampler2DArray skinTexture, sampler2D boneTexture,
    int splatIndex, inout vec3 center, inout vec4 quaternion
  ) {
    if ((splatIndex < 0) || (splatIndex >= numSplats)) {
      return;
    }

    uvec4 skinData = texelFetch(skinTexture, splatTexCoord(splatIndex), 0);

    float weights[4];
    weights[0] = float(skinData.x & 0xffu) / 255.0;
    weights[1] = float(skinData.y & 0xffu) / 255.0;
    weights[2] = float(skinData.z & 0xffu) / 255.0;
    weights[3] = float(skinData.w & 0xffu) / 255.0;

    uint boneIndices[4];
    boneIndices[0] = (skinData.x >> 8u) & 0xffu;
    boneIndices[1] = (skinData.y >> 8u) & 0xffu;
    boneIndices[2] = (skinData.z >> 8u) & 0xffu;
    boneIndices[3] = (skinData.w >> 8u) & 0xffu;

    vec4 quat = vec4(0.0);
    vec4 dual = vec4(0.0);
    for (int i = 0; i < 4; i++) {
      if (weights[i] > 0.0) {
        int boneIndex = int(boneIndices[i]);
        vec4 boneQuat = vec4(0.0, 0.0, 0.0, 1.0);
        vec4 boneDual = vec4(0.0);
        if (boneIndex < numBones) {
          boneQuat = texelFetch(boneTexture, ivec2(2, boneIndex), 0);
          boneDual = texelFetch(boneTexture, ivec2(3, boneIndex), 0);
        }

        if ((i > 0) && (dot(quat, boneQuat) < 0.0)) {
          // Flip sign if next blend is pointing in the opposite direction
          boneQuat = -boneQuat;
          boneDual = -boneDual;
        }
        quat += weights[i] * boneQuat;
        dual += weights[i] * boneDual;
      }
    }

    // Normalize dual quaternion
    float norm = length(quat);
    quat /= norm;
    dual /= norm;
    vec3 translate = vec3(
      2.0 * (-dual.w * quat.x + dual.x * quat.w - dual.y * quat.z + dual.z * quat.y),
      2.0 * (-dual.w * quat.y + dual.x * quat.z + dual.y * quat.w - dual.z * quat.x),
      2.0 * (-dual.w * quat.z - dual.x * quat.y + dual.y * quat.x + dual.z * quat.w)
    );

    center = quatVec(quat, center) + translate;
    quaternion = quatQuat(quat, quaternion);
  }
`);new uA(new b(-1,-1,-1),new b(1,1,1)),new b(-1,-3,1).normalize(),new Ht(1,1,1),new Ht(.5,.5,1),new b(1,1,1);new uA(new b(-2,-1,-2),new b(2,5,2)),new b(0,-1,0),new Ht(1,1,1),new Ht(.25,.25,.5),new b(.1,1,.1);const Xc=class nr{static createButton(t,e={}){const n=navigator.xr;if(!n)return null;const i=n,s=document.createElement("button");t.xr.enabled=!0,t.xr.setReferenceSpaceType("local");function a(){let l=null;async function h(f){console.log("onSessionStarted"),f.addEventListener("end",d),await t.xr.setSession(f),s.textContent="EXIT VR",l=f}function d(){console.log("onSessionEnded"),l==null||l.removeEventListener("end",d),s.textContent="ENTER VR",l=null}s.style.display="",s.style.cursor="pointer",s.style.left="calc(50% - 100px)",s.style.width="200px",s.style.height="100px",s.textContent="ENTER VR";const E={...e,optionalFeatures:[...e.optionalFeatures||[]]};s.onmouseenter=()=>{s.style.opacity="1.0"},s.onmouseleave=()=>{s.style.opacity="0.5"},s.onclick=()=>{l===null?(console.log("requesting session"),i.requestSession("immersive-vr",E).then(h)):(console.log("ending session"),l.end())}}function r(){s.style.display="none",s.style.cursor="auto",s.style.left="calc(50% - 75px)",s.style.width="150px",s.onmouseenter=null,s.onmouseleave=null,s.onclick=null}function o(){r(),s.textContent="VR NOT SUPPORTED"}function c(l){r(),console.warn("Exception when trying to call xr.isSessionSupported",l),s.textContent="VR NOT ALLOWED"}function g(l){l.style.position="absolute",l.style.bottom="20px",l.style.padding="12px 6px",l.style.border="1px solid #fff",l.style.borderRadius="4px",l.style.background="rgba(0,0,0,0.1)",l.style.color="#fff",l.style.font="normal 13px sans-serif",l.style.textAlign="center",l.style.opacity="0.5",l.style.outline="none",l.style.zIndex="999"}return s.id="VRButton",s.style.display="none",g(s),i.isSessionSupported("immersive-vr").then(l=>{l?a():o(),l&&nr.xrSessionIsGranted&&s.click()}).catch(c),s}static registerSessionGrantedListener(){const t=navigator.xr;if(!t)return null;const e=t;/WebXRViewer\//i.test(navigator.userAgent)||e.addEventListener("sessiongranted",()=>{nr.xrSessionIsGranted=!0})}};Xc.xrSessionIsGranted=!1;let Cf=Xc;Cf.registerSessionGrantedListener();var Zc=(A=>(A.w="wrist",A.t0="thumb-metacarpal",A.t1="thumb-phalanx-proximal",A.t2="thumb-phalanx-distal",A.t3="thumb-tip",A.i0="index-finger-metacarpal",A.i1="index-finger-phalanx-proximal",A.i2="index-finger-phalanx-intermediate",A.i3="index-finger-phalanx-distal",A.i4="index-finger-tip",A.m0="middle-finger-metacarpal",A.m1="middle-finger-phalanx-proximal",A.m2="middle-finger-phalanx-intermediate",A.m3="middle-finger-phalanx-distal",A.m4="middle-finger-tip",A.r0="ring-finger-metacarpal",A.r1="ring-finger-phalanx-proximal",A.r2="ring-finger-phalanx-intermediate",A.r3="ring-finger-phalanx-distal",A.r4="ring-finger-tip",A.p0="pinky-finger-metacarpal",A.p1="pinky-finger-phalanx-proximal",A.p2="pinky-finger-phalanx-intermediate",A.p3="pinky-finger-phalanx-distal",A.p4="pinky-finger-tip",A))(Zc||{});const Qf=Object.keys(Zc);Qf.length;new b(0,0,-1),new b(0,0,1),new b(-1,0,0),new b(1,0,0),new b(0,1,0),new b(0,-1,0);new b(0,0,-1),new b(0,0,1),new b(-1,0,0),new b(1,0,0),new b(0,1,0),new b(0,-1,0);new b(0,0,1),new b(0,0,-1);new b(0,-1,0),new b(0,1,0),new b(-1,0,0),new b(1,0,0);export{Oe as P,zn as S,mf as W,ja as a};
