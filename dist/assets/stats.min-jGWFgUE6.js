(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))A(a);new MutationObserver(a=>{for(const s of a)if(s.type==="childList")for(const n of s.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&A(n)}).observe(document,{childList:!0,subtree:!0});function e(a){const s={};return a.integrity&&(s.integrity=a.integrity),a.referrerPolicy&&(s.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?s.credentials="include":a.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function A(a){if(a.ep)return;a.ep=!0;const s=e(a);fetch(a.href,s)}})();/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const REVISION="177",CullFaceNone=0,CullFaceBack=1,CullFaceFront=2,PCFShadowMap=1,PCFSoftShadowMap=2,VSMShadowMap=3,FrontSide=0,BackSide=1,DoubleSide=2,NoBlending=0,NormalBlending=1,AdditiveBlending=2,SubtractiveBlending=3,MultiplyBlending=4,CustomBlending=5,AddEquation=100,SubtractEquation=101,ReverseSubtractEquation=102,MinEquation=103,MaxEquation=104,ZeroFactor=200,OneFactor=201,SrcColorFactor=202,OneMinusSrcColorFactor=203,SrcAlphaFactor=204,OneMinusSrcAlphaFactor=205,DstAlphaFactor=206,OneMinusDstAlphaFactor=207,DstColorFactor=208,OneMinusDstColorFactor=209,SrcAlphaSaturateFactor=210,ConstantColorFactor=211,OneMinusConstantColorFactor=212,ConstantAlphaFactor=213,OneMinusConstantAlphaFactor=214,NeverDepth=0,AlwaysDepth=1,LessDepth=2,LessEqualDepth=3,EqualDepth=4,GreaterEqualDepth=5,GreaterDepth=6,NotEqualDepth=7,MultiplyOperation=0,MixOperation=1,AddOperation=2,NoToneMapping=0,LinearToneMapping=1,ReinhardToneMapping=2,CineonToneMapping=3,ACESFilmicToneMapping=4,CustomToneMapping=5,AgXToneMapping=6,NeutralToneMapping=7,UVMapping=300,CubeReflectionMapping=301,CubeRefractionMapping=302,EquirectangularReflectionMapping=303,EquirectangularRefractionMapping=304,CubeUVReflectionMapping=306,RepeatWrapping=1e3,ClampToEdgeWrapping=1001,MirroredRepeatWrapping=1002,NearestFilter=1003,NearestMipmapNearestFilter=1004,NearestMipmapLinearFilter=1005,LinearFilter=1006,LinearMipmapNearestFilter=1007,LinearMipmapLinearFilter=1008,LinearMipMapLinearFilter=1008,UnsignedByteType=1009,ByteType=1010,ShortType=1011,UnsignedShortType=1012,IntType=1013,UnsignedIntType=1014,FloatType=1015,HalfFloatType=1016,UnsignedShort4444Type=1017,UnsignedShort5551Type=1018,UnsignedInt248Type=1020,UnsignedInt5999Type=35902,AlphaFormat=1021,RGBFormat=1022,RGBAFormat=1023,DepthFormat=1026,DepthStencilFormat=1027,RedFormat=1028,RedIntegerFormat=1029,RGFormat=1030,RGIntegerFormat=1031,RGBAIntegerFormat=1033,RGB_S3TC_DXT1_Format=33776,RGBA_S3TC_DXT1_Format=33777,RGBA_S3TC_DXT3_Format=33778,RGBA_S3TC_DXT5_Format=33779,RGB_PVRTC_4BPPV1_Format=35840,RGB_PVRTC_2BPPV1_Format=35841,RGBA_PVRTC_4BPPV1_Format=35842,RGBA_PVRTC_2BPPV1_Format=35843,RGB_ETC1_Format=36196,RGB_ETC2_Format=37492,RGBA_ETC2_EAC_Format=37496,RGBA_ASTC_4x4_Format=37808,RGBA_ASTC_5x4_Format=37809,RGBA_ASTC_5x5_Format=37810,RGBA_ASTC_6x5_Format=37811,RGBA_ASTC_6x6_Format=37812,RGBA_ASTC_8x5_Format=37813,RGBA_ASTC_8x6_Format=37814,RGBA_ASTC_8x8_Format=37815,RGBA_ASTC_10x5_Format=37816,RGBA_ASTC_10x6_Format=37817,RGBA_ASTC_10x8_Format=37818,RGBA_ASTC_10x10_Format=37819,RGBA_ASTC_12x10_Format=37820,RGBA_ASTC_12x12_Format=37821,RGBA_BPTC_Format=36492,RGB_BPTC_SIGNED_Format=36494,RGB_BPTC_UNSIGNED_Format=36495,RED_RGTC1_Format=36283,SIGNED_RED_RGTC1_Format=36284,RED_GREEN_RGTC2_Format=36285,SIGNED_RED_GREEN_RGTC2_Format=36286,BasicDepthPacking=3200,RGBADepthPacking=3201,TangentSpaceNormalMap=0,ObjectSpaceNormalMap=1,NoColorSpace="",SRGBColorSpace="srgb",LinearSRGBColorSpace="srgb-linear",LinearTransfer="linear",SRGBTransfer="srgb",KeepStencilOp=7680,AlwaysStencilFunc=519,NeverCompare=512,LessCompare=513,EqualCompare=514,LessEqualCompare=515,GreaterCompare=516,NotEqualCompare=517,GreaterEqualCompare=518,AlwaysCompare=519,StaticDrawUsage=35044,DynamicDrawUsage=35048,GLSL3="300 es",WebGLCoordinateSystem=2e3,WebGPUCoordinateSystem=2001;class EventDispatcher{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const A=this._listeners;A[t]===void 0&&(A[t]=[]),A[t].indexOf(e)===-1&&A[t].push(e)}hasEventListener(t,e){const A=this._listeners;return A===void 0?!1:A[t]!==void 0&&A[t].indexOf(e)!==-1}removeEventListener(t,e){const A=this._listeners;if(A===void 0)return;const a=A[t];if(a!==void 0){const s=a.indexOf(e);s!==-1&&a.splice(s,1)}}dispatchEvent(t){const e=this._listeners;if(e===void 0)return;const A=e[t.type];if(A!==void 0){t.target=this;const a=A.slice(0);for(let s=0,n=a.length;s<n;s++)a[s].call(this,t);t.target=null}}}const _lut=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],DEG2RAD=Math.PI/180,RAD2DEG=180/Math.PI;function generateUUID(){const r=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,A=Math.random()*4294967295|0;return(_lut[r&255]+_lut[r>>8&255]+_lut[r>>16&255]+_lut[r>>24&255]+"-"+_lut[t&255]+_lut[t>>8&255]+"-"+_lut[t>>16&15|64]+_lut[t>>24&255]+"-"+_lut[e&63|128]+_lut[e>>8&255]+"-"+_lut[e>>16&255]+_lut[e>>24&255]+_lut[A&255]+_lut[A>>8&255]+_lut[A>>16&255]+_lut[A>>24&255]).toLowerCase()}function clamp(r,t,e){return Math.max(t,Math.min(e,r))}function euclideanModulo(r,t){return(r%t+t)%t}function lerp(r,t,e){return(1-e)*r+e*t}function denormalize(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function normalize$1(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}class Vector2{constructor(t=0,e=0){Vector2.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,A=this.y,a=t.elements;return this.x=a[0]*e+a[3]*A+a[6],this.y=a[1]*e+a[4]*A+a[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=clamp(this.x,t.x,e.x),this.y=clamp(this.y,t.y,e.y),this}clampScalar(t,e){return this.x=clamp(this.x,t,e),this.y=clamp(this.y,t,e),this}clampLength(t,e){const A=this.length();return this.divideScalar(A||1).multiplyScalar(clamp(A,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const A=this.dot(t)/e;return Math.acos(clamp(A,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,A=this.y-t.y;return e*e+A*A}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,A){return this.x=t.x+(e.x-t.x)*A,this.y=t.y+(e.y-t.y)*A,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const A=Math.cos(e),a=Math.sin(e),s=this.x-t.x,n=this.y-t.y;return this.x=s*A-n*a+t.x,this.y=s*a+n*A+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Quaternion{constructor(t=0,e=0,A=0,a=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=A,this._w=a}static slerpFlat(t,e,A,a,s,n,l){let d=A[a+0],f=A[a+1],E=A[a+2],I=A[a+3];const B=s[n+0],y=s[n+1],v=s[n+2],S=s[n+3];if(l===0){t[e+0]=d,t[e+1]=f,t[e+2]=E,t[e+3]=I;return}if(l===1){t[e+0]=B,t[e+1]=y,t[e+2]=v,t[e+3]=S;return}if(I!==S||d!==B||f!==y||E!==v){let _=1-l;const Q=d*B+f*y+E*v+I*S,D=Q>=0?1:-1,b=1-Q*Q;if(b>Number.EPSILON){const P=Math.sqrt(b),R=Math.atan2(P,Q*D);_=Math.sin(_*R)/P,l=Math.sin(l*R)/P}const T=l*D;if(d=d*_+B*T,f=f*_+y*T,E=E*_+v*T,I=I*_+S*T,_===1-l){const P=1/Math.sqrt(d*d+f*f+E*E+I*I);d*=P,f*=P,E*=P,I*=P}}t[e]=d,t[e+1]=f,t[e+2]=E,t[e+3]=I}static multiplyQuaternionsFlat(t,e,A,a,s,n){const l=A[a],d=A[a+1],f=A[a+2],E=A[a+3],I=s[n],B=s[n+1],y=s[n+2],v=s[n+3];return t[e]=l*v+E*I+d*y-f*B,t[e+1]=d*v+E*B+f*I-l*y,t[e+2]=f*v+E*y+l*B-d*I,t[e+3]=E*v-l*I-d*B-f*y,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,A,a){return this._x=t,this._y=e,this._z=A,this._w=a,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const A=t._x,a=t._y,s=t._z,n=t._order,l=Math.cos,d=Math.sin,f=l(A/2),E=l(a/2),I=l(s/2),B=d(A/2),y=d(a/2),v=d(s/2);switch(n){case"XYZ":this._x=B*E*I+f*y*v,this._y=f*y*I-B*E*v,this._z=f*E*v+B*y*I,this._w=f*E*I-B*y*v;break;case"YXZ":this._x=B*E*I+f*y*v,this._y=f*y*I-B*E*v,this._z=f*E*v-B*y*I,this._w=f*E*I+B*y*v;break;case"ZXY":this._x=B*E*I-f*y*v,this._y=f*y*I+B*E*v,this._z=f*E*v+B*y*I,this._w=f*E*I-B*y*v;break;case"ZYX":this._x=B*E*I-f*y*v,this._y=f*y*I+B*E*v,this._z=f*E*v-B*y*I,this._w=f*E*I+B*y*v;break;case"YZX":this._x=B*E*I+f*y*v,this._y=f*y*I+B*E*v,this._z=f*E*v-B*y*I,this._w=f*E*I-B*y*v;break;case"XZY":this._x=B*E*I-f*y*v,this._y=f*y*I-B*E*v,this._z=f*E*v+B*y*I,this._w=f*E*I+B*y*v;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+n)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const A=e/2,a=Math.sin(A);return this._x=t.x*a,this._y=t.y*a,this._z=t.z*a,this._w=Math.cos(A),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,A=e[0],a=e[4],s=e[8],n=e[1],l=e[5],d=e[9],f=e[2],E=e[6],I=e[10],B=A+l+I;if(B>0){const y=.5/Math.sqrt(B+1);this._w=.25/y,this._x=(E-d)*y,this._y=(s-f)*y,this._z=(n-a)*y}else if(A>l&&A>I){const y=2*Math.sqrt(1+A-l-I);this._w=(E-d)/y,this._x=.25*y,this._y=(a+n)/y,this._z=(s+f)/y}else if(l>I){const y=2*Math.sqrt(1+l-A-I);this._w=(s-f)/y,this._x=(a+n)/y,this._y=.25*y,this._z=(d+E)/y}else{const y=2*Math.sqrt(1+I-A-l);this._w=(n-a)/y,this._x=(s+f)/y,this._y=(d+E)/y,this._z=.25*y}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let A=t.dot(e)+1;return A<Number.EPSILON?(A=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=A):(this._x=0,this._y=-t.z,this._z=t.y,this._w=A)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=A),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(clamp(this.dot(t),-1,1)))}rotateTowards(t,e){const A=this.angleTo(t);if(A===0)return this;const a=Math.min(1,e/A);return this.slerp(t,a),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const A=t._x,a=t._y,s=t._z,n=t._w,l=e._x,d=e._y,f=e._z,E=e._w;return this._x=A*E+n*l+a*f-s*d,this._y=a*E+n*d+s*l-A*f,this._z=s*E+n*f+A*d-a*l,this._w=n*E-A*l-a*d-s*f,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const A=this._x,a=this._y,s=this._z,n=this._w;let l=n*t._w+A*t._x+a*t._y+s*t._z;if(l<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,l=-l):this.copy(t),l>=1)return this._w=n,this._x=A,this._y=a,this._z=s,this;const d=1-l*l;if(d<=Number.EPSILON){const y=1-e;return this._w=y*n+e*this._w,this._x=y*A+e*this._x,this._y=y*a+e*this._y,this._z=y*s+e*this._z,this.normalize(),this}const f=Math.sqrt(d),E=Math.atan2(f,l),I=Math.sin((1-e)*E)/f,B=Math.sin(e*E)/f;return this._w=n*I+this._w*B,this._x=A*I+this._x*B,this._y=a*I+this._y*B,this._z=s*I+this._z*B,this._onChangeCallback(),this}slerpQuaternions(t,e,A){return this.copy(t).slerp(e,A)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),A=Math.random(),a=Math.sqrt(1-A),s=Math.sqrt(A);return this.set(a*Math.sin(t),a*Math.cos(t),s*Math.sin(e),s*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class Vector3{constructor(t=0,e=0,A=0){Vector3.prototype.isVector3=!0,this.x=t,this.y=e,this.z=A}set(t,e,A){return A===void 0&&(A=this.z),this.x=t,this.y=e,this.z=A,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(_quaternion$4.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(_quaternion$4.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,A=this.y,a=this.z,s=t.elements;return this.x=s[0]*e+s[3]*A+s[6]*a,this.y=s[1]*e+s[4]*A+s[7]*a,this.z=s[2]*e+s[5]*A+s[8]*a,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,A=this.y,a=this.z,s=t.elements,n=1/(s[3]*e+s[7]*A+s[11]*a+s[15]);return this.x=(s[0]*e+s[4]*A+s[8]*a+s[12])*n,this.y=(s[1]*e+s[5]*A+s[9]*a+s[13])*n,this.z=(s[2]*e+s[6]*A+s[10]*a+s[14])*n,this}applyQuaternion(t){const e=this.x,A=this.y,a=this.z,s=t.x,n=t.y,l=t.z,d=t.w,f=2*(n*a-l*A),E=2*(l*e-s*a),I=2*(s*A-n*e);return this.x=e+d*f+n*I-l*E,this.y=A+d*E+l*f-s*I,this.z=a+d*I+s*E-n*f,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,A=this.y,a=this.z,s=t.elements;return this.x=s[0]*e+s[4]*A+s[8]*a,this.y=s[1]*e+s[5]*A+s[9]*a,this.z=s[2]*e+s[6]*A+s[10]*a,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=clamp(this.x,t.x,e.x),this.y=clamp(this.y,t.y,e.y),this.z=clamp(this.z,t.z,e.z),this}clampScalar(t,e){return this.x=clamp(this.x,t,e),this.y=clamp(this.y,t,e),this.z=clamp(this.z,t,e),this}clampLength(t,e){const A=this.length();return this.divideScalar(A||1).multiplyScalar(clamp(A,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,A){return this.x=t.x+(e.x-t.x)*A,this.y=t.y+(e.y-t.y)*A,this.z=t.z+(e.z-t.z)*A,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const A=t.x,a=t.y,s=t.z,n=e.x,l=e.y,d=e.z;return this.x=a*d-s*l,this.y=s*n-A*d,this.z=A*l-a*n,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const A=t.dot(this)/e;return this.copy(t).multiplyScalar(A)}projectOnPlane(t){return _vector$c.copy(this).projectOnVector(t),this.sub(_vector$c)}reflect(t){return this.sub(_vector$c.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const A=this.dot(t)/e;return Math.acos(clamp(A,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,A=this.y-t.y,a=this.z-t.z;return e*e+A*A+a*a}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,A){const a=Math.sin(e)*t;return this.x=a*Math.sin(A),this.y=Math.cos(e)*t,this.z=a*Math.cos(A),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,A){return this.x=t*Math.sin(e),this.y=A,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),A=this.setFromMatrixColumn(t,1).length(),a=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=A,this.z=a,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,A=Math.sqrt(1-e*e);return this.x=A*Math.cos(t),this.y=e,this.z=A*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const _vector$c=new Vector3,_quaternion$4=new Quaternion;class Matrix3{constructor(t,e,A,a,s,n,l,d,f){Matrix3.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,A,a,s,n,l,d,f)}set(t,e,A,a,s,n,l,d,f){const E=this.elements;return E[0]=t,E[1]=a,E[2]=l,E[3]=e,E[4]=s,E[5]=d,E[6]=A,E[7]=n,E[8]=f,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,A=t.elements;return e[0]=A[0],e[1]=A[1],e[2]=A[2],e[3]=A[3],e[4]=A[4],e[5]=A[5],e[6]=A[6],e[7]=A[7],e[8]=A[8],this}extractBasis(t,e,A){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),A.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const A=t.elements,a=e.elements,s=this.elements,n=A[0],l=A[3],d=A[6],f=A[1],E=A[4],I=A[7],B=A[2],y=A[5],v=A[8],S=a[0],_=a[3],Q=a[6],D=a[1],b=a[4],T=a[7],P=a[2],R=a[5],F=a[8];return s[0]=n*S+l*D+d*P,s[3]=n*_+l*b+d*R,s[6]=n*Q+l*T+d*F,s[1]=f*S+E*D+I*P,s[4]=f*_+E*b+I*R,s[7]=f*Q+E*T+I*F,s[2]=B*S+y*D+v*P,s[5]=B*_+y*b+v*R,s[8]=B*Q+y*T+v*F,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],A=t[1],a=t[2],s=t[3],n=t[4],l=t[5],d=t[6],f=t[7],E=t[8];return e*n*E-e*l*f-A*s*E+A*l*d+a*s*f-a*n*d}invert(){const t=this.elements,e=t[0],A=t[1],a=t[2],s=t[3],n=t[4],l=t[5],d=t[6],f=t[7],E=t[8],I=E*n-l*f,B=l*d-E*s,y=f*s-n*d,v=e*I+A*B+a*y;if(v===0)return this.set(0,0,0,0,0,0,0,0,0);const S=1/v;return t[0]=I*S,t[1]=(a*f-E*A)*S,t[2]=(l*A-a*n)*S,t[3]=B*S,t[4]=(E*e-a*d)*S,t[5]=(a*s-l*e)*S,t[6]=y*S,t[7]=(A*d-f*e)*S,t[8]=(n*e-A*s)*S,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,A,a,s,n,l){const d=Math.cos(s),f=Math.sin(s);return this.set(A*d,A*f,-A*(d*n+f*l)+n+t,-a*f,a*d,-a*(-f*n+d*l)+l+e,0,0,1),this}scale(t,e){return this.premultiply(_m3.makeScale(t,e)),this}rotate(t){return this.premultiply(_m3.makeRotation(-t)),this}translate(t,e){return this.premultiply(_m3.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),A=Math.sin(t);return this.set(e,-A,0,A,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,A=t.elements;for(let a=0;a<9;a++)if(e[a]!==A[a])return!1;return!0}fromArray(t,e=0){for(let A=0;A<9;A++)this.elements[A]=t[A+e];return this}toArray(t=[],e=0){const A=this.elements;return t[e]=A[0],t[e+1]=A[1],t[e+2]=A[2],t[e+3]=A[3],t[e+4]=A[4],t[e+5]=A[5],t[e+6]=A[6],t[e+7]=A[7],t[e+8]=A[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const _m3=new Matrix3;function arrayNeedsUint32(r){for(let t=r.length-1;t>=0;--t)if(r[t]>=65535)return!0;return!1}function createElementNS(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}function createCanvasElement(){const r=createElementNS("canvas");return r.style.display="block",r}const _cache={};function warnOnce(r){r in _cache||(_cache[r]=!0,console.warn(r))}function probeAsync(r,t,e){return new Promise(function(A,a){function s(){switch(r.clientWaitSync(t,r.SYNC_FLUSH_COMMANDS_BIT,0)){case r.WAIT_FAILED:a();break;case r.TIMEOUT_EXPIRED:setTimeout(s,e);break;default:A()}}setTimeout(s,e)})}function toNormalizedProjectionMatrix(r){const t=r.elements;t[2]=.5*t[2]+.5*t[3],t[6]=.5*t[6]+.5*t[7],t[10]=.5*t[10]+.5*t[11],t[14]=.5*t[14]+.5*t[15]}function toReversedProjectionMatrix(r){const t=r.elements;t[11]===-1?(t[10]=-t[10]-1,t[14]=-t[14]):(t[10]=-t[10],t[14]=-t[14]+1)}const LINEAR_REC709_TO_XYZ=new Matrix3().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),XYZ_TO_LINEAR_REC709=new Matrix3().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function createColorManagement(){const r={enabled:!0,workingColorSpace:LinearSRGBColorSpace,spaces:{},convert:function(a,s,n){return this.enabled===!1||s===n||!s||!n||(this.spaces[s].transfer===SRGBTransfer&&(a.r=SRGBToLinear(a.r),a.g=SRGBToLinear(a.g),a.b=SRGBToLinear(a.b)),this.spaces[s].primaries!==this.spaces[n].primaries&&(a.applyMatrix3(this.spaces[s].toXYZ),a.applyMatrix3(this.spaces[n].fromXYZ)),this.spaces[n].transfer===SRGBTransfer&&(a.r=LinearToSRGB(a.r),a.g=LinearToSRGB(a.g),a.b=LinearToSRGB(a.b))),a},workingToColorSpace:function(a,s){return this.convert(a,this.workingColorSpace,s)},colorSpaceToWorking:function(a,s){return this.convert(a,s,this.workingColorSpace)},getPrimaries:function(a){return this.spaces[a].primaries},getTransfer:function(a){return a===NoColorSpace?LinearTransfer:this.spaces[a].transfer},getLuminanceCoefficients:function(a,s=this.workingColorSpace){return a.fromArray(this.spaces[s].luminanceCoefficients)},define:function(a){Object.assign(this.spaces,a)},_getMatrix:function(a,s,n){return a.copy(this.spaces[s].toXYZ).multiply(this.spaces[n].fromXYZ)},_getDrawingBufferColorSpace:function(a){return this.spaces[a].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(a=this.workingColorSpace){return this.spaces[a].workingColorSpaceConfig.unpackColorSpace},fromWorkingColorSpace:function(a,s){return warnOnce("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."),r.workingToColorSpace(a,s)},toWorkingColorSpace:function(a,s){return warnOnce("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."),r.colorSpaceToWorking(a,s)}},t=[.64,.33,.3,.6,.15,.06],e=[.2126,.7152,.0722],A=[.3127,.329];return r.define({[LinearSRGBColorSpace]:{primaries:t,whitePoint:A,transfer:LinearTransfer,toXYZ:LINEAR_REC709_TO_XYZ,fromXYZ:XYZ_TO_LINEAR_REC709,luminanceCoefficients:e,workingColorSpaceConfig:{unpackColorSpace:SRGBColorSpace},outputColorSpaceConfig:{drawingBufferColorSpace:SRGBColorSpace}},[SRGBColorSpace]:{primaries:t,whitePoint:A,transfer:SRGBTransfer,toXYZ:LINEAR_REC709_TO_XYZ,fromXYZ:XYZ_TO_LINEAR_REC709,luminanceCoefficients:e,outputColorSpaceConfig:{drawingBufferColorSpace:SRGBColorSpace}}}),r}const ColorManagement=createColorManagement();function SRGBToLinear(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function LinearToSRGB(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}let _canvas;class ImageUtils{static getDataURL(t,e="image/png"){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let A;if(t instanceof HTMLCanvasElement)A=t;else{_canvas===void 0&&(_canvas=createElementNS("canvas")),_canvas.width=t.width,_canvas.height=t.height;const a=_canvas.getContext("2d");t instanceof ImageData?a.putImageData(t,0,0):a.drawImage(t,0,0,t.width,t.height),A=_canvas}return A.toDataURL(e)}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=createElementNS("canvas");e.width=t.width,e.height=t.height;const A=e.getContext("2d");A.drawImage(t,0,0,t.width,t.height);const a=A.getImageData(0,0,t.width,t.height),s=a.data;for(let n=0;n<s.length;n++)s[n]=SRGBToLinear(s[n]/255)*255;return A.putImageData(a,0,0),e}else if(t.data){const e=t.data.slice(0);for(let A=0;A<e.length;A++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[A]=Math.floor(SRGBToLinear(e[A]/255)*255):e[A]=SRGBToLinear(e[A]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let _sourceId=0;class Source{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:_sourceId++}),this.uuid=generateUUID(),this.data=t,this.dataReady=!0,this.version=0}getSize(t){const e=this.data;return e instanceof HTMLVideoElement?t.set(e.videoWidth,e.videoHeight):e!==null?t.set(e.width,e.height,e.depth||0):t.set(0,0,0),t}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const A={uuid:this.uuid,url:""},a=this.data;if(a!==null){let s;if(Array.isArray(a)){s=[];for(let n=0,l=a.length;n<l;n++)a[n].isDataTexture?s.push(serializeImage(a[n].image)):s.push(serializeImage(a[n]))}else s=serializeImage(a);A.url=s}return e||(t.images[this.uuid]=A),A}}function serializeImage(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?ImageUtils.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let _textureId=0;const _tempVec3=new Vector3;class Texture extends EventDispatcher{constructor(t=Texture.DEFAULT_IMAGE,e=Texture.DEFAULT_MAPPING,A=ClampToEdgeWrapping,a=ClampToEdgeWrapping,s=LinearFilter,n=LinearMipmapLinearFilter,l=RGBAFormat,d=UnsignedByteType,f=Texture.DEFAULT_ANISOTROPY,E=NoColorSpace){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:_textureId++}),this.uuid=generateUUID(),this.name="",this.source=new Source(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=A,this.wrapT=a,this.magFilter=s,this.minFilter=n,this.anisotropy=f,this.format=l,this.internalFormat=null,this.type=d,this.offset=new Vector2(0,0),this.repeat=new Vector2(1,1),this.center=new Vector2(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Matrix3,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=E,this.userData={},this.updateRanges=[],this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.isArrayTexture=!!(t&&t.depth&&t.depth>1),this.pmremVersion=0}get width(){return this.source.getSize(_tempVec3).x}get height(){return this.source.getSize(_tempVec3).y}get depth(){return this.source.getSize(_tempVec3).z}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.renderTarget=t.renderTarget,this.isRenderTargetTexture=t.isRenderTargetTexture,this.isArrayTexture=t.isArrayTexture,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}setValues(t){for(const e in t){const A=t[e];if(A===void 0){console.warn(`THREE.Texture.setValues(): parameter '${e}' has value of undefined.`);continue}const a=this[e];if(a===void 0){console.warn(`THREE.Texture.setValues(): property '${e}' does not exist.`);continue}a&&A&&a.isVector2&&A.isVector2||a&&A&&a.isVector3&&A.isVector3||a&&A&&a.isMatrix3&&A.isMatrix3?a.copy(A):this[e]=A}}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const A={metadata:{version:4.7,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(A.userData=this.userData),e||(t.textures[this.uuid]=A),A}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==UVMapping)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case RepeatWrapping:t.x=t.x-Math.floor(t.x);break;case ClampToEdgeWrapping:t.x=t.x<0?0:1;break;case MirroredRepeatWrapping:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case RepeatWrapping:t.y=t.y-Math.floor(t.y);break;case ClampToEdgeWrapping:t.y=t.y<0?0:1;break;case MirroredRepeatWrapping:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}}Texture.DEFAULT_IMAGE=null;Texture.DEFAULT_MAPPING=UVMapping;Texture.DEFAULT_ANISOTROPY=1;class Vector4{constructor(t=0,e=0,A=0,a=1){Vector4.prototype.isVector4=!0,this.x=t,this.y=e,this.z=A,this.w=a}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,A,a){return this.x=t,this.y=e,this.z=A,this.w=a,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,A=this.y,a=this.z,s=this.w,n=t.elements;return this.x=n[0]*e+n[4]*A+n[8]*a+n[12]*s,this.y=n[1]*e+n[5]*A+n[9]*a+n[13]*s,this.z=n[2]*e+n[6]*A+n[10]*a+n[14]*s,this.w=n[3]*e+n[7]*A+n[11]*a+n[15]*s,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,A,a,s;const d=t.elements,f=d[0],E=d[4],I=d[8],B=d[1],y=d[5],v=d[9],S=d[2],_=d[6],Q=d[10];if(Math.abs(E-B)<.01&&Math.abs(I-S)<.01&&Math.abs(v-_)<.01){if(Math.abs(E+B)<.1&&Math.abs(I+S)<.1&&Math.abs(v+_)<.1&&Math.abs(f+y+Q-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const b=(f+1)/2,T=(y+1)/2,P=(Q+1)/2,R=(E+B)/4,F=(I+S)/4,O=(v+_)/4;return b>T&&b>P?b<.01?(A=0,a=.707106781,s=.707106781):(A=Math.sqrt(b),a=R/A,s=F/A):T>P?T<.01?(A=.707106781,a=0,s=.707106781):(a=Math.sqrt(T),A=R/a,s=O/a):P<.01?(A=.707106781,a=.707106781,s=0):(s=Math.sqrt(P),A=F/s,a=O/s),this.set(A,a,s,e),this}let D=Math.sqrt((_-v)*(_-v)+(I-S)*(I-S)+(B-E)*(B-E));return Math.abs(D)<.001&&(D=1),this.x=(_-v)/D,this.y=(I-S)/D,this.z=(B-E)/D,this.w=Math.acos((f+y+Q-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=clamp(this.x,t.x,e.x),this.y=clamp(this.y,t.y,e.y),this.z=clamp(this.z,t.z,e.z),this.w=clamp(this.w,t.w,e.w),this}clampScalar(t,e){return this.x=clamp(this.x,t,e),this.y=clamp(this.y,t,e),this.z=clamp(this.z,t,e),this.w=clamp(this.w,t,e),this}clampLength(t,e){const A=this.length();return this.divideScalar(A||1).multiplyScalar(clamp(A,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,A){return this.x=t.x+(e.x-t.x)*A,this.y=t.y+(e.y-t.y)*A,this.z=t.z+(e.z-t.z)*A,this.w=t.w+(e.w-t.w)*A,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class RenderTarget extends EventDispatcher{constructor(t=1,e=1,A={}){super(),A=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:LinearFilter,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1,depth:1,multiview:!1},A),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=A.depth,this.scissor=new Vector4(0,0,t,e),this.scissorTest=!1,this.viewport=new Vector4(0,0,t,e);const a={width:t,height:e,depth:A.depth},s=new Texture(a);this.textures=[];const n=A.count;for(let l=0;l<n;l++)this.textures[l]=s.clone(),this.textures[l].isRenderTargetTexture=!0,this.textures[l].renderTarget=this;this._setTextureOptions(A),this.depthBuffer=A.depthBuffer,this.stencilBuffer=A.stencilBuffer,this.resolveDepthBuffer=A.resolveDepthBuffer,this.resolveStencilBuffer=A.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=A.depthTexture,this.samples=A.samples,this.multiview=A.multiview}_setTextureOptions(t={}){const e={minFilter:LinearFilter,generateMipmaps:!1,flipY:!1,internalFormat:null};t.mapping!==void 0&&(e.mapping=t.mapping),t.wrapS!==void 0&&(e.wrapS=t.wrapS),t.wrapT!==void 0&&(e.wrapT=t.wrapT),t.wrapR!==void 0&&(e.wrapR=t.wrapR),t.magFilter!==void 0&&(e.magFilter=t.magFilter),t.minFilter!==void 0&&(e.minFilter=t.minFilter),t.format!==void 0&&(e.format=t.format),t.type!==void 0&&(e.type=t.type),t.anisotropy!==void 0&&(e.anisotropy=t.anisotropy),t.colorSpace!==void 0&&(e.colorSpace=t.colorSpace),t.flipY!==void 0&&(e.flipY=t.flipY),t.generateMipmaps!==void 0&&(e.generateMipmaps=t.generateMipmaps),t.internalFormat!==void 0&&(e.internalFormat=t.internalFormat);for(let A=0;A<this.textures.length;A++)this.textures[A].setValues(e)}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}set depthTexture(t){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),t!==null&&(t.renderTarget=this),this._depthTexture=t}get depthTexture(){return this._depthTexture}setSize(t,e,A=1){if(this.width!==t||this.height!==e||this.depth!==A){this.width=t,this.height=e,this.depth=A;for(let a=0,s=this.textures.length;a<s;a++)this.textures[a].image.width=t,this.textures[a].image.height=e,this.textures[a].image.depth=A,this.textures[a].isArrayTexture=this.textures[a].image.depth>1;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let e=0,A=t.textures.length;e<A;e++){this.textures[e]=t.textures[e].clone(),this.textures[e].isRenderTargetTexture=!0,this.textures[e].renderTarget=this;const a=Object.assign({},t.textures[e].image);this.textures[e].source=new Source(a)}return this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class WebGLRenderTarget extends RenderTarget{constructor(t=1,e=1,A={}){super(t,e,A),this.isWebGLRenderTarget=!0}}class DataArrayTexture extends Texture{constructor(t=null,e=1,A=1,a=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:A,depth:a},this.magFilter=NearestFilter,this.minFilter=NearestFilter,this.wrapR=ClampToEdgeWrapping,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class WebGLArrayRenderTarget extends WebGLRenderTarget{constructor(t=1,e=1,A=1,a={}){super(t,e,a),this.isWebGLArrayRenderTarget=!0,this.depth=A,this.texture=new DataArrayTexture(null,t,e,A),this._setTextureOptions(a),this.texture.isRenderTargetTexture=!0}}class Data3DTexture extends Texture{constructor(t=null,e=1,A=1,a=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:A,depth:a},this.magFilter=NearestFilter,this.minFilter=NearestFilter,this.wrapR=ClampToEdgeWrapping,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Box3{constructor(t=new Vector3(1/0,1/0,1/0),e=new Vector3(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,A=t.length;e<A;e+=3)this.expandByPoint(_vector$b.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,A=t.count;e<A;e++)this.expandByPoint(_vector$b.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,A=t.length;e<A;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const A=_vector$b.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(A),this.max.copy(t).add(A),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const A=t.geometry;if(A!==void 0){const s=A.getAttribute("position");if(e===!0&&s!==void 0&&t.isInstancedMesh!==!0)for(let n=0,l=s.count;n<l;n++)t.isMesh===!0?t.getVertexPosition(n,_vector$b):_vector$b.fromBufferAttribute(s,n),_vector$b.applyMatrix4(t.matrixWorld),this.expandByPoint(_vector$b);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),_box$4.copy(t.boundingBox)):(A.boundingBox===null&&A.computeBoundingBox(),_box$4.copy(A.boundingBox)),_box$4.applyMatrix4(t.matrixWorld),this.union(_box$4)}const a=t.children;for(let s=0,n=a.length;s<n;s++)this.expandByObject(a[s],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,_vector$b),_vector$b.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,A;return t.normal.x>0?(e=t.normal.x*this.min.x,A=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,A=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,A+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,A+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,A+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,A+=t.normal.z*this.min.z),e<=-t.constant&&A>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(_center),_extents.subVectors(this.max,_center),_v0$2.subVectors(t.a,_center),_v1$7.subVectors(t.b,_center),_v2$4.subVectors(t.c,_center),_f0.subVectors(_v1$7,_v0$2),_f1.subVectors(_v2$4,_v1$7),_f2.subVectors(_v0$2,_v2$4);let e=[0,-_f0.z,_f0.y,0,-_f1.z,_f1.y,0,-_f2.z,_f2.y,_f0.z,0,-_f0.x,_f1.z,0,-_f1.x,_f2.z,0,-_f2.x,-_f0.y,_f0.x,0,-_f1.y,_f1.x,0,-_f2.y,_f2.x,0];return!satForAxes(e,_v0$2,_v1$7,_v2$4,_extents)||(e=[1,0,0,0,1,0,0,0,1],!satForAxes(e,_v0$2,_v1$7,_v2$4,_extents))?!1:(_triangleNormal.crossVectors(_f0,_f1),e=[_triangleNormal.x,_triangleNormal.y,_triangleNormal.z],satForAxes(e,_v0$2,_v1$7,_v2$4,_extents))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,_vector$b).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(_vector$b).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(_points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),_points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),_points[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),_points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),_points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),_points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),_points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),_points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(_points),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}toJSON(){return{min:this.min.toArray(),max:this.max.toArray()}}fromJSON(t){return this.min.fromArray(t.min),this.max.fromArray(t.max),this}}const _points=[new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3],_vector$b=new Vector3,_box$4=new Box3,_v0$2=new Vector3,_v1$7=new Vector3,_v2$4=new Vector3,_f0=new Vector3,_f1=new Vector3,_f2=new Vector3,_center=new Vector3,_extents=new Vector3,_triangleNormal=new Vector3,_testAxis=new Vector3;function satForAxes(r,t,e,A,a){for(let s=0,n=r.length-3;s<=n;s+=3){_testAxis.fromArray(r,s);const l=a.x*Math.abs(_testAxis.x)+a.y*Math.abs(_testAxis.y)+a.z*Math.abs(_testAxis.z),d=t.dot(_testAxis),f=e.dot(_testAxis),E=A.dot(_testAxis);if(Math.max(-Math.max(d,f,E),Math.min(d,f,E))>l)return!1}return!0}const _box$3=new Box3,_v1$6=new Vector3,_v2$3=new Vector3;class Sphere{constructor(t=new Vector3,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const A=this.center;e!==void 0?A.copy(e):_box$3.setFromPoints(t).getCenter(A);let a=0;for(let s=0,n=t.length;s<n;s++)a=Math.max(a,A.distanceToSquared(t[s]));return this.radius=Math.sqrt(a),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const A=this.center.distanceToSquared(t);return e.copy(t),A>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;_v1$6.subVectors(t,this.center);const e=_v1$6.lengthSq();if(e>this.radius*this.radius){const A=Math.sqrt(e),a=(A-this.radius)*.5;this.center.addScaledVector(_v1$6,a/A),this.radius+=a}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(_v2$3.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(_v1$6.copy(t.center).add(_v2$3)),this.expandByPoint(_v1$6.copy(t.center).sub(_v2$3))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}toJSON(){return{radius:this.radius,center:this.center.toArray()}}fromJSON(t){return this.radius=t.radius,this.center.fromArray(t.center),this}}const _vector$a=new Vector3,_segCenter=new Vector3,_segDir=new Vector3,_diff=new Vector3,_edge1=new Vector3,_edge2=new Vector3,_normal$1=new Vector3;class Ray{constructor(t=new Vector3,e=new Vector3(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,_vector$a)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const A=e.dot(this.direction);return A<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,A)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=_vector$a.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(_vector$a.copy(this.origin).addScaledVector(this.direction,e),_vector$a.distanceToSquared(t))}distanceSqToSegment(t,e,A,a){_segCenter.copy(t).add(e).multiplyScalar(.5),_segDir.copy(e).sub(t).normalize(),_diff.copy(this.origin).sub(_segCenter);const s=t.distanceTo(e)*.5,n=-this.direction.dot(_segDir),l=_diff.dot(this.direction),d=-_diff.dot(_segDir),f=_diff.lengthSq(),E=Math.abs(1-n*n);let I,B,y,v;if(E>0)if(I=n*d-l,B=n*l-d,v=s*E,I>=0)if(B>=-v)if(B<=v){const S=1/E;I*=S,B*=S,y=I*(I+n*B+2*l)+B*(n*I+B+2*d)+f}else B=s,I=Math.max(0,-(n*B+l)),y=-I*I+B*(B+2*d)+f;else B=-s,I=Math.max(0,-(n*B+l)),y=-I*I+B*(B+2*d)+f;else B<=-v?(I=Math.max(0,-(-n*s+l)),B=I>0?-s:Math.min(Math.max(-s,-d),s),y=-I*I+B*(B+2*d)+f):B<=v?(I=0,B=Math.min(Math.max(-s,-d),s),y=B*(B+2*d)+f):(I=Math.max(0,-(n*s+l)),B=I>0?s:Math.min(Math.max(-s,-d),s),y=-I*I+B*(B+2*d)+f);else B=n>0?-s:s,I=Math.max(0,-(n*B+l)),y=-I*I+B*(B+2*d)+f;return A&&A.copy(this.origin).addScaledVector(this.direction,I),a&&a.copy(_segCenter).addScaledVector(_segDir,B),y}intersectSphere(t,e){_vector$a.subVectors(t.center,this.origin);const A=_vector$a.dot(this.direction),a=_vector$a.dot(_vector$a)-A*A,s=t.radius*t.radius;if(a>s)return null;const n=Math.sqrt(s-a),l=A-n,d=A+n;return d<0?null:l<0?this.at(d,e):this.at(l,e)}intersectsSphere(t){return t.radius<0?!1:this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const A=-(this.origin.dot(t.normal)+t.constant)/e;return A>=0?A:null}intersectPlane(t,e){const A=this.distanceToPlane(t);return A===null?null:this.at(A,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let A,a,s,n,l,d;const f=1/this.direction.x,E=1/this.direction.y,I=1/this.direction.z,B=this.origin;return f>=0?(A=(t.min.x-B.x)*f,a=(t.max.x-B.x)*f):(A=(t.max.x-B.x)*f,a=(t.min.x-B.x)*f),E>=0?(s=(t.min.y-B.y)*E,n=(t.max.y-B.y)*E):(s=(t.max.y-B.y)*E,n=(t.min.y-B.y)*E),A>n||s>a||((s>A||isNaN(A))&&(A=s),(n<a||isNaN(a))&&(a=n),I>=0?(l=(t.min.z-B.z)*I,d=(t.max.z-B.z)*I):(l=(t.max.z-B.z)*I,d=(t.min.z-B.z)*I),A>d||l>a)||((l>A||A!==A)&&(A=l),(d<a||a!==a)&&(a=d),a<0)?null:this.at(A>=0?A:a,e)}intersectsBox(t){return this.intersectBox(t,_vector$a)!==null}intersectTriangle(t,e,A,a,s){_edge1.subVectors(e,t),_edge2.subVectors(A,t),_normal$1.crossVectors(_edge1,_edge2);let n=this.direction.dot(_normal$1),l;if(n>0){if(a)return null;l=1}else if(n<0)l=-1,n=-n;else return null;_diff.subVectors(this.origin,t);const d=l*this.direction.dot(_edge2.crossVectors(_diff,_edge2));if(d<0)return null;const f=l*this.direction.dot(_edge1.cross(_diff));if(f<0||d+f>n)return null;const E=-l*_diff.dot(_normal$1);return E<0?null:this.at(E/n,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class Matrix4{constructor(t,e,A,a,s,n,l,d,f,E,I,B,y,v,S,_){Matrix4.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,A,a,s,n,l,d,f,E,I,B,y,v,S,_)}set(t,e,A,a,s,n,l,d,f,E,I,B,y,v,S,_){const Q=this.elements;return Q[0]=t,Q[4]=e,Q[8]=A,Q[12]=a,Q[1]=s,Q[5]=n,Q[9]=l,Q[13]=d,Q[2]=f,Q[6]=E,Q[10]=I,Q[14]=B,Q[3]=y,Q[7]=v,Q[11]=S,Q[15]=_,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Matrix4().fromArray(this.elements)}copy(t){const e=this.elements,A=t.elements;return e[0]=A[0],e[1]=A[1],e[2]=A[2],e[3]=A[3],e[4]=A[4],e[5]=A[5],e[6]=A[6],e[7]=A[7],e[8]=A[8],e[9]=A[9],e[10]=A[10],e[11]=A[11],e[12]=A[12],e[13]=A[13],e[14]=A[14],e[15]=A[15],this}copyPosition(t){const e=this.elements,A=t.elements;return e[12]=A[12],e[13]=A[13],e[14]=A[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,A){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),A.setFromMatrixColumn(this,2),this}makeBasis(t,e,A){return this.set(t.x,e.x,A.x,0,t.y,e.y,A.y,0,t.z,e.z,A.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,A=t.elements,a=1/_v1$5.setFromMatrixColumn(t,0).length(),s=1/_v1$5.setFromMatrixColumn(t,1).length(),n=1/_v1$5.setFromMatrixColumn(t,2).length();return e[0]=A[0]*a,e[1]=A[1]*a,e[2]=A[2]*a,e[3]=0,e[4]=A[4]*s,e[5]=A[5]*s,e[6]=A[6]*s,e[7]=0,e[8]=A[8]*n,e[9]=A[9]*n,e[10]=A[10]*n,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,A=t.x,a=t.y,s=t.z,n=Math.cos(A),l=Math.sin(A),d=Math.cos(a),f=Math.sin(a),E=Math.cos(s),I=Math.sin(s);if(t.order==="XYZ"){const B=n*E,y=n*I,v=l*E,S=l*I;e[0]=d*E,e[4]=-d*I,e[8]=f,e[1]=y+v*f,e[5]=B-S*f,e[9]=-l*d,e[2]=S-B*f,e[6]=v+y*f,e[10]=n*d}else if(t.order==="YXZ"){const B=d*E,y=d*I,v=f*E,S=f*I;e[0]=B+S*l,e[4]=v*l-y,e[8]=n*f,e[1]=n*I,e[5]=n*E,e[9]=-l,e[2]=y*l-v,e[6]=S+B*l,e[10]=n*d}else if(t.order==="ZXY"){const B=d*E,y=d*I,v=f*E,S=f*I;e[0]=B-S*l,e[4]=-n*I,e[8]=v+y*l,e[1]=y+v*l,e[5]=n*E,e[9]=S-B*l,e[2]=-n*f,e[6]=l,e[10]=n*d}else if(t.order==="ZYX"){const B=n*E,y=n*I,v=l*E,S=l*I;e[0]=d*E,e[4]=v*f-y,e[8]=B*f+S,e[1]=d*I,e[5]=S*f+B,e[9]=y*f-v,e[2]=-f,e[6]=l*d,e[10]=n*d}else if(t.order==="YZX"){const B=n*d,y=n*f,v=l*d,S=l*f;e[0]=d*E,e[4]=S-B*I,e[8]=v*I+y,e[1]=I,e[5]=n*E,e[9]=-l*E,e[2]=-f*E,e[6]=y*I+v,e[10]=B-S*I}else if(t.order==="XZY"){const B=n*d,y=n*f,v=l*d,S=l*f;e[0]=d*E,e[4]=-I,e[8]=f*E,e[1]=B*I+S,e[5]=n*E,e[9]=y*I-v,e[2]=v*I-y,e[6]=l*E,e[10]=S*I+B}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(_zero,t,_one)}lookAt(t,e,A){const a=this.elements;return _z.subVectors(t,e),_z.lengthSq()===0&&(_z.z=1),_z.normalize(),_x.crossVectors(A,_z),_x.lengthSq()===0&&(Math.abs(A.z)===1?_z.x+=1e-4:_z.z+=1e-4,_z.normalize(),_x.crossVectors(A,_z)),_x.normalize(),_y.crossVectors(_z,_x),a[0]=_x.x,a[4]=_y.x,a[8]=_z.x,a[1]=_x.y,a[5]=_y.y,a[9]=_z.y,a[2]=_x.z,a[6]=_y.z,a[10]=_z.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const A=t.elements,a=e.elements,s=this.elements,n=A[0],l=A[4],d=A[8],f=A[12],E=A[1],I=A[5],B=A[9],y=A[13],v=A[2],S=A[6],_=A[10],Q=A[14],D=A[3],b=A[7],T=A[11],P=A[15],R=a[0],F=a[4],O=a[8],N=a[12],L=a[1],Y=a[5],rt=a[9],tt=a[13],at=a[2],pt=a[6],ct=a[10],$=a[14],q=a[3],Ct=a[7],wt=a[11],Bt=a[15];return s[0]=n*R+l*L+d*at+f*q,s[4]=n*F+l*Y+d*pt+f*Ct,s[8]=n*O+l*rt+d*ct+f*wt,s[12]=n*N+l*tt+d*$+f*Bt,s[1]=E*R+I*L+B*at+y*q,s[5]=E*F+I*Y+B*pt+y*Ct,s[9]=E*O+I*rt+B*ct+y*wt,s[13]=E*N+I*tt+B*$+y*Bt,s[2]=v*R+S*L+_*at+Q*q,s[6]=v*F+S*Y+_*pt+Q*Ct,s[10]=v*O+S*rt+_*ct+Q*wt,s[14]=v*N+S*tt+_*$+Q*Bt,s[3]=D*R+b*L+T*at+P*q,s[7]=D*F+b*Y+T*pt+P*Ct,s[11]=D*O+b*rt+T*ct+P*wt,s[15]=D*N+b*tt+T*$+P*Bt,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],A=t[4],a=t[8],s=t[12],n=t[1],l=t[5],d=t[9],f=t[13],E=t[2],I=t[6],B=t[10],y=t[14],v=t[3],S=t[7],_=t[11],Q=t[15];return v*(+s*d*I-a*f*I-s*l*B+A*f*B+a*l*y-A*d*y)+S*(+e*d*y-e*f*B+s*n*B-a*n*y+a*f*E-s*d*E)+_*(+e*f*I-e*l*y-s*n*I+A*n*y+s*l*E-A*f*E)+Q*(-a*l*E-e*d*I+e*l*B+a*n*I-A*n*B+A*d*E)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,A){const a=this.elements;return t.isVector3?(a[12]=t.x,a[13]=t.y,a[14]=t.z):(a[12]=t,a[13]=e,a[14]=A),this}invert(){const t=this.elements,e=t[0],A=t[1],a=t[2],s=t[3],n=t[4],l=t[5],d=t[6],f=t[7],E=t[8],I=t[9],B=t[10],y=t[11],v=t[12],S=t[13],_=t[14],Q=t[15],D=I*_*f-S*B*f+S*d*y-l*_*y-I*d*Q+l*B*Q,b=v*B*f-E*_*f-v*d*y+n*_*y+E*d*Q-n*B*Q,T=E*S*f-v*I*f+v*l*y-n*S*y-E*l*Q+n*I*Q,P=v*I*d-E*S*d-v*l*B+n*S*B+E*l*_-n*I*_,R=e*D+A*b+a*T+s*P;if(R===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const F=1/R;return t[0]=D*F,t[1]=(S*B*s-I*_*s-S*a*y+A*_*y+I*a*Q-A*B*Q)*F,t[2]=(l*_*s-S*d*s+S*a*f-A*_*f-l*a*Q+A*d*Q)*F,t[3]=(I*d*s-l*B*s-I*a*f+A*B*f+l*a*y-A*d*y)*F,t[4]=b*F,t[5]=(E*_*s-v*B*s+v*a*y-e*_*y-E*a*Q+e*B*Q)*F,t[6]=(v*d*s-n*_*s-v*a*f+e*_*f+n*a*Q-e*d*Q)*F,t[7]=(n*B*s-E*d*s+E*a*f-e*B*f-n*a*y+e*d*y)*F,t[8]=T*F,t[9]=(v*I*s-E*S*s-v*A*y+e*S*y+E*A*Q-e*I*Q)*F,t[10]=(n*S*s-v*l*s+v*A*f-e*S*f-n*A*Q+e*l*Q)*F,t[11]=(E*l*s-n*I*s-E*A*f+e*I*f+n*A*y-e*l*y)*F,t[12]=P*F,t[13]=(E*S*a-v*I*a+v*A*B-e*S*B-E*A*_+e*I*_)*F,t[14]=(v*l*a-n*S*a-v*A*d+e*S*d+n*A*_-e*l*_)*F,t[15]=(n*I*a-E*l*a+E*A*d-e*I*d-n*A*B+e*l*B)*F,this}scale(t){const e=this.elements,A=t.x,a=t.y,s=t.z;return e[0]*=A,e[4]*=a,e[8]*=s,e[1]*=A,e[5]*=a,e[9]*=s,e[2]*=A,e[6]*=a,e[10]*=s,e[3]*=A,e[7]*=a,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],A=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],a=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,A,a))}makeTranslation(t,e,A){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,A,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),A=Math.sin(t);return this.set(1,0,0,0,0,e,-A,0,0,A,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),A=Math.sin(t);return this.set(e,0,A,0,0,1,0,0,-A,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),A=Math.sin(t);return this.set(e,-A,0,0,A,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const A=Math.cos(e),a=Math.sin(e),s=1-A,n=t.x,l=t.y,d=t.z,f=s*n,E=s*l;return this.set(f*n+A,f*l-a*d,f*d+a*l,0,f*l+a*d,E*l+A,E*d-a*n,0,f*d-a*l,E*d+a*n,s*d*d+A,0,0,0,0,1),this}makeScale(t,e,A){return this.set(t,0,0,0,0,e,0,0,0,0,A,0,0,0,0,1),this}makeShear(t,e,A,a,s,n){return this.set(1,A,s,0,t,1,n,0,e,a,1,0,0,0,0,1),this}compose(t,e,A){const a=this.elements,s=e._x,n=e._y,l=e._z,d=e._w,f=s+s,E=n+n,I=l+l,B=s*f,y=s*E,v=s*I,S=n*E,_=n*I,Q=l*I,D=d*f,b=d*E,T=d*I,P=A.x,R=A.y,F=A.z;return a[0]=(1-(S+Q))*P,a[1]=(y+T)*P,a[2]=(v-b)*P,a[3]=0,a[4]=(y-T)*R,a[5]=(1-(B+Q))*R,a[6]=(_+D)*R,a[7]=0,a[8]=(v+b)*F,a[9]=(_-D)*F,a[10]=(1-(B+S))*F,a[11]=0,a[12]=t.x,a[13]=t.y,a[14]=t.z,a[15]=1,this}decompose(t,e,A){const a=this.elements;let s=_v1$5.set(a[0],a[1],a[2]).length();const n=_v1$5.set(a[4],a[5],a[6]).length(),l=_v1$5.set(a[8],a[9],a[10]).length();this.determinant()<0&&(s=-s),t.x=a[12],t.y=a[13],t.z=a[14],_m1$2.copy(this);const f=1/s,E=1/n,I=1/l;return _m1$2.elements[0]*=f,_m1$2.elements[1]*=f,_m1$2.elements[2]*=f,_m1$2.elements[4]*=E,_m1$2.elements[5]*=E,_m1$2.elements[6]*=E,_m1$2.elements[8]*=I,_m1$2.elements[9]*=I,_m1$2.elements[10]*=I,e.setFromRotationMatrix(_m1$2),A.x=s,A.y=n,A.z=l,this}makePerspective(t,e,A,a,s,n,l=WebGLCoordinateSystem){const d=this.elements,f=2*s/(e-t),E=2*s/(A-a),I=(e+t)/(e-t),B=(A+a)/(A-a);let y,v;if(l===WebGLCoordinateSystem)y=-(n+s)/(n-s),v=-2*n*s/(n-s);else if(l===WebGPUCoordinateSystem)y=-n/(n-s),v=-n*s/(n-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+l);return d[0]=f,d[4]=0,d[8]=I,d[12]=0,d[1]=0,d[5]=E,d[9]=B,d[13]=0,d[2]=0,d[6]=0,d[10]=y,d[14]=v,d[3]=0,d[7]=0,d[11]=-1,d[15]=0,this}makeOrthographic(t,e,A,a,s,n,l=WebGLCoordinateSystem){const d=this.elements,f=1/(e-t),E=1/(A-a),I=1/(n-s),B=(e+t)*f,y=(A+a)*E;let v,S;if(l===WebGLCoordinateSystem)v=(n+s)*I,S=-2*I;else if(l===WebGPUCoordinateSystem)v=s*I,S=-1*I;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+l);return d[0]=2*f,d[4]=0,d[8]=0,d[12]=-B,d[1]=0,d[5]=2*E,d[9]=0,d[13]=-y,d[2]=0,d[6]=0,d[10]=S,d[14]=-v,d[3]=0,d[7]=0,d[11]=0,d[15]=1,this}equals(t){const e=this.elements,A=t.elements;for(let a=0;a<16;a++)if(e[a]!==A[a])return!1;return!0}fromArray(t,e=0){for(let A=0;A<16;A++)this.elements[A]=t[A+e];return this}toArray(t=[],e=0){const A=this.elements;return t[e]=A[0],t[e+1]=A[1],t[e+2]=A[2],t[e+3]=A[3],t[e+4]=A[4],t[e+5]=A[5],t[e+6]=A[6],t[e+7]=A[7],t[e+8]=A[8],t[e+9]=A[9],t[e+10]=A[10],t[e+11]=A[11],t[e+12]=A[12],t[e+13]=A[13],t[e+14]=A[14],t[e+15]=A[15],t}}const _v1$5=new Vector3,_m1$2=new Matrix4,_zero=new Vector3(0,0,0),_one=new Vector3(1,1,1),_x=new Vector3,_y=new Vector3,_z=new Vector3,_matrix$2=new Matrix4,_quaternion$3=new Quaternion;class Euler{constructor(t=0,e=0,A=0,a=Euler.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=A,this._order=a}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,A,a=this._order){return this._x=t,this._y=e,this._z=A,this._order=a,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,A=!0){const a=t.elements,s=a[0],n=a[4],l=a[8],d=a[1],f=a[5],E=a[9],I=a[2],B=a[6],y=a[10];switch(e){case"XYZ":this._y=Math.asin(clamp(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-E,y),this._z=Math.atan2(-n,s)):(this._x=Math.atan2(B,f),this._z=0);break;case"YXZ":this._x=Math.asin(-clamp(E,-1,1)),Math.abs(E)<.9999999?(this._y=Math.atan2(l,y),this._z=Math.atan2(d,f)):(this._y=Math.atan2(-I,s),this._z=0);break;case"ZXY":this._x=Math.asin(clamp(B,-1,1)),Math.abs(B)<.9999999?(this._y=Math.atan2(-I,y),this._z=Math.atan2(-n,f)):(this._y=0,this._z=Math.atan2(d,s));break;case"ZYX":this._y=Math.asin(-clamp(I,-1,1)),Math.abs(I)<.9999999?(this._x=Math.atan2(B,y),this._z=Math.atan2(d,s)):(this._x=0,this._z=Math.atan2(-n,f));break;case"YZX":this._z=Math.asin(clamp(d,-1,1)),Math.abs(d)<.9999999?(this._x=Math.atan2(-E,f),this._y=Math.atan2(-I,s)):(this._x=0,this._y=Math.atan2(l,y));break;case"XZY":this._z=Math.asin(-clamp(n,-1,1)),Math.abs(n)<.9999999?(this._x=Math.atan2(B,f),this._y=Math.atan2(l,s)):(this._x=Math.atan2(-E,y),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,A===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,A){return _matrix$2.makeRotationFromQuaternion(t),this.setFromRotationMatrix(_matrix$2,e,A)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return _quaternion$3.setFromEuler(this),this.setFromQuaternion(_quaternion$3,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Euler.DEFAULT_ORDER="XYZ";class Layers{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let _object3DId=0;const _v1$4=new Vector3,_q1=new Quaternion,_m1$1$1=new Matrix4,_target=new Vector3,_position$3=new Vector3,_scale$2=new Vector3,_quaternion$2=new Quaternion,_xAxis=new Vector3(1,0,0),_yAxis=new Vector3(0,1,0),_zAxis=new Vector3(0,0,1),_addedEvent={type:"added"},_removedEvent={type:"removed"},_childaddedEvent={type:"childadded",child:null},_childremovedEvent={type:"childremoved",child:null};class Object3D extends EventDispatcher{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:_object3DId++}),this.uuid=generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Object3D.DEFAULT_UP.clone();const t=new Vector3,e=new Euler,A=new Quaternion,a=new Vector3(1,1,1);function s(){A.setFromEuler(e,!1)}function n(){e.setFromQuaternion(A,void 0,!1)}e._onChange(s),A._onChange(n),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:A},scale:{configurable:!0,enumerable:!0,value:a},modelViewMatrix:{value:new Matrix4},normalMatrix:{value:new Matrix3}}),this.matrix=new Matrix4,this.matrixWorld=new Matrix4,this.matrixAutoUpdate=Object3D.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Layers,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.customDepthMaterial=void 0,this.customDistanceMaterial=void 0,this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return _q1.setFromAxisAngle(t,e),this.quaternion.multiply(_q1),this}rotateOnWorldAxis(t,e){return _q1.setFromAxisAngle(t,e),this.quaternion.premultiply(_q1),this}rotateX(t){return this.rotateOnAxis(_xAxis,t)}rotateY(t){return this.rotateOnAxis(_yAxis,t)}rotateZ(t){return this.rotateOnAxis(_zAxis,t)}translateOnAxis(t,e){return _v1$4.copy(t).applyQuaternion(this.quaternion),this.position.add(_v1$4.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(_xAxis,t)}translateY(t){return this.translateOnAxis(_yAxis,t)}translateZ(t){return this.translateOnAxis(_zAxis,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(_m1$1$1.copy(this.matrixWorld).invert())}lookAt(t,e,A){t.isVector3?_target.copy(t):_target.set(t,e,A);const a=this.parent;this.updateWorldMatrix(!0,!1),_position$3.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?_m1$1$1.lookAt(_position$3,_target,this.up):_m1$1$1.lookAt(_target,_position$3,this.up),this.quaternion.setFromRotationMatrix(_m1$1$1),a&&(_m1$1$1.extractRotation(a.matrixWorld),_q1.setFromRotationMatrix(_m1$1$1),this.quaternion.premultiply(_q1.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(_addedEvent),_childaddedEvent.child=t,this.dispatchEvent(_childaddedEvent),_childaddedEvent.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let A=0;A<arguments.length;A++)this.remove(arguments[A]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(_removedEvent),_childremovedEvent.child=t,this.dispatchEvent(_childremovedEvent),_childremovedEvent.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),_m1$1$1.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),_m1$1$1.multiply(t.parent.matrixWorld)),t.applyMatrix4(_m1$1$1),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(_addedEvent),_childaddedEvent.child=t,this.dispatchEvent(_childaddedEvent),_childaddedEvent.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let A=0,a=this.children.length;A<a;A++){const n=this.children[A].getObjectByProperty(t,e);if(n!==void 0)return n}}getObjectsByProperty(t,e,A=[]){this[t]===e&&A.push(this);const a=this.children;for(let s=0,n=a.length;s<n;s++)a[s].getObjectsByProperty(t,e,A);return A}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(_position$3,t,_scale$2),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(_position$3,_quaternion$2,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let A=0,a=e.length;A<a;A++)e[A].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let A=0,a=e.length;A<a;A++)e[A].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let A=0,a=e.length;A<a;A++)e[A].updateMatrixWorld(t)}updateWorldMatrix(t,e){const A=this.parent;if(t===!0&&A!==null&&A.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const a=this.children;for(let s=0,n=a.length;s<n;s++)a[s].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",A={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},A.metadata={version:4.7,type:"Object",generator:"Object3D.toJSON"});const a={};a.uuid=this.uuid,a.type=this.type,this.name!==""&&(a.name=this.name),this.castShadow===!0&&(a.castShadow=!0),this.receiveShadow===!0&&(a.receiveShadow=!0),this.visible===!1&&(a.visible=!1),this.frustumCulled===!1&&(a.frustumCulled=!1),this.renderOrder!==0&&(a.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(a.userData=this.userData),a.layers=this.layers.mask,a.matrix=this.matrix.toArray(),a.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(a.matrixAutoUpdate=!1),this.isInstancedMesh&&(a.type="InstancedMesh",a.count=this.count,a.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(a.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(a.type="BatchedMesh",a.perObjectFrustumCulled=this.perObjectFrustumCulled,a.sortObjects=this.sortObjects,a.drawRanges=this._drawRanges,a.reservedRanges=this._reservedRanges,a.geometryInfo=this._geometryInfo.map(l=>({...l,boundingBox:l.boundingBox?l.boundingBox.toJSON():void 0,boundingSphere:l.boundingSphere?l.boundingSphere.toJSON():void 0})),a.instanceInfo=this._instanceInfo.map(l=>({...l})),a.availableInstanceIds=this._availableInstanceIds.slice(),a.availableGeometryIds=this._availableGeometryIds.slice(),a.nextIndexStart=this._nextIndexStart,a.nextVertexStart=this._nextVertexStart,a.geometryCount=this._geometryCount,a.maxInstanceCount=this._maxInstanceCount,a.maxVertexCount=this._maxVertexCount,a.maxIndexCount=this._maxIndexCount,a.geometryInitialized=this._geometryInitialized,a.matricesTexture=this._matricesTexture.toJSON(t),a.indirectTexture=this._indirectTexture.toJSON(t),this._colorsTexture!==null&&(a.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(a.boundingSphere=this.boundingSphere.toJSON()),this.boundingBox!==null&&(a.boundingBox=this.boundingBox.toJSON()));function s(l,d){return l[d.uuid]===void 0&&(l[d.uuid]=d.toJSON(t)),d.uuid}if(this.isScene)this.background&&(this.background.isColor?a.background=this.background.toJSON():this.background.isTexture&&(a.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(a.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){a.geometry=s(t.geometries,this.geometry);const l=this.geometry.parameters;if(l!==void 0&&l.shapes!==void 0){const d=l.shapes;if(Array.isArray(d))for(let f=0,E=d.length;f<E;f++){const I=d[f];s(t.shapes,I)}else s(t.shapes,d)}}if(this.isSkinnedMesh&&(a.bindMode=this.bindMode,a.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),a.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const l=[];for(let d=0,f=this.material.length;d<f;d++)l.push(s(t.materials,this.material[d]));a.material=l}else a.material=s(t.materials,this.material);if(this.children.length>0){a.children=[];for(let l=0;l<this.children.length;l++)a.children.push(this.children[l].toJSON(t).object)}if(this.animations.length>0){a.animations=[];for(let l=0;l<this.animations.length;l++){const d=this.animations[l];a.animations.push(s(t.animations,d))}}if(e){const l=n(t.geometries),d=n(t.materials),f=n(t.textures),E=n(t.images),I=n(t.shapes),B=n(t.skeletons),y=n(t.animations),v=n(t.nodes);l.length>0&&(A.geometries=l),d.length>0&&(A.materials=d),f.length>0&&(A.textures=f),E.length>0&&(A.images=E),I.length>0&&(A.shapes=I),B.length>0&&(A.skeletons=B),y.length>0&&(A.animations=y),v.length>0&&(A.nodes=v)}return A.object=a,A;function n(l){const d=[];for(const f in l){const E=l[f];delete E.metadata,d.push(E)}return d}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let A=0;A<t.children.length;A++){const a=t.children[A];this.add(a.clone())}return this}}Object3D.DEFAULT_UP=new Vector3(0,1,0);Object3D.DEFAULT_MATRIX_AUTO_UPDATE=!0;Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const _v0$1=new Vector3,_v1$3=new Vector3,_v2$2=new Vector3,_v3$2=new Vector3,_vab=new Vector3,_vac=new Vector3,_vbc=new Vector3,_vap=new Vector3,_vbp=new Vector3,_vcp=new Vector3,_v40=new Vector4,_v41=new Vector4,_v42=new Vector4;class Triangle{constructor(t=new Vector3,e=new Vector3,A=new Vector3){this.a=t,this.b=e,this.c=A}static getNormal(t,e,A,a){a.subVectors(A,e),_v0$1.subVectors(t,e),a.cross(_v0$1);const s=a.lengthSq();return s>0?a.multiplyScalar(1/Math.sqrt(s)):a.set(0,0,0)}static getBarycoord(t,e,A,a,s){_v0$1.subVectors(a,e),_v1$3.subVectors(A,e),_v2$2.subVectors(t,e);const n=_v0$1.dot(_v0$1),l=_v0$1.dot(_v1$3),d=_v0$1.dot(_v2$2),f=_v1$3.dot(_v1$3),E=_v1$3.dot(_v2$2),I=n*f-l*l;if(I===0)return s.set(0,0,0),null;const B=1/I,y=(f*d-l*E)*B,v=(n*E-l*d)*B;return s.set(1-y-v,v,y)}static containsPoint(t,e,A,a){return this.getBarycoord(t,e,A,a,_v3$2)===null?!1:_v3$2.x>=0&&_v3$2.y>=0&&_v3$2.x+_v3$2.y<=1}static getInterpolation(t,e,A,a,s,n,l,d){return this.getBarycoord(t,e,A,a,_v3$2)===null?(d.x=0,d.y=0,"z"in d&&(d.z=0),"w"in d&&(d.w=0),null):(d.setScalar(0),d.addScaledVector(s,_v3$2.x),d.addScaledVector(n,_v3$2.y),d.addScaledVector(l,_v3$2.z),d)}static getInterpolatedAttribute(t,e,A,a,s,n){return _v40.setScalar(0),_v41.setScalar(0),_v42.setScalar(0),_v40.fromBufferAttribute(t,e),_v41.fromBufferAttribute(t,A),_v42.fromBufferAttribute(t,a),n.setScalar(0),n.addScaledVector(_v40,s.x),n.addScaledVector(_v41,s.y),n.addScaledVector(_v42,s.z),n}static isFrontFacing(t,e,A,a){return _v0$1.subVectors(A,e),_v1$3.subVectors(t,e),_v0$1.cross(_v1$3).dot(a)<0}set(t,e,A){return this.a.copy(t),this.b.copy(e),this.c.copy(A),this}setFromPointsAndIndices(t,e,A,a){return this.a.copy(t[e]),this.b.copy(t[A]),this.c.copy(t[a]),this}setFromAttributeAndIndices(t,e,A,a){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,A),this.c.fromBufferAttribute(t,a),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return _v0$1.subVectors(this.c,this.b),_v1$3.subVectors(this.a,this.b),_v0$1.cross(_v1$3).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Triangle.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Triangle.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,A,a,s){return Triangle.getInterpolation(t,this.a,this.b,this.c,e,A,a,s)}containsPoint(t){return Triangle.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Triangle.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const A=this.a,a=this.b,s=this.c;let n,l;_vab.subVectors(a,A),_vac.subVectors(s,A),_vap.subVectors(t,A);const d=_vab.dot(_vap),f=_vac.dot(_vap);if(d<=0&&f<=0)return e.copy(A);_vbp.subVectors(t,a);const E=_vab.dot(_vbp),I=_vac.dot(_vbp);if(E>=0&&I<=E)return e.copy(a);const B=d*I-E*f;if(B<=0&&d>=0&&E<=0)return n=d/(d-E),e.copy(A).addScaledVector(_vab,n);_vcp.subVectors(t,s);const y=_vab.dot(_vcp),v=_vac.dot(_vcp);if(v>=0&&y<=v)return e.copy(s);const S=y*f-d*v;if(S<=0&&f>=0&&v<=0)return l=f/(f-v),e.copy(A).addScaledVector(_vac,l);const _=E*v-y*I;if(_<=0&&I-E>=0&&y-v>=0)return _vbc.subVectors(s,a),l=(I-E)/(I-E+(y-v)),e.copy(a).addScaledVector(_vbc,l);const Q=1/(_+S+B);return n=S*Q,l=B*Q,e.copy(A).addScaledVector(_vab,n).addScaledVector(_vac,l)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const _colorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},_hslA={h:0,s:0,l:0},_hslB={h:0,s:0,l:0};function hue2rgb(r,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?r+(t-r)*6*e:e<1/2?t:e<2/3?r+(t-r)*6*(2/3-e):r}class Color{constructor(t,e,A){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,A)}set(t,e,A){if(e===void 0&&A===void 0){const a=t;a&&a.isColor?this.copy(a):typeof a=="number"?this.setHex(a):typeof a=="string"&&this.setStyle(a)}else this.setRGB(t,e,A);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=SRGBColorSpace){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,ColorManagement.colorSpaceToWorking(this,e),this}setRGB(t,e,A,a=ColorManagement.workingColorSpace){return this.r=t,this.g=e,this.b=A,ColorManagement.colorSpaceToWorking(this,a),this}setHSL(t,e,A,a=ColorManagement.workingColorSpace){if(t=euclideanModulo(t,1),e=clamp(e,0,1),A=clamp(A,0,1),e===0)this.r=this.g=this.b=A;else{const s=A<=.5?A*(1+e):A+e-A*e,n=2*A-s;this.r=hue2rgb(n,s,t+1/3),this.g=hue2rgb(n,s,t),this.b=hue2rgb(n,s,t-1/3)}return ColorManagement.colorSpaceToWorking(this,a),this}setStyle(t,e=SRGBColorSpace){function A(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let a;if(a=/^(\w+)\(([^\)]*)\)/.exec(t)){let s;const n=a[1],l=a[2];switch(n){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(l))return A(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,e);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(l))return A(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,e);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(l))return A(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(a=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=a[1],n=s.length;if(n===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,e);if(n===6)return this.setHex(parseInt(s,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=SRGBColorSpace){const A=_colorKeywords[t.toLowerCase()];return A!==void 0?this.setHex(A,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=SRGBToLinear(t.r),this.g=SRGBToLinear(t.g),this.b=SRGBToLinear(t.b),this}copyLinearToSRGB(t){return this.r=LinearToSRGB(t.r),this.g=LinearToSRGB(t.g),this.b=LinearToSRGB(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=SRGBColorSpace){return ColorManagement.workingToColorSpace(_color.copy(this),t),Math.round(clamp(_color.r*255,0,255))*65536+Math.round(clamp(_color.g*255,0,255))*256+Math.round(clamp(_color.b*255,0,255))}getHexString(t=SRGBColorSpace){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=ColorManagement.workingColorSpace){ColorManagement.workingToColorSpace(_color.copy(this),e);const A=_color.r,a=_color.g,s=_color.b,n=Math.max(A,a,s),l=Math.min(A,a,s);let d,f;const E=(l+n)/2;if(l===n)d=0,f=0;else{const I=n-l;switch(f=E<=.5?I/(n+l):I/(2-n-l),n){case A:d=(a-s)/I+(a<s?6:0);break;case a:d=(s-A)/I+2;break;case s:d=(A-a)/I+4;break}d/=6}return t.h=d,t.s=f,t.l=E,t}getRGB(t,e=ColorManagement.workingColorSpace){return ColorManagement.workingToColorSpace(_color.copy(this),e),t.r=_color.r,t.g=_color.g,t.b=_color.b,t}getStyle(t=SRGBColorSpace){ColorManagement.workingToColorSpace(_color.copy(this),t);const e=_color.r,A=_color.g,a=_color.b;return t!==SRGBColorSpace?`color(${t} ${e.toFixed(3)} ${A.toFixed(3)} ${a.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(A*255)},${Math.round(a*255)})`}offsetHSL(t,e,A){return this.getHSL(_hslA),this.setHSL(_hslA.h+t,_hslA.s+e,_hslA.l+A)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,A){return this.r=t.r+(e.r-t.r)*A,this.g=t.g+(e.g-t.g)*A,this.b=t.b+(e.b-t.b)*A,this}lerpHSL(t,e){this.getHSL(_hslA),t.getHSL(_hslB);const A=lerp(_hslA.h,_hslB.h,e),a=lerp(_hslA.s,_hslB.s,e),s=lerp(_hslA.l,_hslB.l,e);return this.setHSL(A,a,s),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,A=this.g,a=this.b,s=t.elements;return this.r=s[0]*e+s[3]*A+s[6]*a,this.g=s[1]*e+s[4]*A+s[7]*a,this.b=s[2]*e+s[5]*A+s[8]*a,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const _color=new Color;Color.NAMES=_colorKeywords;let _materialId=0;class Material extends EventDispatcher{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:_materialId++}),this.uuid=generateUUID(),this.name="",this.type="Material",this.blending=NormalBlending,this.side=FrontSide,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=SrcAlphaFactor,this.blendDst=OneMinusSrcAlphaFactor,this.blendEquation=AddEquation,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Color(0,0,0),this.blendAlpha=0,this.depthFunc=LessEqualDepth,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=AlwaysStencilFunc,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=KeepStencilOp,this.stencilZFail=KeepStencilOp,this.stencilZPass=KeepStencilOp,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.allowOverride=!0,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const A=t[e];if(A===void 0){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const a=this[e];if(a===void 0){console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);continue}a&&a.isColor?a.set(A):a&&a.isVector3&&A&&A.isVector3?a.copy(A):this[e]=A}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const A={metadata:{version:4.7,type:"Material",generator:"Material.toJSON"}};A.uuid=this.uuid,A.type=this.type,this.name!==""&&(A.name=this.name),this.color&&this.color.isColor&&(A.color=this.color.getHex()),this.roughness!==void 0&&(A.roughness=this.roughness),this.metalness!==void 0&&(A.metalness=this.metalness),this.sheen!==void 0&&(A.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(A.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(A.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(A.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(A.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(A.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(A.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(A.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(A.shininess=this.shininess),this.clearcoat!==void 0&&(A.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(A.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(A.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(A.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(A.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,A.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(A.dispersion=this.dispersion),this.iridescence!==void 0&&(A.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(A.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(A.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(A.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(A.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(A.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(A.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(A.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(A.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(A.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(A.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(A.lightMap=this.lightMap.toJSON(t).uuid,A.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(A.aoMap=this.aoMap.toJSON(t).uuid,A.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(A.bumpMap=this.bumpMap.toJSON(t).uuid,A.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(A.normalMap=this.normalMap.toJSON(t).uuid,A.normalMapType=this.normalMapType,A.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(A.displacementMap=this.displacementMap.toJSON(t).uuid,A.displacementScale=this.displacementScale,A.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(A.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(A.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(A.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(A.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(A.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(A.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(A.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(A.combine=this.combine)),this.envMapRotation!==void 0&&(A.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(A.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(A.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(A.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(A.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(A.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(A.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(A.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(A.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(A.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(A.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(A.size=this.size),this.shadowSide!==null&&(A.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(A.sizeAttenuation=this.sizeAttenuation),this.blending!==NormalBlending&&(A.blending=this.blending),this.side!==FrontSide&&(A.side=this.side),this.vertexColors===!0&&(A.vertexColors=!0),this.opacity<1&&(A.opacity=this.opacity),this.transparent===!0&&(A.transparent=!0),this.blendSrc!==SrcAlphaFactor&&(A.blendSrc=this.blendSrc),this.blendDst!==OneMinusSrcAlphaFactor&&(A.blendDst=this.blendDst),this.blendEquation!==AddEquation&&(A.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(A.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(A.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(A.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(A.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(A.blendAlpha=this.blendAlpha),this.depthFunc!==LessEqualDepth&&(A.depthFunc=this.depthFunc),this.depthTest===!1&&(A.depthTest=this.depthTest),this.depthWrite===!1&&(A.depthWrite=this.depthWrite),this.colorWrite===!1&&(A.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(A.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==AlwaysStencilFunc&&(A.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(A.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(A.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==KeepStencilOp&&(A.stencilFail=this.stencilFail),this.stencilZFail!==KeepStencilOp&&(A.stencilZFail=this.stencilZFail),this.stencilZPass!==KeepStencilOp&&(A.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(A.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(A.rotation=this.rotation),this.polygonOffset===!0&&(A.polygonOffset=!0),this.polygonOffsetFactor!==0&&(A.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(A.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(A.linewidth=this.linewidth),this.dashSize!==void 0&&(A.dashSize=this.dashSize),this.gapSize!==void 0&&(A.gapSize=this.gapSize),this.scale!==void 0&&(A.scale=this.scale),this.dithering===!0&&(A.dithering=!0),this.alphaTest>0&&(A.alphaTest=this.alphaTest),this.alphaHash===!0&&(A.alphaHash=!0),this.alphaToCoverage===!0&&(A.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(A.premultipliedAlpha=!0),this.forceSinglePass===!0&&(A.forceSinglePass=!0),this.wireframe===!0&&(A.wireframe=!0),this.wireframeLinewidth>1&&(A.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(A.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(A.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(A.flatShading=!0),this.visible===!1&&(A.visible=!1),this.toneMapped===!1&&(A.toneMapped=!1),this.fog===!1&&(A.fog=!1),Object.keys(this.userData).length>0&&(A.userData=this.userData);function a(s){const n=[];for(const l in s){const d=s[l];delete d.metadata,n.push(d)}return n}if(e){const s=a(t.textures),n=a(t.images);s.length>0&&(A.textures=s),n.length>0&&(A.images=n)}return A}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let A=null;if(e!==null){const a=e.length;A=new Array(a);for(let s=0;s!==a;++s)A[s]=e[s].clone()}return this.clippingPlanes=A,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}}class MeshBasicMaterial extends Material{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Color(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Euler,this.combine=MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const _vector$9=new Vector3,_vector2$1=new Vector2;let _id$2=0;class BufferAttribute{constructor(t,e,A=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:_id$2++}),this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=A,this.usage=StaticDrawUsage,this.updateRanges=[],this.gpuType=FloatType,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,A){t*=this.itemSize,A*=e.itemSize;for(let a=0,s=this.itemSize;a<s;a++)this.array[t+a]=e.array[A+a];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,A=this.count;e<A;e++)_vector2$1.fromBufferAttribute(this,e),_vector2$1.applyMatrix3(t),this.setXY(e,_vector2$1.x,_vector2$1.y);else if(this.itemSize===3)for(let e=0,A=this.count;e<A;e++)_vector$9.fromBufferAttribute(this,e),_vector$9.applyMatrix3(t),this.setXYZ(e,_vector$9.x,_vector$9.y,_vector$9.z);return this}applyMatrix4(t){for(let e=0,A=this.count;e<A;e++)_vector$9.fromBufferAttribute(this,e),_vector$9.applyMatrix4(t),this.setXYZ(e,_vector$9.x,_vector$9.y,_vector$9.z);return this}applyNormalMatrix(t){for(let e=0,A=this.count;e<A;e++)_vector$9.fromBufferAttribute(this,e),_vector$9.applyNormalMatrix(t),this.setXYZ(e,_vector$9.x,_vector$9.y,_vector$9.z);return this}transformDirection(t){for(let e=0,A=this.count;e<A;e++)_vector$9.fromBufferAttribute(this,e),_vector$9.transformDirection(t),this.setXYZ(e,_vector$9.x,_vector$9.y,_vector$9.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let A=this.array[t*this.itemSize+e];return this.normalized&&(A=denormalize(A,this.array)),A}setComponent(t,e,A){return this.normalized&&(A=normalize$1(A,this.array)),this.array[t*this.itemSize+e]=A,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=denormalize(e,this.array)),e}setX(t,e){return this.normalized&&(e=normalize$1(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=denormalize(e,this.array)),e}setY(t,e){return this.normalized&&(e=normalize$1(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=denormalize(e,this.array)),e}setZ(t,e){return this.normalized&&(e=normalize$1(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=denormalize(e,this.array)),e}setW(t,e){return this.normalized&&(e=normalize$1(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,A){return t*=this.itemSize,this.normalized&&(e=normalize$1(e,this.array),A=normalize$1(A,this.array)),this.array[t+0]=e,this.array[t+1]=A,this}setXYZ(t,e,A,a){return t*=this.itemSize,this.normalized&&(e=normalize$1(e,this.array),A=normalize$1(A,this.array),a=normalize$1(a,this.array)),this.array[t+0]=e,this.array[t+1]=A,this.array[t+2]=a,this}setXYZW(t,e,A,a,s){return t*=this.itemSize,this.normalized&&(e=normalize$1(e,this.array),A=normalize$1(A,this.array),a=normalize$1(a,this.array),s=normalize$1(s,this.array)),this.array[t+0]=e,this.array[t+1]=A,this.array[t+2]=a,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==StaticDrawUsage&&(t.usage=this.usage),t}}class Uint16BufferAttribute extends BufferAttribute{constructor(t,e,A){super(new Uint16Array(t),e,A)}}class Uint32BufferAttribute extends BufferAttribute{constructor(t,e,A){super(new Uint32Array(t),e,A)}}class Float32BufferAttribute extends BufferAttribute{constructor(t,e,A){super(new Float32Array(t),e,A)}}let _id$1=0;const _m1$3=new Matrix4,_obj=new Object3D,_offset=new Vector3,_box$2=new Box3,_boxMorphTargets=new Box3,_vector$8=new Vector3;class BufferGeometry extends EventDispatcher{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:_id$1++}),this.uuid=generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(arrayNeedsUint32(t)?Uint32BufferAttribute:Uint16BufferAttribute)(t,1):this.index=t,this}setIndirect(t){return this.indirect=t,this}getIndirect(){return this.indirect}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,A=0){this.groups.push({start:t,count:e,materialIndex:A})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const A=this.attributes.normal;if(A!==void 0){const s=new Matrix3().getNormalMatrix(t);A.applyNormalMatrix(s),A.needsUpdate=!0}const a=this.attributes.tangent;return a!==void 0&&(a.transformDirection(t),a.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return _m1$3.makeRotationFromQuaternion(t),this.applyMatrix4(_m1$3),this}rotateX(t){return _m1$3.makeRotationX(t),this.applyMatrix4(_m1$3),this}rotateY(t){return _m1$3.makeRotationY(t),this.applyMatrix4(_m1$3),this}rotateZ(t){return _m1$3.makeRotationZ(t),this.applyMatrix4(_m1$3),this}translate(t,e,A){return _m1$3.makeTranslation(t,e,A),this.applyMatrix4(_m1$3),this}scale(t,e,A){return _m1$3.makeScale(t,e,A),this.applyMatrix4(_m1$3),this}lookAt(t){return _obj.lookAt(t),_obj.updateMatrix(),this.applyMatrix4(_obj.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(_offset).negate(),this.translate(_offset.x,_offset.y,_offset.z),this}setFromPoints(t){const e=this.getAttribute("position");if(e===void 0){const A=[];for(let a=0,s=t.length;a<s;a++){const n=t[a];A.push(n.x,n.y,n.z||0)}this.setAttribute("position",new Float32BufferAttribute(A,3))}else{const A=Math.min(t.length,e.count);for(let a=0;a<A;a++){const s=t[a];e.setXYZ(a,s.x,s.y,s.z||0)}t.length>e.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),e.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Box3);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new Vector3(-1/0,-1/0,-1/0),new Vector3(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let A=0,a=e.length;A<a;A++){const s=e[A];_box$2.setFromBufferAttribute(s),this.morphTargetsRelative?(_vector$8.addVectors(this.boundingBox.min,_box$2.min),this.boundingBox.expandByPoint(_vector$8),_vector$8.addVectors(this.boundingBox.max,_box$2.max),this.boundingBox.expandByPoint(_vector$8)):(this.boundingBox.expandByPoint(_box$2.min),this.boundingBox.expandByPoint(_box$2.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Sphere);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new Vector3,1/0);return}if(t){const A=this.boundingSphere.center;if(_box$2.setFromBufferAttribute(t),e)for(let s=0,n=e.length;s<n;s++){const l=e[s];_boxMorphTargets.setFromBufferAttribute(l),this.morphTargetsRelative?(_vector$8.addVectors(_box$2.min,_boxMorphTargets.min),_box$2.expandByPoint(_vector$8),_vector$8.addVectors(_box$2.max,_boxMorphTargets.max),_box$2.expandByPoint(_vector$8)):(_box$2.expandByPoint(_boxMorphTargets.min),_box$2.expandByPoint(_boxMorphTargets.max))}_box$2.getCenter(A);let a=0;for(let s=0,n=t.count;s<n;s++)_vector$8.fromBufferAttribute(t,s),a=Math.max(a,A.distanceToSquared(_vector$8));if(e)for(let s=0,n=e.length;s<n;s++){const l=e[s],d=this.morphTargetsRelative;for(let f=0,E=l.count;f<E;f++)_vector$8.fromBufferAttribute(l,f),d&&(_offset.fromBufferAttribute(t,f),_vector$8.add(_offset)),a=Math.max(a,A.distanceToSquared(_vector$8))}this.boundingSphere.radius=Math.sqrt(a),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const A=e.position,a=e.normal,s=e.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new BufferAttribute(new Float32Array(4*A.count),4));const n=this.getAttribute("tangent"),l=[],d=[];for(let O=0;O<A.count;O++)l[O]=new Vector3,d[O]=new Vector3;const f=new Vector3,E=new Vector3,I=new Vector3,B=new Vector2,y=new Vector2,v=new Vector2,S=new Vector3,_=new Vector3;function Q(O,N,L){f.fromBufferAttribute(A,O),E.fromBufferAttribute(A,N),I.fromBufferAttribute(A,L),B.fromBufferAttribute(s,O),y.fromBufferAttribute(s,N),v.fromBufferAttribute(s,L),E.sub(f),I.sub(f),y.sub(B),v.sub(B);const Y=1/(y.x*v.y-v.x*y.y);isFinite(Y)&&(S.copy(E).multiplyScalar(v.y).addScaledVector(I,-y.y).multiplyScalar(Y),_.copy(I).multiplyScalar(y.x).addScaledVector(E,-v.x).multiplyScalar(Y),l[O].add(S),l[N].add(S),l[L].add(S),d[O].add(_),d[N].add(_),d[L].add(_))}let D=this.groups;D.length===0&&(D=[{start:0,count:t.count}]);for(let O=0,N=D.length;O<N;++O){const L=D[O],Y=L.start,rt=L.count;for(let tt=Y,at=Y+rt;tt<at;tt+=3)Q(t.getX(tt+0),t.getX(tt+1),t.getX(tt+2))}const b=new Vector3,T=new Vector3,P=new Vector3,R=new Vector3;function F(O){P.fromBufferAttribute(a,O),R.copy(P);const N=l[O];b.copy(N),b.sub(P.multiplyScalar(P.dot(N))).normalize(),T.crossVectors(R,N);const Y=T.dot(d[O])<0?-1:1;n.setXYZW(O,b.x,b.y,b.z,Y)}for(let O=0,N=D.length;O<N;++O){const L=D[O],Y=L.start,rt=L.count;for(let tt=Y,at=Y+rt;tt<at;tt+=3)F(t.getX(tt+0)),F(t.getX(tt+1)),F(t.getX(tt+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let A=this.getAttribute("normal");if(A===void 0)A=new BufferAttribute(new Float32Array(e.count*3),3),this.setAttribute("normal",A);else for(let B=0,y=A.count;B<y;B++)A.setXYZ(B,0,0,0);const a=new Vector3,s=new Vector3,n=new Vector3,l=new Vector3,d=new Vector3,f=new Vector3,E=new Vector3,I=new Vector3;if(t)for(let B=0,y=t.count;B<y;B+=3){const v=t.getX(B+0),S=t.getX(B+1),_=t.getX(B+2);a.fromBufferAttribute(e,v),s.fromBufferAttribute(e,S),n.fromBufferAttribute(e,_),E.subVectors(n,s),I.subVectors(a,s),E.cross(I),l.fromBufferAttribute(A,v),d.fromBufferAttribute(A,S),f.fromBufferAttribute(A,_),l.add(E),d.add(E),f.add(E),A.setXYZ(v,l.x,l.y,l.z),A.setXYZ(S,d.x,d.y,d.z),A.setXYZ(_,f.x,f.y,f.z)}else for(let B=0,y=e.count;B<y;B+=3)a.fromBufferAttribute(e,B+0),s.fromBufferAttribute(e,B+1),n.fromBufferAttribute(e,B+2),E.subVectors(n,s),I.subVectors(a,s),E.cross(I),A.setXYZ(B+0,E.x,E.y,E.z),A.setXYZ(B+1,E.x,E.y,E.z),A.setXYZ(B+2,E.x,E.y,E.z);this.normalizeNormals(),A.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,A=t.count;e<A;e++)_vector$8.fromBufferAttribute(t,e),_vector$8.normalize(),t.setXYZ(e,_vector$8.x,_vector$8.y,_vector$8.z)}toNonIndexed(){function t(l,d){const f=l.array,E=l.itemSize,I=l.normalized,B=new f.constructor(d.length*E);let y=0,v=0;for(let S=0,_=d.length;S<_;S++){l.isInterleavedBufferAttribute?y=d[S]*l.data.stride+l.offset:y=d[S]*E;for(let Q=0;Q<E;Q++)B[v++]=f[y++]}return new BufferAttribute(B,E,I)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new BufferGeometry,A=this.index.array,a=this.attributes;for(const l in a){const d=a[l],f=t(d,A);e.setAttribute(l,f)}const s=this.morphAttributes;for(const l in s){const d=[],f=s[l];for(let E=0,I=f.length;E<I;E++){const B=f[E],y=t(B,A);d.push(y)}e.morphAttributes[l]=d}e.morphTargetsRelative=this.morphTargetsRelative;const n=this.groups;for(let l=0,d=n.length;l<d;l++){const f=n[l];e.addGroup(f.start,f.count,f.materialIndex)}return e}toJSON(){const t={metadata:{version:4.7,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const d=this.parameters;for(const f in d)d[f]!==void 0&&(t[f]=d[f]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const A=this.attributes;for(const d in A){const f=A[d];t.data.attributes[d]=f.toJSON(t.data)}const a={};let s=!1;for(const d in this.morphAttributes){const f=this.morphAttributes[d],E=[];for(let I=0,B=f.length;I<B;I++){const y=f[I];E.push(y.toJSON(t.data))}E.length>0&&(a[d]=E,s=!0)}s&&(t.data.morphAttributes=a,t.data.morphTargetsRelative=this.morphTargetsRelative);const n=this.groups;n.length>0&&(t.data.groups=JSON.parse(JSON.stringify(n)));const l=this.boundingSphere;return l!==null&&(t.data.boundingSphere=l.toJSON()),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const A=t.index;A!==null&&this.setIndex(A.clone());const a=t.attributes;for(const f in a){const E=a[f];this.setAttribute(f,E.clone(e))}const s=t.morphAttributes;for(const f in s){const E=[],I=s[f];for(let B=0,y=I.length;B<y;B++)E.push(I[B].clone(e));this.morphAttributes[f]=E}this.morphTargetsRelative=t.morphTargetsRelative;const n=t.groups;for(let f=0,E=n.length;f<E;f++){const I=n[f];this.addGroup(I.start,I.count,I.materialIndex)}const l=t.boundingBox;l!==null&&(this.boundingBox=l.clone());const d=t.boundingSphere;return d!==null&&(this.boundingSphere=d.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const _inverseMatrix$3=new Matrix4,_ray$3=new Ray,_sphere$6=new Sphere,_sphereHitAt=new Vector3,_vA$1=new Vector3,_vB$1=new Vector3,_vC$1=new Vector3,_tempA=new Vector3,_morphA=new Vector3,_intersectionPoint=new Vector3,_intersectionPointWorld=new Vector3;class Mesh extends Object3D{constructor(t=new BufferGeometry,e=new MeshBasicMaterial){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.count=1,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,A=Object.keys(e);if(A.length>0){const a=e[A[0]];if(a!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,n=a.length;s<n;s++){const l=a[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[l]=s}}}}getVertexPosition(t,e){const A=this.geometry,a=A.attributes.position,s=A.morphAttributes.position,n=A.morphTargetsRelative;e.fromBufferAttribute(a,t);const l=this.morphTargetInfluences;if(s&&l){_morphA.set(0,0,0);for(let d=0,f=s.length;d<f;d++){const E=l[d],I=s[d];E!==0&&(_tempA.fromBufferAttribute(I,t),n?_morphA.addScaledVector(_tempA,E):_morphA.addScaledVector(_tempA.sub(e),E))}e.add(_morphA)}return e}raycast(t,e){const A=this.geometry,a=this.material,s=this.matrixWorld;a!==void 0&&(A.boundingSphere===null&&A.computeBoundingSphere(),_sphere$6.copy(A.boundingSphere),_sphere$6.applyMatrix4(s),_ray$3.copy(t.ray).recast(t.near),!(_sphere$6.containsPoint(_ray$3.origin)===!1&&(_ray$3.intersectSphere(_sphere$6,_sphereHitAt)===null||_ray$3.origin.distanceToSquared(_sphereHitAt)>(t.far-t.near)**2))&&(_inverseMatrix$3.copy(s).invert(),_ray$3.copy(t.ray).applyMatrix4(_inverseMatrix$3),!(A.boundingBox!==null&&_ray$3.intersectsBox(A.boundingBox)===!1)&&this._computeIntersections(t,e,_ray$3)))}_computeIntersections(t,e,A){let a;const s=this.geometry,n=this.material,l=s.index,d=s.attributes.position,f=s.attributes.uv,E=s.attributes.uv1,I=s.attributes.normal,B=s.groups,y=s.drawRange;if(l!==null)if(Array.isArray(n))for(let v=0,S=B.length;v<S;v++){const _=B[v],Q=n[_.materialIndex],D=Math.max(_.start,y.start),b=Math.min(l.count,Math.min(_.start+_.count,y.start+y.count));for(let T=D,P=b;T<P;T+=3){const R=l.getX(T),F=l.getX(T+1),O=l.getX(T+2);a=checkGeometryIntersection(this,Q,t,A,f,E,I,R,F,O),a&&(a.faceIndex=Math.floor(T/3),a.face.materialIndex=_.materialIndex,e.push(a))}}else{const v=Math.max(0,y.start),S=Math.min(l.count,y.start+y.count);for(let _=v,Q=S;_<Q;_+=3){const D=l.getX(_),b=l.getX(_+1),T=l.getX(_+2);a=checkGeometryIntersection(this,n,t,A,f,E,I,D,b,T),a&&(a.faceIndex=Math.floor(_/3),e.push(a))}}else if(d!==void 0)if(Array.isArray(n))for(let v=0,S=B.length;v<S;v++){const _=B[v],Q=n[_.materialIndex],D=Math.max(_.start,y.start),b=Math.min(d.count,Math.min(_.start+_.count,y.start+y.count));for(let T=D,P=b;T<P;T+=3){const R=T,F=T+1,O=T+2;a=checkGeometryIntersection(this,Q,t,A,f,E,I,R,F,O),a&&(a.faceIndex=Math.floor(T/3),a.face.materialIndex=_.materialIndex,e.push(a))}}else{const v=Math.max(0,y.start),S=Math.min(d.count,y.start+y.count);for(let _=v,Q=S;_<Q;_+=3){const D=_,b=_+1,T=_+2;a=checkGeometryIntersection(this,n,t,A,f,E,I,D,b,T),a&&(a.faceIndex=Math.floor(_/3),e.push(a))}}}}function checkIntersection$1(r,t,e,A,a,s,n,l){let d;if(t.side===BackSide?d=A.intersectTriangle(n,s,a,!0,l):d=A.intersectTriangle(a,s,n,t.side===FrontSide,l),d===null)return null;_intersectionPointWorld.copy(l),_intersectionPointWorld.applyMatrix4(r.matrixWorld);const f=e.ray.origin.distanceTo(_intersectionPointWorld);return f<e.near||f>e.far?null:{distance:f,point:_intersectionPointWorld.clone(),object:r}}function checkGeometryIntersection(r,t,e,A,a,s,n,l,d,f){r.getVertexPosition(l,_vA$1),r.getVertexPosition(d,_vB$1),r.getVertexPosition(f,_vC$1);const E=checkIntersection$1(r,t,e,A,_vA$1,_vB$1,_vC$1,_intersectionPoint);if(E){const I=new Vector3;Triangle.getBarycoord(_intersectionPoint,_vA$1,_vB$1,_vC$1,I),a&&(E.uv=Triangle.getInterpolatedAttribute(a,l,d,f,I,new Vector2)),s&&(E.uv1=Triangle.getInterpolatedAttribute(s,l,d,f,I,new Vector2)),n&&(E.normal=Triangle.getInterpolatedAttribute(n,l,d,f,I,new Vector3),E.normal.dot(A.direction)>0&&E.normal.multiplyScalar(-1));const B={a:l,b:d,c:f,normal:new Vector3,materialIndex:0};Triangle.getNormal(_vA$1,_vB$1,_vC$1,B.normal),E.face=B,E.barycoord=I}return E}class BoxGeometry extends BufferGeometry{constructor(t=1,e=1,A=1,a=1,s=1,n=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:A,widthSegments:a,heightSegments:s,depthSegments:n};const l=this;a=Math.floor(a),s=Math.floor(s),n=Math.floor(n);const d=[],f=[],E=[],I=[];let B=0,y=0;v("z","y","x",-1,-1,A,e,t,n,s,0),v("z","y","x",1,-1,A,e,-t,n,s,1),v("x","z","y",1,1,t,A,e,a,n,2),v("x","z","y",1,-1,t,A,-e,a,n,3),v("x","y","z",1,-1,t,e,A,a,s,4),v("x","y","z",-1,-1,t,e,-A,a,s,5),this.setIndex(d),this.setAttribute("position",new Float32BufferAttribute(f,3)),this.setAttribute("normal",new Float32BufferAttribute(E,3)),this.setAttribute("uv",new Float32BufferAttribute(I,2));function v(S,_,Q,D,b,T,P,R,F,O,N){const L=T/F,Y=P/O,rt=T/2,tt=P/2,at=R/2,pt=F+1,ct=O+1;let $=0,q=0;const Ct=new Vector3;for(let wt=0;wt<ct;wt++){const Bt=wt*Y-tt;for(let ut=0;ut<pt;ut++){const K=ut*L-rt;Ct[S]=K*D,Ct[_]=Bt*b,Ct[Q]=at,f.push(Ct.x,Ct.y,Ct.z),Ct[S]=0,Ct[_]=0,Ct[Q]=R>0?1:-1,E.push(Ct.x,Ct.y,Ct.z),I.push(ut/F),I.push(1-wt/O),$+=1}}for(let wt=0;wt<O;wt++)for(let Bt=0;Bt<F;Bt++){const ut=B+Bt+pt*wt,K=B+Bt+pt*(wt+1),J=B+(Bt+1)+pt*(wt+1),At=B+(Bt+1)+pt*wt;d.push(ut,K,At),d.push(K,J,At),q+=6}l.addGroup(y,q,N),y+=q,B+=$}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new BoxGeometry(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function cloneUniforms(r){const t={};for(const e in r){t[e]={};for(const A in r[e]){const a=r[e][A];a&&(a.isColor||a.isMatrix3||a.isMatrix4||a.isVector2||a.isVector3||a.isVector4||a.isTexture||a.isQuaternion)?a.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][A]=null):t[e][A]=a.clone():Array.isArray(a)?t[e][A]=a.slice():t[e][A]=a}}return t}function mergeUniforms(r){const t={};for(let e=0;e<r.length;e++){const A=cloneUniforms(r[e]);for(const a in A)t[a]=A[a]}return t}function cloneUniformsGroups(r){const t=[];for(let e=0;e<r.length;e++)t.push(r[e].clone());return t}function getUnlitUniformColorSpace(r){const t=r.getRenderTarget();return t===null?r.outputColorSpace:t.isXRRenderTarget===!0?t.texture.colorSpace:ColorManagement.workingColorSpace}const UniformsUtils={clone:cloneUniforms,merge:mergeUniforms};var default_vertex=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,default_fragment=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class ShaderMaterial extends Material{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=default_vertex,this.fragmentShader=default_fragment,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=cloneUniforms(t.uniforms),this.uniformsGroups=cloneUniformsGroups(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const a in this.uniforms){const n=this.uniforms[a].value;n&&n.isTexture?e.uniforms[a]={type:"t",value:n.toJSON(t).uuid}:n&&n.isColor?e.uniforms[a]={type:"c",value:n.getHex()}:n&&n.isVector2?e.uniforms[a]={type:"v2",value:n.toArray()}:n&&n.isVector3?e.uniforms[a]={type:"v3",value:n.toArray()}:n&&n.isVector4?e.uniforms[a]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?e.uniforms[a]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?e.uniforms[a]={type:"m4",value:n.toArray()}:e.uniforms[a]={value:n}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const A={};for(const a in this.extensions)this.extensions[a]===!0&&(A[a]=!0);return Object.keys(A).length>0&&(e.extensions=A),e}}class Camera extends Object3D{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Matrix4,this.projectionMatrix=new Matrix4,this.projectionMatrixInverse=new Matrix4,this.coordinateSystem=WebGLCoordinateSystem}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const _v3$1=new Vector3,_minTarget=new Vector2,_maxTarget=new Vector2;class PerspectiveCamera extends Camera{constructor(t=50,e=1,A=.1,a=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=A,this.far=a,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=RAD2DEG*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(DEG2RAD*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return RAD2DEG*2*Math.atan(Math.tan(DEG2RAD*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,A){_v3$1.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(_v3$1.x,_v3$1.y).multiplyScalar(-t/_v3$1.z),_v3$1.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),A.set(_v3$1.x,_v3$1.y).multiplyScalar(-t/_v3$1.z)}getViewSize(t,e){return this.getViewBounds(t,_minTarget,_maxTarget),e.subVectors(_maxTarget,_minTarget)}setViewOffset(t,e,A,a,s,n){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=A,this.view.offsetY=a,this.view.width=s,this.view.height=n,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(DEG2RAD*.5*this.fov)/this.zoom,A=2*e,a=this.aspect*A,s=-.5*a;const n=this.view;if(this.view!==null&&this.view.enabled){const d=n.fullWidth,f=n.fullHeight;s+=n.offsetX*a/d,e-=n.offsetY*A/f,a*=n.width/d,A*=n.height/f}const l=this.filmOffset;l!==0&&(s+=t*l/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+a,e,e-A,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const fov=-90,aspect=1;class CubeCamera extends Object3D{constructor(t,e,A){super(),this.type="CubeCamera",this.renderTarget=A,this.coordinateSystem=null,this.activeMipmapLevel=0;const a=new PerspectiveCamera(fov,aspect,t,e);a.layers=this.layers,this.add(a);const s=new PerspectiveCamera(fov,aspect,t,e);s.layers=this.layers,this.add(s);const n=new PerspectiveCamera(fov,aspect,t,e);n.layers=this.layers,this.add(n);const l=new PerspectiveCamera(fov,aspect,t,e);l.layers=this.layers,this.add(l);const d=new PerspectiveCamera(fov,aspect,t,e);d.layers=this.layers,this.add(d);const f=new PerspectiveCamera(fov,aspect,t,e);f.layers=this.layers,this.add(f)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[A,a,s,n,l,d]=e;for(const f of e)this.remove(f);if(t===WebGLCoordinateSystem)A.up.set(0,1,0),A.lookAt(1,0,0),a.up.set(0,1,0),a.lookAt(-1,0,0),s.up.set(0,0,-1),s.lookAt(0,1,0),n.up.set(0,0,1),n.lookAt(0,-1,0),l.up.set(0,1,0),l.lookAt(0,0,1),d.up.set(0,1,0),d.lookAt(0,0,-1);else if(t===WebGPUCoordinateSystem)A.up.set(0,-1,0),A.lookAt(-1,0,0),a.up.set(0,-1,0),a.lookAt(1,0,0),s.up.set(0,0,1),s.lookAt(0,1,0),n.up.set(0,0,-1),n.lookAt(0,-1,0),l.up.set(0,-1,0),l.lookAt(0,0,1),d.up.set(0,-1,0),d.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const f of e)this.add(f),f.updateMatrixWorld()}update(t,e){this.parent===null&&this.updateMatrixWorld();const{renderTarget:A,activeMipmapLevel:a}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[s,n,l,d,f,E]=this.children,I=t.getRenderTarget(),B=t.getActiveCubeFace(),y=t.getActiveMipmapLevel(),v=t.xr.enabled;t.xr.enabled=!1;const S=A.texture.generateMipmaps;A.texture.generateMipmaps=!1,t.setRenderTarget(A,0,a),t.render(e,s),t.setRenderTarget(A,1,a),t.render(e,n),t.setRenderTarget(A,2,a),t.render(e,l),t.setRenderTarget(A,3,a),t.render(e,d),t.setRenderTarget(A,4,a),t.render(e,f),A.texture.generateMipmaps=S,t.setRenderTarget(A,5,a),t.render(e,E),t.setRenderTarget(I,B,y),t.xr.enabled=v,A.texture.needsPMREMUpdate=!0}}class CubeTexture extends Texture{constructor(t=[],e=CubeReflectionMapping,A,a,s,n,l,d,f,E){super(t,e,A,a,s,n,l,d,f,E),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class WebGLCubeRenderTarget extends WebGLRenderTarget{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const A={width:t,height:t,depth:1},a=[A,A,A,A,A,A];this.texture=new CubeTexture(a),this._setTextureOptions(e),this.texture.isRenderTargetTexture=!0}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const A={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},a=new BoxGeometry(5,5,5),s=new ShaderMaterial({name:"CubemapFromEquirect",uniforms:cloneUniforms(A.uniforms),vertexShader:A.vertexShader,fragmentShader:A.fragmentShader,side:BackSide,blending:NoBlending});s.uniforms.tEquirect.value=e;const n=new Mesh(a,s),l=e.minFilter;return e.minFilter===LinearMipmapLinearFilter&&(e.minFilter=LinearFilter),new CubeCamera(1,10,this).update(t,n),e.minFilter=l,n.geometry.dispose(),n.material.dispose(),this}clear(t,e=!0,A=!0,a=!0){const s=t.getRenderTarget();for(let n=0;n<6;n++)t.setRenderTarget(this,n),t.clear(e,A,a);t.setRenderTarget(s)}}class Group extends Object3D{constructor(){super(),this.isGroup=!0,this.type="Group"}}const _moveEvent={type:"move"};class WebXRController{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Group,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Group,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Vector3,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Vector3),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Group,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Vector3,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Vector3),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const A of t.hand.values())this._getHandJoint(e,A)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,e,A){let a=null,s=null,n=null;const l=this._targetRay,d=this._grip,f=this._hand;if(t&&e.session.visibilityState!=="visible-blurred"){if(f&&t.hand){n=!0;for(const S of t.hand.values()){const _=e.getJointPose(S,A),Q=this._getHandJoint(f,S);_!==null&&(Q.matrix.fromArray(_.transform.matrix),Q.matrix.decompose(Q.position,Q.rotation,Q.scale),Q.matrixWorldNeedsUpdate=!0,Q.jointRadius=_.radius),Q.visible=_!==null}const E=f.joints["index-finger-tip"],I=f.joints["thumb-tip"],B=E.position.distanceTo(I.position),y=.02,v=.005;f.inputState.pinching&&B>y+v?(f.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!f.inputState.pinching&&B<=y-v&&(f.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else d!==null&&t.gripSpace&&(s=e.getPose(t.gripSpace,A),s!==null&&(d.matrix.fromArray(s.transform.matrix),d.matrix.decompose(d.position,d.rotation,d.scale),d.matrixWorldNeedsUpdate=!0,s.linearVelocity?(d.hasLinearVelocity=!0,d.linearVelocity.copy(s.linearVelocity)):d.hasLinearVelocity=!1,s.angularVelocity?(d.hasAngularVelocity=!0,d.angularVelocity.copy(s.angularVelocity)):d.hasAngularVelocity=!1));l!==null&&(a=e.getPose(t.targetRaySpace,A),a===null&&s!==null&&(a=s),a!==null&&(l.matrix.fromArray(a.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),l.matrixWorldNeedsUpdate=!0,a.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(a.linearVelocity)):l.hasLinearVelocity=!1,a.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(a.angularVelocity)):l.hasAngularVelocity=!1,this.dispatchEvent(_moveEvent)))}return l!==null&&(l.visible=a!==null),d!==null&&(d.visible=s!==null),f!==null&&(f.visible=n!==null),this}_getHandJoint(t,e){if(t.joints[e.jointName]===void 0){const A=new Group;A.matrixAutoUpdate=!1,A.visible=!1,t.joints[e.jointName]=A,t.add(A)}return t.joints[e.jointName]}}class Scene extends Object3D{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Euler,this.environmentIntensity=1,this.environmentRotation=new Euler,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}}class DataTexture extends Texture{constructor(t=null,e=1,A=1,a,s,n,l,d,f=NearestFilter,E=NearestFilter,I,B){super(null,n,l,d,f,E,a,s,I,B),this.isDataTexture=!0,this.image={data:t,width:e,height:A},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class InstancedBufferAttribute extends BufferAttribute{constructor(t,e,A,a=1){super(t,e,A),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=a}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}const _vector1=new Vector3,_vector2=new Vector3,_normalMatrix=new Matrix3;class Plane{constructor(t=new Vector3(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,A,a){return this.normal.set(t,e,A),this.constant=a,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,A){const a=_vector1.subVectors(A,e).cross(_vector2.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(a,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const A=t.delta(_vector1),a=this.normal.dot(A);if(a===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/a;return s<0||s>1?null:e.copy(t.start).addScaledVector(A,s)}intersectsLine(t){const e=this.distanceToPoint(t.start),A=this.distanceToPoint(t.end);return e<0&&A>0||A<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const A=e||_normalMatrix.getNormalMatrix(t),a=this.coplanarPoint(_vector1).applyMatrix4(t),s=this.normal.applyMatrix3(A).normalize();return this.constant=-a.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}const _sphere$3=new Sphere,_vector$6=new Vector3;class Frustum{constructor(t=new Plane,e=new Plane,A=new Plane,a=new Plane,s=new Plane,n=new Plane){this.planes=[t,e,A,a,s,n]}set(t,e,A,a,s,n){const l=this.planes;return l[0].copy(t),l[1].copy(e),l[2].copy(A),l[3].copy(a),l[4].copy(s),l[5].copy(n),this}copy(t){const e=this.planes;for(let A=0;A<6;A++)e[A].copy(t.planes[A]);return this}setFromProjectionMatrix(t,e=WebGLCoordinateSystem){const A=this.planes,a=t.elements,s=a[0],n=a[1],l=a[2],d=a[3],f=a[4],E=a[5],I=a[6],B=a[7],y=a[8],v=a[9],S=a[10],_=a[11],Q=a[12],D=a[13],b=a[14],T=a[15];if(A[0].setComponents(d-s,B-f,_-y,T-Q).normalize(),A[1].setComponents(d+s,B+f,_+y,T+Q).normalize(),A[2].setComponents(d+n,B+E,_+v,T+D).normalize(),A[3].setComponents(d-n,B-E,_-v,T-D).normalize(),A[4].setComponents(d-l,B-I,_-S,T-b).normalize(),e===WebGLCoordinateSystem)A[5].setComponents(d+l,B+I,_+S,T+b).normalize();else if(e===WebGPUCoordinateSystem)A[5].setComponents(l,I,S,b).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),_sphere$3.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;e.boundingSphere===null&&e.computeBoundingSphere(),_sphere$3.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(_sphere$3)}intersectsSprite(t){return _sphere$3.center.set(0,0,0),_sphere$3.radius=.7071067811865476,_sphere$3.applyMatrix4(t.matrixWorld),this.intersectsSphere(_sphere$3)}intersectsSphere(t){const e=this.planes,A=t.center,a=-t.radius;for(let s=0;s<6;s++)if(e[s].distanceToPoint(A)<a)return!1;return!0}intersectsBox(t){const e=this.planes;for(let A=0;A<6;A++){const a=e[A];if(_vector$6.x=a.normal.x>0?t.max.x:t.min.x,_vector$6.y=a.normal.y>0?t.max.y:t.min.y,_vector$6.z=a.normal.z>0?t.max.z:t.min.z,a.distanceToPoint(_vector$6)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let A=0;A<6;A++)if(e[A].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class DepthTexture extends Texture{constructor(t,e,A=UnsignedIntType,a,s,n,l=NearestFilter,d=NearestFilter,f,E=DepthFormat,I=1){if(E!==DepthFormat&&E!==DepthStencilFormat)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");const B={width:t,height:e,depth:I};super(B,a,s,n,l,d,E,A,f),this.isDepthTexture=!0,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.source=new Source(Object.assign({},t.image)),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}}class PlaneGeometry extends BufferGeometry{constructor(t=1,e=1,A=1,a=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:A,heightSegments:a};const s=t/2,n=e/2,l=Math.floor(A),d=Math.floor(a),f=l+1,E=d+1,I=t/l,B=e/d,y=[],v=[],S=[],_=[];for(let Q=0;Q<E;Q++){const D=Q*B-n;for(let b=0;b<f;b++){const T=b*I-s;v.push(T,-D,0),S.push(0,0,1),_.push(b/l),_.push(1-Q/d)}}for(let Q=0;Q<d;Q++)for(let D=0;D<l;D++){const b=D+f*Q,T=D+f*(Q+1),P=D+1+f*(Q+1),R=D+1+f*Q;y.push(b,T,R),y.push(T,P,R)}this.setIndex(y),this.setAttribute("position",new Float32BufferAttribute(v,3)),this.setAttribute("normal",new Float32BufferAttribute(S,3)),this.setAttribute("uv",new Float32BufferAttribute(_,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new PlaneGeometry(t.width,t.height,t.widthSegments,t.heightSegments)}}class RawShaderMaterial extends ShaderMaterial{constructor(t){super(t),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class MeshStandardMaterial extends Material{constructor(t){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new Color(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=TangentSpaceNormalMap,this.normalScale=new Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Euler,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class MeshDepthMaterial extends Material{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=BasicDepthPacking,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class MeshDistanceMaterial extends Material{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}class OrthographicCamera extends Camera{constructor(t=-1,e=1,A=1,a=-1,s=.1,n=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=A,this.bottom=a,this.near=s,this.far=n,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,A,a,s,n){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=A,this.view.offsetY=a,this.view.width=s,this.view.height=n,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),A=(this.right+this.left)/2,a=(this.top+this.bottom)/2;let s=A-t,n=A+t,l=a+e,d=a-e;if(this.view!==null&&this.view.enabled){const f=(this.right-this.left)/this.view.fullWidth/this.zoom,E=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=f*this.view.offsetX,n=s+f*this.view.width,l-=E*this.view.offsetY,d=l-E*this.view.height}this.projectionMatrix.makeOrthographic(s,n,l,d,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}}class InstancedBufferGeometry extends BufferGeometry{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}toJSON(){const t=super.toJSON();return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}class ArrayCamera extends PerspectiveCamera{constructor(t=[]){super(),this.isArrayCamera=!0,this.isMultiViewCamera=!1,this.cameras=t}}class Clock{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=now();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function now(){return performance.now()}class Matrix2{constructor(t,e,A,a){Matrix2.prototype.isMatrix2=!0,this.elements=[1,0,0,1],t!==void 0&&this.set(t,e,A,a)}identity(){return this.set(1,0,0,1),this}fromArray(t,e=0){for(let A=0;A<4;A++)this.elements[A]=t[A+e];return this}set(t,e,A,a){const s=this.elements;return s[0]=t,s[2]=e,s[1]=A,s[3]=a,this}}function getByteLength(r,t,e,A){const a=getTextureTypeByteLength(A);switch(e){case AlphaFormat:return r*t;case RedFormat:return r*t/a.components*a.byteLength;case RedIntegerFormat:return r*t/a.components*a.byteLength;case RGFormat:return r*t*2/a.components*a.byteLength;case RGIntegerFormat:return r*t*2/a.components*a.byteLength;case RGBFormat:return r*t*3/a.components*a.byteLength;case RGBAFormat:return r*t*4/a.components*a.byteLength;case RGBAIntegerFormat:return r*t*4/a.components*a.byteLength;case RGB_S3TC_DXT1_Format:case RGBA_S3TC_DXT1_Format:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*8;case RGBA_S3TC_DXT3_Format:case RGBA_S3TC_DXT5_Format:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*16;case RGB_PVRTC_2BPPV1_Format:case RGBA_PVRTC_2BPPV1_Format:return Math.max(r,16)*Math.max(t,8)/4;case RGB_PVRTC_4BPPV1_Format:case RGBA_PVRTC_4BPPV1_Format:return Math.max(r,8)*Math.max(t,8)/2;case RGB_ETC1_Format:case RGB_ETC2_Format:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*8;case RGBA_ETC2_EAC_Format:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*16;case RGBA_ASTC_4x4_Format:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*16;case RGBA_ASTC_5x4_Format:return Math.floor((r+4)/5)*Math.floor((t+3)/4)*16;case RGBA_ASTC_5x5_Format:return Math.floor((r+4)/5)*Math.floor((t+4)/5)*16;case RGBA_ASTC_6x5_Format:return Math.floor((r+5)/6)*Math.floor((t+4)/5)*16;case RGBA_ASTC_6x6_Format:return Math.floor((r+5)/6)*Math.floor((t+5)/6)*16;case RGBA_ASTC_8x5_Format:return Math.floor((r+7)/8)*Math.floor((t+4)/5)*16;case RGBA_ASTC_8x6_Format:return Math.floor((r+7)/8)*Math.floor((t+5)/6)*16;case RGBA_ASTC_8x8_Format:return Math.floor((r+7)/8)*Math.floor((t+7)/8)*16;case RGBA_ASTC_10x5_Format:return Math.floor((r+9)/10)*Math.floor((t+4)/5)*16;case RGBA_ASTC_10x6_Format:return Math.floor((r+9)/10)*Math.floor((t+5)/6)*16;case RGBA_ASTC_10x8_Format:return Math.floor((r+9)/10)*Math.floor((t+7)/8)*16;case RGBA_ASTC_10x10_Format:return Math.floor((r+9)/10)*Math.floor((t+9)/10)*16;case RGBA_ASTC_12x10_Format:return Math.floor((r+11)/12)*Math.floor((t+9)/10)*16;case RGBA_ASTC_12x12_Format:return Math.floor((r+11)/12)*Math.floor((t+11)/12)*16;case RGBA_BPTC_Format:case RGB_BPTC_SIGNED_Format:case RGB_BPTC_UNSIGNED_Format:return Math.ceil(r/4)*Math.ceil(t/4)*16;case RED_RGTC1_Format:case SIGNED_RED_RGTC1_Format:return Math.ceil(r/4)*Math.ceil(t/4)*8;case RED_GREEN_RGTC2_Format:case SIGNED_RED_GREEN_RGTC2_Format:return Math.ceil(r/4)*Math.ceil(t/4)*16}throw new Error(`Unable to determine texture byte length for ${e} format.`)}function getTextureTypeByteLength(r){switch(r){case UnsignedByteType:case ByteType:return{byteLength:1,components:1};case UnsignedShortType:case ShortType:case HalfFloatType:return{byteLength:2,components:1};case UnsignedShort4444Type:case UnsignedShort5551Type:return{byteLength:2,components:4};case UnsignedIntType:case IntType:case FloatType:return{byteLength:4,components:1};case UnsignedInt5999Type:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${r}.`)}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:REVISION}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=REVISION);/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function WebGLAnimation(){let r=null,t=!1,e=null,A=null;function a(s,n){e(s,n),A=r.requestAnimationFrame(a)}return{start:function(){t!==!0&&e!==null&&(A=r.requestAnimationFrame(a),t=!0)},stop:function(){r.cancelAnimationFrame(A),t=!1},setAnimationLoop:function(s){e=s},setContext:function(s){r=s}}}function WebGLAttributes(r){const t=new WeakMap;function e(l,d){const f=l.array,E=l.usage,I=f.byteLength,B=r.createBuffer();r.bindBuffer(d,B),r.bufferData(d,f,E),l.onUploadCallback();let y;if(f instanceof Float32Array)y=r.FLOAT;else if(f instanceof Uint16Array)l.isFloat16BufferAttribute?y=r.HALF_FLOAT:y=r.UNSIGNED_SHORT;else if(f instanceof Int16Array)y=r.SHORT;else if(f instanceof Uint32Array)y=r.UNSIGNED_INT;else if(f instanceof Int32Array)y=r.INT;else if(f instanceof Int8Array)y=r.BYTE;else if(f instanceof Uint8Array)y=r.UNSIGNED_BYTE;else if(f instanceof Uint8ClampedArray)y=r.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+f);return{buffer:B,type:y,bytesPerElement:f.BYTES_PER_ELEMENT,version:l.version,size:I}}function A(l,d,f){const E=d.array,I=d.updateRanges;if(r.bindBuffer(f,l),I.length===0)r.bufferSubData(f,0,E);else{I.sort((y,v)=>y.start-v.start);let B=0;for(let y=1;y<I.length;y++){const v=I[B],S=I[y];S.start<=v.start+v.count+1?v.count=Math.max(v.count,S.start+S.count-v.start):(++B,I[B]=S)}I.length=B+1;for(let y=0,v=I.length;y<v;y++){const S=I[y];r.bufferSubData(f,S.start*E.BYTES_PER_ELEMENT,E,S.start,S.count)}d.clearUpdateRanges()}d.onUploadCallback()}function a(l){return l.isInterleavedBufferAttribute&&(l=l.data),t.get(l)}function s(l){l.isInterleavedBufferAttribute&&(l=l.data);const d=t.get(l);d&&(r.deleteBuffer(d.buffer),t.delete(l))}function n(l,d){if(l.isInterleavedBufferAttribute&&(l=l.data),l.isGLBufferAttribute){const E=t.get(l);(!E||E.version<l.version)&&t.set(l,{buffer:l.buffer,type:l.type,bytesPerElement:l.elementSize,version:l.version});return}const f=t.get(l);if(f===void 0)t.set(l,e(l,d));else if(f.version<l.version){if(f.size!==l.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");A(f.buffer,l,d),f.version=l.version}}return{get:a,remove:s,update:n}}var alphahash_fragment=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,alphahash_pars_fragment=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,alphamap_fragment=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,alphamap_pars_fragment=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,alphatest_fragment=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,alphatest_pars_fragment=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,aomap_fragment=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,aomap_pars_fragment=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,batching_pars_vertex=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,batching_vertex=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,begin_vertex=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,beginnormal_vertex=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,bsdfs=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,iridescence_fragment=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,bumpmap_pars_fragment=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,clipping_planes_fragment=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,clipping_planes_pars_fragment=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,clipping_planes_pars_vertex=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,clipping_planes_vertex=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,color_fragment=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,color_pars_fragment=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,color_pars_vertex=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,color_vertex=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,common=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,cube_uv_reflection_fragment=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,defaultnormal_vertex=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,displacementmap_pars_vertex=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,displacementmap_vertex=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,emissivemap_fragment=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,emissivemap_pars_fragment=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,colorspace_fragment="gl_FragColor = linearToOutputTexel( gl_FragColor );",colorspace_pars_fragment=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,envmap_fragment=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,envmap_common_pars_fragment=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,envmap_pars_fragment=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,envmap_pars_vertex=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,envmap_vertex=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,fog_vertex=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,fog_pars_vertex=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,fog_fragment=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,fog_pars_fragment=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,gradientmap_pars_fragment=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,lightmap_pars_fragment=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,lights_lambert_fragment=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,lights_lambert_pars_fragment=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,lights_pars_begin=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,envmap_physical_pars_fragment=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,lights_toon_fragment=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,lights_toon_pars_fragment=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,lights_phong_fragment=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,lights_phong_pars_fragment=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,lights_physical_fragment=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,lights_physical_pars_fragment=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,lights_fragment_begin=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,lights_fragment_maps=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,lights_fragment_end=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,logdepthbuf_fragment=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,logdepthbuf_pars_fragment=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,logdepthbuf_pars_vertex=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,logdepthbuf_vertex=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,map_fragment=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,map_pars_fragment=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,map_particle_fragment=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,map_particle_pars_fragment=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,metalnessmap_fragment=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,metalnessmap_pars_fragment=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,morphinstance_vertex=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,morphcolor_vertex=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,morphnormal_vertex=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,morphtarget_pars_vertex=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,morphtarget_vertex=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,normal_fragment_begin=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,normal_fragment_maps=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,normal_pars_fragment=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,normal_pars_vertex=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,normal_vertex=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,normalmap_pars_fragment=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,clearcoat_normal_fragment_begin=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,clearcoat_normal_fragment_maps=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,clearcoat_pars_fragment=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,iridescence_pars_fragment=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,opaque_fragment=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,packing=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,premultiplied_alpha_fragment=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,project_vertex=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,dithering_fragment=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,dithering_pars_fragment=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,roughnessmap_fragment=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,roughnessmap_pars_fragment=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,shadowmap_pars_fragment=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,shadowmap_pars_vertex=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,shadowmap_vertex=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,shadowmask_pars_fragment=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,skinbase_vertex=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,skinning_pars_vertex=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,skinning_vertex=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,skinnormal_vertex=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,specularmap_fragment=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,specularmap_pars_fragment=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,tonemapping_fragment=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,tonemapping_pars_fragment=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,transmission_fragment=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,transmission_pars_fragment=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,uv_pars_fragment=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,uv_pars_vertex=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,uv_vertex=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,worldpos_vertex=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const vertex$h=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,fragment$h=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,vertex$g=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,fragment$g=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,vertex$f=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,fragment$f=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,vertex$e=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,fragment$e=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,vertex$d=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,fragment$d=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,vertex$c=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,fragment$c=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,vertex$b=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,fragment$b=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,vertex$a=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,fragment$a=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vertex$9=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,fragment$9=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vertex$8=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,fragment$8=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vertex$7=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,fragment$7=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,vertex$6=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,fragment$6=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vertex$5=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,fragment$5=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vertex$4=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,fragment$4=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vertex$3=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,fragment$3=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,vertex$2=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,fragment$2=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,vertex$1=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,fragment$1=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,ShaderChunk={alphahash_fragment,alphahash_pars_fragment,alphamap_fragment,alphamap_pars_fragment,alphatest_fragment,alphatest_pars_fragment,aomap_fragment,aomap_pars_fragment,batching_pars_vertex,batching_vertex,begin_vertex,beginnormal_vertex,bsdfs,iridescence_fragment,bumpmap_pars_fragment,clipping_planes_fragment,clipping_planes_pars_fragment,clipping_planes_pars_vertex,clipping_planes_vertex,color_fragment,color_pars_fragment,color_pars_vertex,color_vertex,common,cube_uv_reflection_fragment,defaultnormal_vertex,displacementmap_pars_vertex,displacementmap_vertex,emissivemap_fragment,emissivemap_pars_fragment,colorspace_fragment,colorspace_pars_fragment,envmap_fragment,envmap_common_pars_fragment,envmap_pars_fragment,envmap_pars_vertex,envmap_physical_pars_fragment,envmap_vertex,fog_vertex,fog_pars_vertex,fog_fragment,fog_pars_fragment,gradientmap_pars_fragment,lightmap_pars_fragment,lights_lambert_fragment,lights_lambert_pars_fragment,lights_pars_begin,lights_toon_fragment,lights_toon_pars_fragment,lights_phong_fragment,lights_phong_pars_fragment,lights_physical_fragment,lights_physical_pars_fragment,lights_fragment_begin,lights_fragment_maps,lights_fragment_end,logdepthbuf_fragment,logdepthbuf_pars_fragment,logdepthbuf_pars_vertex,logdepthbuf_vertex,map_fragment,map_pars_fragment,map_particle_fragment,map_particle_pars_fragment,metalnessmap_fragment,metalnessmap_pars_fragment,morphinstance_vertex,morphcolor_vertex,morphnormal_vertex,morphtarget_pars_vertex,morphtarget_vertex,normal_fragment_begin,normal_fragment_maps,normal_pars_fragment,normal_pars_vertex,normal_vertex,normalmap_pars_fragment,clearcoat_normal_fragment_begin,clearcoat_normal_fragment_maps,clearcoat_pars_fragment,iridescence_pars_fragment,opaque_fragment,packing,premultiplied_alpha_fragment,project_vertex,dithering_fragment,dithering_pars_fragment,roughnessmap_fragment,roughnessmap_pars_fragment,shadowmap_pars_fragment,shadowmap_pars_vertex,shadowmap_vertex,shadowmask_pars_fragment,skinbase_vertex,skinning_pars_vertex,skinning_vertex,skinnormal_vertex,specularmap_fragment,specularmap_pars_fragment,tonemapping_fragment,tonemapping_pars_fragment,transmission_fragment,transmission_pars_fragment,uv_pars_fragment,uv_pars_vertex,uv_vertex,worldpos_vertex,background_vert:vertex$h,background_frag:fragment$h,backgroundCube_vert:vertex$g,backgroundCube_frag:fragment$g,cube_vert:vertex$f,cube_frag:fragment$f,depth_vert:vertex$e,depth_frag:fragment$e,distanceRGBA_vert:vertex$d,distanceRGBA_frag:fragment$d,equirect_vert:vertex$c,equirect_frag:fragment$c,linedashed_vert:vertex$b,linedashed_frag:fragment$b,meshbasic_vert:vertex$a,meshbasic_frag:fragment$a,meshlambert_vert:vertex$9,meshlambert_frag:fragment$9,meshmatcap_vert:vertex$8,meshmatcap_frag:fragment$8,meshnormal_vert:vertex$7,meshnormal_frag:fragment$7,meshphong_vert:vertex$6,meshphong_frag:fragment$6,meshphysical_vert:vertex$5,meshphysical_frag:fragment$5,meshtoon_vert:vertex$4,meshtoon_frag:fragment$4,points_vert:vertex$3,points_frag:fragment$3,shadow_vert:vertex$2,shadow_frag:fragment$2,sprite_vert:vertex$1,sprite_frag:fragment$1},UniformsLib={common:{diffuse:{value:new Color(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Matrix3},alphaMap:{value:null},alphaMapTransform:{value:new Matrix3},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Matrix3}},envmap:{envMap:{value:null},envMapRotation:{value:new Matrix3},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Matrix3}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Matrix3}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Matrix3},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Matrix3},normalScale:{value:new Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Matrix3},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Matrix3}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Matrix3}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Matrix3}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Color(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Color(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Matrix3},alphaTest:{value:0},uvTransform:{value:new Matrix3}},sprite:{diffuse:{value:new Color(16777215)},opacity:{value:1},center:{value:new Vector2(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Matrix3},alphaMap:{value:null},alphaMapTransform:{value:new Matrix3},alphaTest:{value:0}}},ShaderLib={basic:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.fog]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},lambert:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)}}]),vertexShader:ShaderChunk.meshlambert_vert,fragmentShader:ShaderChunk.meshlambert_frag},phong:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)},specular:{value:new Color(1118481)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag},standard:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.roughnessmap,UniformsLib.metalnessmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},toon:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.gradientmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)}}]),vertexShader:ShaderChunk.meshtoon_vert,fragmentShader:ShaderChunk.meshtoon_frag},matcap:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,{matcap:{value:null}}]),vertexShader:ShaderChunk.meshmatcap_vert,fragmentShader:ShaderChunk.meshmatcap_frag},points:{uniforms:mergeUniforms([UniformsLib.points,UniformsLib.fog]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},dashed:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ShaderChunk.linedashed_vert,fragmentShader:ShaderChunk.linedashed_frag},depth:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap]),vertexShader:ShaderChunk.depth_vert,fragmentShader:ShaderChunk.depth_frag},normal:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,{opacity:{value:1}}]),vertexShader:ShaderChunk.meshnormal_vert,fragmentShader:ShaderChunk.meshnormal_frag},sprite:{uniforms:mergeUniforms([UniformsLib.sprite,UniformsLib.fog]),vertexShader:ShaderChunk.sprite_vert,fragmentShader:ShaderChunk.sprite_frag},background:{uniforms:{uvTransform:{value:new Matrix3},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:ShaderChunk.background_vert,fragmentShader:ShaderChunk.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Matrix3}},vertexShader:ShaderChunk.backgroundCube_vert,fragmentShader:ShaderChunk.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:ShaderChunk.cube_vert,fragmentShader:ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ShaderChunk.equirect_vert,fragmentShader:ShaderChunk.equirect_frag},distanceRGBA:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap,{referencePosition:{value:new Vector3},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ShaderChunk.distanceRGBA_vert,fragmentShader:ShaderChunk.distanceRGBA_frag},shadow:{uniforms:mergeUniforms([UniformsLib.lights,UniformsLib.fog,{color:{value:new Color(0)},opacity:{value:1}}]),vertexShader:ShaderChunk.shadow_vert,fragmentShader:ShaderChunk.shadow_frag}};ShaderLib.physical={uniforms:mergeUniforms([ShaderLib.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Matrix3},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Matrix3},clearcoatNormalScale:{value:new Vector2(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Matrix3},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Matrix3},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Matrix3},sheen:{value:0},sheenColor:{value:new Color(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Matrix3},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Matrix3},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Matrix3},transmissionSamplerSize:{value:new Vector2},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Matrix3},attenuationDistance:{value:0},attenuationColor:{value:new Color(0)},specularColor:{value:new Color(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Matrix3},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Matrix3},anisotropyVector:{value:new Vector2},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Matrix3}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag};const _rgb={r:0,b:0,g:0},_e1$1=new Euler,_m1$1=new Matrix4;function WebGLBackground(r,t,e,A,a,s,n){const l=new Color(0);let d=s===!0?0:1,f,E,I=null,B=0,y=null;function v(b){let T=b.isScene===!0?b.background:null;return T&&T.isTexture&&(T=(b.backgroundBlurriness>0?e:t).get(T)),T}function S(b){let T=!1;const P=v(b);P===null?Q(l,d):P&&P.isColor&&(Q(P,1),T=!0);const R=r.xr.getEnvironmentBlendMode();R==="additive"?A.buffers.color.setClear(0,0,0,1,n):R==="alpha-blend"&&A.buffers.color.setClear(0,0,0,0,n),(r.autoClear||T)&&(A.buffers.depth.setTest(!0),A.buffers.depth.setMask(!0),A.buffers.color.setMask(!0),r.clear(r.autoClearColor,r.autoClearDepth,r.autoClearStencil))}function _(b,T){const P=v(T);P&&(P.isCubeTexture||P.mapping===CubeUVReflectionMapping)?(E===void 0&&(E=new Mesh(new BoxGeometry(1,1,1),new ShaderMaterial({name:"BackgroundCubeMaterial",uniforms:cloneUniforms(ShaderLib.backgroundCube.uniforms),vertexShader:ShaderLib.backgroundCube.vertexShader,fragmentShader:ShaderLib.backgroundCube.fragmentShader,side:BackSide,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),E.geometry.deleteAttribute("normal"),E.geometry.deleteAttribute("uv"),E.onBeforeRender=function(R,F,O){this.matrixWorld.copyPosition(O.matrixWorld)},Object.defineProperty(E.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),a.update(E)),_e1$1.copy(T.backgroundRotation),_e1$1.x*=-1,_e1$1.y*=-1,_e1$1.z*=-1,P.isCubeTexture&&P.isRenderTargetTexture===!1&&(_e1$1.y*=-1,_e1$1.z*=-1),E.material.uniforms.envMap.value=P,E.material.uniforms.flipEnvMap.value=P.isCubeTexture&&P.isRenderTargetTexture===!1?-1:1,E.material.uniforms.backgroundBlurriness.value=T.backgroundBlurriness,E.material.uniforms.backgroundIntensity.value=T.backgroundIntensity,E.material.uniforms.backgroundRotation.value.setFromMatrix4(_m1$1.makeRotationFromEuler(_e1$1)),E.material.toneMapped=ColorManagement.getTransfer(P.colorSpace)!==SRGBTransfer,(I!==P||B!==P.version||y!==r.toneMapping)&&(E.material.needsUpdate=!0,I=P,B=P.version,y=r.toneMapping),E.layers.enableAll(),b.unshift(E,E.geometry,E.material,0,0,null)):P&&P.isTexture&&(f===void 0&&(f=new Mesh(new PlaneGeometry(2,2),new ShaderMaterial({name:"BackgroundMaterial",uniforms:cloneUniforms(ShaderLib.background.uniforms),vertexShader:ShaderLib.background.vertexShader,fragmentShader:ShaderLib.background.fragmentShader,side:FrontSide,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),f.geometry.deleteAttribute("normal"),Object.defineProperty(f.material,"map",{get:function(){return this.uniforms.t2D.value}}),a.update(f)),f.material.uniforms.t2D.value=P,f.material.uniforms.backgroundIntensity.value=T.backgroundIntensity,f.material.toneMapped=ColorManagement.getTransfer(P.colorSpace)!==SRGBTransfer,P.matrixAutoUpdate===!0&&P.updateMatrix(),f.material.uniforms.uvTransform.value.copy(P.matrix),(I!==P||B!==P.version||y!==r.toneMapping)&&(f.material.needsUpdate=!0,I=P,B=P.version,y=r.toneMapping),f.layers.enableAll(),b.unshift(f,f.geometry,f.material,0,0,null))}function Q(b,T){b.getRGB(_rgb,getUnlitUniformColorSpace(r)),A.buffers.color.setClear(_rgb.r,_rgb.g,_rgb.b,T,n)}function D(){E!==void 0&&(E.geometry.dispose(),E.material.dispose(),E=void 0),f!==void 0&&(f.geometry.dispose(),f.material.dispose(),f=void 0)}return{getClearColor:function(){return l},setClearColor:function(b,T=1){l.set(b),d=T,Q(l,d)},getClearAlpha:function(){return d},setClearAlpha:function(b){d=b,Q(l,d)},render:S,addToRenderList:_,dispose:D}}function WebGLBindingStates(r,t){const e=r.getParameter(r.MAX_VERTEX_ATTRIBS),A={},a=B(null);let s=a,n=!1;function l(L,Y,rt,tt,at){let pt=!1;const ct=I(tt,rt,Y);s!==ct&&(s=ct,f(s.object)),pt=y(L,tt,rt,at),pt&&v(L,tt,rt,at),at!==null&&t.update(at,r.ELEMENT_ARRAY_BUFFER),(pt||n)&&(n=!1,T(L,Y,rt,tt),at!==null&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t.get(at).buffer))}function d(){return r.createVertexArray()}function f(L){return r.bindVertexArray(L)}function E(L){return r.deleteVertexArray(L)}function I(L,Y,rt){const tt=rt.wireframe===!0;let at=A[L.id];at===void 0&&(at={},A[L.id]=at);let pt=at[Y.id];pt===void 0&&(pt={},at[Y.id]=pt);let ct=pt[tt];return ct===void 0&&(ct=B(d()),pt[tt]=ct),ct}function B(L){const Y=[],rt=[],tt=[];for(let at=0;at<e;at++)Y[at]=0,rt[at]=0,tt[at]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:Y,enabledAttributes:rt,attributeDivisors:tt,object:L,attributes:{},index:null}}function y(L,Y,rt,tt){const at=s.attributes,pt=Y.attributes;let ct=0;const $=rt.getAttributes();for(const q in $)if($[q].location>=0){const wt=at[q];let Bt=pt[q];if(Bt===void 0&&(q==="instanceMatrix"&&L.instanceMatrix&&(Bt=L.instanceMatrix),q==="instanceColor"&&L.instanceColor&&(Bt=L.instanceColor)),wt===void 0||wt.attribute!==Bt||Bt&&wt.data!==Bt.data)return!0;ct++}return s.attributesNum!==ct||s.index!==tt}function v(L,Y,rt,tt){const at={},pt=Y.attributes;let ct=0;const $=rt.getAttributes();for(const q in $)if($[q].location>=0){let wt=pt[q];wt===void 0&&(q==="instanceMatrix"&&L.instanceMatrix&&(wt=L.instanceMatrix),q==="instanceColor"&&L.instanceColor&&(wt=L.instanceColor));const Bt={};Bt.attribute=wt,wt&&wt.data&&(Bt.data=wt.data),at[q]=Bt,ct++}s.attributes=at,s.attributesNum=ct,s.index=tt}function S(){const L=s.newAttributes;for(let Y=0,rt=L.length;Y<rt;Y++)L[Y]=0}function _(L){Q(L,0)}function Q(L,Y){const rt=s.newAttributes,tt=s.enabledAttributes,at=s.attributeDivisors;rt[L]=1,tt[L]===0&&(r.enableVertexAttribArray(L),tt[L]=1),at[L]!==Y&&(r.vertexAttribDivisor(L,Y),at[L]=Y)}function D(){const L=s.newAttributes,Y=s.enabledAttributes;for(let rt=0,tt=Y.length;rt<tt;rt++)Y[rt]!==L[rt]&&(r.disableVertexAttribArray(rt),Y[rt]=0)}function b(L,Y,rt,tt,at,pt,ct){ct===!0?r.vertexAttribIPointer(L,Y,rt,at,pt):r.vertexAttribPointer(L,Y,rt,tt,at,pt)}function T(L,Y,rt,tt){S();const at=tt.attributes,pt=rt.getAttributes(),ct=Y.defaultAttributeValues;for(const $ in pt){const q=pt[$];if(q.location>=0){let Ct=at[$];if(Ct===void 0&&($==="instanceMatrix"&&L.instanceMatrix&&(Ct=L.instanceMatrix),$==="instanceColor"&&L.instanceColor&&(Ct=L.instanceColor)),Ct!==void 0){const wt=Ct.normalized,Bt=Ct.itemSize,ut=t.get(Ct);if(ut===void 0)continue;const K=ut.buffer,J=ut.type,At=ut.bytesPerElement,xt=J===r.INT||J===r.UNSIGNED_INT||Ct.gpuType===IntType;if(Ct.isInterleavedBufferAttribute){const mt=Ct.data,Tt=mt.stride,Vt=Ct.offset;if(mt.isInstancedInterleavedBuffer){for(let Nt=0;Nt<q.locationSize;Nt++)Q(q.location+Nt,mt.meshPerAttribute);L.isInstancedMesh!==!0&&tt._maxInstanceCount===void 0&&(tt._maxInstanceCount=mt.meshPerAttribute*mt.count)}else for(let Nt=0;Nt<q.locationSize;Nt++)_(q.location+Nt);r.bindBuffer(r.ARRAY_BUFFER,K);for(let Nt=0;Nt<q.locationSize;Nt++)b(q.location+Nt,Bt/q.locationSize,J,wt,Tt*At,(Vt+Bt/q.locationSize*Nt)*At,xt)}else{if(Ct.isInstancedBufferAttribute){for(let mt=0;mt<q.locationSize;mt++)Q(q.location+mt,Ct.meshPerAttribute);L.isInstancedMesh!==!0&&tt._maxInstanceCount===void 0&&(tt._maxInstanceCount=Ct.meshPerAttribute*Ct.count)}else for(let mt=0;mt<q.locationSize;mt++)_(q.location+mt);r.bindBuffer(r.ARRAY_BUFFER,K);for(let mt=0;mt<q.locationSize;mt++)b(q.location+mt,Bt/q.locationSize,J,wt,Bt*At,Bt/q.locationSize*mt*At,xt)}}else if(ct!==void 0){const wt=ct[$];if(wt!==void 0)switch(wt.length){case 2:r.vertexAttrib2fv(q.location,wt);break;case 3:r.vertexAttrib3fv(q.location,wt);break;case 4:r.vertexAttrib4fv(q.location,wt);break;default:r.vertexAttrib1fv(q.location,wt)}}}}D()}function P(){O();for(const L in A){const Y=A[L];for(const rt in Y){const tt=Y[rt];for(const at in tt)E(tt[at].object),delete tt[at];delete Y[rt]}delete A[L]}}function R(L){if(A[L.id]===void 0)return;const Y=A[L.id];for(const rt in Y){const tt=Y[rt];for(const at in tt)E(tt[at].object),delete tt[at];delete Y[rt]}delete A[L.id]}function F(L){for(const Y in A){const rt=A[Y];if(rt[L.id]===void 0)continue;const tt=rt[L.id];for(const at in tt)E(tt[at].object),delete tt[at];delete rt[L.id]}}function O(){N(),n=!0,s!==a&&(s=a,f(s.object))}function N(){a.geometry=null,a.program=null,a.wireframe=!1}return{setup:l,reset:O,resetDefaultState:N,dispose:P,releaseStatesOfGeometry:R,releaseStatesOfProgram:F,initAttributes:S,enableAttribute:_,disableUnusedAttributes:D}}function WebGLBufferRenderer(r,t,e){let A;function a(f){A=f}function s(f,E){r.drawArrays(A,f,E),e.update(E,A,1)}function n(f,E,I){I!==0&&(r.drawArraysInstanced(A,f,E,I),e.update(E,A,I))}function l(f,E,I){if(I===0)return;t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(A,f,0,E,0,I);let y=0;for(let v=0;v<I;v++)y+=E[v];e.update(y,A,1)}function d(f,E,I,B){if(I===0)return;const y=t.get("WEBGL_multi_draw");if(y===null)for(let v=0;v<f.length;v++)n(f[v],E[v],B[v]);else{y.multiDrawArraysInstancedWEBGL(A,f,0,E,0,B,0,I);let v=0;for(let S=0;S<I;S++)v+=E[S]*B[S];e.update(v,A,1)}}this.setMode=a,this.render=s,this.renderInstances=n,this.renderMultiDraw=l,this.renderMultiDrawInstances=d}function WebGLCapabilities(r,t,e,A){let a;function s(){if(a!==void 0)return a;if(t.has("EXT_texture_filter_anisotropic")===!0){const F=t.get("EXT_texture_filter_anisotropic");a=r.getParameter(F.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else a=0;return a}function n(F){return!(F!==RGBAFormat&&A.convert(F)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT))}function l(F){const O=F===HalfFloatType&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(F!==UnsignedByteType&&A.convert(F)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE)&&F!==FloatType&&!O)}function d(F){if(F==="highp"){if(r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.HIGH_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.HIGH_FLOAT).precision>0)return"highp";F="mediump"}return F==="mediump"&&r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.MEDIUM_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let f=e.precision!==void 0?e.precision:"highp";const E=d(f);E!==f&&(console.warn("THREE.WebGLRenderer:",f,"not supported, using",E,"instead."),f=E);const I=e.logarithmicDepthBuffer===!0,B=e.reverseDepthBuffer===!0&&t.has("EXT_clip_control"),y=r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS),v=r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS),S=r.getParameter(r.MAX_TEXTURE_SIZE),_=r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE),Q=r.getParameter(r.MAX_VERTEX_ATTRIBS),D=r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS),b=r.getParameter(r.MAX_VARYING_VECTORS),T=r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS),P=v>0,R=r.getParameter(r.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:s,getMaxPrecision:d,textureFormatReadable:n,textureTypeReadable:l,precision:f,logarithmicDepthBuffer:I,reverseDepthBuffer:B,maxTextures:y,maxVertexTextures:v,maxTextureSize:S,maxCubemapSize:_,maxAttributes:Q,maxVertexUniforms:D,maxVaryings:b,maxFragmentUniforms:T,vertexTextures:P,maxSamples:R}}function WebGLClipping(r){const t=this;let e=null,A=0,a=!1,s=!1;const n=new Plane,l=new Matrix3,d={value:null,needsUpdate:!1};this.uniform=d,this.numPlanes=0,this.numIntersection=0,this.init=function(I,B){const y=I.length!==0||B||A!==0||a;return a=B,A=I.length,y},this.beginShadows=function(){s=!0,E(null)},this.endShadows=function(){s=!1},this.setGlobalState=function(I,B){e=E(I,B,0)},this.setState=function(I,B,y){const v=I.clippingPlanes,S=I.clipIntersection,_=I.clipShadows,Q=r.get(I);if(!a||v===null||v.length===0||s&&!_)s?E(null):f();else{const D=s?0:A,b=D*4;let T=Q.clippingState||null;d.value=T,T=E(v,B,b,y);for(let P=0;P!==b;++P)T[P]=e[P];Q.clippingState=T,this.numIntersection=S?this.numPlanes:0,this.numPlanes+=D}};function f(){d.value!==e&&(d.value=e,d.needsUpdate=A>0),t.numPlanes=A,t.numIntersection=0}function E(I,B,y,v){const S=I!==null?I.length:0;let _=null;if(S!==0){if(_=d.value,v!==!0||_===null){const Q=y+S*4,D=B.matrixWorldInverse;l.getNormalMatrix(D),(_===null||_.length<Q)&&(_=new Float32Array(Q));for(let b=0,T=y;b!==S;++b,T+=4)n.copy(I[b]).applyMatrix4(D,l),n.normal.toArray(_,T),_[T+3]=n.constant}d.value=_,d.needsUpdate=!0}return t.numPlanes=S,t.numIntersection=0,_}}function WebGLCubeMaps(r){let t=new WeakMap;function e(n,l){return l===EquirectangularReflectionMapping?n.mapping=CubeReflectionMapping:l===EquirectangularRefractionMapping&&(n.mapping=CubeRefractionMapping),n}function A(n){if(n&&n.isTexture){const l=n.mapping;if(l===EquirectangularReflectionMapping||l===EquirectangularRefractionMapping)if(t.has(n)){const d=t.get(n).texture;return e(d,n.mapping)}else{const d=n.image;if(d&&d.height>0){const f=new WebGLCubeRenderTarget(d.height);return f.fromEquirectangularTexture(r,n),t.set(n,f),n.addEventListener("dispose",a),e(f.texture,n.mapping)}else return null}}return n}function a(n){const l=n.target;l.removeEventListener("dispose",a);const d=t.get(l);d!==void 0&&(t.delete(l),d.dispose())}function s(){t=new WeakMap}return{get:A,dispose:s}}const LOD_MIN=4,EXTRA_LOD_SIGMA=[.125,.215,.35,.446,.526,.582],MAX_SAMPLES=20,_flatCamera=new OrthographicCamera,_clearColor=new Color;let _oldTarget=null,_oldActiveCubeFace=0,_oldActiveMipmapLevel=0,_oldXrEnabled=!1;const PHI=(1+Math.sqrt(5))/2,INV_PHI=1/PHI,_axisDirections=[new Vector3(-PHI,INV_PHI,0),new Vector3(PHI,INV_PHI,0),new Vector3(-INV_PHI,0,PHI),new Vector3(INV_PHI,0,PHI),new Vector3(0,PHI,-INV_PHI),new Vector3(0,PHI,INV_PHI),new Vector3(-1,1,-1),new Vector3(1,1,-1),new Vector3(-1,1,1),new Vector3(1,1,1)],_origin=new Vector3;class PMREMGenerator{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,A=.1,a=100,s={}){const{size:n=256,position:l=_origin}=s;_oldTarget=this._renderer.getRenderTarget(),_oldActiveCubeFace=this._renderer.getActiveCubeFace(),_oldActiveMipmapLevel=this._renderer.getActiveMipmapLevel(),_oldXrEnabled=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(n);const d=this._allocateTargets();return d.depthBuffer=!0,this._sceneToCubeUV(t,A,a,d,l),e>0&&this._blur(d,0,0,e),this._applyPMREM(d),this._cleanup(d),d}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=_getCubemapMaterial(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=_getEquirectMaterial(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(_oldTarget,_oldActiveCubeFace,_oldActiveMipmapLevel),this._renderer.xr.enabled=_oldXrEnabled,t.scissorTest=!1,_setViewport(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===CubeReflectionMapping||t.mapping===CubeRefractionMapping?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),_oldTarget=this._renderer.getRenderTarget(),_oldActiveCubeFace=this._renderer.getActiveCubeFace(),_oldActiveMipmapLevel=this._renderer.getActiveMipmapLevel(),_oldXrEnabled=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const A=e||this._allocateTargets();return this._textureToCubeUV(t,A),this._applyPMREM(A),this._cleanup(A),A}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,A={magFilter:LinearFilter,minFilter:LinearFilter,generateMipmaps:!1,type:HalfFloatType,format:RGBAFormat,colorSpace:LinearSRGBColorSpace,depthBuffer:!1},a=_createRenderTarget(t,e,A);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=_createRenderTarget(t,e,A);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=_createPlanes(s)),this._blurMaterial=_getBlurShader(s,t,e)}return a}_compileMaterial(t){const e=new Mesh(this._lodPlanes[0],t);this._renderer.compile(e,_flatCamera)}_sceneToCubeUV(t,e,A,a,s){const d=new PerspectiveCamera(90,1,e,A),f=[1,-1,1,1,1,1],E=[1,1,1,-1,-1,-1],I=this._renderer,B=I.autoClear,y=I.toneMapping;I.getClearColor(_clearColor),I.toneMapping=NoToneMapping,I.autoClear=!1;const v=new MeshBasicMaterial({name:"PMREM.Background",side:BackSide,depthWrite:!1,depthTest:!1}),S=new Mesh(new BoxGeometry,v);let _=!1;const Q=t.background;Q?Q.isColor&&(v.color.copy(Q),t.background=null,_=!0):(v.color.copy(_clearColor),_=!0);for(let D=0;D<6;D++){const b=D%3;b===0?(d.up.set(0,f[D],0),d.position.set(s.x,s.y,s.z),d.lookAt(s.x+E[D],s.y,s.z)):b===1?(d.up.set(0,0,f[D]),d.position.set(s.x,s.y,s.z),d.lookAt(s.x,s.y+E[D],s.z)):(d.up.set(0,f[D],0),d.position.set(s.x,s.y,s.z),d.lookAt(s.x,s.y,s.z+E[D]));const T=this._cubeSize;_setViewport(a,b*T,D>2?T:0,T,T),I.setRenderTarget(a),_&&I.render(S,d),I.render(t,d)}S.geometry.dispose(),S.material.dispose(),I.toneMapping=y,I.autoClear=B,t.background=Q}_textureToCubeUV(t,e){const A=this._renderer,a=t.mapping===CubeReflectionMapping||t.mapping===CubeRefractionMapping;a?(this._cubemapMaterial===null&&(this._cubemapMaterial=_getCubemapMaterial()),this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=_getEquirectMaterial());const s=a?this._cubemapMaterial:this._equirectMaterial,n=new Mesh(this._lodPlanes[0],s),l=s.uniforms;l.envMap.value=t;const d=this._cubeSize;_setViewport(e,0,0,3*d,2*d),A.setRenderTarget(e),A.render(n,_flatCamera)}_applyPMREM(t){const e=this._renderer,A=e.autoClear;e.autoClear=!1;const a=this._lodPlanes.length;for(let s=1;s<a;s++){const n=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),l=_axisDirections[(a-s-1)%_axisDirections.length];this._blur(t,s-1,s,n,l)}e.autoClear=A}_blur(t,e,A,a,s){const n=this._pingPongRenderTarget;this._halfBlur(t,n,e,A,a,"latitudinal",s),this._halfBlur(n,t,A,A,a,"longitudinal",s)}_halfBlur(t,e,A,a,s,n,l){const d=this._renderer,f=this._blurMaterial;n!=="latitudinal"&&n!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const E=3,I=new Mesh(this._lodPlanes[a],f),B=f.uniforms,y=this._sizeLods[A]-1,v=isFinite(s)?Math.PI/(2*y):2*Math.PI/(2*MAX_SAMPLES-1),S=s/v,_=isFinite(s)?1+Math.floor(E*S):MAX_SAMPLES;_>MAX_SAMPLES&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${_} samples when the maximum is set to ${MAX_SAMPLES}`);const Q=[];let D=0;for(let F=0;F<MAX_SAMPLES;++F){const O=F/S,N=Math.exp(-O*O/2);Q.push(N),F===0?D+=N:F<_&&(D+=2*N)}for(let F=0;F<Q.length;F++)Q[F]=Q[F]/D;B.envMap.value=t.texture,B.samples.value=_,B.weights.value=Q,B.latitudinal.value=n==="latitudinal",l&&(B.poleAxis.value=l);const{_lodMax:b}=this;B.dTheta.value=v,B.mipInt.value=b-A;const T=this._sizeLods[a],P=3*T*(a>b-LOD_MIN?a-b+LOD_MIN:0),R=4*(this._cubeSize-T);_setViewport(e,P,R,3*T,2*T),d.setRenderTarget(e),d.render(I,_flatCamera)}}function _createPlanes(r){const t=[],e=[],A=[];let a=r;const s=r-LOD_MIN+1+EXTRA_LOD_SIGMA.length;for(let n=0;n<s;n++){const l=Math.pow(2,a);e.push(l);let d=1/l;n>r-LOD_MIN?d=EXTRA_LOD_SIGMA[n-r+LOD_MIN-1]:n===0&&(d=0),A.push(d);const f=1/(l-2),E=-f,I=1+f,B=[E,E,I,E,I,I,E,E,I,I,E,I],y=6,v=6,S=3,_=2,Q=1,D=new Float32Array(S*v*y),b=new Float32Array(_*v*y),T=new Float32Array(Q*v*y);for(let R=0;R<y;R++){const F=R%3*2/3-1,O=R>2?0:-1,N=[F,O,0,F+2/3,O,0,F+2/3,O+1,0,F,O,0,F+2/3,O+1,0,F,O+1,0];D.set(N,S*v*R),b.set(B,_*v*R);const L=[R,R,R,R,R,R];T.set(L,Q*v*R)}const P=new BufferGeometry;P.setAttribute("position",new BufferAttribute(D,S)),P.setAttribute("uv",new BufferAttribute(b,_)),P.setAttribute("faceIndex",new BufferAttribute(T,Q)),t.push(P),a>LOD_MIN&&a--}return{lodPlanes:t,sizeLods:e,sigmas:A}}function _createRenderTarget(r,t,e){const A=new WebGLRenderTarget(r,t,e);return A.texture.mapping=CubeUVReflectionMapping,A.texture.name="PMREM.cubeUv",A.scissorTest=!0,A}function _setViewport(r,t,e,A,a){r.viewport.set(t,e,A,a),r.scissor.set(t,e,A,a)}function _getBlurShader(r,t,e){const A=new Float32Array(MAX_SAMPLES),a=new Vector3(0,1,0);return new ShaderMaterial({name:"SphericalGaussianBlur",defines:{n:MAX_SAMPLES,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/e,CUBEUV_MAX_MIP:`${r}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:A},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:a}},vertexShader:_getCommonVertexShader(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:NoBlending,depthTest:!1,depthWrite:!1})}function _getEquirectMaterial(){return new ShaderMaterial({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:_getCommonVertexShader(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:NoBlending,depthTest:!1,depthWrite:!1})}function _getCubemapMaterial(){return new ShaderMaterial({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:_getCommonVertexShader(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:NoBlending,depthTest:!1,depthWrite:!1})}function _getCommonVertexShader(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function WebGLCubeUVMaps(r){let t=new WeakMap,e=null;function A(l){if(l&&l.isTexture){const d=l.mapping,f=d===EquirectangularReflectionMapping||d===EquirectangularRefractionMapping,E=d===CubeReflectionMapping||d===CubeRefractionMapping;if(f||E){let I=t.get(l);const B=I!==void 0?I.texture.pmremVersion:0;if(l.isRenderTargetTexture&&l.pmremVersion!==B)return e===null&&(e=new PMREMGenerator(r)),I=f?e.fromEquirectangular(l,I):e.fromCubemap(l,I),I.texture.pmremVersion=l.pmremVersion,t.set(l,I),I.texture;if(I!==void 0)return I.texture;{const y=l.image;return f&&y&&y.height>0||E&&y&&a(y)?(e===null&&(e=new PMREMGenerator(r)),I=f?e.fromEquirectangular(l):e.fromCubemap(l),I.texture.pmremVersion=l.pmremVersion,t.set(l,I),l.addEventListener("dispose",s),I.texture):null}}}return l}function a(l){let d=0;const f=6;for(let E=0;E<f;E++)l[E]!==void 0&&d++;return d===f}function s(l){const d=l.target;d.removeEventListener("dispose",s);const f=t.get(d);f!==void 0&&(t.delete(d),f.dispose())}function n(){t=new WeakMap,e!==null&&(e.dispose(),e=null)}return{get:A,dispose:n}}function WebGLExtensions(r){const t={};function e(A){if(t[A]!==void 0)return t[A];let a;switch(A){case"WEBGL_depth_texture":a=r.getExtension("WEBGL_depth_texture")||r.getExtension("MOZ_WEBGL_depth_texture")||r.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":a=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":a=r.getExtension("WEBGL_compressed_texture_s3tc")||r.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":a=r.getExtension("WEBGL_compressed_texture_pvrtc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:a=r.getExtension(A)}return t[A]=a,a}return{has:function(A){return e(A)!==null},init:function(){e("EXT_color_buffer_float"),e("WEBGL_clip_cull_distance"),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float"),e("WEBGL_multisampled_render_to_texture"),e("WEBGL_render_shared_exponent")},get:function(A){const a=e(A);return a===null&&warnOnce("THREE.WebGLRenderer: "+A+" extension not supported."),a}}}function WebGLGeometries(r,t,e,A){const a={},s=new WeakMap;function n(I){const B=I.target;B.index!==null&&t.remove(B.index);for(const v in B.attributes)t.remove(B.attributes[v]);B.removeEventListener("dispose",n),delete a[B.id];const y=s.get(B);y&&(t.remove(y),s.delete(B)),A.releaseStatesOfGeometry(B),B.isInstancedBufferGeometry===!0&&delete B._maxInstanceCount,e.memory.geometries--}function l(I,B){return a[B.id]===!0||(B.addEventListener("dispose",n),a[B.id]=!0,e.memory.geometries++),B}function d(I){const B=I.attributes;for(const y in B)t.update(B[y],r.ARRAY_BUFFER)}function f(I){const B=[],y=I.index,v=I.attributes.position;let S=0;if(y!==null){const D=y.array;S=y.version;for(let b=0,T=D.length;b<T;b+=3){const P=D[b+0],R=D[b+1],F=D[b+2];B.push(P,R,R,F,F,P)}}else if(v!==void 0){const D=v.array;S=v.version;for(let b=0,T=D.length/3-1;b<T;b+=3){const P=b+0,R=b+1,F=b+2;B.push(P,R,R,F,F,P)}}else return;const _=new(arrayNeedsUint32(B)?Uint32BufferAttribute:Uint16BufferAttribute)(B,1);_.version=S;const Q=s.get(I);Q&&t.remove(Q),s.set(I,_)}function E(I){const B=s.get(I);if(B){const y=I.index;y!==null&&B.version<y.version&&f(I)}else f(I);return s.get(I)}return{get:l,update:d,getWireframeAttribute:E}}function WebGLIndexedBufferRenderer(r,t,e){let A;function a(B){A=B}let s,n;function l(B){s=B.type,n=B.bytesPerElement}function d(B,y){r.drawElements(A,y,s,B*n),e.update(y,A,1)}function f(B,y,v){v!==0&&(r.drawElementsInstanced(A,y,s,B*n,v),e.update(y,A,v))}function E(B,y,v){if(v===0)return;t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(A,y,0,s,B,0,v);let _=0;for(let Q=0;Q<v;Q++)_+=y[Q];e.update(_,A,1)}function I(B,y,v,S){if(v===0)return;const _=t.get("WEBGL_multi_draw");if(_===null)for(let Q=0;Q<B.length;Q++)f(B[Q]/n,y[Q],S[Q]);else{_.multiDrawElementsInstancedWEBGL(A,y,0,s,B,0,S,0,v);let Q=0;for(let D=0;D<v;D++)Q+=y[D]*S[D];e.update(Q,A,1)}}this.setMode=a,this.setIndex=l,this.render=d,this.renderInstances=f,this.renderMultiDraw=E,this.renderMultiDrawInstances=I}function WebGLInfo(r){const t={geometries:0,textures:0},e={frame:0,calls:0,triangles:0,points:0,lines:0};function A(s,n,l){switch(e.calls++,n){case r.TRIANGLES:e.triangles+=l*(s/3);break;case r.LINES:e.lines+=l*(s/2);break;case r.LINE_STRIP:e.lines+=l*(s-1);break;case r.LINE_LOOP:e.lines+=l*s;break;case r.POINTS:e.points+=l*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n);break}}function a(){e.calls=0,e.triangles=0,e.points=0,e.lines=0}return{memory:t,render:e,programs:null,autoReset:!0,reset:a,update:A}}function WebGLMorphtargets(r,t,e){const A=new WeakMap,a=new Vector4;function s(n,l,d){const f=n.morphTargetInfluences,E=l.morphAttributes.position||l.morphAttributes.normal||l.morphAttributes.color,I=E!==void 0?E.length:0;let B=A.get(l);if(B===void 0||B.count!==I){let N=function(){F.dispose(),A.delete(l),l.removeEventListener("dispose",N)};B!==void 0&&B.texture.dispose();const y=l.morphAttributes.position!==void 0,v=l.morphAttributes.normal!==void 0,S=l.morphAttributes.color!==void 0,_=l.morphAttributes.position||[],Q=l.morphAttributes.normal||[],D=l.morphAttributes.color||[];let b=0;y===!0&&(b=1),v===!0&&(b=2),S===!0&&(b=3);let T=l.attributes.position.count*b,P=1;T>t.maxTextureSize&&(P=Math.ceil(T/t.maxTextureSize),T=t.maxTextureSize);const R=new Float32Array(T*P*4*I),F=new DataArrayTexture(R,T,P,I);F.type=FloatType,F.needsUpdate=!0;const O=b*4;for(let L=0;L<I;L++){const Y=_[L],rt=Q[L],tt=D[L],at=T*P*4*L;for(let pt=0;pt<Y.count;pt++){const ct=pt*O;y===!0&&(a.fromBufferAttribute(Y,pt),R[at+ct+0]=a.x,R[at+ct+1]=a.y,R[at+ct+2]=a.z,R[at+ct+3]=0),v===!0&&(a.fromBufferAttribute(rt,pt),R[at+ct+4]=a.x,R[at+ct+5]=a.y,R[at+ct+6]=a.z,R[at+ct+7]=0),S===!0&&(a.fromBufferAttribute(tt,pt),R[at+ct+8]=a.x,R[at+ct+9]=a.y,R[at+ct+10]=a.z,R[at+ct+11]=tt.itemSize===4?a.w:1)}}B={count:I,texture:F,size:new Vector2(T,P)},A.set(l,B),l.addEventListener("dispose",N)}if(n.isInstancedMesh===!0&&n.morphTexture!==null)d.getUniforms().setValue(r,"morphTexture",n.morphTexture,e);else{let y=0;for(let S=0;S<f.length;S++)y+=f[S];const v=l.morphTargetsRelative?1:1-y;d.getUniforms().setValue(r,"morphTargetBaseInfluence",v),d.getUniforms().setValue(r,"morphTargetInfluences",f)}d.getUniforms().setValue(r,"morphTargetsTexture",B.texture,e),d.getUniforms().setValue(r,"morphTargetsTextureSize",B.size)}return{update:s}}function WebGLObjects(r,t,e,A){let a=new WeakMap;function s(d){const f=A.render.frame,E=d.geometry,I=t.get(d,E);if(a.get(I)!==f&&(t.update(I),a.set(I,f)),d.isInstancedMesh&&(d.hasEventListener("dispose",l)===!1&&d.addEventListener("dispose",l),a.get(d)!==f&&(e.update(d.instanceMatrix,r.ARRAY_BUFFER),d.instanceColor!==null&&e.update(d.instanceColor,r.ARRAY_BUFFER),a.set(d,f))),d.isSkinnedMesh){const B=d.skeleton;a.get(B)!==f&&(B.update(),a.set(B,f))}return I}function n(){a=new WeakMap}function l(d){const f=d.target;f.removeEventListener("dispose",l),e.remove(f.instanceMatrix),f.instanceColor!==null&&e.remove(f.instanceColor)}return{update:s,dispose:n}}const emptyTexture=new Texture,emptyShadowTexture=new DepthTexture(1,1),emptyArrayTexture=new DataArrayTexture,empty3dTexture=new Data3DTexture,emptyCubeTexture=new CubeTexture,arrayCacheF32=[],arrayCacheI32=[],mat4array=new Float32Array(16),mat3array=new Float32Array(9),mat2array=new Float32Array(4);function flatten(r,t,e){const A=r[0];if(A<=0||A>0)return r;const a=t*e;let s=arrayCacheF32[a];if(s===void 0&&(s=new Float32Array(a),arrayCacheF32[a]=s),t!==0){A.toArray(s,0);for(let n=1,l=0;n!==t;++n)l+=e,r[n].toArray(s,l)}return s}function arraysEqual(r,t){if(r.length!==t.length)return!1;for(let e=0,A=r.length;e<A;e++)if(r[e]!==t[e])return!1;return!0}function copyArray(r,t){for(let e=0,A=t.length;e<A;e++)r[e]=t[e]}function allocTexUnits(r,t){let e=arrayCacheI32[t];e===void 0&&(e=new Int32Array(t),arrayCacheI32[t]=e);for(let A=0;A!==t;++A)e[A]=r.allocateTextureUnit();return e}function setValueV1f(r,t){const e=this.cache;e[0]!==t&&(r.uniform1f(this.addr,t),e[0]=t)}function setValueV2f(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(arraysEqual(e,t))return;r.uniform2fv(this.addr,t),copyArray(e,t)}}function setValueV3f(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(t.r!==void 0)(e[0]!==t.r||e[1]!==t.g||e[2]!==t.b)&&(r.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(arraysEqual(e,t))return;r.uniform3fv(this.addr,t),copyArray(e,t)}}function setValueV4f(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(arraysEqual(e,t))return;r.uniform4fv(this.addr,t),copyArray(e,t)}}function setValueM2(r,t){const e=this.cache,A=t.elements;if(A===void 0){if(arraysEqual(e,t))return;r.uniformMatrix2fv(this.addr,!1,t),copyArray(e,t)}else{if(arraysEqual(e,A))return;mat2array.set(A),r.uniformMatrix2fv(this.addr,!1,mat2array),copyArray(e,A)}}function setValueM3(r,t){const e=this.cache,A=t.elements;if(A===void 0){if(arraysEqual(e,t))return;r.uniformMatrix3fv(this.addr,!1,t),copyArray(e,t)}else{if(arraysEqual(e,A))return;mat3array.set(A),r.uniformMatrix3fv(this.addr,!1,mat3array),copyArray(e,A)}}function setValueM4(r,t){const e=this.cache,A=t.elements;if(A===void 0){if(arraysEqual(e,t))return;r.uniformMatrix4fv(this.addr,!1,t),copyArray(e,t)}else{if(arraysEqual(e,A))return;mat4array.set(A),r.uniformMatrix4fv(this.addr,!1,mat4array),copyArray(e,A)}}function setValueV1i(r,t){const e=this.cache;e[0]!==t&&(r.uniform1i(this.addr,t),e[0]=t)}function setValueV2i(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2i(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(arraysEqual(e,t))return;r.uniform2iv(this.addr,t),copyArray(e,t)}}function setValueV3i(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3i(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(arraysEqual(e,t))return;r.uniform3iv(this.addr,t),copyArray(e,t)}}function setValueV4i(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4i(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(arraysEqual(e,t))return;r.uniform4iv(this.addr,t),copyArray(e,t)}}function setValueV1ui(r,t){const e=this.cache;e[0]!==t&&(r.uniform1ui(this.addr,t),e[0]=t)}function setValueV2ui(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2ui(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(arraysEqual(e,t))return;r.uniform2uiv(this.addr,t),copyArray(e,t)}}function setValueV3ui(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3ui(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(arraysEqual(e,t))return;r.uniform3uiv(this.addr,t),copyArray(e,t)}}function setValueV4ui(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4ui(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(arraysEqual(e,t))return;r.uniform4uiv(this.addr,t),copyArray(e,t)}}function setValueT1(r,t,e){const A=this.cache,a=e.allocateTextureUnit();A[0]!==a&&(r.uniform1i(this.addr,a),A[0]=a);let s;this.type===r.SAMPLER_2D_SHADOW?(emptyShadowTexture.compareFunction=LessEqualCompare,s=emptyShadowTexture):s=emptyTexture,e.setTexture2D(t||s,a)}function setValueT3D1(r,t,e){const A=this.cache,a=e.allocateTextureUnit();A[0]!==a&&(r.uniform1i(this.addr,a),A[0]=a),e.setTexture3D(t||empty3dTexture,a)}function setValueT6(r,t,e){const A=this.cache,a=e.allocateTextureUnit();A[0]!==a&&(r.uniform1i(this.addr,a),A[0]=a),e.setTextureCube(t||emptyCubeTexture,a)}function setValueT2DArray1(r,t,e){const A=this.cache,a=e.allocateTextureUnit();A[0]!==a&&(r.uniform1i(this.addr,a),A[0]=a),e.setTexture2DArray(t||emptyArrayTexture,a)}function getSingularSetter(r){switch(r){case 5126:return setValueV1f;case 35664:return setValueV2f;case 35665:return setValueV3f;case 35666:return setValueV4f;case 35674:return setValueM2;case 35675:return setValueM3;case 35676:return setValueM4;case 5124:case 35670:return setValueV1i;case 35667:case 35671:return setValueV2i;case 35668:case 35672:return setValueV3i;case 35669:case 35673:return setValueV4i;case 5125:return setValueV1ui;case 36294:return setValueV2ui;case 36295:return setValueV3ui;case 36296:return setValueV4ui;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1;case 35679:case 36299:case 36307:return setValueT3D1;case 35680:case 36300:case 36308:case 36293:return setValueT6;case 36289:case 36303:case 36311:case 36292:return setValueT2DArray1}}function setValueV1fArray(r,t){r.uniform1fv(this.addr,t)}function setValueV2fArray(r,t){const e=flatten(t,this.size,2);r.uniform2fv(this.addr,e)}function setValueV3fArray(r,t){const e=flatten(t,this.size,3);r.uniform3fv(this.addr,e)}function setValueV4fArray(r,t){const e=flatten(t,this.size,4);r.uniform4fv(this.addr,e)}function setValueM2Array(r,t){const e=flatten(t,this.size,4);r.uniformMatrix2fv(this.addr,!1,e)}function setValueM3Array(r,t){const e=flatten(t,this.size,9);r.uniformMatrix3fv(this.addr,!1,e)}function setValueM4Array(r,t){const e=flatten(t,this.size,16);r.uniformMatrix4fv(this.addr,!1,e)}function setValueV1iArray(r,t){r.uniform1iv(this.addr,t)}function setValueV2iArray(r,t){r.uniform2iv(this.addr,t)}function setValueV3iArray(r,t){r.uniform3iv(this.addr,t)}function setValueV4iArray(r,t){r.uniform4iv(this.addr,t)}function setValueV1uiArray(r,t){r.uniform1uiv(this.addr,t)}function setValueV2uiArray(r,t){r.uniform2uiv(this.addr,t)}function setValueV3uiArray(r,t){r.uniform3uiv(this.addr,t)}function setValueV4uiArray(r,t){r.uniform4uiv(this.addr,t)}function setValueT1Array(r,t,e){const A=this.cache,a=t.length,s=allocTexUnits(e,a);arraysEqual(A,s)||(r.uniform1iv(this.addr,s),copyArray(A,s));for(let n=0;n!==a;++n)e.setTexture2D(t[n]||emptyTexture,s[n])}function setValueT3DArray(r,t,e){const A=this.cache,a=t.length,s=allocTexUnits(e,a);arraysEqual(A,s)||(r.uniform1iv(this.addr,s),copyArray(A,s));for(let n=0;n!==a;++n)e.setTexture3D(t[n]||empty3dTexture,s[n])}function setValueT6Array(r,t,e){const A=this.cache,a=t.length,s=allocTexUnits(e,a);arraysEqual(A,s)||(r.uniform1iv(this.addr,s),copyArray(A,s));for(let n=0;n!==a;++n)e.setTextureCube(t[n]||emptyCubeTexture,s[n])}function setValueT2DArrayArray(r,t,e){const A=this.cache,a=t.length,s=allocTexUnits(e,a);arraysEqual(A,s)||(r.uniform1iv(this.addr,s),copyArray(A,s));for(let n=0;n!==a;++n)e.setTexture2DArray(t[n]||emptyArrayTexture,s[n])}function getPureArraySetter(r){switch(r){case 5126:return setValueV1fArray;case 35664:return setValueV2fArray;case 35665:return setValueV3fArray;case 35666:return setValueV4fArray;case 35674:return setValueM2Array;case 35675:return setValueM3Array;case 35676:return setValueM4Array;case 5124:case 35670:return setValueV1iArray;case 35667:case 35671:return setValueV2iArray;case 35668:case 35672:return setValueV3iArray;case 35669:case 35673:return setValueV4iArray;case 5125:return setValueV1uiArray;case 36294:return setValueV2uiArray;case 36295:return setValueV3uiArray;case 36296:return setValueV4uiArray;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1Array;case 35679:case 36299:case 36307:return setValueT3DArray;case 35680:case 36300:case 36308:case 36293:return setValueT6Array;case 36289:case 36303:case 36311:case 36292:return setValueT2DArrayArray}}class SingleUniform{constructor(t,e,A){this.id=t,this.addr=A,this.cache=[],this.type=e.type,this.setValue=getSingularSetter(e.type)}}class PureArrayUniform{constructor(t,e,A){this.id=t,this.addr=A,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=getPureArraySetter(e.type)}}class StructuredUniform{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,A){const a=this.seq;for(let s=0,n=a.length;s!==n;++s){const l=a[s];l.setValue(t,e[l.id],A)}}}const RePathPart=/(\w+)(\])?(\[|\.)?/g;function addUniform(r,t){r.seq.push(t),r.map[t.id]=t}function parseUniform(r,t,e){const A=r.name,a=A.length;for(RePathPart.lastIndex=0;;){const s=RePathPart.exec(A),n=RePathPart.lastIndex;let l=s[1];const d=s[2]==="]",f=s[3];if(d&&(l=l|0),f===void 0||f==="["&&n+2===a){addUniform(e,f===void 0?new SingleUniform(l,r,t):new PureArrayUniform(l,r,t));break}else{let I=e.map[l];I===void 0&&(I=new StructuredUniform(l),addUniform(e,I)),e=I}}}class WebGLUniforms{constructor(t,e){this.seq=[],this.map={};const A=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let a=0;a<A;++a){const s=t.getActiveUniform(e,a),n=t.getUniformLocation(e,s.name);parseUniform(s,n,this)}}setValue(t,e,A,a){const s=this.map[e];s!==void 0&&s.setValue(t,A,a)}setOptional(t,e,A){const a=e[A];a!==void 0&&this.setValue(t,A,a)}static upload(t,e,A,a){for(let s=0,n=e.length;s!==n;++s){const l=e[s],d=A[l.id];d.needsUpdate!==!1&&l.setValue(t,d.value,a)}}static seqWithValue(t,e){const A=[];for(let a=0,s=t.length;a!==s;++a){const n=t[a];n.id in e&&A.push(n)}return A}}function WebGLShader(r,t,e){const A=r.createShader(t);return r.shaderSource(A,e),r.compileShader(A),A}const COMPLETION_STATUS_KHR=37297;let programIdCount=0;function handleSource(r,t){const e=r.split(`
`),A=[],a=Math.max(t-6,0),s=Math.min(t+6,e.length);for(let n=a;n<s;n++){const l=n+1;A.push(`${l===t?">":" "} ${l}: ${e[n]}`)}return A.join(`
`)}const _m0=new Matrix3;function getEncodingComponents(r){ColorManagement._getMatrix(_m0,ColorManagement.workingColorSpace,r);const t=`mat3( ${_m0.elements.map(e=>e.toFixed(4))} )`;switch(ColorManagement.getTransfer(r)){case LinearTransfer:return[t,"LinearTransferOETF"];case SRGBTransfer:return[t,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",r),[t,"LinearTransferOETF"]}}function getShaderErrors(r,t,e){const A=r.getShaderParameter(t,r.COMPILE_STATUS),a=r.getShaderInfoLog(t).trim();if(A&&a==="")return"";const s=/ERROR: 0:(\d+)/.exec(a);if(s){const n=parseInt(s[1]);return e.toUpperCase()+`

`+a+`

`+handleSource(r.getShaderSource(t),n)}else return a}function getTexelEncodingFunction(r,t){const e=getEncodingComponents(t);return[`vec4 ${r}( vec4 value ) {`,`	return ${e[1]}( vec4( value.rgb * ${e[0]}, value.a ) );`,"}"].join(`
`)}function getToneMappingFunction(r,t){let e;switch(t){case LinearToneMapping:e="Linear";break;case ReinhardToneMapping:e="Reinhard";break;case CineonToneMapping:e="Cineon";break;case ACESFilmicToneMapping:e="ACESFilmic";break;case AgXToneMapping:e="AgX";break;case NeutralToneMapping:e="Neutral";break;case CustomToneMapping:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+r+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}const _v0=new Vector3;function getLuminanceFunction(){ColorManagement.getLuminanceCoefficients(_v0);const r=_v0.x.toFixed(4),t=_v0.y.toFixed(4),e=_v0.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${r}, ${t}, ${e} );`,"	return dot( weights, rgb );","}"].join(`
`)}function generateVertexExtensions(r){return[r.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",r.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(filterEmptyLine).join(`
`)}function generateDefines(r){const t=[];for(const e in r){const A=r[e];A!==!1&&t.push("#define "+e+" "+A)}return t.join(`
`)}function fetchAttributeLocations(r,t){const e={},A=r.getProgramParameter(t,r.ACTIVE_ATTRIBUTES);for(let a=0;a<A;a++){const s=r.getActiveAttrib(t,a),n=s.name;let l=1;s.type===r.FLOAT_MAT2&&(l=2),s.type===r.FLOAT_MAT3&&(l=3),s.type===r.FLOAT_MAT4&&(l=4),e[n]={type:s.type,location:r.getAttribLocation(t,n),locationSize:l}}return e}function filterEmptyLine(r){return r!==""}function replaceLightNums(r,t){const e=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return r.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,e).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function replaceClippingPlaneNums(r,t){return r.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const includePattern=/^[ \t]*#include +<([\w\d./]+)>/gm;function resolveIncludes(r){return r.replace(includePattern,includeReplacer)}const shaderChunkMap=new Map;function includeReplacer(r,t){let e=ShaderChunk[t];if(e===void 0){const A=shaderChunkMap.get(t);if(A!==void 0)e=ShaderChunk[A],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,A);else throw new Error("Can not resolve #include <"+t+">")}return resolveIncludes(e)}const unrollLoopPattern=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function unrollLoops(r){return r.replace(unrollLoopPattern,loopReplacer)}function loopReplacer(r,t,e,A){let a="";for(let s=parseInt(t);s<parseInt(e);s++)a+=A.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return a}function generatePrecision(r){let t=`precision ${r.precision} float;
	precision ${r.precision} int;
	precision ${r.precision} sampler2D;
	precision ${r.precision} samplerCube;
	precision ${r.precision} sampler3D;
	precision ${r.precision} sampler2DArray;
	precision ${r.precision} sampler2DShadow;
	precision ${r.precision} samplerCubeShadow;
	precision ${r.precision} sampler2DArrayShadow;
	precision ${r.precision} isampler2D;
	precision ${r.precision} isampler3D;
	precision ${r.precision} isamplerCube;
	precision ${r.precision} isampler2DArray;
	precision ${r.precision} usampler2D;
	precision ${r.precision} usampler3D;
	precision ${r.precision} usamplerCube;
	precision ${r.precision} usampler2DArray;
	`;return r.precision==="highp"?t+=`
#define HIGH_PRECISION`:r.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:r.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function generateShadowMapTypeDefine(r){let t="SHADOWMAP_TYPE_BASIC";return r.shadowMapType===PCFShadowMap?t="SHADOWMAP_TYPE_PCF":r.shadowMapType===PCFSoftShadowMap?t="SHADOWMAP_TYPE_PCF_SOFT":r.shadowMapType===VSMShadowMap&&(t="SHADOWMAP_TYPE_VSM"),t}function generateEnvMapTypeDefine(r){let t="ENVMAP_TYPE_CUBE";if(r.envMap)switch(r.envMapMode){case CubeReflectionMapping:case CubeRefractionMapping:t="ENVMAP_TYPE_CUBE";break;case CubeUVReflectionMapping:t="ENVMAP_TYPE_CUBE_UV";break}return t}function generateEnvMapModeDefine(r){let t="ENVMAP_MODE_REFLECTION";if(r.envMap)switch(r.envMapMode){case CubeRefractionMapping:t="ENVMAP_MODE_REFRACTION";break}return t}function generateEnvMapBlendingDefine(r){let t="ENVMAP_BLENDING_NONE";if(r.envMap)switch(r.combine){case MultiplyOperation:t="ENVMAP_BLENDING_MULTIPLY";break;case MixOperation:t="ENVMAP_BLENDING_MIX";break;case AddOperation:t="ENVMAP_BLENDING_ADD";break}return t}function generateCubeUVSize(r){const t=r.envMapCubeUVHeight;if(t===null)return null;const e=Math.log2(t)-2,A=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,e),7*16)),texelHeight:A,maxMip:e}}function WebGLProgram(r,t,e,A){const a=r.getContext(),s=e.defines;let n=e.vertexShader,l=e.fragmentShader;const d=generateShadowMapTypeDefine(e),f=generateEnvMapTypeDefine(e),E=generateEnvMapModeDefine(e),I=generateEnvMapBlendingDefine(e),B=generateCubeUVSize(e),y=generateVertexExtensions(e),v=generateDefines(s),S=a.createProgram();let _,Q,D=e.glslVersion?"#version "+e.glslVersion+`
`:"";e.isRawShaderMaterial?(_=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,v].filter(filterEmptyLine).join(`
`),_.length>0&&(_+=`
`),Q=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,v].filter(filterEmptyLine).join(`
`),Q.length>0&&(Q+=`
`)):(_=[generatePrecision(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,v,e.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",e.batching?"#define USE_BATCHING":"",e.batchingColor?"#define USE_BATCHING_COLOR":"",e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.instancingMorph?"#define USE_INSTANCING_MORPH":"",e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+E:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.displacementMap?"#define USE_DISPLACEMENTMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.mapUv?"#define MAP_UV "+e.mapUv:"",e.alphaMapUv?"#define ALPHAMAP_UV "+e.alphaMapUv:"",e.lightMapUv?"#define LIGHTMAP_UV "+e.lightMapUv:"",e.aoMapUv?"#define AOMAP_UV "+e.aoMapUv:"",e.emissiveMapUv?"#define EMISSIVEMAP_UV "+e.emissiveMapUv:"",e.bumpMapUv?"#define BUMPMAP_UV "+e.bumpMapUv:"",e.normalMapUv?"#define NORMALMAP_UV "+e.normalMapUv:"",e.displacementMapUv?"#define DISPLACEMENTMAP_UV "+e.displacementMapUv:"",e.metalnessMapUv?"#define METALNESSMAP_UV "+e.metalnessMapUv:"",e.roughnessMapUv?"#define ROUGHNESSMAP_UV "+e.roughnessMapUv:"",e.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+e.anisotropyMapUv:"",e.clearcoatMapUv?"#define CLEARCOATMAP_UV "+e.clearcoatMapUv:"",e.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+e.clearcoatNormalMapUv:"",e.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+e.clearcoatRoughnessMapUv:"",e.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+e.iridescenceMapUv:"",e.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+e.iridescenceThicknessMapUv:"",e.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+e.sheenColorMapUv:"",e.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+e.sheenRoughnessMapUv:"",e.specularMapUv?"#define SPECULARMAP_UV "+e.specularMapUv:"",e.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+e.specularColorMapUv:"",e.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+e.specularIntensityMapUv:"",e.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+e.transmissionMapUv:"",e.thicknessMapUv?"#define THICKNESSMAP_UV "+e.thicknessMapUv:"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&e.flatShading===!1?"#define USE_MORPHNORMALS":"",e.morphColors?"#define USE_MORPHCOLORS":"",e.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+e.morphTextureStride:"",e.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+e.morphTargetsCount:"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+d:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(filterEmptyLine).join(`
`),Q=[generatePrecision(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,v,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+f:"",e.envMap?"#define "+E:"",e.envMap?"#define "+I:"",B?"#define CUBEUV_TEXEL_WIDTH "+B.texelWidth:"",B?"#define CUBEUV_TEXEL_HEIGHT "+B.texelHeight:"",B?"#define CUBEUV_MAX_MIP "+B.maxMip+".0":"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoat?"#define USE_CLEARCOAT":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.dispersion?"#define USE_DISPERSION":"",e.iridescence?"#define USE_IRIDESCENCE":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaTest?"#define USE_ALPHATEST":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.sheen?"#define USE_SHEEN":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor||e.batchingColor?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+d:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",e.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",e.toneMapping!==NoToneMapping?"#define TONE_MAPPING":"",e.toneMapping!==NoToneMapping?ShaderChunk.tonemapping_pars_fragment:"",e.toneMapping!==NoToneMapping?getToneMappingFunction("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",e.opaque?"#define OPAQUE":"",ShaderChunk.colorspace_pars_fragment,getTexelEncodingFunction("linearToOutputTexel",e.outputColorSpace),getLuminanceFunction(),e.useDepthPacking?"#define DEPTH_PACKING "+e.depthPacking:"",`
`].filter(filterEmptyLine).join(`
`)),n=resolveIncludes(n),n=replaceLightNums(n,e),n=replaceClippingPlaneNums(n,e),l=resolveIncludes(l),l=replaceLightNums(l,e),l=replaceClippingPlaneNums(l,e),n=unrollLoops(n),l=unrollLoops(l),e.isRawShaderMaterial!==!0&&(D=`#version 300 es
`,_=[y,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+_,Q=["#define varying in",e.glslVersion===GLSL3?"":"layout(location = 0) out highp vec4 pc_fragColor;",e.glslVersion===GLSL3?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+Q);const b=D+_+n,T=D+Q+l,P=WebGLShader(a,a.VERTEX_SHADER,b),R=WebGLShader(a,a.FRAGMENT_SHADER,T);a.attachShader(S,P),a.attachShader(S,R),e.index0AttributeName!==void 0?a.bindAttribLocation(S,0,e.index0AttributeName):e.morphTargets===!0&&a.bindAttribLocation(S,0,"position"),a.linkProgram(S);function F(Y){if(r.debug.checkShaderErrors){const rt=a.getProgramInfoLog(S).trim(),tt=a.getShaderInfoLog(P).trim(),at=a.getShaderInfoLog(R).trim();let pt=!0,ct=!0;if(a.getProgramParameter(S,a.LINK_STATUS)===!1)if(pt=!1,typeof r.debug.onShaderError=="function")r.debug.onShaderError(a,S,P,R);else{const $=getShaderErrors(a,P,"vertex"),q=getShaderErrors(a,R,"fragment");console.error("THREE.WebGLProgram: Shader Error "+a.getError()+" - VALIDATE_STATUS "+a.getProgramParameter(S,a.VALIDATE_STATUS)+`

Material Name: `+Y.name+`
Material Type: `+Y.type+`

Program Info Log: `+rt+`
`+$+`
`+q)}else rt!==""?console.warn("THREE.WebGLProgram: Program Info Log:",rt):(tt===""||at==="")&&(ct=!1);ct&&(Y.diagnostics={runnable:pt,programLog:rt,vertexShader:{log:tt,prefix:_},fragmentShader:{log:at,prefix:Q}})}a.deleteShader(P),a.deleteShader(R),O=new WebGLUniforms(a,S),N=fetchAttributeLocations(a,S)}let O;this.getUniforms=function(){return O===void 0&&F(this),O};let N;this.getAttributes=function(){return N===void 0&&F(this),N};let L=e.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return L===!1&&(L=a.getProgramParameter(S,COMPLETION_STATUS_KHR)),L},this.destroy=function(){A.releaseStatesOfProgram(this),a.deleteProgram(S),this.program=void 0},this.type=e.shaderType,this.name=e.shaderName,this.id=programIdCount++,this.cacheKey=t,this.usedTimes=1,this.program=S,this.vertexShader=P,this.fragmentShader=R,this}let _id=0;class WebGLShaderCache{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,A=t.fragmentShader,a=this._getShaderStage(e),s=this._getShaderStage(A),n=this._getShaderCacheForMaterial(t);return n.has(a)===!1&&(n.add(a),a.usedTimes++),n.has(s)===!1&&(n.add(s),s.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const A of e)A.usedTimes--,A.usedTimes===0&&this.shaderCache.delete(A.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let A=e.get(t);return A===void 0&&(A=new Set,e.set(t,A)),A}_getShaderStage(t){const e=this.shaderCache;let A=e.get(t);return A===void 0&&(A=new WebGLShaderStage(t),e.set(t,A)),A}}class WebGLShaderStage{constructor(t){this.id=_id++,this.code=t,this.usedTimes=0}}function WebGLPrograms(r,t,e,A,a,s,n){const l=new Layers,d=new WebGLShaderCache,f=new Set,E=[],I=a.logarithmicDepthBuffer,B=a.vertexTextures;let y=a.precision;const v={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function S(N){return f.add(N),N===0?"uv":`uv${N}`}function _(N,L,Y,rt,tt){const at=rt.fog,pt=tt.geometry,ct=N.isMeshStandardMaterial?rt.environment:null,$=(N.isMeshStandardMaterial?e:t).get(N.envMap||ct),q=$&&$.mapping===CubeUVReflectionMapping?$.image.height:null,Ct=v[N.type];N.precision!==null&&(y=a.getMaxPrecision(N.precision),y!==N.precision&&console.warn("THREE.WebGLProgram.getParameters:",N.precision,"not supported, using",y,"instead."));const wt=pt.morphAttributes.position||pt.morphAttributes.normal||pt.morphAttributes.color,Bt=wt!==void 0?wt.length:0;let ut=0;pt.morphAttributes.position!==void 0&&(ut=1),pt.morphAttributes.normal!==void 0&&(ut=2),pt.morphAttributes.color!==void 0&&(ut=3);let K,J,At,xt;if(Ct){const Ie=ShaderLib[Ct];K=Ie.vertexShader,J=Ie.fragmentShader}else K=N.vertexShader,J=N.fragmentShader,d.update(N),At=d.getVertexShaderID(N),xt=d.getFragmentShaderID(N);const mt=r.getRenderTarget(),Tt=r.state.buffers.depth.getReversed(),Vt=tt.isInstancedMesh===!0,Nt=tt.isBatchedMesh===!0,$t=!!N.map,ne=!!N.matcap,Ae=!!$,Z=!!N.aoMap,ue=!!N.lightMap,qt=!!N.bumpMap,Xt=!!N.normalMap,Ht=!!N.displacementMap,oe=!!N.emissiveMap,Kt=!!N.metalnessMap,Ee=!!N.roughnessMap,be=N.anisotropy>0,W=N.clearcoat>0,U=N.dispersion>0,It=N.iridescence>0,St=N.sheen>0,Mt=N.transmission>0,Dt=be&&!!N.anisotropyMap,te=W&&!!N.clearcoatMap,Gt=W&&!!N.clearcoatNormalMap,ee=W&&!!N.clearcoatRoughnessMap,yt=It&&!!N.iridescenceMap,dt=It&&!!N.iridescenceThicknessMap,bt=St&&!!N.sheenColorMap,Ft=St&&!!N.sheenRoughnessMap,Jt=!!N.specularMap,Ut=!!N.specularColorMap,de=!!N.specularIntensityMap,G=Mt&&!!N.transmissionMap,it=Mt&&!!N.thicknessMap,j=!!N.gradientMap,lt=!!N.alphaMap,gt=N.alphaTest>0,ft=!!N.alphaHash,Lt=!!N.extensions;let ie=NoToneMapping;N.toneMapped&&(mt===null||mt.isXRRenderTarget===!0)&&(ie=r.toneMapping);const Qe={shaderID:Ct,shaderType:N.type,shaderName:N.name,vertexShader:K,fragmentShader:J,defines:N.defines,customVertexShaderID:At,customFragmentShaderID:xt,isRawShaderMaterial:N.isRawShaderMaterial===!0,glslVersion:N.glslVersion,precision:y,batching:Nt,batchingColor:Nt&&tt._colorsTexture!==null,instancing:Vt,instancingColor:Vt&&tt.instanceColor!==null,instancingMorph:Vt&&tt.morphTexture!==null,supportsVertexTextures:B,outputColorSpace:mt===null?r.outputColorSpace:mt.isXRRenderTarget===!0?mt.texture.colorSpace:LinearSRGBColorSpace,alphaToCoverage:!!N.alphaToCoverage,map:$t,matcap:ne,envMap:Ae,envMapMode:Ae&&$.mapping,envMapCubeUVHeight:q,aoMap:Z,lightMap:ue,bumpMap:qt,normalMap:Xt,displacementMap:B&&Ht,emissiveMap:oe,normalMapObjectSpace:Xt&&N.normalMapType===ObjectSpaceNormalMap,normalMapTangentSpace:Xt&&N.normalMapType===TangentSpaceNormalMap,metalnessMap:Kt,roughnessMap:Ee,anisotropy:be,anisotropyMap:Dt,clearcoat:W,clearcoatMap:te,clearcoatNormalMap:Gt,clearcoatRoughnessMap:ee,dispersion:U,iridescence:It,iridescenceMap:yt,iridescenceThicknessMap:dt,sheen:St,sheenColorMap:bt,sheenRoughnessMap:Ft,specularMap:Jt,specularColorMap:Ut,specularIntensityMap:de,transmission:Mt,transmissionMap:G,thicknessMap:it,gradientMap:j,opaque:N.transparent===!1&&N.blending===NormalBlending&&N.alphaToCoverage===!1,alphaMap:lt,alphaTest:gt,alphaHash:ft,combine:N.combine,mapUv:$t&&S(N.map.channel),aoMapUv:Z&&S(N.aoMap.channel),lightMapUv:ue&&S(N.lightMap.channel),bumpMapUv:qt&&S(N.bumpMap.channel),normalMapUv:Xt&&S(N.normalMap.channel),displacementMapUv:Ht&&S(N.displacementMap.channel),emissiveMapUv:oe&&S(N.emissiveMap.channel),metalnessMapUv:Kt&&S(N.metalnessMap.channel),roughnessMapUv:Ee&&S(N.roughnessMap.channel),anisotropyMapUv:Dt&&S(N.anisotropyMap.channel),clearcoatMapUv:te&&S(N.clearcoatMap.channel),clearcoatNormalMapUv:Gt&&S(N.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:ee&&S(N.clearcoatRoughnessMap.channel),iridescenceMapUv:yt&&S(N.iridescenceMap.channel),iridescenceThicknessMapUv:dt&&S(N.iridescenceThicknessMap.channel),sheenColorMapUv:bt&&S(N.sheenColorMap.channel),sheenRoughnessMapUv:Ft&&S(N.sheenRoughnessMap.channel),specularMapUv:Jt&&S(N.specularMap.channel),specularColorMapUv:Ut&&S(N.specularColorMap.channel),specularIntensityMapUv:de&&S(N.specularIntensityMap.channel),transmissionMapUv:G&&S(N.transmissionMap.channel),thicknessMapUv:it&&S(N.thicknessMap.channel),alphaMapUv:lt&&S(N.alphaMap.channel),vertexTangents:!!pt.attributes.tangent&&(Xt||be),vertexColors:N.vertexColors,vertexAlphas:N.vertexColors===!0&&!!pt.attributes.color&&pt.attributes.color.itemSize===4,pointsUvs:tt.isPoints===!0&&!!pt.attributes.uv&&($t||lt),fog:!!at,useFog:N.fog===!0,fogExp2:!!at&&at.isFogExp2,flatShading:N.flatShading===!0,sizeAttenuation:N.sizeAttenuation===!0,logarithmicDepthBuffer:I,reverseDepthBuffer:Tt,skinning:tt.isSkinnedMesh===!0,morphTargets:pt.morphAttributes.position!==void 0,morphNormals:pt.morphAttributes.normal!==void 0,morphColors:pt.morphAttributes.color!==void 0,morphTargetsCount:Bt,morphTextureStride:ut,numDirLights:L.directional.length,numPointLights:L.point.length,numSpotLights:L.spot.length,numSpotLightMaps:L.spotLightMap.length,numRectAreaLights:L.rectArea.length,numHemiLights:L.hemi.length,numDirLightShadows:L.directionalShadowMap.length,numPointLightShadows:L.pointShadowMap.length,numSpotLightShadows:L.spotShadowMap.length,numSpotLightShadowsWithMaps:L.numSpotLightShadowsWithMaps,numLightProbes:L.numLightProbes,numClippingPlanes:n.numPlanes,numClipIntersection:n.numIntersection,dithering:N.dithering,shadowMapEnabled:r.shadowMap.enabled&&Y.length>0,shadowMapType:r.shadowMap.type,toneMapping:ie,decodeVideoTexture:$t&&N.map.isVideoTexture===!0&&ColorManagement.getTransfer(N.map.colorSpace)===SRGBTransfer,decodeVideoTextureEmissive:oe&&N.emissiveMap.isVideoTexture===!0&&ColorManagement.getTransfer(N.emissiveMap.colorSpace)===SRGBTransfer,premultipliedAlpha:N.premultipliedAlpha,doubleSided:N.side===DoubleSide,flipSided:N.side===BackSide,useDepthPacking:N.depthPacking>=0,depthPacking:N.depthPacking||0,index0AttributeName:N.index0AttributeName,extensionClipCullDistance:Lt&&N.extensions.clipCullDistance===!0&&A.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(Lt&&N.extensions.multiDraw===!0||Nt)&&A.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:A.has("KHR_parallel_shader_compile"),customProgramCacheKey:N.customProgramCacheKey()};return Qe.vertexUv1s=f.has(1),Qe.vertexUv2s=f.has(2),Qe.vertexUv3s=f.has(3),f.clear(),Qe}function Q(N){const L=[];if(N.shaderID?L.push(N.shaderID):(L.push(N.customVertexShaderID),L.push(N.customFragmentShaderID)),N.defines!==void 0)for(const Y in N.defines)L.push(Y),L.push(N.defines[Y]);return N.isRawShaderMaterial===!1&&(D(L,N),b(L,N),L.push(r.outputColorSpace)),L.push(N.customProgramCacheKey),L.join()}function D(N,L){N.push(L.precision),N.push(L.outputColorSpace),N.push(L.envMapMode),N.push(L.envMapCubeUVHeight),N.push(L.mapUv),N.push(L.alphaMapUv),N.push(L.lightMapUv),N.push(L.aoMapUv),N.push(L.bumpMapUv),N.push(L.normalMapUv),N.push(L.displacementMapUv),N.push(L.emissiveMapUv),N.push(L.metalnessMapUv),N.push(L.roughnessMapUv),N.push(L.anisotropyMapUv),N.push(L.clearcoatMapUv),N.push(L.clearcoatNormalMapUv),N.push(L.clearcoatRoughnessMapUv),N.push(L.iridescenceMapUv),N.push(L.iridescenceThicknessMapUv),N.push(L.sheenColorMapUv),N.push(L.sheenRoughnessMapUv),N.push(L.specularMapUv),N.push(L.specularColorMapUv),N.push(L.specularIntensityMapUv),N.push(L.transmissionMapUv),N.push(L.thicknessMapUv),N.push(L.combine),N.push(L.fogExp2),N.push(L.sizeAttenuation),N.push(L.morphTargetsCount),N.push(L.morphAttributeCount),N.push(L.numDirLights),N.push(L.numPointLights),N.push(L.numSpotLights),N.push(L.numSpotLightMaps),N.push(L.numHemiLights),N.push(L.numRectAreaLights),N.push(L.numDirLightShadows),N.push(L.numPointLightShadows),N.push(L.numSpotLightShadows),N.push(L.numSpotLightShadowsWithMaps),N.push(L.numLightProbes),N.push(L.shadowMapType),N.push(L.toneMapping),N.push(L.numClippingPlanes),N.push(L.numClipIntersection),N.push(L.depthPacking)}function b(N,L){l.disableAll(),L.supportsVertexTextures&&l.enable(0),L.instancing&&l.enable(1),L.instancingColor&&l.enable(2),L.instancingMorph&&l.enable(3),L.matcap&&l.enable(4),L.envMap&&l.enable(5),L.normalMapObjectSpace&&l.enable(6),L.normalMapTangentSpace&&l.enable(7),L.clearcoat&&l.enable(8),L.iridescence&&l.enable(9),L.alphaTest&&l.enable(10),L.vertexColors&&l.enable(11),L.vertexAlphas&&l.enable(12),L.vertexUv1s&&l.enable(13),L.vertexUv2s&&l.enable(14),L.vertexUv3s&&l.enable(15),L.vertexTangents&&l.enable(16),L.anisotropy&&l.enable(17),L.alphaHash&&l.enable(18),L.batching&&l.enable(19),L.dispersion&&l.enable(20),L.batchingColor&&l.enable(21),N.push(l.mask),l.disableAll(),L.fog&&l.enable(0),L.useFog&&l.enable(1),L.flatShading&&l.enable(2),L.logarithmicDepthBuffer&&l.enable(3),L.reverseDepthBuffer&&l.enable(4),L.skinning&&l.enable(5),L.morphTargets&&l.enable(6),L.morphNormals&&l.enable(7),L.morphColors&&l.enable(8),L.premultipliedAlpha&&l.enable(9),L.shadowMapEnabled&&l.enable(10),L.doubleSided&&l.enable(11),L.flipSided&&l.enable(12),L.useDepthPacking&&l.enable(13),L.dithering&&l.enable(14),L.transmission&&l.enable(15),L.sheen&&l.enable(16),L.opaque&&l.enable(17),L.pointsUvs&&l.enable(18),L.decodeVideoTexture&&l.enable(19),L.decodeVideoTextureEmissive&&l.enable(20),L.alphaToCoverage&&l.enable(21),N.push(l.mask)}function T(N){const L=v[N.type];let Y;if(L){const rt=ShaderLib[L];Y=UniformsUtils.clone(rt.uniforms)}else Y=N.uniforms;return Y}function P(N,L){let Y;for(let rt=0,tt=E.length;rt<tt;rt++){const at=E[rt];if(at.cacheKey===L){Y=at,++Y.usedTimes;break}}return Y===void 0&&(Y=new WebGLProgram(r,L,N,s),E.push(Y)),Y}function R(N){if(--N.usedTimes===0){const L=E.indexOf(N);E[L]=E[E.length-1],E.pop(),N.destroy()}}function F(N){d.remove(N)}function O(){d.dispose()}return{getParameters:_,getProgramCacheKey:Q,getUniforms:T,acquireProgram:P,releaseProgram:R,releaseShaderCache:F,programs:E,dispose:O}}function WebGLProperties(){let r=new WeakMap;function t(n){return r.has(n)}function e(n){let l=r.get(n);return l===void 0&&(l={},r.set(n,l)),l}function A(n){r.delete(n)}function a(n,l,d){r.get(n)[l]=d}function s(){r=new WeakMap}return{has:t,get:e,remove:A,update:a,dispose:s}}function painterSortStable(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.material.id!==t.material.id?r.material.id-t.material.id:r.z!==t.z?r.z-t.z:r.id-t.id}function reversePainterSortStable(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.z!==t.z?t.z-r.z:r.id-t.id}function WebGLRenderList(){const r=[];let t=0;const e=[],A=[],a=[];function s(){t=0,e.length=0,A.length=0,a.length=0}function n(I,B,y,v,S,_){let Q=r[t];return Q===void 0?(Q={id:I.id,object:I,geometry:B,material:y,groupOrder:v,renderOrder:I.renderOrder,z:S,group:_},r[t]=Q):(Q.id=I.id,Q.object=I,Q.geometry=B,Q.material=y,Q.groupOrder=v,Q.renderOrder=I.renderOrder,Q.z=S,Q.group=_),t++,Q}function l(I,B,y,v,S,_){const Q=n(I,B,y,v,S,_);y.transmission>0?A.push(Q):y.transparent===!0?a.push(Q):e.push(Q)}function d(I,B,y,v,S,_){const Q=n(I,B,y,v,S,_);y.transmission>0?A.unshift(Q):y.transparent===!0?a.unshift(Q):e.unshift(Q)}function f(I,B){e.length>1&&e.sort(I||painterSortStable),A.length>1&&A.sort(B||reversePainterSortStable),a.length>1&&a.sort(B||reversePainterSortStable)}function E(){for(let I=t,B=r.length;I<B;I++){const y=r[I];if(y.id===null)break;y.id=null,y.object=null,y.geometry=null,y.material=null,y.group=null}}return{opaque:e,transmissive:A,transparent:a,init:s,push:l,unshift:d,finish:E,sort:f}}function WebGLRenderLists(){let r=new WeakMap;function t(A,a){const s=r.get(A);let n;return s===void 0?(n=new WebGLRenderList,r.set(A,[n])):a>=s.length?(n=new WebGLRenderList,s.push(n)):n=s[a],n}function e(){r=new WeakMap}return{get:t,dispose:e}}function UniformsCache(){const r={};return{get:function(t){if(r[t.id]!==void 0)return r[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new Vector3,color:new Color};break;case"SpotLight":e={position:new Vector3,direction:new Vector3,color:new Color,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new Vector3,color:new Color,distance:0,decay:0};break;case"HemisphereLight":e={direction:new Vector3,skyColor:new Color,groundColor:new Color};break;case"RectAreaLight":e={color:new Color,position:new Vector3,halfWidth:new Vector3,halfHeight:new Vector3};break}return r[t.id]=e,e}}}function ShadowUniformsCache(){const r={};return{get:function(t){if(r[t.id]!==void 0)return r[t.id];let e;switch(t.type){case"DirectionalLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"SpotLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"PointLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2,shadowCameraNear:1,shadowCameraFar:1e3};break}return r[t.id]=e,e}}}let nextVersion=0;function shadowCastingAndTexturingLightsFirst(r,t){return(t.castShadow?2:0)-(r.castShadow?2:0)+(t.map?1:0)-(r.map?1:0)}function WebGLLights(r){const t=new UniformsCache,e=ShadowUniformsCache(),A={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let f=0;f<9;f++)A.probe.push(new Vector3);const a=new Vector3,s=new Matrix4,n=new Matrix4;function l(f){let E=0,I=0,B=0;for(let N=0;N<9;N++)A.probe[N].set(0,0,0);let y=0,v=0,S=0,_=0,Q=0,D=0,b=0,T=0,P=0,R=0,F=0;f.sort(shadowCastingAndTexturingLightsFirst);for(let N=0,L=f.length;N<L;N++){const Y=f[N],rt=Y.color,tt=Y.intensity,at=Y.distance,pt=Y.shadow&&Y.shadow.map?Y.shadow.map.texture:null;if(Y.isAmbientLight)E+=rt.r*tt,I+=rt.g*tt,B+=rt.b*tt;else if(Y.isLightProbe){for(let ct=0;ct<9;ct++)A.probe[ct].addScaledVector(Y.sh.coefficients[ct],tt);F++}else if(Y.isDirectionalLight){const ct=t.get(Y);if(ct.color.copy(Y.color).multiplyScalar(Y.intensity),Y.castShadow){const $=Y.shadow,q=e.get(Y);q.shadowIntensity=$.intensity,q.shadowBias=$.bias,q.shadowNormalBias=$.normalBias,q.shadowRadius=$.radius,q.shadowMapSize=$.mapSize,A.directionalShadow[y]=q,A.directionalShadowMap[y]=pt,A.directionalShadowMatrix[y]=Y.shadow.matrix,D++}A.directional[y]=ct,y++}else if(Y.isSpotLight){const ct=t.get(Y);ct.position.setFromMatrixPosition(Y.matrixWorld),ct.color.copy(rt).multiplyScalar(tt),ct.distance=at,ct.coneCos=Math.cos(Y.angle),ct.penumbraCos=Math.cos(Y.angle*(1-Y.penumbra)),ct.decay=Y.decay,A.spot[S]=ct;const $=Y.shadow;if(Y.map&&(A.spotLightMap[P]=Y.map,P++,$.updateMatrices(Y),Y.castShadow&&R++),A.spotLightMatrix[S]=$.matrix,Y.castShadow){const q=e.get(Y);q.shadowIntensity=$.intensity,q.shadowBias=$.bias,q.shadowNormalBias=$.normalBias,q.shadowRadius=$.radius,q.shadowMapSize=$.mapSize,A.spotShadow[S]=q,A.spotShadowMap[S]=pt,T++}S++}else if(Y.isRectAreaLight){const ct=t.get(Y);ct.color.copy(rt).multiplyScalar(tt),ct.halfWidth.set(Y.width*.5,0,0),ct.halfHeight.set(0,Y.height*.5,0),A.rectArea[_]=ct,_++}else if(Y.isPointLight){const ct=t.get(Y);if(ct.color.copy(Y.color).multiplyScalar(Y.intensity),ct.distance=Y.distance,ct.decay=Y.decay,Y.castShadow){const $=Y.shadow,q=e.get(Y);q.shadowIntensity=$.intensity,q.shadowBias=$.bias,q.shadowNormalBias=$.normalBias,q.shadowRadius=$.radius,q.shadowMapSize=$.mapSize,q.shadowCameraNear=$.camera.near,q.shadowCameraFar=$.camera.far,A.pointShadow[v]=q,A.pointShadowMap[v]=pt,A.pointShadowMatrix[v]=Y.shadow.matrix,b++}A.point[v]=ct,v++}else if(Y.isHemisphereLight){const ct=t.get(Y);ct.skyColor.copy(Y.color).multiplyScalar(tt),ct.groundColor.copy(Y.groundColor).multiplyScalar(tt),A.hemi[Q]=ct,Q++}}_>0&&(r.has("OES_texture_float_linear")===!0?(A.rectAreaLTC1=UniformsLib.LTC_FLOAT_1,A.rectAreaLTC2=UniformsLib.LTC_FLOAT_2):(A.rectAreaLTC1=UniformsLib.LTC_HALF_1,A.rectAreaLTC2=UniformsLib.LTC_HALF_2)),A.ambient[0]=E,A.ambient[1]=I,A.ambient[2]=B;const O=A.hash;(O.directionalLength!==y||O.pointLength!==v||O.spotLength!==S||O.rectAreaLength!==_||O.hemiLength!==Q||O.numDirectionalShadows!==D||O.numPointShadows!==b||O.numSpotShadows!==T||O.numSpotMaps!==P||O.numLightProbes!==F)&&(A.directional.length=y,A.spot.length=S,A.rectArea.length=_,A.point.length=v,A.hemi.length=Q,A.directionalShadow.length=D,A.directionalShadowMap.length=D,A.pointShadow.length=b,A.pointShadowMap.length=b,A.spotShadow.length=T,A.spotShadowMap.length=T,A.directionalShadowMatrix.length=D,A.pointShadowMatrix.length=b,A.spotLightMatrix.length=T+P-R,A.spotLightMap.length=P,A.numSpotLightShadowsWithMaps=R,A.numLightProbes=F,O.directionalLength=y,O.pointLength=v,O.spotLength=S,O.rectAreaLength=_,O.hemiLength=Q,O.numDirectionalShadows=D,O.numPointShadows=b,O.numSpotShadows=T,O.numSpotMaps=P,O.numLightProbes=F,A.version=nextVersion++)}function d(f,E){let I=0,B=0,y=0,v=0,S=0;const _=E.matrixWorldInverse;for(let Q=0,D=f.length;Q<D;Q++){const b=f[Q];if(b.isDirectionalLight){const T=A.directional[I];T.direction.setFromMatrixPosition(b.matrixWorld),a.setFromMatrixPosition(b.target.matrixWorld),T.direction.sub(a),T.direction.transformDirection(_),I++}else if(b.isSpotLight){const T=A.spot[y];T.position.setFromMatrixPosition(b.matrixWorld),T.position.applyMatrix4(_),T.direction.setFromMatrixPosition(b.matrixWorld),a.setFromMatrixPosition(b.target.matrixWorld),T.direction.sub(a),T.direction.transformDirection(_),y++}else if(b.isRectAreaLight){const T=A.rectArea[v];T.position.setFromMatrixPosition(b.matrixWorld),T.position.applyMatrix4(_),n.identity(),s.copy(b.matrixWorld),s.premultiply(_),n.extractRotation(s),T.halfWidth.set(b.width*.5,0,0),T.halfHeight.set(0,b.height*.5,0),T.halfWidth.applyMatrix4(n),T.halfHeight.applyMatrix4(n),v++}else if(b.isPointLight){const T=A.point[B];T.position.setFromMatrixPosition(b.matrixWorld),T.position.applyMatrix4(_),B++}else if(b.isHemisphereLight){const T=A.hemi[S];T.direction.setFromMatrixPosition(b.matrixWorld),T.direction.transformDirection(_),S++}}}return{setup:l,setupView:d,state:A}}function WebGLRenderState(r){const t=new WebGLLights(r),e=[],A=[];function a(E){f.camera=E,e.length=0,A.length=0}function s(E){e.push(E)}function n(E){A.push(E)}function l(){t.setup(e)}function d(E){t.setupView(e,E)}const f={lightsArray:e,shadowsArray:A,camera:null,lights:t,transmissionRenderTarget:{}};return{init:a,state:f,setupLights:l,setupLightsView:d,pushLight:s,pushShadow:n}}function WebGLRenderStates(r){let t=new WeakMap;function e(a,s=0){const n=t.get(a);let l;return n===void 0?(l=new WebGLRenderState(r),t.set(a,[l])):s>=n.length?(l=new WebGLRenderState(r),n.push(l)):l=n[s],l}function A(){t=new WeakMap}return{get:e,dispose:A}}const vertex=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,fragment=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function WebGLShadowMap(r,t,e){let A=new Frustum;const a=new Vector2,s=new Vector2,n=new Vector4,l=new MeshDepthMaterial({depthPacking:RGBADepthPacking}),d=new MeshDistanceMaterial,f={},E=e.maxTextureSize,I={[FrontSide]:BackSide,[BackSide]:FrontSide,[DoubleSide]:DoubleSide},B=new ShaderMaterial({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Vector2},radius:{value:4}},vertexShader:vertex,fragmentShader:fragment}),y=B.clone();y.defines.HORIZONTAL_PASS=1;const v=new BufferGeometry;v.setAttribute("position",new BufferAttribute(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const S=new Mesh(v,B),_=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=PCFShadowMap;let Q=this.type;this.render=function(R,F,O){if(_.enabled===!1||_.autoUpdate===!1&&_.needsUpdate===!1||R.length===0)return;const N=r.getRenderTarget(),L=r.getActiveCubeFace(),Y=r.getActiveMipmapLevel(),rt=r.state;rt.setBlending(NoBlending),rt.buffers.color.setClear(1,1,1,1),rt.buffers.depth.setTest(!0),rt.setScissorTest(!1);const tt=Q!==VSMShadowMap&&this.type===VSMShadowMap,at=Q===VSMShadowMap&&this.type!==VSMShadowMap;for(let pt=0,ct=R.length;pt<ct;pt++){const $=R[pt],q=$.shadow;if(q===void 0){console.warn("THREE.WebGLShadowMap:",$,"has no shadow.");continue}if(q.autoUpdate===!1&&q.needsUpdate===!1)continue;a.copy(q.mapSize);const Ct=q.getFrameExtents();if(a.multiply(Ct),s.copy(q.mapSize),(a.x>E||a.y>E)&&(a.x>E&&(s.x=Math.floor(E/Ct.x),a.x=s.x*Ct.x,q.mapSize.x=s.x),a.y>E&&(s.y=Math.floor(E/Ct.y),a.y=s.y*Ct.y,q.mapSize.y=s.y)),q.map===null||tt===!0||at===!0){const Bt=this.type!==VSMShadowMap?{minFilter:NearestFilter,magFilter:NearestFilter}:{};q.map!==null&&q.map.dispose(),q.map=new WebGLRenderTarget(a.x,a.y,Bt),q.map.texture.name=$.name+".shadowMap",q.camera.updateProjectionMatrix()}r.setRenderTarget(q.map),r.clear();const wt=q.getViewportCount();for(let Bt=0;Bt<wt;Bt++){const ut=q.getViewport(Bt);n.set(s.x*ut.x,s.y*ut.y,s.x*ut.z,s.y*ut.w),rt.viewport(n),q.updateMatrices($,Bt),A=q.getFrustum(),T(F,O,q.camera,$,this.type)}q.isPointLightShadow!==!0&&this.type===VSMShadowMap&&D(q,O),q.needsUpdate=!1}Q=this.type,_.needsUpdate=!1,r.setRenderTarget(N,L,Y)};function D(R,F){const O=t.update(S);B.defines.VSM_SAMPLES!==R.blurSamples&&(B.defines.VSM_SAMPLES=R.blurSamples,y.defines.VSM_SAMPLES=R.blurSamples,B.needsUpdate=!0,y.needsUpdate=!0),R.mapPass===null&&(R.mapPass=new WebGLRenderTarget(a.x,a.y)),B.uniforms.shadow_pass.value=R.map.texture,B.uniforms.resolution.value=R.mapSize,B.uniforms.radius.value=R.radius,r.setRenderTarget(R.mapPass),r.clear(),r.renderBufferDirect(F,null,O,B,S,null),y.uniforms.shadow_pass.value=R.mapPass.texture,y.uniforms.resolution.value=R.mapSize,y.uniforms.radius.value=R.radius,r.setRenderTarget(R.map),r.clear(),r.renderBufferDirect(F,null,O,y,S,null)}function b(R,F,O,N){let L=null;const Y=O.isPointLight===!0?R.customDistanceMaterial:R.customDepthMaterial;if(Y!==void 0)L=Y;else if(L=O.isPointLight===!0?d:l,r.localClippingEnabled&&F.clipShadows===!0&&Array.isArray(F.clippingPlanes)&&F.clippingPlanes.length!==0||F.displacementMap&&F.displacementScale!==0||F.alphaMap&&F.alphaTest>0||F.map&&F.alphaTest>0||F.alphaToCoverage===!0){const rt=L.uuid,tt=F.uuid;let at=f[rt];at===void 0&&(at={},f[rt]=at);let pt=at[tt];pt===void 0&&(pt=L.clone(),at[tt]=pt,F.addEventListener("dispose",P)),L=pt}if(L.visible=F.visible,L.wireframe=F.wireframe,N===VSMShadowMap?L.side=F.shadowSide!==null?F.shadowSide:F.side:L.side=F.shadowSide!==null?F.shadowSide:I[F.side],L.alphaMap=F.alphaMap,L.alphaTest=F.alphaToCoverage===!0?.5:F.alphaTest,L.map=F.map,L.clipShadows=F.clipShadows,L.clippingPlanes=F.clippingPlanes,L.clipIntersection=F.clipIntersection,L.displacementMap=F.displacementMap,L.displacementScale=F.displacementScale,L.displacementBias=F.displacementBias,L.wireframeLinewidth=F.wireframeLinewidth,L.linewidth=F.linewidth,O.isPointLight===!0&&L.isMeshDistanceMaterial===!0){const rt=r.properties.get(L);rt.light=O}return L}function T(R,F,O,N,L){if(R.visible===!1)return;if(R.layers.test(F.layers)&&(R.isMesh||R.isLine||R.isPoints)&&(R.castShadow||R.receiveShadow&&L===VSMShadowMap)&&(!R.frustumCulled||A.intersectsObject(R))){R.modelViewMatrix.multiplyMatrices(O.matrixWorldInverse,R.matrixWorld);const tt=t.update(R),at=R.material;if(Array.isArray(at)){const pt=tt.groups;for(let ct=0,$=pt.length;ct<$;ct++){const q=pt[ct],Ct=at[q.materialIndex];if(Ct&&Ct.visible){const wt=b(R,Ct,N,L);R.onBeforeShadow(r,R,F,O,tt,wt,q),r.renderBufferDirect(O,null,tt,wt,R,q),R.onAfterShadow(r,R,F,O,tt,wt,q)}}}else if(at.visible){const pt=b(R,at,N,L);R.onBeforeShadow(r,R,F,O,tt,pt,null),r.renderBufferDirect(O,null,tt,pt,R,null),R.onAfterShadow(r,R,F,O,tt,pt,null)}}const rt=R.children;for(let tt=0,at=rt.length;tt<at;tt++)T(rt[tt],F,O,N,L)}function P(R){R.target.removeEventListener("dispose",P);for(const O in f){const N=f[O],L=R.target.uuid;L in N&&(N[L].dispose(),delete N[L])}}}const reversedFuncs={[NeverDepth]:AlwaysDepth,[LessDepth]:GreaterDepth,[EqualDepth]:NotEqualDepth,[LessEqualDepth]:GreaterEqualDepth,[AlwaysDepth]:NeverDepth,[GreaterDepth]:LessDepth,[NotEqualDepth]:EqualDepth,[GreaterEqualDepth]:LessEqualDepth};function WebGLState(r,t){function e(){let G=!1;const it=new Vector4;let j=null;const lt=new Vector4(0,0,0,0);return{setMask:function(gt){j!==gt&&!G&&(r.colorMask(gt,gt,gt,gt),j=gt)},setLocked:function(gt){G=gt},setClear:function(gt,ft,Lt,ie,Qe){Qe===!0&&(gt*=ie,ft*=ie,Lt*=ie),it.set(gt,ft,Lt,ie),lt.equals(it)===!1&&(r.clearColor(gt,ft,Lt,ie),lt.copy(it))},reset:function(){G=!1,j=null,lt.set(-1,0,0,0)}}}function A(){let G=!1,it=!1,j=null,lt=null,gt=null;return{setReversed:function(ft){if(it!==ft){const Lt=t.get("EXT_clip_control");ft?Lt.clipControlEXT(Lt.LOWER_LEFT_EXT,Lt.ZERO_TO_ONE_EXT):Lt.clipControlEXT(Lt.LOWER_LEFT_EXT,Lt.NEGATIVE_ONE_TO_ONE_EXT),it=ft;const ie=gt;gt=null,this.setClear(ie)}},getReversed:function(){return it},setTest:function(ft){ft?mt(r.DEPTH_TEST):Tt(r.DEPTH_TEST)},setMask:function(ft){j!==ft&&!G&&(r.depthMask(ft),j=ft)},setFunc:function(ft){if(it&&(ft=reversedFuncs[ft]),lt!==ft){switch(ft){case NeverDepth:r.depthFunc(r.NEVER);break;case AlwaysDepth:r.depthFunc(r.ALWAYS);break;case LessDepth:r.depthFunc(r.LESS);break;case LessEqualDepth:r.depthFunc(r.LEQUAL);break;case EqualDepth:r.depthFunc(r.EQUAL);break;case GreaterEqualDepth:r.depthFunc(r.GEQUAL);break;case GreaterDepth:r.depthFunc(r.GREATER);break;case NotEqualDepth:r.depthFunc(r.NOTEQUAL);break;default:r.depthFunc(r.LEQUAL)}lt=ft}},setLocked:function(ft){G=ft},setClear:function(ft){gt!==ft&&(it&&(ft=1-ft),r.clearDepth(ft),gt=ft)},reset:function(){G=!1,j=null,lt=null,gt=null,it=!1}}}function a(){let G=!1,it=null,j=null,lt=null,gt=null,ft=null,Lt=null,ie=null,Qe=null;return{setTest:function(Ie){G||(Ie?mt(r.STENCIL_TEST):Tt(r.STENCIL_TEST))},setMask:function(Ie){it!==Ie&&!G&&(r.stencilMask(Ie),it=Ie)},setFunc:function(Ie,Ze,gn){(j!==Ie||lt!==Ze||gt!==gn)&&(r.stencilFunc(Ie,Ze,gn),j=Ie,lt=Ze,gt=gn)},setOp:function(Ie,Ze,gn){(ft!==Ie||Lt!==Ze||ie!==gn)&&(r.stencilOp(Ie,Ze,gn),ft=Ie,Lt=Ze,ie=gn)},setLocked:function(Ie){G=Ie},setClear:function(Ie){Qe!==Ie&&(r.clearStencil(Ie),Qe=Ie)},reset:function(){G=!1,it=null,j=null,lt=null,gt=null,ft=null,Lt=null,ie=null,Qe=null}}}const s=new e,n=new A,l=new a,d=new WeakMap,f=new WeakMap;let E={},I={},B=new WeakMap,y=[],v=null,S=!1,_=null,Q=null,D=null,b=null,T=null,P=null,R=null,F=new Color(0,0,0),O=0,N=!1,L=null,Y=null,rt=null,tt=null,at=null;const pt=r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let ct=!1,$=0;const q=r.getParameter(r.VERSION);q.indexOf("WebGL")!==-1?($=parseFloat(/^WebGL (\d)/.exec(q)[1]),ct=$>=1):q.indexOf("OpenGL ES")!==-1&&($=parseFloat(/^OpenGL ES (\d)/.exec(q)[1]),ct=$>=2);let Ct=null,wt={};const Bt=r.getParameter(r.SCISSOR_BOX),ut=r.getParameter(r.VIEWPORT),K=new Vector4().fromArray(Bt),J=new Vector4().fromArray(ut);function At(G,it,j,lt){const gt=new Uint8Array(4),ft=r.createTexture();r.bindTexture(G,ft),r.texParameteri(G,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(G,r.TEXTURE_MAG_FILTER,r.NEAREST);for(let Lt=0;Lt<j;Lt++)G===r.TEXTURE_3D||G===r.TEXTURE_2D_ARRAY?r.texImage3D(it,0,r.RGBA,1,1,lt,0,r.RGBA,r.UNSIGNED_BYTE,gt):r.texImage2D(it+Lt,0,r.RGBA,1,1,0,r.RGBA,r.UNSIGNED_BYTE,gt);return ft}const xt={};xt[r.TEXTURE_2D]=At(r.TEXTURE_2D,r.TEXTURE_2D,1),xt[r.TEXTURE_CUBE_MAP]=At(r.TEXTURE_CUBE_MAP,r.TEXTURE_CUBE_MAP_POSITIVE_X,6),xt[r.TEXTURE_2D_ARRAY]=At(r.TEXTURE_2D_ARRAY,r.TEXTURE_2D_ARRAY,1,1),xt[r.TEXTURE_3D]=At(r.TEXTURE_3D,r.TEXTURE_3D,1,1),s.setClear(0,0,0,1),n.setClear(1),l.setClear(0),mt(r.DEPTH_TEST),n.setFunc(LessEqualDepth),qt(!1),Xt(CullFaceBack),mt(r.CULL_FACE),Z(NoBlending);function mt(G){E[G]!==!0&&(r.enable(G),E[G]=!0)}function Tt(G){E[G]!==!1&&(r.disable(G),E[G]=!1)}function Vt(G,it){return I[G]!==it?(r.bindFramebuffer(G,it),I[G]=it,G===r.DRAW_FRAMEBUFFER&&(I[r.FRAMEBUFFER]=it),G===r.FRAMEBUFFER&&(I[r.DRAW_FRAMEBUFFER]=it),!0):!1}function Nt(G,it){let j=y,lt=!1;if(G){j=B.get(it),j===void 0&&(j=[],B.set(it,j));const gt=G.textures;if(j.length!==gt.length||j[0]!==r.COLOR_ATTACHMENT0){for(let ft=0,Lt=gt.length;ft<Lt;ft++)j[ft]=r.COLOR_ATTACHMENT0+ft;j.length=gt.length,lt=!0}}else j[0]!==r.BACK&&(j[0]=r.BACK,lt=!0);lt&&r.drawBuffers(j)}function $t(G){return v!==G?(r.useProgram(G),v=G,!0):!1}const ne={[AddEquation]:r.FUNC_ADD,[SubtractEquation]:r.FUNC_SUBTRACT,[ReverseSubtractEquation]:r.FUNC_REVERSE_SUBTRACT};ne[MinEquation]=r.MIN,ne[MaxEquation]=r.MAX;const Ae={[ZeroFactor]:r.ZERO,[OneFactor]:r.ONE,[SrcColorFactor]:r.SRC_COLOR,[SrcAlphaFactor]:r.SRC_ALPHA,[SrcAlphaSaturateFactor]:r.SRC_ALPHA_SATURATE,[DstColorFactor]:r.DST_COLOR,[DstAlphaFactor]:r.DST_ALPHA,[OneMinusSrcColorFactor]:r.ONE_MINUS_SRC_COLOR,[OneMinusSrcAlphaFactor]:r.ONE_MINUS_SRC_ALPHA,[OneMinusDstColorFactor]:r.ONE_MINUS_DST_COLOR,[OneMinusDstAlphaFactor]:r.ONE_MINUS_DST_ALPHA,[ConstantColorFactor]:r.CONSTANT_COLOR,[OneMinusConstantColorFactor]:r.ONE_MINUS_CONSTANT_COLOR,[ConstantAlphaFactor]:r.CONSTANT_ALPHA,[OneMinusConstantAlphaFactor]:r.ONE_MINUS_CONSTANT_ALPHA};function Z(G,it,j,lt,gt,ft,Lt,ie,Qe,Ie){if(G===NoBlending){S===!0&&(Tt(r.BLEND),S=!1);return}if(S===!1&&(mt(r.BLEND),S=!0),G!==CustomBlending){if(G!==_||Ie!==N){if((Q!==AddEquation||T!==AddEquation)&&(r.blendEquation(r.FUNC_ADD),Q=AddEquation,T=AddEquation),Ie)switch(G){case NormalBlending:r.blendFuncSeparate(r.ONE,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case AdditiveBlending:r.blendFunc(r.ONE,r.ONE);break;case SubtractiveBlending:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case MultiplyBlending:r.blendFuncSeparate(r.ZERO,r.SRC_COLOR,r.ZERO,r.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",G);break}else switch(G){case NormalBlending:r.blendFuncSeparate(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case AdditiveBlending:r.blendFunc(r.SRC_ALPHA,r.ONE);break;case SubtractiveBlending:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case MultiplyBlending:r.blendFunc(r.ZERO,r.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",G);break}D=null,b=null,P=null,R=null,F.set(0,0,0),O=0,_=G,N=Ie}return}gt=gt||it,ft=ft||j,Lt=Lt||lt,(it!==Q||gt!==T)&&(r.blendEquationSeparate(ne[it],ne[gt]),Q=it,T=gt),(j!==D||lt!==b||ft!==P||Lt!==R)&&(r.blendFuncSeparate(Ae[j],Ae[lt],Ae[ft],Ae[Lt]),D=j,b=lt,P=ft,R=Lt),(ie.equals(F)===!1||Qe!==O)&&(r.blendColor(ie.r,ie.g,ie.b,Qe),F.copy(ie),O=Qe),_=G,N=!1}function ue(G,it){G.side===DoubleSide?Tt(r.CULL_FACE):mt(r.CULL_FACE);let j=G.side===BackSide;it&&(j=!j),qt(j),G.blending===NormalBlending&&G.transparent===!1?Z(NoBlending):Z(G.blending,G.blendEquation,G.blendSrc,G.blendDst,G.blendEquationAlpha,G.blendSrcAlpha,G.blendDstAlpha,G.blendColor,G.blendAlpha,G.premultipliedAlpha),n.setFunc(G.depthFunc),n.setTest(G.depthTest),n.setMask(G.depthWrite),s.setMask(G.colorWrite);const lt=G.stencilWrite;l.setTest(lt),lt&&(l.setMask(G.stencilWriteMask),l.setFunc(G.stencilFunc,G.stencilRef,G.stencilFuncMask),l.setOp(G.stencilFail,G.stencilZFail,G.stencilZPass)),oe(G.polygonOffset,G.polygonOffsetFactor,G.polygonOffsetUnits),G.alphaToCoverage===!0?mt(r.SAMPLE_ALPHA_TO_COVERAGE):Tt(r.SAMPLE_ALPHA_TO_COVERAGE)}function qt(G){L!==G&&(G?r.frontFace(r.CW):r.frontFace(r.CCW),L=G)}function Xt(G){G!==CullFaceNone?(mt(r.CULL_FACE),G!==Y&&(G===CullFaceBack?r.cullFace(r.BACK):G===CullFaceFront?r.cullFace(r.FRONT):r.cullFace(r.FRONT_AND_BACK))):Tt(r.CULL_FACE),Y=G}function Ht(G){G!==rt&&(ct&&r.lineWidth(G),rt=G)}function oe(G,it,j){G?(mt(r.POLYGON_OFFSET_FILL),(tt!==it||at!==j)&&(r.polygonOffset(it,j),tt=it,at=j)):Tt(r.POLYGON_OFFSET_FILL)}function Kt(G){G?mt(r.SCISSOR_TEST):Tt(r.SCISSOR_TEST)}function Ee(G){G===void 0&&(G=r.TEXTURE0+pt-1),Ct!==G&&(r.activeTexture(G),Ct=G)}function be(G,it,j){j===void 0&&(Ct===null?j=r.TEXTURE0+pt-1:j=Ct);let lt=wt[j];lt===void 0&&(lt={type:void 0,texture:void 0},wt[j]=lt),(lt.type!==G||lt.texture!==it)&&(Ct!==j&&(r.activeTexture(j),Ct=j),r.bindTexture(G,it||xt[G]),lt.type=G,lt.texture=it)}function W(){const G=wt[Ct];G!==void 0&&G.type!==void 0&&(r.bindTexture(G.type,null),G.type=void 0,G.texture=void 0)}function U(){try{r.compressedTexImage2D(...arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function It(){try{r.compressedTexImage3D(...arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function St(){try{r.texSubImage2D(...arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function Mt(){try{r.texSubImage3D(...arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function Dt(){try{r.compressedTexSubImage2D(...arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function te(){try{r.compressedTexSubImage3D(...arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function Gt(){try{r.texStorage2D(...arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function ee(){try{r.texStorage3D(...arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function yt(){try{r.texImage2D(...arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function dt(){try{r.texImage3D(...arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function bt(G){K.equals(G)===!1&&(r.scissor(G.x,G.y,G.z,G.w),K.copy(G))}function Ft(G){J.equals(G)===!1&&(r.viewport(G.x,G.y,G.z,G.w),J.copy(G))}function Jt(G,it){let j=f.get(it);j===void 0&&(j=new WeakMap,f.set(it,j));let lt=j.get(G);lt===void 0&&(lt=r.getUniformBlockIndex(it,G.name),j.set(G,lt))}function Ut(G,it){const lt=f.get(it).get(G);d.get(it)!==lt&&(r.uniformBlockBinding(it,lt,G.__bindingPointIndex),d.set(it,lt))}function de(){r.disable(r.BLEND),r.disable(r.CULL_FACE),r.disable(r.DEPTH_TEST),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SCISSOR_TEST),r.disable(r.STENCIL_TEST),r.disable(r.SAMPLE_ALPHA_TO_COVERAGE),r.blendEquation(r.FUNC_ADD),r.blendFunc(r.ONE,r.ZERO),r.blendFuncSeparate(r.ONE,r.ZERO,r.ONE,r.ZERO),r.blendColor(0,0,0,0),r.colorMask(!0,!0,!0,!0),r.clearColor(0,0,0,0),r.depthMask(!0),r.depthFunc(r.LESS),n.setReversed(!1),r.clearDepth(1),r.stencilMask(4294967295),r.stencilFunc(r.ALWAYS,0,4294967295),r.stencilOp(r.KEEP,r.KEEP,r.KEEP),r.clearStencil(0),r.cullFace(r.BACK),r.frontFace(r.CCW),r.polygonOffset(0,0),r.activeTexture(r.TEXTURE0),r.bindFramebuffer(r.FRAMEBUFFER,null),r.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),r.bindFramebuffer(r.READ_FRAMEBUFFER,null),r.useProgram(null),r.lineWidth(1),r.scissor(0,0,r.canvas.width,r.canvas.height),r.viewport(0,0,r.canvas.width,r.canvas.height),E={},Ct=null,wt={},I={},B=new WeakMap,y=[],v=null,S=!1,_=null,Q=null,D=null,b=null,T=null,P=null,R=null,F=new Color(0,0,0),O=0,N=!1,L=null,Y=null,rt=null,tt=null,at=null,K.set(0,0,r.canvas.width,r.canvas.height),J.set(0,0,r.canvas.width,r.canvas.height),s.reset(),n.reset(),l.reset()}return{buffers:{color:s,depth:n,stencil:l},enable:mt,disable:Tt,bindFramebuffer:Vt,drawBuffers:Nt,useProgram:$t,setBlending:Z,setMaterial:ue,setFlipSided:qt,setCullFace:Xt,setLineWidth:Ht,setPolygonOffset:oe,setScissorTest:Kt,activeTexture:Ee,bindTexture:be,unbindTexture:W,compressedTexImage2D:U,compressedTexImage3D:It,texImage2D:yt,texImage3D:dt,updateUBOMapping:Jt,uniformBlockBinding:Ut,texStorage2D:Gt,texStorage3D:ee,texSubImage2D:St,texSubImage3D:Mt,compressedTexSubImage2D:Dt,compressedTexSubImage3D:te,scissor:bt,viewport:Ft,reset:de}}function WebGLTextures(r,t,e,A,a,s,n){const l=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,d=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),f=new Vector2,E=new WeakMap;let I;const B=new WeakMap;let y=!1;try{y=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function v(W,U){return y?new OffscreenCanvas(W,U):createElementNS("canvas")}function S(W,U,It){let St=1;const Mt=be(W);if((Mt.width>It||Mt.height>It)&&(St=It/Math.max(Mt.width,Mt.height)),St<1)if(typeof HTMLImageElement<"u"&&W instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&W instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&W instanceof ImageBitmap||typeof VideoFrame<"u"&&W instanceof VideoFrame){const Dt=Math.floor(St*Mt.width),te=Math.floor(St*Mt.height);I===void 0&&(I=v(Dt,te));const Gt=U?v(Dt,te):I;return Gt.width=Dt,Gt.height=te,Gt.getContext("2d").drawImage(W,0,0,Dt,te),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+Mt.width+"x"+Mt.height+") to ("+Dt+"x"+te+")."),Gt}else return"data"in W&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+Mt.width+"x"+Mt.height+")."),W;return W}function _(W){return W.generateMipmaps}function Q(W){r.generateMipmap(W)}function D(W){return W.isWebGLCubeRenderTarget?r.TEXTURE_CUBE_MAP:W.isWebGL3DRenderTarget?r.TEXTURE_3D:W.isWebGLArrayRenderTarget||W.isCompressedArrayTexture?r.TEXTURE_2D_ARRAY:r.TEXTURE_2D}function b(W,U,It,St,Mt=!1){if(W!==null){if(r[W]!==void 0)return r[W];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+W+"'")}let Dt=U;if(U===r.RED&&(It===r.FLOAT&&(Dt=r.R32F),It===r.HALF_FLOAT&&(Dt=r.R16F),It===r.UNSIGNED_BYTE&&(Dt=r.R8)),U===r.RED_INTEGER&&(It===r.UNSIGNED_BYTE&&(Dt=r.R8UI),It===r.UNSIGNED_SHORT&&(Dt=r.R16UI),It===r.UNSIGNED_INT&&(Dt=r.R32UI),It===r.BYTE&&(Dt=r.R8I),It===r.SHORT&&(Dt=r.R16I),It===r.INT&&(Dt=r.R32I)),U===r.RG&&(It===r.FLOAT&&(Dt=r.RG32F),It===r.HALF_FLOAT&&(Dt=r.RG16F),It===r.UNSIGNED_BYTE&&(Dt=r.RG8)),U===r.RG_INTEGER&&(It===r.UNSIGNED_BYTE&&(Dt=r.RG8UI),It===r.UNSIGNED_SHORT&&(Dt=r.RG16UI),It===r.UNSIGNED_INT&&(Dt=r.RG32UI),It===r.BYTE&&(Dt=r.RG8I),It===r.SHORT&&(Dt=r.RG16I),It===r.INT&&(Dt=r.RG32I)),U===r.RGB_INTEGER&&(It===r.UNSIGNED_BYTE&&(Dt=r.RGB8UI),It===r.UNSIGNED_SHORT&&(Dt=r.RGB16UI),It===r.UNSIGNED_INT&&(Dt=r.RGB32UI),It===r.BYTE&&(Dt=r.RGB8I),It===r.SHORT&&(Dt=r.RGB16I),It===r.INT&&(Dt=r.RGB32I)),U===r.RGBA_INTEGER&&(It===r.UNSIGNED_BYTE&&(Dt=r.RGBA8UI),It===r.UNSIGNED_SHORT&&(Dt=r.RGBA16UI),It===r.UNSIGNED_INT&&(Dt=r.RGBA32UI),It===r.BYTE&&(Dt=r.RGBA8I),It===r.SHORT&&(Dt=r.RGBA16I),It===r.INT&&(Dt=r.RGBA32I)),U===r.RGB&&It===r.UNSIGNED_INT_5_9_9_9_REV&&(Dt=r.RGB9_E5),U===r.RGBA){const te=Mt?LinearTransfer:ColorManagement.getTransfer(St);It===r.FLOAT&&(Dt=r.RGBA32F),It===r.HALF_FLOAT&&(Dt=r.RGBA16F),It===r.UNSIGNED_BYTE&&(Dt=te===SRGBTransfer?r.SRGB8_ALPHA8:r.RGBA8),It===r.UNSIGNED_SHORT_4_4_4_4&&(Dt=r.RGBA4),It===r.UNSIGNED_SHORT_5_5_5_1&&(Dt=r.RGB5_A1)}return(Dt===r.R16F||Dt===r.R32F||Dt===r.RG16F||Dt===r.RG32F||Dt===r.RGBA16F||Dt===r.RGBA32F)&&t.get("EXT_color_buffer_float"),Dt}function T(W,U){let It;return W?U===null||U===UnsignedIntType||U===UnsignedInt248Type?It=r.DEPTH24_STENCIL8:U===FloatType?It=r.DEPTH32F_STENCIL8:U===UnsignedShortType&&(It=r.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):U===null||U===UnsignedIntType||U===UnsignedInt248Type?It=r.DEPTH_COMPONENT24:U===FloatType?It=r.DEPTH_COMPONENT32F:U===UnsignedShortType&&(It=r.DEPTH_COMPONENT16),It}function P(W,U){return _(W)===!0||W.isFramebufferTexture&&W.minFilter!==NearestFilter&&W.minFilter!==LinearFilter?Math.log2(Math.max(U.width,U.height))+1:W.mipmaps!==void 0&&W.mipmaps.length>0?W.mipmaps.length:W.isCompressedTexture&&Array.isArray(W.image)?U.mipmaps.length:1}function R(W){const U=W.target;U.removeEventListener("dispose",R),O(U),U.isVideoTexture&&E.delete(U)}function F(W){const U=W.target;U.removeEventListener("dispose",F),L(U)}function O(W){const U=A.get(W);if(U.__webglInit===void 0)return;const It=W.source,St=B.get(It);if(St){const Mt=St[U.__cacheKey];Mt.usedTimes--,Mt.usedTimes===0&&N(W),Object.keys(St).length===0&&B.delete(It)}A.remove(W)}function N(W){const U=A.get(W);r.deleteTexture(U.__webglTexture);const It=W.source,St=B.get(It);delete St[U.__cacheKey],n.memory.textures--}function L(W){const U=A.get(W);if(W.depthTexture&&(W.depthTexture.dispose(),A.remove(W.depthTexture)),W.isWebGLCubeRenderTarget)for(let St=0;St<6;St++){if(Array.isArray(U.__webglFramebuffer[St]))for(let Mt=0;Mt<U.__webglFramebuffer[St].length;Mt++)r.deleteFramebuffer(U.__webglFramebuffer[St][Mt]);else r.deleteFramebuffer(U.__webglFramebuffer[St]);U.__webglDepthbuffer&&r.deleteRenderbuffer(U.__webglDepthbuffer[St])}else{if(Array.isArray(U.__webglFramebuffer))for(let St=0;St<U.__webglFramebuffer.length;St++)r.deleteFramebuffer(U.__webglFramebuffer[St]);else r.deleteFramebuffer(U.__webglFramebuffer);if(U.__webglDepthbuffer&&r.deleteRenderbuffer(U.__webglDepthbuffer),U.__webglMultisampledFramebuffer&&r.deleteFramebuffer(U.__webglMultisampledFramebuffer),U.__webglColorRenderbuffer)for(let St=0;St<U.__webglColorRenderbuffer.length;St++)U.__webglColorRenderbuffer[St]&&r.deleteRenderbuffer(U.__webglColorRenderbuffer[St]);U.__webglDepthRenderbuffer&&r.deleteRenderbuffer(U.__webglDepthRenderbuffer)}const It=W.textures;for(let St=0,Mt=It.length;St<Mt;St++){const Dt=A.get(It[St]);Dt.__webglTexture&&(r.deleteTexture(Dt.__webglTexture),n.memory.textures--),A.remove(It[St])}A.remove(W)}let Y=0;function rt(){Y=0}function tt(){const W=Y;return W>=a.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+W+" texture units while this GPU supports only "+a.maxTextures),Y+=1,W}function at(W){const U=[];return U.push(W.wrapS),U.push(W.wrapT),U.push(W.wrapR||0),U.push(W.magFilter),U.push(W.minFilter),U.push(W.anisotropy),U.push(W.internalFormat),U.push(W.format),U.push(W.type),U.push(W.generateMipmaps),U.push(W.premultiplyAlpha),U.push(W.flipY),U.push(W.unpackAlignment),U.push(W.colorSpace),U.join()}function pt(W,U){const It=A.get(W);if(W.isVideoTexture&&Kt(W),W.isRenderTargetTexture===!1&&W.version>0&&It.__version!==W.version){const St=W.image;if(St===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(St.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{xt(It,W,U);return}}e.bindTexture(r.TEXTURE_2D,It.__webglTexture,r.TEXTURE0+U)}function ct(W,U){const It=A.get(W);if(W.version>0&&It.__version!==W.version){xt(It,W,U);return}e.bindTexture(r.TEXTURE_2D_ARRAY,It.__webglTexture,r.TEXTURE0+U)}function $(W,U){const It=A.get(W);if(W.version>0&&It.__version!==W.version){xt(It,W,U);return}e.bindTexture(r.TEXTURE_3D,It.__webglTexture,r.TEXTURE0+U)}function q(W,U){const It=A.get(W);if(W.version>0&&It.__version!==W.version){mt(It,W,U);return}e.bindTexture(r.TEXTURE_CUBE_MAP,It.__webglTexture,r.TEXTURE0+U)}const Ct={[RepeatWrapping]:r.REPEAT,[ClampToEdgeWrapping]:r.CLAMP_TO_EDGE,[MirroredRepeatWrapping]:r.MIRRORED_REPEAT},wt={[NearestFilter]:r.NEAREST,[NearestMipmapNearestFilter]:r.NEAREST_MIPMAP_NEAREST,[NearestMipmapLinearFilter]:r.NEAREST_MIPMAP_LINEAR,[LinearFilter]:r.LINEAR,[LinearMipmapNearestFilter]:r.LINEAR_MIPMAP_NEAREST,[LinearMipmapLinearFilter]:r.LINEAR_MIPMAP_LINEAR},Bt={[NeverCompare]:r.NEVER,[AlwaysCompare]:r.ALWAYS,[LessCompare]:r.LESS,[LessEqualCompare]:r.LEQUAL,[EqualCompare]:r.EQUAL,[GreaterEqualCompare]:r.GEQUAL,[GreaterCompare]:r.GREATER,[NotEqualCompare]:r.NOTEQUAL};function ut(W,U){if(U.type===FloatType&&t.has("OES_texture_float_linear")===!1&&(U.magFilter===LinearFilter||U.magFilter===LinearMipmapNearestFilter||U.magFilter===NearestMipmapLinearFilter||U.magFilter===LinearMipmapLinearFilter||U.minFilter===LinearFilter||U.minFilter===LinearMipmapNearestFilter||U.minFilter===NearestMipmapLinearFilter||U.minFilter===LinearMipmapLinearFilter)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),r.texParameteri(W,r.TEXTURE_WRAP_S,Ct[U.wrapS]),r.texParameteri(W,r.TEXTURE_WRAP_T,Ct[U.wrapT]),(W===r.TEXTURE_3D||W===r.TEXTURE_2D_ARRAY)&&r.texParameteri(W,r.TEXTURE_WRAP_R,Ct[U.wrapR]),r.texParameteri(W,r.TEXTURE_MAG_FILTER,wt[U.magFilter]),r.texParameteri(W,r.TEXTURE_MIN_FILTER,wt[U.minFilter]),U.compareFunction&&(r.texParameteri(W,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(W,r.TEXTURE_COMPARE_FUNC,Bt[U.compareFunction])),t.has("EXT_texture_filter_anisotropic")===!0){if(U.magFilter===NearestFilter||U.minFilter!==NearestMipmapLinearFilter&&U.minFilter!==LinearMipmapLinearFilter||U.type===FloatType&&t.has("OES_texture_float_linear")===!1)return;if(U.anisotropy>1||A.get(U).__currentAnisotropy){const It=t.get("EXT_texture_filter_anisotropic");r.texParameterf(W,It.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(U.anisotropy,a.getMaxAnisotropy())),A.get(U).__currentAnisotropy=U.anisotropy}}}function K(W,U){let It=!1;W.__webglInit===void 0&&(W.__webglInit=!0,U.addEventListener("dispose",R));const St=U.source;let Mt=B.get(St);Mt===void 0&&(Mt={},B.set(St,Mt));const Dt=at(U);if(Dt!==W.__cacheKey){Mt[Dt]===void 0&&(Mt[Dt]={texture:r.createTexture(),usedTimes:0},n.memory.textures++,It=!0),Mt[Dt].usedTimes++;const te=Mt[W.__cacheKey];te!==void 0&&(Mt[W.__cacheKey].usedTimes--,te.usedTimes===0&&N(U)),W.__cacheKey=Dt,W.__webglTexture=Mt[Dt].texture}return It}function J(W,U,It){return Math.floor(Math.floor(W/It)/U)}function At(W,U,It,St){const Dt=W.updateRanges;if(Dt.length===0)e.texSubImage2D(r.TEXTURE_2D,0,0,0,U.width,U.height,It,St,U.data);else{Dt.sort((dt,bt)=>dt.start-bt.start);let te=0;for(let dt=1;dt<Dt.length;dt++){const bt=Dt[te],Ft=Dt[dt],Jt=bt.start+bt.count,Ut=J(Ft.start,U.width,4),de=J(bt.start,U.width,4);Ft.start<=Jt+1&&Ut===de&&J(Ft.start+Ft.count-1,U.width,4)===Ut?bt.count=Math.max(bt.count,Ft.start+Ft.count-bt.start):(++te,Dt[te]=Ft)}Dt.length=te+1;const Gt=r.getParameter(r.UNPACK_ROW_LENGTH),ee=r.getParameter(r.UNPACK_SKIP_PIXELS),yt=r.getParameter(r.UNPACK_SKIP_ROWS);r.pixelStorei(r.UNPACK_ROW_LENGTH,U.width);for(let dt=0,bt=Dt.length;dt<bt;dt++){const Ft=Dt[dt],Jt=Math.floor(Ft.start/4),Ut=Math.ceil(Ft.count/4),de=Jt%U.width,G=Math.floor(Jt/U.width),it=Ut,j=1;r.pixelStorei(r.UNPACK_SKIP_PIXELS,de),r.pixelStorei(r.UNPACK_SKIP_ROWS,G),e.texSubImage2D(r.TEXTURE_2D,0,de,G,it,j,It,St,U.data)}W.clearUpdateRanges(),r.pixelStorei(r.UNPACK_ROW_LENGTH,Gt),r.pixelStorei(r.UNPACK_SKIP_PIXELS,ee),r.pixelStorei(r.UNPACK_SKIP_ROWS,yt)}}function xt(W,U,It){let St=r.TEXTURE_2D;(U.isDataArrayTexture||U.isCompressedArrayTexture)&&(St=r.TEXTURE_2D_ARRAY),U.isData3DTexture&&(St=r.TEXTURE_3D);const Mt=K(W,U),Dt=U.source;e.bindTexture(St,W.__webglTexture,r.TEXTURE0+It);const te=A.get(Dt);if(Dt.version!==te.__version||Mt===!0){e.activeTexture(r.TEXTURE0+It);const Gt=ColorManagement.getPrimaries(ColorManagement.workingColorSpace),ee=U.colorSpace===NoColorSpace?null:ColorManagement.getPrimaries(U.colorSpace),yt=U.colorSpace===NoColorSpace||Gt===ee?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,U.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,U.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,U.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,yt);let dt=S(U.image,!1,a.maxTextureSize);dt=Ee(U,dt);const bt=s.convert(U.format,U.colorSpace),Ft=s.convert(U.type);let Jt=b(U.internalFormat,bt,Ft,U.colorSpace,U.isVideoTexture);ut(St,U);let Ut;const de=U.mipmaps,G=U.isVideoTexture!==!0,it=te.__version===void 0||Mt===!0,j=Dt.dataReady,lt=P(U,dt);if(U.isDepthTexture)Jt=T(U.format===DepthStencilFormat,U.type),it&&(G?e.texStorage2D(r.TEXTURE_2D,1,Jt,dt.width,dt.height):e.texImage2D(r.TEXTURE_2D,0,Jt,dt.width,dt.height,0,bt,Ft,null));else if(U.isDataTexture)if(de.length>0){G&&it&&e.texStorage2D(r.TEXTURE_2D,lt,Jt,de[0].width,de[0].height);for(let gt=0,ft=de.length;gt<ft;gt++)Ut=de[gt],G?j&&e.texSubImage2D(r.TEXTURE_2D,gt,0,0,Ut.width,Ut.height,bt,Ft,Ut.data):e.texImage2D(r.TEXTURE_2D,gt,Jt,Ut.width,Ut.height,0,bt,Ft,Ut.data);U.generateMipmaps=!1}else G?(it&&e.texStorage2D(r.TEXTURE_2D,lt,Jt,dt.width,dt.height),j&&At(U,dt,bt,Ft)):e.texImage2D(r.TEXTURE_2D,0,Jt,dt.width,dt.height,0,bt,Ft,dt.data);else if(U.isCompressedTexture)if(U.isCompressedArrayTexture){G&&it&&e.texStorage3D(r.TEXTURE_2D_ARRAY,lt,Jt,de[0].width,de[0].height,dt.depth);for(let gt=0,ft=de.length;gt<ft;gt++)if(Ut=de[gt],U.format!==RGBAFormat)if(bt!==null)if(G){if(j)if(U.layerUpdates.size>0){const Lt=getByteLength(Ut.width,Ut.height,U.format,U.type);for(const ie of U.layerUpdates){const Qe=Ut.data.subarray(ie*Lt/Ut.data.BYTES_PER_ELEMENT,(ie+1)*Lt/Ut.data.BYTES_PER_ELEMENT);e.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,gt,0,0,ie,Ut.width,Ut.height,1,bt,Qe)}U.clearLayerUpdates()}else e.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,gt,0,0,0,Ut.width,Ut.height,dt.depth,bt,Ut.data)}else e.compressedTexImage3D(r.TEXTURE_2D_ARRAY,gt,Jt,Ut.width,Ut.height,dt.depth,0,Ut.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else G?j&&e.texSubImage3D(r.TEXTURE_2D_ARRAY,gt,0,0,0,Ut.width,Ut.height,dt.depth,bt,Ft,Ut.data):e.texImage3D(r.TEXTURE_2D_ARRAY,gt,Jt,Ut.width,Ut.height,dt.depth,0,bt,Ft,Ut.data)}else{G&&it&&e.texStorage2D(r.TEXTURE_2D,lt,Jt,de[0].width,de[0].height);for(let gt=0,ft=de.length;gt<ft;gt++)Ut=de[gt],U.format!==RGBAFormat?bt!==null?G?j&&e.compressedTexSubImage2D(r.TEXTURE_2D,gt,0,0,Ut.width,Ut.height,bt,Ut.data):e.compressedTexImage2D(r.TEXTURE_2D,gt,Jt,Ut.width,Ut.height,0,Ut.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):G?j&&e.texSubImage2D(r.TEXTURE_2D,gt,0,0,Ut.width,Ut.height,bt,Ft,Ut.data):e.texImage2D(r.TEXTURE_2D,gt,Jt,Ut.width,Ut.height,0,bt,Ft,Ut.data)}else if(U.isDataArrayTexture)if(G){if(it&&e.texStorage3D(r.TEXTURE_2D_ARRAY,lt,Jt,dt.width,dt.height,dt.depth),j)if(U.layerUpdates.size>0){const gt=getByteLength(dt.width,dt.height,U.format,U.type);for(const ft of U.layerUpdates){const Lt=dt.data.subarray(ft*gt/dt.data.BYTES_PER_ELEMENT,(ft+1)*gt/dt.data.BYTES_PER_ELEMENT);e.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,ft,dt.width,dt.height,1,bt,Ft,Lt)}U.clearLayerUpdates()}else e.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,dt.width,dt.height,dt.depth,bt,Ft,dt.data)}else e.texImage3D(r.TEXTURE_2D_ARRAY,0,Jt,dt.width,dt.height,dt.depth,0,bt,Ft,dt.data);else if(U.isData3DTexture)G?(it&&e.texStorage3D(r.TEXTURE_3D,lt,Jt,dt.width,dt.height,dt.depth),j&&e.texSubImage3D(r.TEXTURE_3D,0,0,0,0,dt.width,dt.height,dt.depth,bt,Ft,dt.data)):e.texImage3D(r.TEXTURE_3D,0,Jt,dt.width,dt.height,dt.depth,0,bt,Ft,dt.data);else if(U.isFramebufferTexture){if(it)if(G)e.texStorage2D(r.TEXTURE_2D,lt,Jt,dt.width,dt.height);else{let gt=dt.width,ft=dt.height;for(let Lt=0;Lt<lt;Lt++)e.texImage2D(r.TEXTURE_2D,Lt,Jt,gt,ft,0,bt,Ft,null),gt>>=1,ft>>=1}}else if(de.length>0){if(G&&it){const gt=be(de[0]);e.texStorage2D(r.TEXTURE_2D,lt,Jt,gt.width,gt.height)}for(let gt=0,ft=de.length;gt<ft;gt++)Ut=de[gt],G?j&&e.texSubImage2D(r.TEXTURE_2D,gt,0,0,bt,Ft,Ut):e.texImage2D(r.TEXTURE_2D,gt,Jt,bt,Ft,Ut);U.generateMipmaps=!1}else if(G){if(it){const gt=be(dt);e.texStorage2D(r.TEXTURE_2D,lt,Jt,gt.width,gt.height)}j&&e.texSubImage2D(r.TEXTURE_2D,0,0,0,bt,Ft,dt)}else e.texImage2D(r.TEXTURE_2D,0,Jt,bt,Ft,dt);_(U)&&Q(St),te.__version=Dt.version,U.onUpdate&&U.onUpdate(U)}W.__version=U.version}function mt(W,U,It){if(U.image.length!==6)return;const St=K(W,U),Mt=U.source;e.bindTexture(r.TEXTURE_CUBE_MAP,W.__webglTexture,r.TEXTURE0+It);const Dt=A.get(Mt);if(Mt.version!==Dt.__version||St===!0){e.activeTexture(r.TEXTURE0+It);const te=ColorManagement.getPrimaries(ColorManagement.workingColorSpace),Gt=U.colorSpace===NoColorSpace?null:ColorManagement.getPrimaries(U.colorSpace),ee=U.colorSpace===NoColorSpace||te===Gt?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,U.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,U.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,U.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,ee);const yt=U.isCompressedTexture||U.image[0].isCompressedTexture,dt=U.image[0]&&U.image[0].isDataTexture,bt=[];for(let ft=0;ft<6;ft++)!yt&&!dt?bt[ft]=S(U.image[ft],!0,a.maxCubemapSize):bt[ft]=dt?U.image[ft].image:U.image[ft],bt[ft]=Ee(U,bt[ft]);const Ft=bt[0],Jt=s.convert(U.format,U.colorSpace),Ut=s.convert(U.type),de=b(U.internalFormat,Jt,Ut,U.colorSpace),G=U.isVideoTexture!==!0,it=Dt.__version===void 0||St===!0,j=Mt.dataReady;let lt=P(U,Ft);ut(r.TEXTURE_CUBE_MAP,U);let gt;if(yt){G&&it&&e.texStorage2D(r.TEXTURE_CUBE_MAP,lt,de,Ft.width,Ft.height);for(let ft=0;ft<6;ft++){gt=bt[ft].mipmaps;for(let Lt=0;Lt<gt.length;Lt++){const ie=gt[Lt];U.format!==RGBAFormat?Jt!==null?G?j&&e.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ft,Lt,0,0,ie.width,ie.height,Jt,ie.data):e.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ft,Lt,de,ie.width,ie.height,0,ie.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):G?j&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ft,Lt,0,0,ie.width,ie.height,Jt,Ut,ie.data):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ft,Lt,de,ie.width,ie.height,0,Jt,Ut,ie.data)}}}else{if(gt=U.mipmaps,G&&it){gt.length>0&&lt++;const ft=be(bt[0]);e.texStorage2D(r.TEXTURE_CUBE_MAP,lt,de,ft.width,ft.height)}for(let ft=0;ft<6;ft++)if(dt){G?j&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ft,0,0,0,bt[ft].width,bt[ft].height,Jt,Ut,bt[ft].data):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ft,0,de,bt[ft].width,bt[ft].height,0,Jt,Ut,bt[ft].data);for(let Lt=0;Lt<gt.length;Lt++){const Qe=gt[Lt].image[ft].image;G?j&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ft,Lt+1,0,0,Qe.width,Qe.height,Jt,Ut,Qe.data):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ft,Lt+1,de,Qe.width,Qe.height,0,Jt,Ut,Qe.data)}}else{G?j&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ft,0,0,0,Jt,Ut,bt[ft]):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ft,0,de,Jt,Ut,bt[ft]);for(let Lt=0;Lt<gt.length;Lt++){const ie=gt[Lt];G?j&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ft,Lt+1,0,0,Jt,Ut,ie.image[ft]):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+ft,Lt+1,de,Jt,Ut,ie.image[ft])}}}_(U)&&Q(r.TEXTURE_CUBE_MAP),Dt.__version=Mt.version,U.onUpdate&&U.onUpdate(U)}W.__version=U.version}function Tt(W,U,It,St,Mt,Dt){const te=s.convert(It.format,It.colorSpace),Gt=s.convert(It.type),ee=b(It.internalFormat,te,Gt,It.colorSpace),yt=A.get(U),dt=A.get(It);if(dt.__renderTarget=U,!yt.__hasExternalTextures){const bt=Math.max(1,U.width>>Dt),Ft=Math.max(1,U.height>>Dt);Mt===r.TEXTURE_3D||Mt===r.TEXTURE_2D_ARRAY?e.texImage3D(Mt,Dt,ee,bt,Ft,U.depth,0,te,Gt,null):e.texImage2D(Mt,Dt,ee,bt,Ft,0,te,Gt,null)}e.bindFramebuffer(r.FRAMEBUFFER,W),oe(U)?l.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,St,Mt,dt.__webglTexture,0,Ht(U)):(Mt===r.TEXTURE_2D||Mt>=r.TEXTURE_CUBE_MAP_POSITIVE_X&&Mt<=r.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&r.framebufferTexture2D(r.FRAMEBUFFER,St,Mt,dt.__webglTexture,Dt),e.bindFramebuffer(r.FRAMEBUFFER,null)}function Vt(W,U,It){if(r.bindRenderbuffer(r.RENDERBUFFER,W),U.depthBuffer){const St=U.depthTexture,Mt=St&&St.isDepthTexture?St.type:null,Dt=T(U.stencilBuffer,Mt),te=U.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,Gt=Ht(U);oe(U)?l.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,Gt,Dt,U.width,U.height):It?r.renderbufferStorageMultisample(r.RENDERBUFFER,Gt,Dt,U.width,U.height):r.renderbufferStorage(r.RENDERBUFFER,Dt,U.width,U.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,te,r.RENDERBUFFER,W)}else{const St=U.textures;for(let Mt=0;Mt<St.length;Mt++){const Dt=St[Mt],te=s.convert(Dt.format,Dt.colorSpace),Gt=s.convert(Dt.type),ee=b(Dt.internalFormat,te,Gt,Dt.colorSpace),yt=Ht(U);It&&oe(U)===!1?r.renderbufferStorageMultisample(r.RENDERBUFFER,yt,ee,U.width,U.height):oe(U)?l.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,yt,ee,U.width,U.height):r.renderbufferStorage(r.RENDERBUFFER,ee,U.width,U.height)}}r.bindRenderbuffer(r.RENDERBUFFER,null)}function Nt(W,U){if(U&&U.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(r.FRAMEBUFFER,W),!(U.depthTexture&&U.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const St=A.get(U.depthTexture);St.__renderTarget=U,(!St.__webglTexture||U.depthTexture.image.width!==U.width||U.depthTexture.image.height!==U.height)&&(U.depthTexture.image.width=U.width,U.depthTexture.image.height=U.height,U.depthTexture.needsUpdate=!0),pt(U.depthTexture,0);const Mt=St.__webglTexture,Dt=Ht(U);if(U.depthTexture.format===DepthFormat)oe(U)?l.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,Mt,0,Dt):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,Mt,0);else if(U.depthTexture.format===DepthStencilFormat)oe(U)?l.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,Mt,0,Dt):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,Mt,0);else throw new Error("Unknown depthTexture format")}function $t(W){const U=A.get(W),It=W.isWebGLCubeRenderTarget===!0;if(U.__boundDepthTexture!==W.depthTexture){const St=W.depthTexture;if(U.__depthDisposeCallback&&U.__depthDisposeCallback(),St){const Mt=()=>{delete U.__boundDepthTexture,delete U.__depthDisposeCallback,St.removeEventListener("dispose",Mt)};St.addEventListener("dispose",Mt),U.__depthDisposeCallback=Mt}U.__boundDepthTexture=St}if(W.depthTexture&&!U.__autoAllocateDepthBuffer){if(It)throw new Error("target.depthTexture not supported in Cube render targets");const St=W.texture.mipmaps;St&&St.length>0?Nt(U.__webglFramebuffer[0],W):Nt(U.__webglFramebuffer,W)}else if(It){U.__webglDepthbuffer=[];for(let St=0;St<6;St++)if(e.bindFramebuffer(r.FRAMEBUFFER,U.__webglFramebuffer[St]),U.__webglDepthbuffer[St]===void 0)U.__webglDepthbuffer[St]=r.createRenderbuffer(),Vt(U.__webglDepthbuffer[St],W,!1);else{const Mt=W.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,Dt=U.__webglDepthbuffer[St];r.bindRenderbuffer(r.RENDERBUFFER,Dt),r.framebufferRenderbuffer(r.FRAMEBUFFER,Mt,r.RENDERBUFFER,Dt)}}else{const St=W.texture.mipmaps;if(St&&St.length>0?e.bindFramebuffer(r.FRAMEBUFFER,U.__webglFramebuffer[0]):e.bindFramebuffer(r.FRAMEBUFFER,U.__webglFramebuffer),U.__webglDepthbuffer===void 0)U.__webglDepthbuffer=r.createRenderbuffer(),Vt(U.__webglDepthbuffer,W,!1);else{const Mt=W.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,Dt=U.__webglDepthbuffer;r.bindRenderbuffer(r.RENDERBUFFER,Dt),r.framebufferRenderbuffer(r.FRAMEBUFFER,Mt,r.RENDERBUFFER,Dt)}}e.bindFramebuffer(r.FRAMEBUFFER,null)}function ne(W,U,It){const St=A.get(W);U!==void 0&&Tt(St.__webglFramebuffer,W,W.texture,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,0),It!==void 0&&$t(W)}function Ae(W){const U=W.texture,It=A.get(W),St=A.get(U);W.addEventListener("dispose",F);const Mt=W.textures,Dt=W.isWebGLCubeRenderTarget===!0,te=Mt.length>1;if(te||(St.__webglTexture===void 0&&(St.__webglTexture=r.createTexture()),St.__version=U.version,n.memory.textures++),Dt){It.__webglFramebuffer=[];for(let Gt=0;Gt<6;Gt++)if(U.mipmaps&&U.mipmaps.length>0){It.__webglFramebuffer[Gt]=[];for(let ee=0;ee<U.mipmaps.length;ee++)It.__webglFramebuffer[Gt][ee]=r.createFramebuffer()}else It.__webglFramebuffer[Gt]=r.createFramebuffer()}else{if(U.mipmaps&&U.mipmaps.length>0){It.__webglFramebuffer=[];for(let Gt=0;Gt<U.mipmaps.length;Gt++)It.__webglFramebuffer[Gt]=r.createFramebuffer()}else It.__webglFramebuffer=r.createFramebuffer();if(te)for(let Gt=0,ee=Mt.length;Gt<ee;Gt++){const yt=A.get(Mt[Gt]);yt.__webglTexture===void 0&&(yt.__webglTexture=r.createTexture(),n.memory.textures++)}if(W.samples>0&&oe(W)===!1){It.__webglMultisampledFramebuffer=r.createFramebuffer(),It.__webglColorRenderbuffer=[],e.bindFramebuffer(r.FRAMEBUFFER,It.__webglMultisampledFramebuffer);for(let Gt=0;Gt<Mt.length;Gt++){const ee=Mt[Gt];It.__webglColorRenderbuffer[Gt]=r.createRenderbuffer(),r.bindRenderbuffer(r.RENDERBUFFER,It.__webglColorRenderbuffer[Gt]);const yt=s.convert(ee.format,ee.colorSpace),dt=s.convert(ee.type),bt=b(ee.internalFormat,yt,dt,ee.colorSpace,W.isXRRenderTarget===!0),Ft=Ht(W);r.renderbufferStorageMultisample(r.RENDERBUFFER,Ft,bt,W.width,W.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Gt,r.RENDERBUFFER,It.__webglColorRenderbuffer[Gt])}r.bindRenderbuffer(r.RENDERBUFFER,null),W.depthBuffer&&(It.__webglDepthRenderbuffer=r.createRenderbuffer(),Vt(It.__webglDepthRenderbuffer,W,!0)),e.bindFramebuffer(r.FRAMEBUFFER,null)}}if(Dt){e.bindTexture(r.TEXTURE_CUBE_MAP,St.__webglTexture),ut(r.TEXTURE_CUBE_MAP,U);for(let Gt=0;Gt<6;Gt++)if(U.mipmaps&&U.mipmaps.length>0)for(let ee=0;ee<U.mipmaps.length;ee++)Tt(It.__webglFramebuffer[Gt][ee],W,U,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+Gt,ee);else Tt(It.__webglFramebuffer[Gt],W,U,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+Gt,0);_(U)&&Q(r.TEXTURE_CUBE_MAP),e.unbindTexture()}else if(te){for(let Gt=0,ee=Mt.length;Gt<ee;Gt++){const yt=Mt[Gt],dt=A.get(yt);e.bindTexture(r.TEXTURE_2D,dt.__webglTexture),ut(r.TEXTURE_2D,yt),Tt(It.__webglFramebuffer,W,yt,r.COLOR_ATTACHMENT0+Gt,r.TEXTURE_2D,0),_(yt)&&Q(r.TEXTURE_2D)}e.unbindTexture()}else{let Gt=r.TEXTURE_2D;if((W.isWebGL3DRenderTarget||W.isWebGLArrayRenderTarget)&&(Gt=W.isWebGL3DRenderTarget?r.TEXTURE_3D:r.TEXTURE_2D_ARRAY),e.bindTexture(Gt,St.__webglTexture),ut(Gt,U),U.mipmaps&&U.mipmaps.length>0)for(let ee=0;ee<U.mipmaps.length;ee++)Tt(It.__webglFramebuffer[ee],W,U,r.COLOR_ATTACHMENT0,Gt,ee);else Tt(It.__webglFramebuffer,W,U,r.COLOR_ATTACHMENT0,Gt,0);_(U)&&Q(Gt),e.unbindTexture()}W.depthBuffer&&$t(W)}function Z(W){const U=W.textures;for(let It=0,St=U.length;It<St;It++){const Mt=U[It];if(_(Mt)){const Dt=D(W),te=A.get(Mt).__webglTexture;e.bindTexture(Dt,te),Q(Dt),e.unbindTexture()}}}const ue=[],qt=[];function Xt(W){if(W.samples>0){if(oe(W)===!1){const U=W.textures,It=W.width,St=W.height;let Mt=r.COLOR_BUFFER_BIT;const Dt=W.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,te=A.get(W),Gt=U.length>1;if(Gt)for(let yt=0;yt<U.length;yt++)e.bindFramebuffer(r.FRAMEBUFFER,te.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+yt,r.RENDERBUFFER,null),e.bindFramebuffer(r.FRAMEBUFFER,te.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+yt,r.TEXTURE_2D,null,0);e.bindFramebuffer(r.READ_FRAMEBUFFER,te.__webglMultisampledFramebuffer);const ee=W.texture.mipmaps;ee&&ee.length>0?e.bindFramebuffer(r.DRAW_FRAMEBUFFER,te.__webglFramebuffer[0]):e.bindFramebuffer(r.DRAW_FRAMEBUFFER,te.__webglFramebuffer);for(let yt=0;yt<U.length;yt++){if(W.resolveDepthBuffer&&(W.depthBuffer&&(Mt|=r.DEPTH_BUFFER_BIT),W.stencilBuffer&&W.resolveStencilBuffer&&(Mt|=r.STENCIL_BUFFER_BIT)),Gt){r.framebufferRenderbuffer(r.READ_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.RENDERBUFFER,te.__webglColorRenderbuffer[yt]);const dt=A.get(U[yt]).__webglTexture;r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,dt,0)}r.blitFramebuffer(0,0,It,St,0,0,It,St,Mt,r.NEAREST),d===!0&&(ue.length=0,qt.length=0,ue.push(r.COLOR_ATTACHMENT0+yt),W.depthBuffer&&W.resolveDepthBuffer===!1&&(ue.push(Dt),qt.push(Dt),r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,qt)),r.invalidateFramebuffer(r.READ_FRAMEBUFFER,ue))}if(e.bindFramebuffer(r.READ_FRAMEBUFFER,null),e.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),Gt)for(let yt=0;yt<U.length;yt++){e.bindFramebuffer(r.FRAMEBUFFER,te.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+yt,r.RENDERBUFFER,te.__webglColorRenderbuffer[yt]);const dt=A.get(U[yt]).__webglTexture;e.bindFramebuffer(r.FRAMEBUFFER,te.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+yt,r.TEXTURE_2D,dt,0)}e.bindFramebuffer(r.DRAW_FRAMEBUFFER,te.__webglMultisampledFramebuffer)}else if(W.depthBuffer&&W.resolveDepthBuffer===!1&&d){const U=W.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT;r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,[U])}}}function Ht(W){return Math.min(a.maxSamples,W.samples)}function oe(W){const U=A.get(W);return W.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&U.__useRenderToTexture!==!1}function Kt(W){const U=n.render.frame;E.get(W)!==U&&(E.set(W,U),W.update())}function Ee(W,U){const It=W.colorSpace,St=W.format,Mt=W.type;return W.isCompressedTexture===!0||W.isVideoTexture===!0||It!==LinearSRGBColorSpace&&It!==NoColorSpace&&(ColorManagement.getTransfer(It)===SRGBTransfer?(St!==RGBAFormat||Mt!==UnsignedByteType)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",It)),U}function be(W){return typeof HTMLImageElement<"u"&&W instanceof HTMLImageElement?(f.width=W.naturalWidth||W.width,f.height=W.naturalHeight||W.height):typeof VideoFrame<"u"&&W instanceof VideoFrame?(f.width=W.displayWidth,f.height=W.displayHeight):(f.width=W.width,f.height=W.height),f}this.allocateTextureUnit=tt,this.resetTextureUnits=rt,this.setTexture2D=pt,this.setTexture2DArray=ct,this.setTexture3D=$,this.setTextureCube=q,this.rebindTextures=ne,this.setupRenderTarget=Ae,this.updateRenderTargetMipmap=Z,this.updateMultisampleRenderTarget=Xt,this.setupDepthRenderbuffer=$t,this.setupFrameBufferTexture=Tt,this.useMultisampledRTT=oe}function WebGLUtils(r,t){function e(A,a=NoColorSpace){let s;const n=ColorManagement.getTransfer(a);if(A===UnsignedByteType)return r.UNSIGNED_BYTE;if(A===UnsignedShort4444Type)return r.UNSIGNED_SHORT_4_4_4_4;if(A===UnsignedShort5551Type)return r.UNSIGNED_SHORT_5_5_5_1;if(A===UnsignedInt5999Type)return r.UNSIGNED_INT_5_9_9_9_REV;if(A===ByteType)return r.BYTE;if(A===ShortType)return r.SHORT;if(A===UnsignedShortType)return r.UNSIGNED_SHORT;if(A===IntType)return r.INT;if(A===UnsignedIntType)return r.UNSIGNED_INT;if(A===FloatType)return r.FLOAT;if(A===HalfFloatType)return r.HALF_FLOAT;if(A===AlphaFormat)return r.ALPHA;if(A===RGBFormat)return r.RGB;if(A===RGBAFormat)return r.RGBA;if(A===DepthFormat)return r.DEPTH_COMPONENT;if(A===DepthStencilFormat)return r.DEPTH_STENCIL;if(A===RedFormat)return r.RED;if(A===RedIntegerFormat)return r.RED_INTEGER;if(A===RGFormat)return r.RG;if(A===RGIntegerFormat)return r.RG_INTEGER;if(A===RGBAIntegerFormat)return r.RGBA_INTEGER;if(A===RGB_S3TC_DXT1_Format||A===RGBA_S3TC_DXT1_Format||A===RGBA_S3TC_DXT3_Format||A===RGBA_S3TC_DXT5_Format)if(n===SRGBTransfer)if(s=t.get("WEBGL_compressed_texture_s3tc_srgb"),s!==null){if(A===RGB_S3TC_DXT1_Format)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(A===RGBA_S3TC_DXT1_Format)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(A===RGBA_S3TC_DXT3_Format)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(A===RGBA_S3TC_DXT5_Format)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(s=t.get("WEBGL_compressed_texture_s3tc"),s!==null){if(A===RGB_S3TC_DXT1_Format)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(A===RGBA_S3TC_DXT1_Format)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(A===RGBA_S3TC_DXT3_Format)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(A===RGBA_S3TC_DXT5_Format)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(A===RGB_PVRTC_4BPPV1_Format||A===RGB_PVRTC_2BPPV1_Format||A===RGBA_PVRTC_4BPPV1_Format||A===RGBA_PVRTC_2BPPV1_Format)if(s=t.get("WEBGL_compressed_texture_pvrtc"),s!==null){if(A===RGB_PVRTC_4BPPV1_Format)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(A===RGB_PVRTC_2BPPV1_Format)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(A===RGBA_PVRTC_4BPPV1_Format)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(A===RGBA_PVRTC_2BPPV1_Format)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(A===RGB_ETC1_Format||A===RGB_ETC2_Format||A===RGBA_ETC2_EAC_Format)if(s=t.get("WEBGL_compressed_texture_etc"),s!==null){if(A===RGB_ETC1_Format||A===RGB_ETC2_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(A===RGBA_ETC2_EAC_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(A===RGBA_ASTC_4x4_Format||A===RGBA_ASTC_5x4_Format||A===RGBA_ASTC_5x5_Format||A===RGBA_ASTC_6x5_Format||A===RGBA_ASTC_6x6_Format||A===RGBA_ASTC_8x5_Format||A===RGBA_ASTC_8x6_Format||A===RGBA_ASTC_8x8_Format||A===RGBA_ASTC_10x5_Format||A===RGBA_ASTC_10x6_Format||A===RGBA_ASTC_10x8_Format||A===RGBA_ASTC_10x10_Format||A===RGBA_ASTC_12x10_Format||A===RGBA_ASTC_12x12_Format)if(s=t.get("WEBGL_compressed_texture_astc"),s!==null){if(A===RGBA_ASTC_4x4_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(A===RGBA_ASTC_5x4_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(A===RGBA_ASTC_5x5_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(A===RGBA_ASTC_6x5_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(A===RGBA_ASTC_6x6_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(A===RGBA_ASTC_8x5_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(A===RGBA_ASTC_8x6_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(A===RGBA_ASTC_8x8_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(A===RGBA_ASTC_10x5_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(A===RGBA_ASTC_10x6_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(A===RGBA_ASTC_10x8_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(A===RGBA_ASTC_10x10_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(A===RGBA_ASTC_12x10_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(A===RGBA_ASTC_12x12_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(A===RGBA_BPTC_Format||A===RGB_BPTC_SIGNED_Format||A===RGB_BPTC_UNSIGNED_Format)if(s=t.get("EXT_texture_compression_bptc"),s!==null){if(A===RGBA_BPTC_Format)return n===SRGBTransfer?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(A===RGB_BPTC_SIGNED_Format)return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(A===RGB_BPTC_UNSIGNED_Format)return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(A===RED_RGTC1_Format||A===SIGNED_RED_RGTC1_Format||A===RED_GREEN_RGTC2_Format||A===SIGNED_RED_GREEN_RGTC2_Format)if(s=t.get("EXT_texture_compression_rgtc"),s!==null){if(A===RGBA_BPTC_Format)return s.COMPRESSED_RED_RGTC1_EXT;if(A===SIGNED_RED_RGTC1_Format)return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(A===RED_GREEN_RGTC2_Format)return s.COMPRESSED_RED_GREEN_RGTC2_EXT;if(A===SIGNED_RED_GREEN_RGTC2_Format)return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return A===UnsignedInt248Type?r.UNSIGNED_INT_24_8:r[A]!==void 0?r[A]:null}return{convert:e}}const _occlusion_vertex=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,_occlusion_fragment=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class WebXRDepthSensing{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(t,e,A){if(this.texture===null){const a=new Texture,s=t.properties.get(a);s.__webglTexture=e.texture,(e.depthNear!==A.depthNear||e.depthFar!==A.depthFar)&&(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=a}}getMesh(t){if(this.texture!==null&&this.mesh===null){const e=t.cameras[0].viewport,A=new ShaderMaterial({vertexShader:_occlusion_vertex,fragmentShader:_occlusion_fragment,uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new Mesh(new PlaneGeometry(20,20),A)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class WebXRManager extends EventDispatcher{constructor(t,e){super();const A=this;let a=null,s=1,n=null,l="local-floor",d=1,f=null,E=null,I=null,B=null,y=null,v=null;const S=new WebXRDepthSensing,_=e.getContextAttributes();let Q=null,D=null;const b=[],T=[],P=new Vector2;let R=null;const F=new PerspectiveCamera;F.viewport=new Vector4;const O=new PerspectiveCamera;O.viewport=new Vector4;const N=[F,O],L=new ArrayCamera;let Y=null,rt=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(J){let At=b[J];return At===void 0&&(At=new WebXRController,b[J]=At),At.getTargetRaySpace()},this.getControllerGrip=function(J){let At=b[J];return At===void 0&&(At=new WebXRController,b[J]=At),At.getGripSpace()},this.getHand=function(J){let At=b[J];return At===void 0&&(At=new WebXRController,b[J]=At),At.getHandSpace()};function tt(J){const At=T.indexOf(J.inputSource);if(At===-1)return;const xt=b[At];xt!==void 0&&(xt.update(J.inputSource,J.frame,f||n),xt.dispatchEvent({type:J.type,data:J.inputSource}))}function at(){a.removeEventListener("select",tt),a.removeEventListener("selectstart",tt),a.removeEventListener("selectend",tt),a.removeEventListener("squeeze",tt),a.removeEventListener("squeezestart",tt),a.removeEventListener("squeezeend",tt),a.removeEventListener("end",at),a.removeEventListener("inputsourceschange",pt);for(let J=0;J<b.length;J++){const At=T[J];At!==null&&(T[J]=null,b[J].disconnect(At))}Y=null,rt=null,S.reset(),t.setRenderTarget(Q),y=null,B=null,I=null,a=null,D=null,K.stop(),A.isPresenting=!1,t.setPixelRatio(R),t.setSize(P.width,P.height,!1),A.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(J){s=J,A.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(J){l=J,A.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return f||n},this.setReferenceSpace=function(J){f=J},this.getBaseLayer=function(){return B!==null?B:y},this.getBinding=function(){return I},this.getFrame=function(){return v},this.getSession=function(){return a},this.setSession=async function(J){if(a=J,a!==null){if(Q=t.getRenderTarget(),a.addEventListener("select",tt),a.addEventListener("selectstart",tt),a.addEventListener("selectend",tt),a.addEventListener("squeeze",tt),a.addEventListener("squeezestart",tt),a.addEventListener("squeezeend",tt),a.addEventListener("end",at),a.addEventListener("inputsourceschange",pt),_.xrCompatible!==!0&&await e.makeXRCompatible(),R=t.getPixelRatio(),t.getSize(P),typeof XRWebGLBinding<"u"&&"createProjectionLayer"in XRWebGLBinding.prototype){let xt=null,mt=null,Tt=null;_.depth&&(Tt=_.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,xt=_.stencil?DepthStencilFormat:DepthFormat,mt=_.stencil?UnsignedInt248Type:UnsignedIntType);const Vt={colorFormat:e.RGBA8,depthFormat:Tt,scaleFactor:s};I=new XRWebGLBinding(a,e),B=I.createProjectionLayer(Vt),a.updateRenderState({layers:[B]}),t.setPixelRatio(1),t.setSize(B.textureWidth,B.textureHeight,!1),D=new WebGLRenderTarget(B.textureWidth,B.textureHeight,{format:RGBAFormat,type:UnsignedByteType,depthTexture:new DepthTexture(B.textureWidth,B.textureHeight,mt,void 0,void 0,void 0,void 0,void 0,void 0,xt),stencilBuffer:_.stencil,colorSpace:t.outputColorSpace,samples:_.antialias?4:0,resolveDepthBuffer:B.ignoreDepthValues===!1,resolveStencilBuffer:B.ignoreDepthValues===!1})}else{const xt={antialias:_.antialias,alpha:!0,depth:_.depth,stencil:_.stencil,framebufferScaleFactor:s};y=new XRWebGLLayer(a,e,xt),a.updateRenderState({baseLayer:y}),t.setPixelRatio(1),t.setSize(y.framebufferWidth,y.framebufferHeight,!1),D=new WebGLRenderTarget(y.framebufferWidth,y.framebufferHeight,{format:RGBAFormat,type:UnsignedByteType,colorSpace:t.outputColorSpace,stencilBuffer:_.stencil,resolveDepthBuffer:y.ignoreDepthValues===!1,resolveStencilBuffer:y.ignoreDepthValues===!1})}D.isXRRenderTarget=!0,this.setFoveation(d),f=null,n=await a.requestReferenceSpace(l),K.setContext(a),K.start(),A.isPresenting=!0,A.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(a!==null)return a.environmentBlendMode},this.getDepthTexture=function(){return S.getDepthTexture()};function pt(J){for(let At=0;At<J.removed.length;At++){const xt=J.removed[At],mt=T.indexOf(xt);mt>=0&&(T[mt]=null,b[mt].disconnect(xt))}for(let At=0;At<J.added.length;At++){const xt=J.added[At];let mt=T.indexOf(xt);if(mt===-1){for(let Vt=0;Vt<b.length;Vt++)if(Vt>=T.length){T.push(xt),mt=Vt;break}else if(T[Vt]===null){T[Vt]=xt,mt=Vt;break}if(mt===-1)break}const Tt=b[mt];Tt&&Tt.connect(xt)}}const ct=new Vector3,$=new Vector3;function q(J,At,xt){ct.setFromMatrixPosition(At.matrixWorld),$.setFromMatrixPosition(xt.matrixWorld);const mt=ct.distanceTo($),Tt=At.projectionMatrix.elements,Vt=xt.projectionMatrix.elements,Nt=Tt[14]/(Tt[10]-1),$t=Tt[14]/(Tt[10]+1),ne=(Tt[9]+1)/Tt[5],Ae=(Tt[9]-1)/Tt[5],Z=(Tt[8]-1)/Tt[0],ue=(Vt[8]+1)/Vt[0],qt=Nt*Z,Xt=Nt*ue,Ht=mt/(-Z+ue),oe=Ht*-Z;if(At.matrixWorld.decompose(J.position,J.quaternion,J.scale),J.translateX(oe),J.translateZ(Ht),J.matrixWorld.compose(J.position,J.quaternion,J.scale),J.matrixWorldInverse.copy(J.matrixWorld).invert(),Tt[10]===-1)J.projectionMatrix.copy(At.projectionMatrix),J.projectionMatrixInverse.copy(At.projectionMatrixInverse);else{const Kt=Nt+Ht,Ee=$t+Ht,be=qt-oe,W=Xt+(mt-oe),U=ne*$t/Ee*Kt,It=Ae*$t/Ee*Kt;J.projectionMatrix.makePerspective(be,W,U,It,Kt,Ee),J.projectionMatrixInverse.copy(J.projectionMatrix).invert()}}function Ct(J,At){At===null?J.matrixWorld.copy(J.matrix):J.matrixWorld.multiplyMatrices(At.matrixWorld,J.matrix),J.matrixWorldInverse.copy(J.matrixWorld).invert()}this.updateCamera=function(J){if(a===null)return;let At=J.near,xt=J.far;S.texture!==null&&(S.depthNear>0&&(At=S.depthNear),S.depthFar>0&&(xt=S.depthFar)),L.near=O.near=F.near=At,L.far=O.far=F.far=xt,(Y!==L.near||rt!==L.far)&&(a.updateRenderState({depthNear:L.near,depthFar:L.far}),Y=L.near,rt=L.far),F.layers.mask=J.layers.mask|2,O.layers.mask=J.layers.mask|4,L.layers.mask=F.layers.mask|O.layers.mask;const mt=J.parent,Tt=L.cameras;Ct(L,mt);for(let Vt=0;Vt<Tt.length;Vt++)Ct(Tt[Vt],mt);Tt.length===2?q(L,F,O):L.projectionMatrix.copy(F.projectionMatrix),wt(J,L,mt)};function wt(J,At,xt){xt===null?J.matrix.copy(At.matrixWorld):(J.matrix.copy(xt.matrixWorld),J.matrix.invert(),J.matrix.multiply(At.matrixWorld)),J.matrix.decompose(J.position,J.quaternion,J.scale),J.updateMatrixWorld(!0),J.projectionMatrix.copy(At.projectionMatrix),J.projectionMatrixInverse.copy(At.projectionMatrixInverse),J.isPerspectiveCamera&&(J.fov=RAD2DEG*2*Math.atan(1/J.projectionMatrix.elements[5]),J.zoom=1)}this.getCamera=function(){return L},this.getFoveation=function(){if(!(B===null&&y===null))return d},this.setFoveation=function(J){d=J,B!==null&&(B.fixedFoveation=J),y!==null&&y.fixedFoveation!==void 0&&(y.fixedFoveation=J)},this.hasDepthSensing=function(){return S.texture!==null},this.getDepthSensingMesh=function(){return S.getMesh(L)};let Bt=null;function ut(J,At){if(E=At.getViewerPose(f||n),v=At,E!==null){const xt=E.views;y!==null&&(t.setRenderTargetFramebuffer(D,y.framebuffer),t.setRenderTarget(D));let mt=!1;xt.length!==L.cameras.length&&(L.cameras.length=0,mt=!0);for(let Nt=0;Nt<xt.length;Nt++){const $t=xt[Nt];let ne=null;if(y!==null)ne=y.getViewport($t);else{const Z=I.getViewSubImage(B,$t);ne=Z.viewport,Nt===0&&(t.setRenderTargetTextures(D,Z.colorTexture,Z.depthStencilTexture),t.setRenderTarget(D))}let Ae=N[Nt];Ae===void 0&&(Ae=new PerspectiveCamera,Ae.layers.enable(Nt),Ae.viewport=new Vector4,N[Nt]=Ae),Ae.matrix.fromArray($t.transform.matrix),Ae.matrix.decompose(Ae.position,Ae.quaternion,Ae.scale),Ae.projectionMatrix.fromArray($t.projectionMatrix),Ae.projectionMatrixInverse.copy(Ae.projectionMatrix).invert(),Ae.viewport.set(ne.x,ne.y,ne.width,ne.height),Nt===0&&(L.matrix.copy(Ae.matrix),L.matrix.decompose(L.position,L.quaternion,L.scale)),mt===!0&&L.cameras.push(Ae)}const Tt=a.enabledFeatures;if(Tt&&Tt.includes("depth-sensing")&&a.depthUsage=="gpu-optimized"&&I){const Nt=I.getDepthInformation(xt[0]);Nt&&Nt.isValid&&Nt.texture&&S.init(t,Nt,a.renderState)}}for(let xt=0;xt<b.length;xt++){const mt=T[xt],Tt=b[xt];mt!==null&&Tt!==void 0&&Tt.update(mt,At,f||n)}Bt&&Bt(J,At),At.detectedPlanes&&A.dispatchEvent({type:"planesdetected",data:At}),v=null}const K=new WebGLAnimation;K.setAnimationLoop(ut),this.setAnimationLoop=function(J){Bt=J},this.dispose=function(){}}}const _e1=new Euler,_m1=new Matrix4;function WebGLMaterials(r,t){function e(_,Q){_.matrixAutoUpdate===!0&&_.updateMatrix(),Q.value.copy(_.matrix)}function A(_,Q){Q.color.getRGB(_.fogColor.value,getUnlitUniformColorSpace(r)),Q.isFog?(_.fogNear.value=Q.near,_.fogFar.value=Q.far):Q.isFogExp2&&(_.fogDensity.value=Q.density)}function a(_,Q,D,b,T){Q.isMeshBasicMaterial||Q.isMeshLambertMaterial?s(_,Q):Q.isMeshToonMaterial?(s(_,Q),I(_,Q)):Q.isMeshPhongMaterial?(s(_,Q),E(_,Q)):Q.isMeshStandardMaterial?(s(_,Q),B(_,Q),Q.isMeshPhysicalMaterial&&y(_,Q,T)):Q.isMeshMatcapMaterial?(s(_,Q),v(_,Q)):Q.isMeshDepthMaterial?s(_,Q):Q.isMeshDistanceMaterial?(s(_,Q),S(_,Q)):Q.isMeshNormalMaterial?s(_,Q):Q.isLineBasicMaterial?(n(_,Q),Q.isLineDashedMaterial&&l(_,Q)):Q.isPointsMaterial?d(_,Q,D,b):Q.isSpriteMaterial?f(_,Q):Q.isShadowMaterial?(_.color.value.copy(Q.color),_.opacity.value=Q.opacity):Q.isShaderMaterial&&(Q.uniformsNeedUpdate=!1)}function s(_,Q){_.opacity.value=Q.opacity,Q.color&&_.diffuse.value.copy(Q.color),Q.emissive&&_.emissive.value.copy(Q.emissive).multiplyScalar(Q.emissiveIntensity),Q.map&&(_.map.value=Q.map,e(Q.map,_.mapTransform)),Q.alphaMap&&(_.alphaMap.value=Q.alphaMap,e(Q.alphaMap,_.alphaMapTransform)),Q.bumpMap&&(_.bumpMap.value=Q.bumpMap,e(Q.bumpMap,_.bumpMapTransform),_.bumpScale.value=Q.bumpScale,Q.side===BackSide&&(_.bumpScale.value*=-1)),Q.normalMap&&(_.normalMap.value=Q.normalMap,e(Q.normalMap,_.normalMapTransform),_.normalScale.value.copy(Q.normalScale),Q.side===BackSide&&_.normalScale.value.negate()),Q.displacementMap&&(_.displacementMap.value=Q.displacementMap,e(Q.displacementMap,_.displacementMapTransform),_.displacementScale.value=Q.displacementScale,_.displacementBias.value=Q.displacementBias),Q.emissiveMap&&(_.emissiveMap.value=Q.emissiveMap,e(Q.emissiveMap,_.emissiveMapTransform)),Q.specularMap&&(_.specularMap.value=Q.specularMap,e(Q.specularMap,_.specularMapTransform)),Q.alphaTest>0&&(_.alphaTest.value=Q.alphaTest);const D=t.get(Q),b=D.envMap,T=D.envMapRotation;b&&(_.envMap.value=b,_e1.copy(T),_e1.x*=-1,_e1.y*=-1,_e1.z*=-1,b.isCubeTexture&&b.isRenderTargetTexture===!1&&(_e1.y*=-1,_e1.z*=-1),_.envMapRotation.value.setFromMatrix4(_m1.makeRotationFromEuler(_e1)),_.flipEnvMap.value=b.isCubeTexture&&b.isRenderTargetTexture===!1?-1:1,_.reflectivity.value=Q.reflectivity,_.ior.value=Q.ior,_.refractionRatio.value=Q.refractionRatio),Q.lightMap&&(_.lightMap.value=Q.lightMap,_.lightMapIntensity.value=Q.lightMapIntensity,e(Q.lightMap,_.lightMapTransform)),Q.aoMap&&(_.aoMap.value=Q.aoMap,_.aoMapIntensity.value=Q.aoMapIntensity,e(Q.aoMap,_.aoMapTransform))}function n(_,Q){_.diffuse.value.copy(Q.color),_.opacity.value=Q.opacity,Q.map&&(_.map.value=Q.map,e(Q.map,_.mapTransform))}function l(_,Q){_.dashSize.value=Q.dashSize,_.totalSize.value=Q.dashSize+Q.gapSize,_.scale.value=Q.scale}function d(_,Q,D,b){_.diffuse.value.copy(Q.color),_.opacity.value=Q.opacity,_.size.value=Q.size*D,_.scale.value=b*.5,Q.map&&(_.map.value=Q.map,e(Q.map,_.uvTransform)),Q.alphaMap&&(_.alphaMap.value=Q.alphaMap,e(Q.alphaMap,_.alphaMapTransform)),Q.alphaTest>0&&(_.alphaTest.value=Q.alphaTest)}function f(_,Q){_.diffuse.value.copy(Q.color),_.opacity.value=Q.opacity,_.rotation.value=Q.rotation,Q.map&&(_.map.value=Q.map,e(Q.map,_.mapTransform)),Q.alphaMap&&(_.alphaMap.value=Q.alphaMap,e(Q.alphaMap,_.alphaMapTransform)),Q.alphaTest>0&&(_.alphaTest.value=Q.alphaTest)}function E(_,Q){_.specular.value.copy(Q.specular),_.shininess.value=Math.max(Q.shininess,1e-4)}function I(_,Q){Q.gradientMap&&(_.gradientMap.value=Q.gradientMap)}function B(_,Q){_.metalness.value=Q.metalness,Q.metalnessMap&&(_.metalnessMap.value=Q.metalnessMap,e(Q.metalnessMap,_.metalnessMapTransform)),_.roughness.value=Q.roughness,Q.roughnessMap&&(_.roughnessMap.value=Q.roughnessMap,e(Q.roughnessMap,_.roughnessMapTransform)),Q.envMap&&(_.envMapIntensity.value=Q.envMapIntensity)}function y(_,Q,D){_.ior.value=Q.ior,Q.sheen>0&&(_.sheenColor.value.copy(Q.sheenColor).multiplyScalar(Q.sheen),_.sheenRoughness.value=Q.sheenRoughness,Q.sheenColorMap&&(_.sheenColorMap.value=Q.sheenColorMap,e(Q.sheenColorMap,_.sheenColorMapTransform)),Q.sheenRoughnessMap&&(_.sheenRoughnessMap.value=Q.sheenRoughnessMap,e(Q.sheenRoughnessMap,_.sheenRoughnessMapTransform))),Q.clearcoat>0&&(_.clearcoat.value=Q.clearcoat,_.clearcoatRoughness.value=Q.clearcoatRoughness,Q.clearcoatMap&&(_.clearcoatMap.value=Q.clearcoatMap,e(Q.clearcoatMap,_.clearcoatMapTransform)),Q.clearcoatRoughnessMap&&(_.clearcoatRoughnessMap.value=Q.clearcoatRoughnessMap,e(Q.clearcoatRoughnessMap,_.clearcoatRoughnessMapTransform)),Q.clearcoatNormalMap&&(_.clearcoatNormalMap.value=Q.clearcoatNormalMap,e(Q.clearcoatNormalMap,_.clearcoatNormalMapTransform),_.clearcoatNormalScale.value.copy(Q.clearcoatNormalScale),Q.side===BackSide&&_.clearcoatNormalScale.value.negate())),Q.dispersion>0&&(_.dispersion.value=Q.dispersion),Q.iridescence>0&&(_.iridescence.value=Q.iridescence,_.iridescenceIOR.value=Q.iridescenceIOR,_.iridescenceThicknessMinimum.value=Q.iridescenceThicknessRange[0],_.iridescenceThicknessMaximum.value=Q.iridescenceThicknessRange[1],Q.iridescenceMap&&(_.iridescenceMap.value=Q.iridescenceMap,e(Q.iridescenceMap,_.iridescenceMapTransform)),Q.iridescenceThicknessMap&&(_.iridescenceThicknessMap.value=Q.iridescenceThicknessMap,e(Q.iridescenceThicknessMap,_.iridescenceThicknessMapTransform))),Q.transmission>0&&(_.transmission.value=Q.transmission,_.transmissionSamplerMap.value=D.texture,_.transmissionSamplerSize.value.set(D.width,D.height),Q.transmissionMap&&(_.transmissionMap.value=Q.transmissionMap,e(Q.transmissionMap,_.transmissionMapTransform)),_.thickness.value=Q.thickness,Q.thicknessMap&&(_.thicknessMap.value=Q.thicknessMap,e(Q.thicknessMap,_.thicknessMapTransform)),_.attenuationDistance.value=Q.attenuationDistance,_.attenuationColor.value.copy(Q.attenuationColor)),Q.anisotropy>0&&(_.anisotropyVector.value.set(Q.anisotropy*Math.cos(Q.anisotropyRotation),Q.anisotropy*Math.sin(Q.anisotropyRotation)),Q.anisotropyMap&&(_.anisotropyMap.value=Q.anisotropyMap,e(Q.anisotropyMap,_.anisotropyMapTransform))),_.specularIntensity.value=Q.specularIntensity,_.specularColor.value.copy(Q.specularColor),Q.specularColorMap&&(_.specularColorMap.value=Q.specularColorMap,e(Q.specularColorMap,_.specularColorMapTransform)),Q.specularIntensityMap&&(_.specularIntensityMap.value=Q.specularIntensityMap,e(Q.specularIntensityMap,_.specularIntensityMapTransform))}function v(_,Q){Q.matcap&&(_.matcap.value=Q.matcap)}function S(_,Q){const D=t.get(Q).light;_.referencePosition.value.setFromMatrixPosition(D.matrixWorld),_.nearDistance.value=D.shadow.camera.near,_.farDistance.value=D.shadow.camera.far}return{refreshFogUniforms:A,refreshMaterialUniforms:a}}function WebGLUniformsGroups(r,t,e,A){let a={},s={},n=[];const l=r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS);function d(D,b){const T=b.program;A.uniformBlockBinding(D,T)}function f(D,b){let T=a[D.id];T===void 0&&(v(D),T=E(D),a[D.id]=T,D.addEventListener("dispose",_));const P=b.program;A.updateUBOMapping(D,P);const R=t.render.frame;s[D.id]!==R&&(B(D),s[D.id]=R)}function E(D){const b=I();D.__bindingPointIndex=b;const T=r.createBuffer(),P=D.__size,R=D.usage;return r.bindBuffer(r.UNIFORM_BUFFER,T),r.bufferData(r.UNIFORM_BUFFER,P,R),r.bindBuffer(r.UNIFORM_BUFFER,null),r.bindBufferBase(r.UNIFORM_BUFFER,b,T),T}function I(){for(let D=0;D<l;D++)if(n.indexOf(D)===-1)return n.push(D),D;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function B(D){const b=a[D.id],T=D.uniforms,P=D.__cache;r.bindBuffer(r.UNIFORM_BUFFER,b);for(let R=0,F=T.length;R<F;R++){const O=Array.isArray(T[R])?T[R]:[T[R]];for(let N=0,L=O.length;N<L;N++){const Y=O[N];if(y(Y,R,N,P)===!0){const rt=Y.__offset,tt=Array.isArray(Y.value)?Y.value:[Y.value];let at=0;for(let pt=0;pt<tt.length;pt++){const ct=tt[pt],$=S(ct);typeof ct=="number"||typeof ct=="boolean"?(Y.__data[0]=ct,r.bufferSubData(r.UNIFORM_BUFFER,rt+at,Y.__data)):ct.isMatrix3?(Y.__data[0]=ct.elements[0],Y.__data[1]=ct.elements[1],Y.__data[2]=ct.elements[2],Y.__data[3]=0,Y.__data[4]=ct.elements[3],Y.__data[5]=ct.elements[4],Y.__data[6]=ct.elements[5],Y.__data[7]=0,Y.__data[8]=ct.elements[6],Y.__data[9]=ct.elements[7],Y.__data[10]=ct.elements[8],Y.__data[11]=0):(ct.toArray(Y.__data,at),at+=$.storage/Float32Array.BYTES_PER_ELEMENT)}r.bufferSubData(r.UNIFORM_BUFFER,rt,Y.__data)}}}r.bindBuffer(r.UNIFORM_BUFFER,null)}function y(D,b,T,P){const R=D.value,F=b+"_"+T;if(P[F]===void 0)return typeof R=="number"||typeof R=="boolean"?P[F]=R:P[F]=R.clone(),!0;{const O=P[F];if(typeof R=="number"||typeof R=="boolean"){if(O!==R)return P[F]=R,!0}else if(O.equals(R)===!1)return O.copy(R),!0}return!1}function v(D){const b=D.uniforms;let T=0;const P=16;for(let F=0,O=b.length;F<O;F++){const N=Array.isArray(b[F])?b[F]:[b[F]];for(let L=0,Y=N.length;L<Y;L++){const rt=N[L],tt=Array.isArray(rt.value)?rt.value:[rt.value];for(let at=0,pt=tt.length;at<pt;at++){const ct=tt[at],$=S(ct),q=T%P,Ct=q%$.boundary,wt=q+Ct;T+=Ct,wt!==0&&P-wt<$.storage&&(T+=P-wt),rt.__data=new Float32Array($.storage/Float32Array.BYTES_PER_ELEMENT),rt.__offset=T,T+=$.storage}}}const R=T%P;return R>0&&(T+=P-R),D.__size=T,D.__cache={},this}function S(D){const b={boundary:0,storage:0};return typeof D=="number"||typeof D=="boolean"?(b.boundary=4,b.storage=4):D.isVector2?(b.boundary=8,b.storage=8):D.isVector3||D.isColor?(b.boundary=16,b.storage=12):D.isVector4?(b.boundary=16,b.storage=16):D.isMatrix3?(b.boundary=48,b.storage=48):D.isMatrix4?(b.boundary=64,b.storage=64):D.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",D),b}function _(D){const b=D.target;b.removeEventListener("dispose",_);const T=n.indexOf(b.__bindingPointIndex);n.splice(T,1),r.deleteBuffer(a[b.id]),delete a[b.id],delete s[b.id]}function Q(){for(const D in a)r.deleteBuffer(a[D]);n=[],a={},s={}}return{bind:d,update:f,dispose:Q}}class WebGLRenderer{constructor(t={}){const{canvas:e=createCanvasElement(),context:A=null,depth:a=!0,stencil:s=!1,alpha:n=!1,antialias:l=!1,premultipliedAlpha:d=!0,preserveDrawingBuffer:f=!1,powerPreference:E="default",failIfMajorPerformanceCaveat:I=!1,reverseDepthBuffer:B=!1}=t;this.isWebGLRenderer=!0;let y;if(A!==null){if(typeof WebGLRenderingContext<"u"&&A instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");y=A.getContextAttributes().alpha}else y=n;const v=new Uint32Array(4),S=new Int32Array(4);let _=null,Q=null;const D=[],b=[];this.domElement=e,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.toneMapping=NoToneMapping,this.toneMappingExposure=1,this.transmissionResolutionScale=1;const T=this;let P=!1;this._outputColorSpace=SRGBColorSpace;let R=0,F=0,O=null,N=-1,L=null;const Y=new Vector4,rt=new Vector4;let tt=null;const at=new Color(0);let pt=0,ct=e.width,$=e.height,q=1,Ct=null,wt=null;const Bt=new Vector4(0,0,ct,$),ut=new Vector4(0,0,ct,$);let K=!1;const J=new Frustum;let At=!1,xt=!1;const mt=new Matrix4,Tt=new Matrix4,Vt=new Vector3,Nt=new Vector4,$t={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let ne=!1;function Ae(){return O===null?q:1}let Z=A;function ue(H,st){return e.getContext(H,st)}try{const H={alpha:!0,depth:a,stencil:s,antialias:l,premultipliedAlpha:d,preserveDrawingBuffer:f,powerPreference:E,failIfMajorPerformanceCaveat:I};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${REVISION}`),e.addEventListener("webglcontextlost",lt,!1),e.addEventListener("webglcontextrestored",gt,!1),e.addEventListener("webglcontextcreationerror",ft,!1),Z===null){const st="webgl2";if(Z=ue(st,H),Z===null)throw ue(st)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(H){throw console.error("THREE.WebGLRenderer: "+H.message),H}let qt,Xt,Ht,oe,Kt,Ee,be,W,U,It,St,Mt,Dt,te,Gt,ee,yt,dt,bt,Ft,Jt,Ut,de,G;function it(){qt=new WebGLExtensions(Z),qt.init(),Ut=new WebGLUtils(Z,qt),Xt=new WebGLCapabilities(Z,qt,t,Ut),Ht=new WebGLState(Z,qt),Xt.reverseDepthBuffer&&B&&Ht.buffers.depth.setReversed(!0),oe=new WebGLInfo(Z),Kt=new WebGLProperties,Ee=new WebGLTextures(Z,qt,Ht,Kt,Xt,Ut,oe),be=new WebGLCubeMaps(T),W=new WebGLCubeUVMaps(T),U=new WebGLAttributes(Z),de=new WebGLBindingStates(Z,U),It=new WebGLGeometries(Z,U,oe,de),St=new WebGLObjects(Z,It,U,oe),bt=new WebGLMorphtargets(Z,Xt,Ee),ee=new WebGLClipping(Kt),Mt=new WebGLPrograms(T,be,W,qt,Xt,de,ee),Dt=new WebGLMaterials(T,Kt),te=new WebGLRenderLists,Gt=new WebGLRenderStates(qt),dt=new WebGLBackground(T,be,W,Ht,St,y,d),yt=new WebGLShadowMap(T,St,Xt),G=new WebGLUniformsGroups(Z,oe,Xt,Ht),Ft=new WebGLBufferRenderer(Z,qt,oe),Jt=new WebGLIndexedBufferRenderer(Z,qt,oe),oe.programs=Mt.programs,T.capabilities=Xt,T.extensions=qt,T.properties=Kt,T.renderLists=te,T.shadowMap=yt,T.state=Ht,T.info=oe}it();const j=new WebXRManager(T,Z);this.xr=j,this.getContext=function(){return Z},this.getContextAttributes=function(){return Z.getContextAttributes()},this.forceContextLoss=function(){const H=qt.get("WEBGL_lose_context");H&&H.loseContext()},this.forceContextRestore=function(){const H=qt.get("WEBGL_lose_context");H&&H.restoreContext()},this.getPixelRatio=function(){return q},this.setPixelRatio=function(H){H!==void 0&&(q=H,this.setSize(ct,$,!1))},this.getSize=function(H){return H.set(ct,$)},this.setSize=function(H,st,_t=!0){if(j.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}ct=H,$=st,e.width=Math.floor(H*q),e.height=Math.floor(st*q),_t===!0&&(e.style.width=H+"px",e.style.height=st+"px"),this.setViewport(0,0,H,st)},this.getDrawingBufferSize=function(H){return H.set(ct*q,$*q).floor()},this.setDrawingBufferSize=function(H,st,_t){ct=H,$=st,q=_t,e.width=Math.floor(H*_t),e.height=Math.floor(st*_t),this.setViewport(0,0,H,st)},this.getCurrentViewport=function(H){return H.copy(Y)},this.getViewport=function(H){return H.copy(Bt)},this.setViewport=function(H,st,_t,vt){H.isVector4?Bt.set(H.x,H.y,H.z,H.w):Bt.set(H,st,_t,vt),Ht.viewport(Y.copy(Bt).multiplyScalar(q).round())},this.getScissor=function(H){return H.copy(ut)},this.setScissor=function(H,st,_t,vt){H.isVector4?ut.set(H.x,H.y,H.z,H.w):ut.set(H,st,_t,vt),Ht.scissor(rt.copy(ut).multiplyScalar(q).round())},this.getScissorTest=function(){return K},this.setScissorTest=function(H){Ht.setScissorTest(K=H)},this.setOpaqueSort=function(H){Ct=H},this.setTransparentSort=function(H){wt=H},this.getClearColor=function(H){return H.copy(dt.getClearColor())},this.setClearColor=function(){dt.setClearColor(...arguments)},this.getClearAlpha=function(){return dt.getClearAlpha()},this.setClearAlpha=function(){dt.setClearAlpha(...arguments)},this.clear=function(H=!0,st=!0,_t=!0){let vt=0;if(H){let ht=!1;if(O!==null){const Ot=O.texture.format;ht=Ot===RGBAIntegerFormat||Ot===RGIntegerFormat||Ot===RedIntegerFormat}if(ht){const Ot=O.texture.type,jt=Ot===UnsignedByteType||Ot===UnsignedIntType||Ot===UnsignedShortType||Ot===UnsignedInt248Type||Ot===UnsignedShort4444Type||Ot===UnsignedShort5551Type,ge=dt.getClearColor(),re=dt.getClearAlpha(),Be=ge.r,me=ge.g,fe=ge.b;jt?(v[0]=Be,v[1]=me,v[2]=fe,v[3]=re,Z.clearBufferuiv(Z.COLOR,0,v)):(S[0]=Be,S[1]=me,S[2]=fe,S[3]=re,Z.clearBufferiv(Z.COLOR,0,S))}else vt|=Z.COLOR_BUFFER_BIT}st&&(vt|=Z.DEPTH_BUFFER_BIT),_t&&(vt|=Z.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),Z.clear(vt)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",lt,!1),e.removeEventListener("webglcontextrestored",gt,!1),e.removeEventListener("webglcontextcreationerror",ft,!1),dt.dispose(),te.dispose(),Gt.dispose(),Kt.dispose(),be.dispose(),W.dispose(),St.dispose(),de.dispose(),G.dispose(),Mt.dispose(),j.dispose(),j.removeEventListener("sessionstart",ln),j.removeEventListener("sessionend",an),je.stop()};function lt(H){H.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),P=!0}function gt(){console.log("THREE.WebGLRenderer: Context Restored."),P=!1;const H=oe.autoReset,st=yt.enabled,_t=yt.autoUpdate,vt=yt.needsUpdate,ht=yt.type;it(),oe.autoReset=H,yt.enabled=st,yt.autoUpdate=_t,yt.needsUpdate=vt,yt.type=ht}function ft(H){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",H.statusMessage)}function Lt(H){const st=H.target;st.removeEventListener("dispose",Lt),ie(st)}function ie(H){Qe(H),Kt.remove(H)}function Qe(H){const st=Kt.get(H).programs;st!==void 0&&(st.forEach(function(_t){Mt.releaseProgram(_t)}),H.isShaderMaterial&&Mt.releaseShaderCache(H))}this.renderBufferDirect=function(H,st,_t,vt,ht,Ot){st===null&&(st=$t);const jt=ht.isMesh&&ht.matrixWorld.determinant()<0,ge=On(H,st,_t,vt,ht);Ht.setMaterial(vt,jt);let re=_t.index,Be=1;if(vt.wireframe===!0){if(re=It.getWireframeAttribute(_t),re===void 0)return;Be=2}const me=_t.drawRange,fe=_t.attributes.position;let Me=me.start*Be,Pe=(me.start+me.count)*Be;Ot!==null&&(Me=Math.max(Me,Ot.start*Be),Pe=Math.min(Pe,(Ot.start+Ot.count)*Be)),re!==null?(Me=Math.max(Me,0),Pe=Math.min(Pe,re.count)):fe!=null&&(Me=Math.max(Me,0),Pe=Math.min(Pe,fe.count));const qe=Pe-Me;if(qe<0||qe===1/0)return;de.setup(ht,vt,ge,_t,re);let Ke,Ue=Ft;if(re!==null&&(Ke=U.get(re),Ue=Jt,Ue.setIndex(Ke)),ht.isMesh)vt.wireframe===!0?(Ht.setLineWidth(vt.wireframeLinewidth*Ae()),Ue.setMode(Z.LINES)):Ue.setMode(Z.TRIANGLES);else if(ht.isLine){let Ce=vt.linewidth;Ce===void 0&&(Ce=1),Ht.setLineWidth(Ce*Ae()),ht.isLineSegments?Ue.setMode(Z.LINES):ht.isLineLoop?Ue.setMode(Z.LINE_LOOP):Ue.setMode(Z.LINE_STRIP)}else ht.isPoints?Ue.setMode(Z.POINTS):ht.isSprite&&Ue.setMode(Z.TRIANGLES);if(ht.isBatchedMesh)if(ht._multiDrawInstances!==null)warnOnce("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),Ue.renderMultiDrawInstances(ht._multiDrawStarts,ht._multiDrawCounts,ht._multiDrawCount,ht._multiDrawInstances);else if(qt.get("WEBGL_multi_draw"))Ue.renderMultiDraw(ht._multiDrawStarts,ht._multiDrawCounts,ht._multiDrawCount);else{const Ce=ht._multiDrawStarts,Xe=ht._multiDrawCounts,Fe=ht._multiDrawCount,Bn=re?U.get(re).bytesPerElement:1,Yn=Kt.get(vt).currentProgram.getUniforms();for(let tn=0;tn<Fe;tn++)Yn.setValue(Z,"_gl_DrawID",tn),Ue.render(Ce[tn]/Bn,Xe[tn])}else if(ht.isInstancedMesh)Ue.renderInstances(Me,qe,ht.count);else if(_t.isInstancedBufferGeometry){const Ce=_t._maxInstanceCount!==void 0?_t._maxInstanceCount:1/0,Xe=Math.min(_t.instanceCount,Ce);Ue.renderInstances(Me,qe,Xe)}else Ue.render(Me,qe)};function Ie(H,st,_t){H.transparent===!0&&H.side===DoubleSide&&H.forceSinglePass===!1?(H.side=BackSide,H.needsUpdate=!0,vn(H,st,_t),H.side=FrontSide,H.needsUpdate=!0,vn(H,st,_t),H.side=DoubleSide):vn(H,st,_t)}this.compile=function(H,st,_t=null){_t===null&&(_t=H),Q=Gt.get(_t),Q.init(st),b.push(Q),_t.traverseVisible(function(ht){ht.isLight&&ht.layers.test(st.layers)&&(Q.pushLight(ht),ht.castShadow&&Q.pushShadow(ht))}),H!==_t&&H.traverseVisible(function(ht){ht.isLight&&ht.layers.test(st.layers)&&(Q.pushLight(ht),ht.castShadow&&Q.pushShadow(ht))}),Q.setupLights();const vt=new Set;return H.traverse(function(ht){if(!(ht.isMesh||ht.isPoints||ht.isLine||ht.isSprite))return;const Ot=ht.material;if(Ot)if(Array.isArray(Ot))for(let jt=0;jt<Ot.length;jt++){const ge=Ot[jt];Ie(ge,_t,ht),vt.add(ge)}else Ie(Ot,_t,ht),vt.add(Ot)}),Q=b.pop(),vt},this.compileAsync=function(H,st,_t=null){const vt=this.compile(H,st,_t);return new Promise(ht=>{function Ot(){if(vt.forEach(function(jt){Kt.get(jt).currentProgram.isReady()&&vt.delete(jt)}),vt.size===0){ht(H);return}setTimeout(Ot,10)}qt.get("KHR_parallel_shader_compile")!==null?Ot():setTimeout(Ot,10)})};let Ze=null;function gn(H){Ze&&Ze(H)}function ln(){je.stop()}function an(){je.start()}const je=new WebGLAnimation;je.setAnimationLoop(gn),typeof self<"u"&&je.setContext(self),this.setAnimationLoop=function(H){Ze=H,j.setAnimationLoop(H),H===null?je.stop():je.start()},j.addEventListener("sessionstart",ln),j.addEventListener("sessionend",an),this.render=function(H,st){if(st!==void 0&&st.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(P===!0)return;if(H.matrixWorldAutoUpdate===!0&&H.updateMatrixWorld(),st.parent===null&&st.matrixWorldAutoUpdate===!0&&st.updateMatrixWorld(),j.enabled===!0&&j.isPresenting===!0&&(j.cameraAutoUpdate===!0&&j.updateCamera(st),st=j.getCamera()),H.isScene===!0&&H.onBeforeRender(T,H,st,O),Q=Gt.get(H,b.length),Q.init(st),b.push(Q),Tt.multiplyMatrices(st.projectionMatrix,st.matrixWorldInverse),J.setFromProjectionMatrix(Tt),xt=this.localClippingEnabled,At=ee.init(this.clippingPlanes,xt),_=te.get(H,D.length),_.init(),D.push(_),j.enabled===!0&&j.isPresenting===!0){const Ot=T.xr.getDepthSensingMesh();Ot!==null&&Mn(Ot,st,-1/0,T.sortObjects)}Mn(H,st,0,T.sortObjects),_.finish(),T.sortObjects===!0&&_.sort(Ct,wt),ne=j.enabled===!1||j.isPresenting===!1||j.hasDepthSensing()===!1,ne&&dt.addToRenderList(_,H),this.info.render.frame++,At===!0&&ee.beginShadows();const _t=Q.state.shadowsArray;yt.render(_t,H,st),At===!0&&ee.endShadows(),this.info.autoReset===!0&&this.info.reset();const vt=_.opaque,ht=_.transmissive;if(Q.setupLights(),st.isArrayCamera){const Ot=st.cameras;if(ht.length>0)for(let jt=0,ge=Ot.length;jt<ge;jt++){const re=Ot[jt];Jn(vt,ht,H,re)}ne&&dt.render(H);for(let jt=0,ge=Ot.length;jt<ge;jt++){const re=Ot[jt];Pn(_,H,re,re.viewport)}}else ht.length>0&&Jn(vt,ht,H,st),ne&&dt.render(H),Pn(_,H,st);O!==null&&F===0&&(Ee.updateMultisampleRenderTarget(O),Ee.updateRenderTargetMipmap(O)),H.isScene===!0&&H.onAfterRender(T,H,st),de.resetDefaultState(),N=-1,L=null,b.pop(),b.length>0?(Q=b[b.length-1],At===!0&&ee.setGlobalState(T.clippingPlanes,Q.state.camera)):Q=null,D.pop(),D.length>0?_=D[D.length-1]:_=null};function Mn(H,st,_t,vt){if(H.visible===!1)return;if(H.layers.test(st.layers)){if(H.isGroup)_t=H.renderOrder;else if(H.isLOD)H.autoUpdate===!0&&H.update(st);else if(H.isLight)Q.pushLight(H),H.castShadow&&Q.pushShadow(H);else if(H.isSprite){if(!H.frustumCulled||J.intersectsSprite(H)){vt&&Nt.setFromMatrixPosition(H.matrixWorld).applyMatrix4(Tt);const jt=St.update(H),ge=H.material;ge.visible&&_.push(H,jt,ge,_t,Nt.z,null)}}else if((H.isMesh||H.isLine||H.isPoints)&&(!H.frustumCulled||J.intersectsObject(H))){const jt=St.update(H),ge=H.material;if(vt&&(H.boundingSphere!==void 0?(H.boundingSphere===null&&H.computeBoundingSphere(),Nt.copy(H.boundingSphere.center)):(jt.boundingSphere===null&&jt.computeBoundingSphere(),Nt.copy(jt.boundingSphere.center)),Nt.applyMatrix4(H.matrixWorld).applyMatrix4(Tt)),Array.isArray(ge)){const re=jt.groups;for(let Be=0,me=re.length;Be<me;Be++){const fe=re[Be],Me=ge[fe.materialIndex];Me&&Me.visible&&_.push(H,jt,Me,_t,Nt.z,fe)}}else ge.visible&&_.push(H,jt,ge,_t,Nt.z,null)}}const Ot=H.children;for(let jt=0,ge=Ot.length;jt<ge;jt++)Mn(Ot[jt],st,_t,vt)}function Pn(H,st,_t,vt){const ht=H.opaque,Ot=H.transmissive,jt=H.transparent;Q.setupLightsView(_t),At===!0&&ee.setGlobalState(T.clippingPlanes,_t),vt&&Ht.viewport(Y.copy(vt)),ht.length>0&&kn(ht,st,_t),Ot.length>0&&kn(Ot,st,_t),jt.length>0&&kn(jt,st,_t),Ht.buffers.depth.setTest(!0),Ht.buffers.depth.setMask(!0),Ht.buffers.color.setMask(!0),Ht.setPolygonOffset(!1)}function Jn(H,st,_t,vt){if((_t.isScene===!0?_t.overrideMaterial:null)!==null)return;Q.state.transmissionRenderTarget[vt.id]===void 0&&(Q.state.transmissionRenderTarget[vt.id]=new WebGLRenderTarget(1,1,{generateMipmaps:!0,type:qt.has("EXT_color_buffer_half_float")||qt.has("EXT_color_buffer_float")?HalfFloatType:UnsignedByteType,minFilter:LinearMipmapLinearFilter,samples:4,stencilBuffer:s,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:ColorManagement.workingColorSpace}));const Ot=Q.state.transmissionRenderTarget[vt.id],jt=vt.viewport||Y;Ot.setSize(jt.z*T.transmissionResolutionScale,jt.w*T.transmissionResolutionScale);const ge=T.getRenderTarget();T.setRenderTarget(Ot),T.getClearColor(at),pt=T.getClearAlpha(),pt<1&&T.setClearColor(16777215,.5),T.clear(),ne&&dt.render(_t);const re=T.toneMapping;T.toneMapping=NoToneMapping;const Be=vt.viewport;if(vt.viewport!==void 0&&(vt.viewport=void 0),Q.setupLightsView(vt),At===!0&&ee.setGlobalState(T.clippingPlanes,vt),kn(H,_t,vt),Ee.updateMultisampleRenderTarget(Ot),Ee.updateRenderTargetMipmap(Ot),qt.has("WEBGL_multisampled_render_to_texture")===!1){let me=!1;for(let fe=0,Me=st.length;fe<Me;fe++){const Pe=st[fe],qe=Pe.object,Ke=Pe.geometry,Ue=Pe.material,Ce=Pe.group;if(Ue.side===DoubleSide&&qe.layers.test(vt.layers)){const Xe=Ue.side;Ue.side=BackSide,Ue.needsUpdate=!0,qn(qe,_t,vt,Ke,Ue,Ce),Ue.side=Xe,Ue.needsUpdate=!0,me=!0}}me===!0&&(Ee.updateMultisampleRenderTarget(Ot),Ee.updateRenderTargetMipmap(Ot))}T.setRenderTarget(ge),T.setClearColor(at,pt),Be!==void 0&&(vt.viewport=Be),T.toneMapping=re}function kn(H,st,_t){const vt=st.isScene===!0?st.overrideMaterial:null;for(let ht=0,Ot=H.length;ht<Ot;ht++){const jt=H[ht],ge=jt.object,re=jt.geometry,Be=jt.group;let me=jt.material;me.allowOverride===!0&&vt!==null&&(me=vt),ge.layers.test(_t.layers)&&qn(ge,st,_t,re,me,Be)}}function qn(H,st,_t,vt,ht,Ot){H.onBeforeRender(T,st,_t,vt,ht,Ot),H.modelViewMatrix.multiplyMatrices(_t.matrixWorldInverse,H.matrixWorld),H.normalMatrix.getNormalMatrix(H.modelViewMatrix),ht.onBeforeRender(T,st,_t,vt,H,Ot),ht.transparent===!0&&ht.side===DoubleSide&&ht.forceSinglePass===!1?(ht.side=BackSide,ht.needsUpdate=!0,T.renderBufferDirect(_t,st,vt,ht,H,Ot),ht.side=FrontSide,ht.needsUpdate=!0,T.renderBufferDirect(_t,st,vt,ht,H,Ot),ht.side=DoubleSide):T.renderBufferDirect(_t,st,vt,ht,H,Ot),H.onAfterRender(T,st,_t,vt,ht,Ot)}function vn(H,st,_t){st.isScene!==!0&&(st=$t);const vt=Kt.get(H),ht=Q.state.lights,Ot=Q.state.shadowsArray,jt=ht.state.version,ge=Mt.getParameters(H,ht.state,Ot,st,_t),re=Mt.getProgramCacheKey(ge);let Be=vt.programs;vt.environment=H.isMeshStandardMaterial?st.environment:null,vt.fog=st.fog,vt.envMap=(H.isMeshStandardMaterial?W:be).get(H.envMap||vt.environment),vt.envMapRotation=vt.environment!==null&&H.envMap===null?st.environmentRotation:H.envMapRotation,Be===void 0&&(H.addEventListener("dispose",Lt),Be=new Map,vt.programs=Be);let me=Be.get(re);if(me!==void 0){if(vt.currentProgram===me&&vt.lightsStateVersion===jt)return eA(H,ge),me}else ge.uniforms=Mt.getUniforms(H),H.onBeforeCompile(ge,T),me=Mt.acquireProgram(ge,re),Be.set(re,me),vt.uniforms=ge.uniforms;const fe=vt.uniforms;return(!H.isShaderMaterial&&!H.isRawShaderMaterial||H.clipping===!0)&&(fe.clippingPlanes=ee.uniform),eA(H,ge),vt.needsLights=Nn(H),vt.lightsStateVersion=jt,vt.needsLights&&(fe.ambientLightColor.value=ht.state.ambient,fe.lightProbe.value=ht.state.probe,fe.directionalLights.value=ht.state.directional,fe.directionalLightShadows.value=ht.state.directionalShadow,fe.spotLights.value=ht.state.spot,fe.spotLightShadows.value=ht.state.spotShadow,fe.rectAreaLights.value=ht.state.rectArea,fe.ltc_1.value=ht.state.rectAreaLTC1,fe.ltc_2.value=ht.state.rectAreaLTC2,fe.pointLights.value=ht.state.point,fe.pointLightShadows.value=ht.state.pointShadow,fe.hemisphereLights.value=ht.state.hemi,fe.directionalShadowMap.value=ht.state.directionalShadowMap,fe.directionalShadowMatrix.value=ht.state.directionalShadowMatrix,fe.spotShadowMap.value=ht.state.spotShadowMap,fe.spotLightMatrix.value=ht.state.spotLightMatrix,fe.spotLightMap.value=ht.state.spotLightMap,fe.pointShadowMap.value=ht.state.pointShadowMap,fe.pointShadowMatrix.value=ht.state.pointShadowMatrix),vt.currentProgram=me,vt.uniformsList=null,me}function Wn(H){if(H.uniformsList===null){const st=H.currentProgram.getUniforms();H.uniformsList=WebGLUniforms.seqWithValue(st.seq,H.uniforms)}return H.uniformsList}function eA(H,st){const _t=Kt.get(H);_t.outputColorSpace=st.outputColorSpace,_t.batching=st.batching,_t.batchingColor=st.batchingColor,_t.instancing=st.instancing,_t.instancingColor=st.instancingColor,_t.instancingMorph=st.instancingMorph,_t.skinning=st.skinning,_t.morphTargets=st.morphTargets,_t.morphNormals=st.morphNormals,_t.morphColors=st.morphColors,_t.morphTargetsCount=st.morphTargetsCount,_t.numClippingPlanes=st.numClippingPlanes,_t.numIntersection=st.numClipIntersection,_t.vertexAlphas=st.vertexAlphas,_t.vertexTangents=st.vertexTangents,_t.toneMapping=st.toneMapping}function On(H,st,_t,vt,ht){st.isScene!==!0&&(st=$t),Ee.resetTextureUnits();const Ot=st.fog,jt=vt.isMeshStandardMaterial?st.environment:null,ge=O===null?T.outputColorSpace:O.isXRRenderTarget===!0?O.texture.colorSpace:LinearSRGBColorSpace,re=(vt.isMeshStandardMaterial?W:be).get(vt.envMap||jt),Be=vt.vertexColors===!0&&!!_t.attributes.color&&_t.attributes.color.itemSize===4,me=!!_t.attributes.tangent&&(!!vt.normalMap||vt.anisotropy>0),fe=!!_t.morphAttributes.position,Me=!!_t.morphAttributes.normal,Pe=!!_t.morphAttributes.color;let qe=NoToneMapping;vt.toneMapped&&(O===null||O.isXRRenderTarget===!0)&&(qe=T.toneMapping);const Ke=_t.morphAttributes.position||_t.morphAttributes.normal||_t.morphAttributes.color,Ue=Ke!==void 0?Ke.length:0,Ce=Kt.get(vt),Xe=Q.state.lights;if(At===!0&&(xt===!0||H!==L)){const sn=H===L&&vt.id===N;ee.setState(vt,H,sn)}let Fe=!1;vt.version===Ce.__version?(Ce.needsLights&&Ce.lightsStateVersion!==Xe.state.version||Ce.outputColorSpace!==ge||ht.isBatchedMesh&&Ce.batching===!1||!ht.isBatchedMesh&&Ce.batching===!0||ht.isBatchedMesh&&Ce.batchingColor===!0&&ht.colorTexture===null||ht.isBatchedMesh&&Ce.batchingColor===!1&&ht.colorTexture!==null||ht.isInstancedMesh&&Ce.instancing===!1||!ht.isInstancedMesh&&Ce.instancing===!0||ht.isSkinnedMesh&&Ce.skinning===!1||!ht.isSkinnedMesh&&Ce.skinning===!0||ht.isInstancedMesh&&Ce.instancingColor===!0&&ht.instanceColor===null||ht.isInstancedMesh&&Ce.instancingColor===!1&&ht.instanceColor!==null||ht.isInstancedMesh&&Ce.instancingMorph===!0&&ht.morphTexture===null||ht.isInstancedMesh&&Ce.instancingMorph===!1&&ht.morphTexture!==null||Ce.envMap!==re||vt.fog===!0&&Ce.fog!==Ot||Ce.numClippingPlanes!==void 0&&(Ce.numClippingPlanes!==ee.numPlanes||Ce.numIntersection!==ee.numIntersection)||Ce.vertexAlphas!==Be||Ce.vertexTangents!==me||Ce.morphTargets!==fe||Ce.morphNormals!==Me||Ce.morphColors!==Pe||Ce.toneMapping!==qe||Ce.morphTargetsCount!==Ue)&&(Fe=!0):(Fe=!0,Ce.__version=vt.version);let Bn=Ce.currentProgram;Fe===!0&&(Bn=vn(vt,st,ht));let Yn=!1,tn=!1,Zn=!1;const Ye=Bn.getUniforms(),De=Ce.uniforms;if(Ht.useProgram(Bn.program)&&(Yn=!0,tn=!0,Zn=!0),vt.id!==N&&(N=vt.id,tn=!0),Yn||L!==H){Ht.buffers.depth.getReversed()?(mt.copy(H.projectionMatrix),toNormalizedProjectionMatrix(mt),toReversedProjectionMatrix(mt),Ye.setValue(Z,"projectionMatrix",mt)):Ye.setValue(Z,"projectionMatrix",H.projectionMatrix),Ye.setValue(Z,"viewMatrix",H.matrixWorldInverse);const hn=Ye.map.cameraPosition;hn!==void 0&&hn.setValue(Z,Vt.setFromMatrixPosition(H.matrixWorld)),Xt.logarithmicDepthBuffer&&Ye.setValue(Z,"logDepthBufFC",2/(Math.log(H.far+1)/Math.LN2)),(vt.isMeshPhongMaterial||vt.isMeshToonMaterial||vt.isMeshLambertMaterial||vt.isMeshBasicMaterial||vt.isMeshStandardMaterial||vt.isShaderMaterial)&&Ye.setValue(Z,"isOrthographic",H.isOrthographicCamera===!0),L!==H&&(L=H,tn=!0,Zn=!0)}if(ht.isSkinnedMesh){Ye.setOptional(Z,ht,"bindMatrix"),Ye.setOptional(Z,ht,"bindMatrixInverse");const sn=ht.skeleton;sn&&(sn.boneTexture===null&&sn.computeBoneTexture(),Ye.setValue(Z,"boneTexture",sn.boneTexture,Ee))}ht.isBatchedMesh&&(Ye.setOptional(Z,ht,"batchingTexture"),Ye.setValue(Z,"batchingTexture",ht._matricesTexture,Ee),Ye.setOptional(Z,ht,"batchingIdTexture"),Ye.setValue(Z,"batchingIdTexture",ht._indirectTexture,Ee),Ye.setOptional(Z,ht,"batchingColorTexture"),ht._colorsTexture!==null&&Ye.setValue(Z,"batchingColorTexture",ht._colorsTexture,Ee));const xn=_t.morphAttributes;if((xn.position!==void 0||xn.normal!==void 0||xn.color!==void 0)&&bt.update(ht,_t,Bn),(tn||Ce.receiveShadow!==ht.receiveShadow)&&(Ce.receiveShadow=ht.receiveShadow,Ye.setValue(Z,"receiveShadow",ht.receiveShadow)),vt.isMeshGouraudMaterial&&vt.envMap!==null&&(De.envMap.value=re,De.flipEnvMap.value=re.isCubeTexture&&re.isRenderTargetTexture===!1?-1:1),vt.isMeshStandardMaterial&&vt.envMap===null&&st.environment!==null&&(De.envMapIntensity.value=st.environmentIntensity),tn&&(Ye.setValue(Z,"toneMappingExposure",T.toneMappingExposure),Ce.needsLights&&nA(De,Zn),Ot&&vt.fog===!0&&Dt.refreshFogUniforms(De,Ot),Dt.refreshMaterialUniforms(De,vt,q,$,Q.state.transmissionRenderTarget[H.id]),WebGLUniforms.upload(Z,Wn(Ce),De,Ee)),vt.isShaderMaterial&&vt.uniformsNeedUpdate===!0&&(WebGLUniforms.upload(Z,Wn(Ce),De,Ee),vt.uniformsNeedUpdate=!1),vt.isSpriteMaterial&&Ye.setValue(Z,"center",ht.center),Ye.setValue(Z,"modelViewMatrix",ht.modelViewMatrix),Ye.setValue(Z,"normalMatrix",ht.normalMatrix),Ye.setValue(Z,"modelMatrix",ht.matrixWorld),vt.isShaderMaterial||vt.isRawShaderMaterial){const sn=vt.uniformsGroups;for(let hn=0,cA=sn.length;hn<cA;hn++){const Kn=sn[hn];G.update(Kn,Bn),G.bind(Kn,Bn)}}return Bn}function nA(H,st){H.ambientLightColor.needsUpdate=st,H.lightProbe.needsUpdate=st,H.directionalLights.needsUpdate=st,H.directionalLightShadows.needsUpdate=st,H.pointLights.needsUpdate=st,H.pointLightShadows.needsUpdate=st,H.spotLights.needsUpdate=st,H.spotLightShadows.needsUpdate=st,H.rectAreaLights.needsUpdate=st,H.hemisphereLights.needsUpdate=st}function Nn(H){return H.isMeshLambertMaterial||H.isMeshToonMaterial||H.isMeshPhongMaterial||H.isMeshStandardMaterial||H.isShadowMaterial||H.isShaderMaterial&&H.lights===!0}this.getActiveCubeFace=function(){return R},this.getActiveMipmapLevel=function(){return F},this.getRenderTarget=function(){return O},this.setRenderTargetTextures=function(H,st,_t){const vt=Kt.get(H);vt.__autoAllocateDepthBuffer=H.resolveDepthBuffer===!1,vt.__autoAllocateDepthBuffer===!1&&(vt.__useRenderToTexture=!1),Kt.get(H.texture).__webglTexture=st,Kt.get(H.depthTexture).__webglTexture=vt.__autoAllocateDepthBuffer?void 0:_t,vt.__hasExternalTextures=!0},this.setRenderTargetFramebuffer=function(H,st){const _t=Kt.get(H);_t.__webglFramebuffer=st,_t.__useDefaultFramebuffer=st===void 0};const Un=Z.createFramebuffer();this.setRenderTarget=function(H,st=0,_t=0){O=H,R=st,F=_t;let vt=!0,ht=null,Ot=!1,jt=!1;if(H){const re=Kt.get(H);if(re.__useDefaultFramebuffer!==void 0)Ht.bindFramebuffer(Z.FRAMEBUFFER,null),vt=!1;else if(re.__webglFramebuffer===void 0)Ee.setupRenderTarget(H);else if(re.__hasExternalTextures)Ee.rebindTextures(H,Kt.get(H.texture).__webglTexture,Kt.get(H.depthTexture).__webglTexture);else if(H.depthBuffer){const fe=H.depthTexture;if(re.__boundDepthTexture!==fe){if(fe!==null&&Kt.has(fe)&&(H.width!==fe.image.width||H.height!==fe.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");Ee.setupDepthRenderbuffer(H)}}const Be=H.texture;(Be.isData3DTexture||Be.isDataArrayTexture||Be.isCompressedArrayTexture)&&(jt=!0);const me=Kt.get(H).__webglFramebuffer;H.isWebGLCubeRenderTarget?(Array.isArray(me[st])?ht=me[st][_t]:ht=me[st],Ot=!0):H.samples>0&&Ee.useMultisampledRTT(H)===!1?ht=Kt.get(H).__webglMultisampledFramebuffer:Array.isArray(me)?ht=me[_t]:ht=me,Y.copy(H.viewport),rt.copy(H.scissor),tt=H.scissorTest}else Y.copy(Bt).multiplyScalar(q).floor(),rt.copy(ut).multiplyScalar(q).floor(),tt=K;if(_t!==0&&(ht=Un),Ht.bindFramebuffer(Z.FRAMEBUFFER,ht)&&vt&&Ht.drawBuffers(H,ht),Ht.viewport(Y),Ht.scissor(rt),Ht.setScissorTest(tt),Ot){const re=Kt.get(H.texture);Z.framebufferTexture2D(Z.FRAMEBUFFER,Z.COLOR_ATTACHMENT0,Z.TEXTURE_CUBE_MAP_POSITIVE_X+st,re.__webglTexture,_t)}else if(jt){const re=Kt.get(H.texture),Be=st;Z.framebufferTextureLayer(Z.FRAMEBUFFER,Z.COLOR_ATTACHMENT0,re.__webglTexture,_t,Be)}else if(H!==null&&_t!==0){const re=Kt.get(H.texture);Z.framebufferTexture2D(Z.FRAMEBUFFER,Z.COLOR_ATTACHMENT0,Z.TEXTURE_2D,re.__webglTexture,_t)}N=-1},this.readRenderTargetPixels=function(H,st,_t,vt,ht,Ot,jt,ge=0){if(!(H&&H.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let re=Kt.get(H).__webglFramebuffer;if(H.isWebGLCubeRenderTarget&&jt!==void 0&&(re=re[jt]),re){Ht.bindFramebuffer(Z.FRAMEBUFFER,re);try{const Be=H.textures[ge],me=Be.format,fe=Be.type;if(!Xt.textureFormatReadable(me)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!Xt.textureTypeReadable(fe)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}st>=0&&st<=H.width-vt&&_t>=0&&_t<=H.height-ht&&(H.textures.length>1&&Z.readBuffer(Z.COLOR_ATTACHMENT0+ge),Z.readPixels(st,_t,vt,ht,Ut.convert(me),Ut.convert(fe),Ot))}finally{const Be=O!==null?Kt.get(O).__webglFramebuffer:null;Ht.bindFramebuffer(Z.FRAMEBUFFER,Be)}}},this.readRenderTargetPixelsAsync=async function(H,st,_t,vt,ht,Ot,jt,ge=0){if(!(H&&H.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let re=Kt.get(H).__webglFramebuffer;if(H.isWebGLCubeRenderTarget&&jt!==void 0&&(re=re[jt]),re)if(st>=0&&st<=H.width-vt&&_t>=0&&_t<=H.height-ht){Ht.bindFramebuffer(Z.FRAMEBUFFER,re);const Be=H.textures[ge],me=Be.format,fe=Be.type;if(!Xt.textureFormatReadable(me))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!Xt.textureTypeReadable(fe))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");const Me=Z.createBuffer();Z.bindBuffer(Z.PIXEL_PACK_BUFFER,Me),Z.bufferData(Z.PIXEL_PACK_BUFFER,Ot.byteLength,Z.STREAM_READ),H.textures.length>1&&Z.readBuffer(Z.COLOR_ATTACHMENT0+ge),Z.readPixels(st,_t,vt,ht,Ut.convert(me),Ut.convert(fe),0);const Pe=O!==null?Kt.get(O).__webglFramebuffer:null;Ht.bindFramebuffer(Z.FRAMEBUFFER,Pe);const qe=Z.fenceSync(Z.SYNC_GPU_COMMANDS_COMPLETE,0);return Z.flush(),await probeAsync(Z,qe,4),Z.bindBuffer(Z.PIXEL_PACK_BUFFER,Me),Z.getBufferSubData(Z.PIXEL_PACK_BUFFER,0,Ot),Z.deleteBuffer(Me),Z.deleteSync(qe),Ot}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")},this.copyFramebufferToTexture=function(H,st=null,_t=0){const vt=Math.pow(2,-_t),ht=Math.floor(H.image.width*vt),Ot=Math.floor(H.image.height*vt),jt=st!==null?st.x:0,ge=st!==null?st.y:0;Ee.setTexture2D(H,0),Z.copyTexSubImage2D(Z.TEXTURE_2D,_t,0,0,jt,ge,ht,Ot),Ht.unbindTexture()};const Hn=Z.createFramebuffer(),zn=Z.createFramebuffer();this.copyTextureToTexture=function(H,st,_t=null,vt=null,ht=0,Ot=null){Ot===null&&(ht!==0?(warnOnce("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),Ot=ht,ht=0):Ot=0);let jt,ge,re,Be,me,fe,Me,Pe,qe;const Ke=H.isCompressedTexture?H.mipmaps[Ot]:H.image;if(_t!==null)jt=_t.max.x-_t.min.x,ge=_t.max.y-_t.min.y,re=_t.isBox3?_t.max.z-_t.min.z:1,Be=_t.min.x,me=_t.min.y,fe=_t.isBox3?_t.min.z:0;else{const xn=Math.pow(2,-ht);jt=Math.floor(Ke.width*xn),ge=Math.floor(Ke.height*xn),H.isDataArrayTexture?re=Ke.depth:H.isData3DTexture?re=Math.floor(Ke.depth*xn):re=1,Be=0,me=0,fe=0}vt!==null?(Me=vt.x,Pe=vt.y,qe=vt.z):(Me=0,Pe=0,qe=0);const Ue=Ut.convert(st.format),Ce=Ut.convert(st.type);let Xe;st.isData3DTexture?(Ee.setTexture3D(st,0),Xe=Z.TEXTURE_3D):st.isDataArrayTexture||st.isCompressedArrayTexture?(Ee.setTexture2DArray(st,0),Xe=Z.TEXTURE_2D_ARRAY):(Ee.setTexture2D(st,0),Xe=Z.TEXTURE_2D),Z.pixelStorei(Z.UNPACK_FLIP_Y_WEBGL,st.flipY),Z.pixelStorei(Z.UNPACK_PREMULTIPLY_ALPHA_WEBGL,st.premultiplyAlpha),Z.pixelStorei(Z.UNPACK_ALIGNMENT,st.unpackAlignment);const Fe=Z.getParameter(Z.UNPACK_ROW_LENGTH),Bn=Z.getParameter(Z.UNPACK_IMAGE_HEIGHT),Yn=Z.getParameter(Z.UNPACK_SKIP_PIXELS),tn=Z.getParameter(Z.UNPACK_SKIP_ROWS),Zn=Z.getParameter(Z.UNPACK_SKIP_IMAGES);Z.pixelStorei(Z.UNPACK_ROW_LENGTH,Ke.width),Z.pixelStorei(Z.UNPACK_IMAGE_HEIGHT,Ke.height),Z.pixelStorei(Z.UNPACK_SKIP_PIXELS,Be),Z.pixelStorei(Z.UNPACK_SKIP_ROWS,me),Z.pixelStorei(Z.UNPACK_SKIP_IMAGES,fe);const Ye=H.isDataArrayTexture||H.isData3DTexture,De=st.isDataArrayTexture||st.isData3DTexture;if(H.isDepthTexture){const xn=Kt.get(H),sn=Kt.get(st),hn=Kt.get(xn.__renderTarget),cA=Kt.get(sn.__renderTarget);Ht.bindFramebuffer(Z.READ_FRAMEBUFFER,hn.__webglFramebuffer),Ht.bindFramebuffer(Z.DRAW_FRAMEBUFFER,cA.__webglFramebuffer);for(let Kn=0;Kn<re;Kn++)Ye&&(Z.framebufferTextureLayer(Z.READ_FRAMEBUFFER,Z.COLOR_ATTACHMENT0,Kt.get(H).__webglTexture,ht,fe+Kn),Z.framebufferTextureLayer(Z.DRAW_FRAMEBUFFER,Z.COLOR_ATTACHMENT0,Kt.get(st).__webglTexture,Ot,qe+Kn)),Z.blitFramebuffer(Be,me,jt,ge,Me,Pe,jt,ge,Z.DEPTH_BUFFER_BIT,Z.NEAREST);Ht.bindFramebuffer(Z.READ_FRAMEBUFFER,null),Ht.bindFramebuffer(Z.DRAW_FRAMEBUFFER,null)}else if(ht!==0||H.isRenderTargetTexture||Kt.has(H)){const xn=Kt.get(H),sn=Kt.get(st);Ht.bindFramebuffer(Z.READ_FRAMEBUFFER,Hn),Ht.bindFramebuffer(Z.DRAW_FRAMEBUFFER,zn);for(let hn=0;hn<re;hn++)Ye?Z.framebufferTextureLayer(Z.READ_FRAMEBUFFER,Z.COLOR_ATTACHMENT0,xn.__webglTexture,ht,fe+hn):Z.framebufferTexture2D(Z.READ_FRAMEBUFFER,Z.COLOR_ATTACHMENT0,Z.TEXTURE_2D,xn.__webglTexture,ht),De?Z.framebufferTextureLayer(Z.DRAW_FRAMEBUFFER,Z.COLOR_ATTACHMENT0,sn.__webglTexture,Ot,qe+hn):Z.framebufferTexture2D(Z.DRAW_FRAMEBUFFER,Z.COLOR_ATTACHMENT0,Z.TEXTURE_2D,sn.__webglTexture,Ot),ht!==0?Z.blitFramebuffer(Be,me,jt,ge,Me,Pe,jt,ge,Z.COLOR_BUFFER_BIT,Z.NEAREST):De?Z.copyTexSubImage3D(Xe,Ot,Me,Pe,qe+hn,Be,me,jt,ge):Z.copyTexSubImage2D(Xe,Ot,Me,Pe,Be,me,jt,ge);Ht.bindFramebuffer(Z.READ_FRAMEBUFFER,null),Ht.bindFramebuffer(Z.DRAW_FRAMEBUFFER,null)}else De?H.isDataTexture||H.isData3DTexture?Z.texSubImage3D(Xe,Ot,Me,Pe,qe,jt,ge,re,Ue,Ce,Ke.data):st.isCompressedArrayTexture?Z.compressedTexSubImage3D(Xe,Ot,Me,Pe,qe,jt,ge,re,Ue,Ke.data):Z.texSubImage3D(Xe,Ot,Me,Pe,qe,jt,ge,re,Ue,Ce,Ke):H.isDataTexture?Z.texSubImage2D(Z.TEXTURE_2D,Ot,Me,Pe,jt,ge,Ue,Ce,Ke.data):H.isCompressedTexture?Z.compressedTexSubImage2D(Z.TEXTURE_2D,Ot,Me,Pe,Ke.width,Ke.height,Ue,Ke.data):Z.texSubImage2D(Z.TEXTURE_2D,Ot,Me,Pe,jt,ge,Ue,Ce,Ke);Z.pixelStorei(Z.UNPACK_ROW_LENGTH,Fe),Z.pixelStorei(Z.UNPACK_IMAGE_HEIGHT,Bn),Z.pixelStorei(Z.UNPACK_SKIP_PIXELS,Yn),Z.pixelStorei(Z.UNPACK_SKIP_ROWS,tn),Z.pixelStorei(Z.UNPACK_SKIP_IMAGES,Zn),Ot===0&&st.generateMipmaps&&Z.generateMipmap(Xe),Ht.unbindTexture()},this.copyTextureToTexture3D=function(H,st,_t=null,vt=null,ht=0){return warnOnce('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(H,st,_t,vt,ht)},this.initRenderTarget=function(H){Kt.get(H).__webglFramebuffer===void 0&&Ee.setupRenderTarget(H)},this.initTexture=function(H){H.isCubeTexture?Ee.setTextureCube(H,0):H.isData3DTexture?Ee.setTexture3D(H,0):H.isDataArrayTexture||H.isCompressedArrayTexture?Ee.setTexture2DArray(H,0):Ee.setTexture2D(H,0),Ht.unbindTexture()},this.resetState=function(){R=0,F=0,O=null,Ht.reset(),de.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return WebGLCoordinateSystem}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorSpace=ColorManagement._getDrawingBufferColorSpace(t),e.unpackColorSpace=ColorManagement._getUnpackColorSpace()}}let wasm;const cachedTextDecoder=typeof TextDecoder<"u"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};typeof TextDecoder<"u"&&cachedTextDecoder.decode();let cachedUint8ArrayMemory0=null;function getUint8ArrayMemory0(){return(cachedUint8ArrayMemory0===null||cachedUint8ArrayMemory0.byteLength===0)&&(cachedUint8ArrayMemory0=new Uint8Array(wasm.memory.buffer)),cachedUint8ArrayMemory0}function getStringFromWasm0(r,t){return r=r>>>0,cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(r,r+t))}function raycast_splats(r,t,e,A,a,s,n,l,d,f,E){return wasm.raycast_splats(r,t,e,A,a,s,n,l,d,f,E)}async function __wbg_load(r,t){if(typeof Response=="function"&&r instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(r,t)}catch(A){if(r.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",A);else throw A}const e=await r.arrayBuffer();return await WebAssembly.instantiate(e,t)}else{const e=await WebAssembly.instantiate(r,t);return e instanceof WebAssembly.Instance?{instance:e,module:r}:e}}function __wbg_get_imports(){const r={};return r.wbg={},r.wbg.__wbg_buffer_609cc3eee51ed158=function(t){return t.buffer},r.wbg.__wbg_length_3b4f022188ae8db6=function(t){return t.length},r.wbg.__wbg_length_6ca527665d89694d=function(t){return t.length},r.wbg.__wbg_length_8cfd2c6409af88ad=function(t){return t.length},r.wbg.__wbg_new_9fee97a409b32b68=function(t){return new Uint16Array(t)},r.wbg.__wbg_new_e3b321dcfef89fc7=function(t){return new Uint32Array(t)},r.wbg.__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354=function(t,e,A){return new Float32Array(t,e>>>0,A>>>0)},r.wbg.__wbg_newwithbyteoffsetandlength_f1dead44d1fc7212=function(t,e,A){return new Uint32Array(t,e>>>0,A>>>0)},r.wbg.__wbg_newwithlength_5a5efe313cfd59f1=function(t){return new Float32Array(t>>>0)},r.wbg.__wbg_set_10bad9bee0e9c58b=function(t,e,A){t.set(e,A>>>0)},r.wbg.__wbg_set_d23661d19148b229=function(t,e,A){t.set(e,A>>>0)},r.wbg.__wbg_set_f4f1f0daa30696fc=function(t,e,A){t.set(e,A>>>0)},r.wbg.__wbg_subarray_3aaeec89bb2544f0=function(t,e,A){return t.subarray(e>>>0,A>>>0)},r.wbg.__wbg_subarray_769e1e0f81bb259b=function(t,e,A){return t.subarray(e>>>0,A>>>0)},r.wbg.__wbindgen_init_externref_table=function(){const t=wasm.__wbindgen_export_0,e=t.grow(4);t.set(0,void 0),t.set(e+0,void 0),t.set(e+1,null),t.set(e+2,!0),t.set(e+3,!1)},r.wbg.__wbindgen_memory=function(){return wasm.memory},r.wbg.__wbindgen_throw=function(t,e){throw new Error(getStringFromWasm0(t,e))},r}function __wbg_finalize_init(r,t){return wasm=r.exports,__wbg_init.__wbindgen_wasm_module=t,cachedUint8ArrayMemory0=null,wasm.__wbindgen_start(),wasm}async function __wbg_init(r){if(wasm!==void 0)return wasm;typeof r<"u"&&(Object.getPrototypeOf(r)===Object.prototype?{module_or_path:r}=r:console.warn("using deprecated parameters for the initialization function; pass a single object instead")),typeof r>"u"&&(r=new URL("data:application/wasm;base64,AGFzbQEAAAAB9wEkYAJ/fwF/YAN/f38Bf2ACf38AYAN/f38AYAF/AGABfwF/YAV/f39/fwBgA29/fwFvYAV/f39/fwF/YAR/f39/AGABbwFvYANvb38AYAFvAX9gAAF/YAAAYAd/f39/f39/AX9gAX0BfWAGf39/f39/AGAEf39/fwF/YAF/AW9gAAFvYAd/f39/f39/AGACf34Bf2ADf35+AGACf34AYAt9fX19fX19fX9vfwFvYAZ/f39/f38Bf2AFf398f38AYAR/fH9/AGAFf399f38AYAR/fX9/AGAFf39+f38AYAR/fn9/AGADf35+AX9gA39vbwF/YAJ9fQF9AvIEEQN3YmcdX193YmdfYnVmZmVyXzYwOWNjM2VlZTUxZWQxNTgACgN3YmcaX193YmdfbmV3XzlmZWU5N2E0MDliMzJiNjgACgN3YmcaX193Ymdfc2V0X2Y0ZjFmMGRhYTMwNjk2ZmMACwN3YmcdX193YmdfbGVuZ3RoXzhjZmQyYzY0MDlhZjg4YWQADAN3YmcxX193YmdfbmV3d2l0aGJ5dGVvZmZzZXRhbmRsZW5ndGhfZjFkZWFkNDRkMWZjNzIxMgAHA3diZxpfX3diZ19uZXdfZTNiMzIxZGNmZWY4OWZjNwAKA3diZxpfX3diZ19zZXRfZDIzNjYxZDE5MTQ4YjIyOQALA3diZx1fX3diZ19sZW5ndGhfNmNhNTI3NjY1ZDg5Njk0ZAAMA3diZzFfX3diZ19uZXd3aXRoYnl0ZW9mZnNldGFuZGxlbmd0aF9lNmI3ZTY5YWNkNGM3MzU0AAcDd2JnGl9fd2JnX3NldF8xMGJhZDliZWUwZTljNThiAAsDd2JnHV9fd2JnX2xlbmd0aF8zYjRmMDIyMTg4YWU4ZGI2AAwDd2JnH19fd2JnX3N1YmFycmF5Xzc2OWUxZTBmODFiYjI1OWIABwN3YmcfX193Ymdfc3ViYXJyYXlfM2FhZWVjODliYjI1NDRmMAAHA3diZyRfX3diZ19uZXd3aXRobGVuZ3RoXzVhNWVmZTMxM2NmZDU5ZjEAEwN3YmcQX193YmluZGdlbl90aHJvdwACA3diZxFfX3diaW5kZ2VuX21lbW9yeQAUA3diZx9fX3diaW5kZ2VuX2luaXRfZXh0ZXJucmVmX3RhYmxlAA4DwAG+AQUAAAYPAAUF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BSADOgAcIAUgAjYCGCAFIAUpAwA3AhBBlM/AACgCACAFQRBqQZjPwAAoAgAoAhQRAgBBkM/AACgCAEEBawUgBgs2AgBB6NLAAEEAOgAAIANFDQAACwALsgEBBn8CQAJAIABBhAFJDQAgANBvJgEQRSIBKAIMIQUgASgCECECIAFCADcCDCABKAIIIQMgASgCBCEEIAFCBDcCBCABKAIAIQYgAUEANgIAIAAgAkkNASAAIAJrIgAgA08NASAEIABBAnRqIAU2AgAgASACNgIQIAEgADYCDCABIAM2AgggASgCBCABIAQ2AgQgASgCACEAIAEgBjYCACAARQ0AIABBAnRBBBCwAQsPCwALqQEBAX8jAEEQayIGJAACQCABBEAgBkEEaiABIAMgBCAFIAIoAhARBgACQCAGKAIEIgIgBigCDCIBTQRAIAYoAgghBQwBCyACQQJ0IQIgBigCCCEDIAFFBEBBBCEFIAMgAkEEELABDAELIAMgAkEEIAFBAnQiAhCXASIFRQ0CCyAAIAE2AgQgACAFNgIAIAZBEGokAA8LQZiPwABBMhC5AQALQQQgAhCUAQALowEBAn8jAEEgayIDJAACQCABRQRAQQFBACACEMYBIQAMAQsgAyABNgIMIAMgADYCCCADQRBqIANBCGoQLSADKAIQIgEEQANAIAMoAhQhBCADKAIcRQRAIAEgBCACEMYBIQAMAwtBASEAIAIgASAEEJkBDQIgAkH9/wMQnAENAiADQRBqIANBCGoQLSADKAIQIgENAAsLQQAhAAsgA0EgaiQAIAALiwEBAX8CQCACQQBOBEACfyADKAIEBEACQCADKAIIIgRFBEAMAQsgAygCACAEIAEgAhCXAQwCCwsgASACRQ0AGkH9zsAALQAAGiACIAEQpgELIgMEQCAAIAI2AgggACADNgIEIABBADYCAA8LIAAgAjYCCCAAIAE2AgQMAQsgAEEANgIECyAAQQE2AgALqwEBAn8jAEEgayIBJAACQCAAKAIEIgJBA0YgAkECSXINAAJAAkAgAC0AGEEBaw4CAgABCyABQQE2AgggAUGshcAANgIEIAFCADcCECABIAFBHGo2AgwgAUEEakGQhsAAEIQBAAsgAEEIahBOIAAoAggiAkUNACAAKAIMIAJBDGxBBBCwAQsgACgCHCICBEAgACgCICACQQEQsAELIABBKEEEELABIAFBIGokAAuaAQECfyMAQSBrIgEkAAJAIAAoAgRBAkcNAAJAAkAgAC0AGEEBaw4CAgABCyABQQE2AgggAUGshcAANgIEIAFCADcCECABIAFBHGo2AgwgAUEEakGQhsAAEIQBAAsgAEEIahBOIAAoAggiAkUNACAAKAIMIAJBDGxBBBCwAQsgACgCHCICBEAgACgCICACQQEQsAELIAFBIGokAAuSAQEEfyMAQRBrIgIkAEEBIQQCQCABKAIUIgNBJyABKAIYIgUoAhAiAREAAA0AIAJBBGogACgCAEGBAhAiAkAgAi0ABEGAAUYEQCADIAIoAgggAREAAEUNAQwCCyADIAItAA4iACACQQRqaiACLQAPIABrIAUoAgwRAQANAQsgA0EnIAERAAAhBAsgAkEQaiQAIAQLlQEBAn8jAEEgayIDJAACQCAAKAIEIgRBA0YgBEECSXINAAJAAkAgAC0AGEEBaw4CAgABCyADQQE2AgggA0GshcAANgIEIANCADcCECADIANBHGo2AgwgA0EEakGQhsAAEIQBAAsgAEEIahBOIAAoAggiBEUNACAAKAIMIARBDGxBBBCwAQsgAEEoQQQQsAEgA0EgaiQAC4QBAQN/An8CQCAAKAIAIgFFDQADQAJAIAAoAggiAyAAKAIETw0AIAEgA2otAABBxQBHDQAgACADQQFqNgIIDAILAkAgAkUNACAAKAIQIgFFDQBB+aTAAEECIAEQxgFFDQBBAQ8LQQEgAEEBEBMNAhogAkEBayECIAAoAgAiAQ0ACwtBAAsLegEBfyMAQSBrIgIkAAJ/IAAoAgBBgICAgHhHBEAgASAAKAIEIAAoAggQmQEMAQsgAkEQaiAAKAIMKAIAIgBBCGopAgA3AwAgAkEYaiAAQRBqKQIANwMAIAIgACkCADcDCCABKAIUIAEoAhggAkEIahApCyACQSBqJAALSQEDfiAAIAFC/////w+DIgJCPn4iA0IAIgIgAUIgiEI+fnwiAUIghnwiBDcDACAAIAMgBFatIAEgAlStQiCGIAFCIIiEfDcDCAt8AQF/IwBBQGoiBSQAIAUgATYCDCAFIAA2AgggBSADNgIUIAUgAjYCECAFQQI2AhwgBUG8rsAANgIYIAVCAjcCJCAFIAVBEGqtQoCAgICADIQ3AzggBSAFQQhqrUKAgICAkAyENwMwIAUgBUEwajYCICAFQRhqIAQQhAEAC3gBA38CQCAAKAIAIgFBgICAgHhHBEAgAUUNASAAKAIEIAFBARCwAQ8LIAAtAARBA0cNACAAKAIIIgAoAgAhASAAQQRqKAIAIgMoAgAiAgRAIAEgAhEEAAsgAygCBCICBEAgASACIAMoAggQsAELIABBDEEEELABCwvzAwIIfwF+IwBBEGsiAyQAIAAoAgQhBSAAKAIAIQAgASgCFEG4rMAAQQEgASgCGCgCDBEBACEEIANBBGoiAkEAOgAFIAIgBDoABCACIAE2AgAgBQRAA0AgAyAANgIMIANBDGohCCMAQUBqIgEkAEEBIQYCQCADQQRqIgQtAAQNACAELQAFIQkCQCAEKAIAIgIoAhwiB0EEcUUEQCAJQQFxRQ0BIAIoAhRB667AAEECIAIoAhgoAgwRAQBFDQEMAgsgCUEBcUUEQCACKAIUQfWuwABBASACKAIYKAIMEQEADQIgAigCHCEHCyABQQE6ABsgASACKQIUNwIMIAFBzK7AADYCNCABIAFBG2o2AhQgASACKQIINwIkIAIpAgAhCiABIAc2AjggASACKAIQNgIsIAEgAi0AIDoAPCABIAo3AhwgASABQQxqNgIwIAggAUEcakGAmcAAKAIAEQAADQEgASgCMEHwrsAAQQIgASgCNCgCDBEBACEGDAELIAggAkGAmcAAKAIAEQAAIQYLIARBAToABSAEIAY6AAQgAUFAayQAIABBAWohACAFQQFrIgUNAAsLQQEhACADQQRqIgEtAARFBEAgASgCACIAKAIUQfauwABBASAAKAIYKAIMEQEAIQALIAEgADoABCADQRBqJAAgAAtqAgF/AX4jAEEwayIDJAAgAyAANgIAIAMgATYCBCADQQI2AgwgA0HYscAANgIIIANCAjcCFCADQoCAgIDwAiIEIANBBGqthDcDKCADIAQgA62ENwMgIAMgA0EgajYCECADQQhqIAIQhAEAC2oCAX8BfiMAQTBrIgMkACADIAE2AgQgAyAANgIAIANBAjYCDCADQZitwAA2AgggA0ICNwIUIANCgICAgPACIgQgA62ENwMoIAMgBCADQQRqrYQ3AyAgAyADQSBqNgIQIANBCGogAhCEAQALagIBfwF+IwBBMGsiAyQAIAMgADYCACADIAE2AgQgA0ECNgIM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AgwgASAENwIEIwBBEGsiACQAIAFBBGoiASgCACICKAIMIQMCQAJAAkACQCACKAIEDgIAAQILIAMNAUEBIQJBACEDDAILIAMNACACKAIAIgIoAgQhAyACKAIAIQIMAQsgAEGAgICAeDYCACAAIAE2AgwgAEHglsAAIAEoAgQgASgCCCIALQAIIAAtAAkQWQALIAAgAzYCBCAAIAI2AgAgAEHElsAAIAEoAgQgASgCCCIALQAIIAAtAAkQWQALJQAgAEUEQEGYj8AAQTIQuQEACyAAIAIgAyAEIAUgASgCEBEIAAsoACABIAAoAgAtAABBAnQiAEHkp8AAaigCACAAQdCnwABqKAIAEJkBCyMAIABFBEBBmI/AAEEyELkBAAsgACACIAMgBCABKAIQEQkACyMAIABFBEBBmI/AAEEyELkBAAsgACACIAMgBCABKAIQERIACyMAIABFBEBBmI/AAEEyELkBAAsgACACIAMgBCABKAIQERwACyMAIABFBEBBmI/AAEEyELkBAAsgACACIAMgBCABKAIQER4ACyMAIABFBEBBmI/AAEEyELkBAAsgACACIAMgBCABKAIQESAACygBAX8gACgCACIBQYCAgIB4ckGAgICAeEcEQCAAKAIEIAFBARCwAQsLJwAgAEEcakEAIAJC2KGkg7Hi0d18URtBACABQpXX3ZjDl4qMC1EbCyEAIABFBEBBmI/AAEEyELkBAAsgACACIAMgASgCEBEDAAsfACAARQRAQZiPwABBMhC5AQALIAAgAiABKAIQEQAAC+MVAQx/EDMiBCABJgECfyAAIQYQMyIAIAImASMAQdAAayIIJAAgCCAANgIYIAggBDYCFCAIQRRqKAIAEMoBIQtBvM7AACgCAEUEQEHkzsAAQQA2AgBB2M7AAEEANgIAQczOwABBADYCAEHAzsAAQQA2AgBB4M7AACgCACEFQeDOwABBBDYCAEHczsAAKAIAIQ1B3M7AAEEANgIAQdTOwAAoAgAhA0HUzsAAQQQ2AgBB0M7AACgCACEJQdDOwABBADYCAEHIzsAAKAIAIQRByM7AAEECNgIAQcTOwAAoAgAhB0HEzsAAQQA2AgBBvM7AACgCACEAQbzOwABBATYCAAJAIABFDQAgBwRAIAQgB0EBdEECELABCyAJBEAgAyAJQQJ0QQQQsAELIA1FDQAgBSAN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IABBAWshACACQRBJIAJBBHYhAkUNAAsgAEGAAWoiAkGBAUkEQCABQZyvwABBAiAAIARqQYABakEAIABrECEgASAFNgIcIAEgBzYCBCABIAY2AgAgBEGAAWokAAwBCyACQYABQYyvwAAQaAALCwwAIAAgASkCADcDAAsNACABQfCYwABBAhAeCw0AIABBhJzAACABECkLDgAgAUGvm8AAQQUQmQELDgAgAUG8p8AAQRIQmQELDQAgAEHQqcAAIAEQKQsOACABQcipwABBBRCZAQsZACAAIAFBjM/AACgCACIAQTogABsRAgAACw0AIABBzK7AACABECkLCgAgAiAAIAEQHguQBQEHfwJAAn8CQCACIgUgACABa0sEQCABIAJqIQMgACACaiECIAAgBUEQSQ0CGiACQXxxIQRBACACQQNxIgZrIQcgBgRAIANBAWshAANAIAJBAWsiAiAALQAAOgAAIABBAWshACACIARLDQALCyAEIAUgBmsiBkF8cSIFayECIAMgB2oiA0EDcQRAIAVBAEwNAiADQQN0IgBBGHEhByADQXxxIghBBGshAUEAIABrQRhxIQkgCCgCACEAA0AgBEEEayIEIAAgCXQgASgCACIAIAd2cjYCACABQQRrIQEgAiAESQ0ACwwCCyAFQQBMDQEgASAGakEEayEBA0AgBEEEayIEIAEoAgA2AgAgAUEEayEBIAIgBEkNAAsMAQsCQCAFQRBJBEAgACECDAELIABBACAAa0EDcSIDaiEEIAMEQCAAIQIgASEAA0AgAiAALQAAOgAAIABBAWohACACQQFqIgIgBEkNAAsLIAQgBSADayIFQXxxIgZqIQICQCABIANqIgNBA3EEQCAGQQBMDQEgA0EDdCIAQRhxIQcgA0F8cSIIQQRqIQFBACAAa0EYcSEJIAgoAgAhAANAIAQgACAHdiABKAIAIgAgCXRyNgIAIAFBBGohASAEQQRqIgQgAkkNAAsMAQsgBkEATA0AIAMhAQNAIAQgASgCADYCACABQQRqIQEgBEEEaiIEIAJJDQALCyAFQQNxIQUgAyAGaiEBCyAFRQ0CIAIgBWohAANAIAIgAS0AADoAACABQQFqIQEgAkEBaiICIABJDQALDAILIAZBA3EiAEUNASADIAVrIQMgAiAAawshACADQQFrIQEDQCACQQFrIgIgAS0AADoA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YTBhYWYvbGlicmFyeS9jb3JlL3NyYy9zbGljZS9pbmRleC5ycwB0AxAATwAAAGgDAAA0AAAAdAMQAE8AAABvAwAAMgAAAGFzc2VydGlvbiBmYWlsZWQ6IHNlbGYuaXNfY2hhcl9ib3VuZGFyeShuKS9ydXN0Yy85MGIzNWE2MjM5YzNkOGJkYWJjNTMwYTZhMDgxNmY3ZmY4OWEwYWFmL2xpYnJhcnkvYWxsb2Mvc3JjL3N0cmluZy5ycwAAAA4EEABLAAAAxAcAAB0AAAAOBBAASwAAAMwHAAAdAAAAHAAAAAwAAAAEAAAAHQAAAB4AAAAfAAAARXJyb3Jhc3NlcnRpb24gZmFpbGVkOiBzZWxmLmlzX2NoYXJfYm91bmRhcnkobmV3X2xlbikvcnVzdGMvOTBiMzVhNjIzOWMzZDhiZGFiYzUzMGE2YTA4MTZmN2ZmODlhMGFhZi9saWJyYXJ5L2FsbG9jL3NyYy9zdHJpbmcucnPJBBAASwAAAMAFAAANAAAAAAAAABAAAAAEAAAAIgAAACMAAAAkAAAAYmFja3RyYWNlIGNhcHR1cmUgZmFpbGVkL1VzZXJzL2RtYXJjb3MvLmNhcmdvL3JlZ2lzdHJ5L3NyYy9pbmRleC5jcmF0ZXMuaW8tNmYxN2QyMmJiYTE1MDAxZi9hbnlob3ctMS4wLjk4L3NyYy9lcnJvci5ycwAAVAUQAF4AAABnBAAADgAAAAEAAAAAAAAAOiAAAMwFEAACAAAACgpDYXVzZWQgYnk6CgAAACUAAAAMAAAABAAAACYAAAAnAAAAHwAAAAoKc3RhY2sgYmFja3RyYWNlOlN0YWNrIGJhY2t0cmFjZToKABIGEAARAAAAUwBBuIzAAAvZBAEAAAAoAAAAYSBEaXNwbGF5IGltcGxlbWVudGF0aW9uIHJldHVybmVkIGFuIGVycm9yIHVuZXhwZWN0ZWRseQDJBBAASwAAAHsKAAAOAAAAL3J1c3RjLzkwYjM1YTYyMzljM2Q4YmRhYmM1MzBhNmEwODE2ZjdmZjg5YTBhYWYvbGlicmFyeS9hbGxvYy9zcmMvdmVjL21vZC5yc4gGEABMAAAALQoAACQAAAAAAAAAEAAAAAQAAAAiAAAAIwAAACQAAAAgICAgOiAAAAEAAAAAAAAAAAcQAAIAAAAgICAgICAgL1VzZXJzL2RtYXJjb3MvLmNhcmdvL3JlZ2lzdHJ5L3NyYy9pbmRleC5jcmF0ZXMuaW8tNmYxN2QyMmJiYTE1MDAxZi9qcy1zeXMtMC4zLjc3L3NyYy9saWIucnMAGwcQAFwAAAD7GAAAAQAAAAAAAAAEAAAABAAAADUAAABjbG9zdXJlIGludm9rZWQgcmVjdXJzaXZlbHkgb3IgYWZ0ZXIgYmVpbmcgZHJvcHBlZExhenkgaW5zdGFuY2UgaGFzIHByZXZpb3VzbHkgYmVlbiBwb2lzb25lZMoHEAAqAAAAL1VzZXJzL2RtYXJjb3MvLmNhcmdvL3JlZ2lzdHJ5L3NyYy9pbmRleC5jcmF0ZXMuaW8tNmYxN2QyMmJiYTE1MDAxZi9vbmNlX2NlbGwtMS4yMS4zL3NyYy9saWIucnMA/AcQAF8AAAAIAwAAGQAAAHJlZW50cmFudCBpbml0AABsCBAADgAAAPwHEABfAAAAegIAAA0AQZyRwAALlQ8EAAAABAAAADsAAAA6AAAAPAAAAAwAAAAEAAAAPQAAAD4AAAA/AAAAL3J1c3QvZGVwcy9kbG1hbGxvYy0wLjIuNi9zcmMvZGxtYWxsb2MucnNhc3NlcnRpb24gZmFpbGVkOiBwc2l6ZSA+PSBzaXplICsgbWluX292ZXJoZWFkAMQIEAApAAAAqAQAAAkAAABhc3NlcnRpb24gZmFpbGVkOiBwc2l6ZSA8PSBzaXplICsgbWF4X292ZXJoZWFkAADECBAAKQAAAK4EAAANAAAAc3RkL3NyYy9iYWNrdHJhY2UucnNvcGVyYXRpb24gbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtgAkQACgAAAAkAAAAAAAAAAIAAACoCRAAdW5zdXBwb3J0ZWQgYmFja3RyYWNlZGlzYWJsZWQgYmFja3RyYWNlAGwJEAAUAAAAigEAAB0AAABAAAAAEAAAAAQAAABBAAAAQgAAAAEAAAAAAAAAOiBzdGQvc3JjL3N5bmMvbGF6eV9sb2NrLnJzABYKEAAZAAAA0AAAABMAAABjYW5ub3QgcmVjdXJzaXZlbHkgYWNxdWlyZSBtdXRleEAKEAAgAAAAc3RkL3NyYy9zeXMvc3luYy9tdXRleC9ub190aHJlYWRzLnJzaAoQACQAAAAUAAAACQAAAHN0ZC9zcmMvc3luYy9v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Zm9ybWF0dGluZyB0cmFpdCBpbXBsZW1lbnRhdGlvbiByZXR1cm5lZCBhbiBlcnJvciB3aGVuIHRoZSB1bmRlcmx5aW5nIHN0cmVhbSBkaWQgbm90YWxsb2Mvc3JjL2ZtdC5ycwAAjhUQABAAAAB+AgAADgAAAGZyb21fc3RyX3JhZGl4X2ludDogbXVzdCBsaWUgaW4gdGhlIHJhbmdlIGBbMiwgMzZdYCAtIGZvdW5kILAVEAA8AAAALi4wMTIzNDU2Nzg5YWJjZGVmQm9ycm93TXV0RXJyb3JhbHJlYWR5IGJvcnJvd2VkOiAAABQWEAASAAAAAQAAAAAAAABbY2FsbGVkIGBPcHRpb246OnVud3JhcCgpYCBvbiBhIGBOb25lYCB2YWx1ZWluZGV4IG91dCBvZiBib3VuZHM6IHRoZSBsZW4gaXMgIGJ1dCB0aGUgaW5kZXggaXMgAABkFhAAIAAAAIQWEAASAAAAPT0hPW1hdGNoZXNhc3NlcnRpb24gYGxlZnQgIHJpZ2h0YCBmYWlsZWQKICBsZWZ0OiAKIHJpZ2h0OiAAsxYQABAAAADDFhAAFwAAANoWEAAJAAAAIHJpZ2h0YCBmYWlsZWQ6IAogIGxlZnQ6IAAAALMWEAAQAAAA/BYQABAAAAAMFxAACQAAANoWEAAJAAAAOiAAAAEAAAAAAAAAOBcQAAIAAAAAAAAADAAAAAQAAABlAAAAZgAAAGcAAAAgICAgIHsgLCAgewosCn0gfQpdY29yZS9zcmMvZm10L251bS5ycwAAdxcQABMAAABmAAAAFwAAADB4MDAwMTAyMDMwNDA1MDYwNzA4MDkxMDExMTIxMzE0MTUxNjE3MTgxOTIwMjEyMjIzMjQyNTI2MjcyODI5MzAzMTMyMzMzNDM1MzYzNzM4Mzk0MDQxNDI0MzQ0NDU0NjQ3NDg0OTUwNTE1MjUzNTQ1NTU2NTc1ODU5NjA2MTYyNjM2NDY1NjY2NzY4Njk3MDcxNzI3Mzc0NzU3Njc3Nzg3OTgwODE4MjgzODQ4NTg2ODc4ODg5OTA5MTkyOTM5NDk1OTY5Nzk4OTljb3JlL3NyYy9mbXQvbW9kLnJzZmFsc2V0cnVlAABmGBAAEwAAAKMJAAAmAAAAZhgQABMAAACsCQAAGgAAAHJhbmdlIHN0YXJ0IGluZGV4ICBvdXQgb2Yg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",import.meta.url));const t=__wbg_get_imports();(typeof r=="string"||typeof Request=="function"&&r instanceof Request||typeof URL=="function"&&r instanceof URL)&&(r=fetch(r));const{instance:e,module:A}=await __wbg_load(await r,t);return __wbg_finalize_init(e,A)}const LN_SCALE_MIN=-9,LN_SCALE_MAX=9,LN_RESCALE=(LN_SCALE_MAX-LN_SCALE_MIN)/254,SPLAT_TEX_WIDTH_BITS=11,SPLAT_TEX_HEIGHT_BITS=11,SPLAT_TEX_WIDTH=1<<SPLAT_TEX_WIDTH_BITS,SPLAT_TEX_HEIGHT=1<<SPLAT_TEX_HEIGHT_BITS,SPLAT_TEX_MIN_HEIGHT=1;function isBoolType(r){return r==="bool"||r==="bvec2"||r==="bvec3"||r==="bvec4"}function isIntType(r){return r==="int"||r==="ivec2"||r==="ivec3"||r==="ivec4"}function isUintType(r){return r==="uint"||r==="uvec2"||r==="uvec3"||r==="uvec4"}function isFloatType(r){return r==="float"||r==="vec2"||r==="vec3"||r==="vec4"}function isMatFloatType(r){return r==="mat2"||r==="mat2x2"||r==="mat2x3"||r==="mat2x4"||r==="mat3"||r==="mat3x2"||r==="mat3x3"||r==="mat3x4"||r==="mat4"||r==="mat4x2"||r==="mat4x3"||r==="mat4x4"}function isAllFloatType(r){return isFloatType(r)||isMatFloatType(r)}function isMat2(r){return r==="mat2"||r==="mat2x2"}function isMat3(r){return r==="mat3"||r==="mat3x3"}function isMat4(r){return r==="mat4"||r==="mat4x4"}function vectorElementType(r){switch(r){case"vec2":return"float";case"vec3":return"float";case"vec4":return"float";case"ivec2":return"int";case"ivec3":return"int";case"ivec4":return"int";case"uvec2":return"uint";case"uvec3":return"uint";case"uvec4":return"uint";default:throw new Error(`Invalid vector type: ${r}`)}}function vectorDim(r){switch(r){case"vec2":case"ivec2":case"uvec2":return 2;case"vec3":case"ivec3":case"uvec3":return 3;case"vec4":case"ivec4":case"uvec4":return 4;default:throw new Error(`Invalid vector type: ${r}`)}}function numberAsInt(r){return Math.trunc(r).toString()}function numberAsUint(r){return`${Math.max(0,Math.trunc(r)).toString()}u`}function numberAsFloat(r){return r===Number.POSITIVE_INFINITY?"INFINITY":r===Number.NEGATIVE_INFINITY?"-INFINITY":Number.isInteger(r)?r.toFixed(1):r.toString()}function valType(r){return r instanceof DynoValue?r.type:r.dynoOut().type}class DynoValue{constructor(t){this.__isDynoValue=!0,this.type=t}}class DynoOutput extends DynoValue{constructor(t,e){super(t.outTypes[e]),this.dyno=t,this.key=e}}class DynoLiteral extends DynoValue{constructor(t,e){super(t),this.literal=e}getLiteral(){return this.literal}}class DynoConst extends DynoLiteral{constructor(t,e){super(t,""),this.value=e}getLiteral(){const{type:t,value:e}=this;switch(t){case"bool":return e?"true":"false";case"uint":return numberAsUint(e);case"int":return numberAsInt(e);case"float":return numberAsFloat(e);case"bvec2":{const A=e;return`bvec2(${A[0]}, ${A[1]})`}case"uvec2":{if(e instanceof Vector2)return`uvec2(${numberAsUint(e.x)}, ${numberAsUint(e.y)})`;const A=e;return`uvec2(${numberAsUint(A[0])}, ${numberAsUint(A[1])})`}case"ivec2":{if(e instanceof Vector2)return`ivec2(${numberAsInt(e.x)}, ${numberAsInt(e.y)})`;const A=e;return`ivec2(${numberAsInt(A[0])}, ${numberAsInt(A[1])})`}case"vec2":{if(e instanceof Vector2)return`vec2(${numberAsFloat(e.x)}, ${numberAsFloat(e.y)})`;const A=e;return`vec2(${numberAsFloat(A[0])}, ${numberAsFloat(A[1])})`}case"bvec3":{const A=e;return`bvec3(${A[0]}, ${A[1]}, ${A[2]})`}case"uvec3":{if(e instanceof Vector3)return`uvec3(${numberAsUint(e.x)}, ${numberAsUint(e.y)}, ${numberAsUint(e.z)})`;const A=e;return`uvec3(${numberAsUint(A[0])}, ${numberAsUint(A[1])}, ${numberAsUint(A[2])})`}case"ivec3":{if(e instanceof Vector3)return`ivec3(${numberAsInt(e.x)}, ${numberAsInt(e.y)}, ${numberAsInt(e.z)})`;const A=e;return`ivec3(${numberAsInt(A[0])}, ${numberAsInt(A[1])}, ${numberAsInt(A[2])})`}case"vec3":{if(e instanceof Vector3)return`vec3(${numberAsFloat(e.x)}, ${numberAsFloat(e.y)}, ${numberAsFloat(e.z)})`;const A=e;return`vec3(${numberAsFloat(A[0])}, ${numberAsFloat(A[1])}, ${numberAsFloat(A[2])})`}case"bvec4":{const A=e;return`bvec4(${A[0]}, ${A[1]}, ${A[2]}, ${A[3]})`}case"uvec4":{if(e instanceof Vector4)return`uvec4(${numberAsUint(e.x)}, ${numberAsUint(e.y)}, ${numberAsUint(e.z)}, ${numberAsUint(e.w)})`;const A=e;return`uvec4(${numberAsUint(A[0])}, ${numberAsUint(A[1])}, ${numberAsUint(A[2])}, ${numberAsUint(A[3])})`}case"ivec4":{if(e instanceof Vector4)return`ivec4(${numberAsInt(e.x)}, ${numberAsInt(e.y)}, ${numberAsInt(e.z)}, ${numberAsInt(e.w)})`;const A=e;return`ivec4(${numberAsInt(A[0])}, ${numberAsInt(A[1])}, ${numberAsInt(A[2])}, ${numberAsInt(A[3])})`}case"vec4":{if(e instanceof Vector4)return`vec4(${numberAsFloat(e.x)}, ${numberAsFloat(e.y)}, ${numberAsFloat(e.z)}, ${numberAsFloat(e.w)})`;if(e instanceof Quaternion)return`vec4(${numberAsFloat(e.x)}, ${numberAsFloat(e.y)}, ${numberAsFloat(e.z)}, ${numberAsFloat(e.w)})`;const A=e;return`vec4(${numberAsFloat(A[0])}, ${numberAsFloat(A[1])}, ${numberAsFloat(A[2])}, ${numberAsFloat(A[3])})`}case"mat2":case"mat2x2":{const A=e,a=A instanceof Matrix2?A.elements:e,s=new Array(4).fill(0).map((n,l)=>numberAsFloat(a[l]));return`${t}(${s.join(", ")})`}case"mat2x3":{const A=e,a=new Array(6).fill(0).map((s,n)=>numberAsFloat(A[n]));return`${t}(${a.join(", ")})`}case"mat2x4":{const A=e,a=new Array(8).fill(0).map((s,n)=>numberAsFloat(A[n]));return`${t}(${a.join(", ")})`}case"mat3":case"mat3x3":{const A=e,a=A instanceof Matrix3?A.elements:e,s=new Array(9).fill(0).map((n,l)=>numberAsFloat(a[l]));return`${t}(${s.join(", ")})`}case"mat3x2":{const A=e,a=new Array(6).fill(0).map((s,n)=>numberAsFloat(A[n]));return`${t}(${a.join(", ")})`}case"mat3x4":{const A=e,a=new Array(12).fill(0).map((s,n)=>numberAsFloat(A[n]));return`${t}(${a.join(", ")})`}case"mat4":case"mat4x4":{const A=e,a=A instanceof Matrix4?A.elements:e,s=new Array(16).fill(0).map((n,l)=>numberAsFloat(a[l]));return`${t}(${s.join(", ")})`}case"mat4x2":{const A=e,a=new Array(8).fill(0).map((s,n)=>numberAsFloat(A[n]));return`${t}(${a.join(", ")})`}case"mat4x3":{const A=e,a=new Array(12).fill(0).map((s,n)=>numberAsFloat(A[n]));return`${t}(${a.join(", ")})`}default:throw new Error(`Type not implemented: ${String(t)}`)}}}function dynoConst(r,t){return new DynoConst(r,t)}function literalZero(r){const t=String(r);if(isBoolType(r))return`${t}(false)`;if(isAllFloatType(r))return`${t}(0.0)`;if(isIntType(r))return`${t}(0)`;if(isUintType(r))return`${t}(0u)`;throw new Error(`Type not implemented: ${t}`)}const DEFAULT_INDENT="    ";class Compilation{constructor({indent:t}={}){this.globals=new Set,this.statements=[],this.uniforms={},this.declares=new Set,this.updaters=[],this.sequence=0,this.indent=DEFAULT_INDENT,this.indent=t??DEFAULT_INDENT}nextSequence(){return this.sequence++}}class Dyno{constructor({inTypes:t,outTypes:e,inputs:A,update:a,globals:s,statements:n,generate:l}){this.inTypes=t??{},this.outTypes=e??{},this.inputs=A??{},this.update=a,this.globals=s,this.statements=n,this.generate=l??(({inputs:d,outputs:f,compile:E})=>{var I,B;return{globals:(I=this.globals)==null?void 0:I.call(this,{inputs:d,outputs:f,compile:E}),statements:(B=this.statements)==null?void 0:B.call(this,{inputs:d,outputs:f,compile:E})}})}get outputs(){const t={};for(const e in this.outTypes)t[e]=new DynoOutput(this,e);return t}apply(t){return Object.assign(this.inputs,t),this.outputs}compile({inputs:t,outputs:e,compile:A}){const a=[`// ${this.constructor.name}(${Object.values(t).join(", ")}) => (${Object.values(e).join(", ")})`],s=[];for(const f in e){const E=e[f];E&&!A.declares.has(E)&&(A.declares.add(E),s.push(f))}const{globals:n,statements:l,uniforms:d}=this.generate({inputs:t,outputs:e,compile:A});for(const f of n??[])A.globals.add(f);for(const f in d)A.uniforms[f]=d[f];this.update&&A.updaters.push(this.update);for(const f of s){const E=e[f];E&&(A.uniforms[E]||a.push(`${dynoDeclare(E,this.outTypes[f])};`))}return l!=null&&l.length&&(a.push("{"),a.push(...l.map(f=>A.indent+f)),a.push("}")),a}}class DynoBlock extends Dyno{constructor({inTypes:t,outTypes:e,inputs:A,update:a,globals:s,construct:n}){super({inTypes:t,outTypes:e,inputs:A,update:a,globals:s,generate:l=>this.generateBlock(l)}),this.construct=n}generateBlock({inputs:t,outputs:e,compile:A}){var a,s;const n={},l={};for(const _ in t)t[_]!=null&&(n[_]=new DynoLiteral(this.inTypes[_],t[_]));for(const _ in e)e[_]!=null&&(l[_]=new DynoValue(this.outTypes[_]));const d={roots:[]},f=this.construct(n,l,d);for(const _ of((a=this.globals)==null?void 0:a.call(this,{inputs:t,outputs:e,compile:A}))??[])A.globals.add(_);const E=[],I=new Map;function B(_,Q,D){let b=I.get(_);if(!b){b={sequence:A.nextSequence(),outNames:new Map,newOuts:new Set},I.set(_,b);for(const T in _.inputs){let P=_.inputs[T];for(;P;){if(P instanceof DynoValue){P instanceof DynoOutput&&B(P.dyno,P.key);break}P=P.dynoOut()}}E.push(_)}Q&&(D||b.newOuts.add(Q),b.outNames.set(Q,D??`${Q}_${b.sequence}`))}for(const _ of d.roots)B(_);for(const _ in l){let Q=(f==null?void 0:f[_])??l[_];for(;Q;){if(Q instanceof DynoValue){Q instanceof DynoOutput&&B(Q.dyno,Q.key,e[_]);break}Q=Q.dynoOut()}l[_]=Q}const y=[];for(const _ of E){const Q={},D={};for(const P in _.inputs){let R=_.inputs[P];for(;R;){if(R instanceof DynoValue){if(R instanceof DynoLiteral)Q[P]=R.getLiteral();else if(R instanceof DynoOutput){const F=(s=I.get(R.dyno))==null?void 0:s.outNames.get(R.key);if(!F)throw new Error(`Source not found for ${R.dyno.constructor.name}.${R.key}`);Q[P]=F}break}R=R.dynoOut()}}const b=I.get(_)??{outNames:new Map};for(const[P,R]of b.outNames.entries())D[P]=R;const T=_.compile({inputs:Q,outputs:D,compile:A});y.push(T)}const v=[];for(const _ in e)l[_]instanceof DynoLiteral&&v.push(`${e[_]} = ${l[_].getLiteral()};`);return v.length>0&&y.push(v),{statements:y.flatMap((_,Q)=>Q===0?_:["",..._])}}}function dynoBlock(r,t,e,{update:A,globals:a}={}){return new DynoBlock({inTypes:r,outTypes:t,construct:e,update:A,globals:a})}function dyno$1({inTypes:r,outTypes:t,inputs:e,update:A,globals:a,statements:s,generate:n}){return new Dyno({inTypes:r,outTypes:t,inputs:e,update:A,globals:a,statements:s,generate:n})}function dynoDeclare(r,t,e){const A=typeof t=="string"?t:t.type;if(!A)throw new Error(`Invalid DynoType: ${String(t)}`);return`${A} ${r}${e!=null?`[${e}]`:""}`}function unindentLines(r){var t;let e=!1;const A=r.split(`
`).map(n=>{const l=n.trimEnd();return e?l:l.length>0?(e=!0,l):null}).filter(n=>n!=null);for(;A.length>0&&A[A.length-1].length===0;)A.pop();if(A.length===0)return[];const a=(t=A[0].match(/^\s*/))==null?void 0:t[0];if(!a)return A;const s=new RegExp(`^${a}`);return A.map(n=>n.replace(s,""))}function unindent(r){return unindentLines(r).join(`
`)}class UnaryOp extends Dyno{constructor({a:t,outKey:e,outTypeFunc:A}){const a={a:valType(t)},s=A(valType(t)),n={[e]:s};super({inTypes:a,outTypes:n,inputs:{a:t}}),this.outKey=e}dynoOut(){return new DynoOutput(this,this.outKey)}}class BinaryOp extends Dyno{constructor({a:t,b:e,outKey:A,outTypeFunc:a}){const s={a:valType(t),b:valType(e)},n=a(valType(t),valType(e)),l={[A]:n};super({inTypes:s,outTypes:l,inputs:{a:t,b:e}}),this.outKey=A}dynoOut(){return new DynoOutput(this,this.outKey)}}const Gsplat={type:"Gsplat"},TPackedSplats={type:"PackedSplats"},readPackedSplat=(r,t)=>new ReadPackedSplat({packedSplats:r,index:t}),readPackedSplatRange=(r,t,e,A)=>new ReadPackedSplatRange({packedSplats:r,index:t,base:e,count:A}),splitGsplat=r=>new SplitGsplat({gsplat:r}),combineGsplat=({gsplat:r,flags:t,index:e,center:A,scales:a,quaternion:s,rgba:n,rgb:l,opacity:d,x:f,y:E,z:I,r:B,g:y,b:v})=>new CombineGsplat({gsplat:r,flags:t,index:e,center:A,scales:a,quaternion:s,rgba:n,rgb:l,opacity:d,x:f,y:E,z:I,r:B,g:y,b:v}),transformGsplat=(r,{scale:t,rotate:e,translate:A,recolor:a})=>new TransformGsplat({gsplat:r,scale:t,rotate:e,translate:A,recolor:a}),defineGsplat=unindent(`
  struct Gsplat {
    vec3 center;
    uint flags;
    vec3 scales;
    int index;
    vec4 quaternion;
    vec4 rgba;
  };
  const uint GSPLAT_FLAG_ACTIVE = 1u << 0u;

  bool isGsplatActive(uint flags) {
    return (flags & GSPLAT_FLAG_ACTIVE) != 0u;
  }
`),definePackedSplats=unindent(`
  struct PackedSplats {
    usampler2DArray texture;
    int numSplats;
  };
`),defineReadPackedSplat=unindent(`
  bool readPackedSplat(usampler2DArray texture, int numSplats, int index, out Gsplat gsplat) {
    if ((index >= 0) && (index < numSplats)) {
      uvec4 packed = texelFetch(texture, splatTexCoord(index), 0);
      unpackSplat(packed, gsplat.center, gsplat.scales, gsplat.quaternion, gsplat.rgba);
      return true;
    } else {
      return false;
    }
  }
`);class ReadPackedSplat extends Dyno{constructor({packedSplats:t,index:e}){super({inTypes:{packedSplats:TPackedSplats,index:"int"},outTypes:{gsplat:Gsplat},inputs:{packedSplats:t,index:e},globals:()=>[defineGsplat,definePackedSplats,defineReadPackedSplat],statements:({inputs:A,outputs:a})=>{const{gsplat:s}=a;if(!s)return[];const{packedSplats:n,index:l}=A;let d;return n&&l?d=unindentLines(`
            if (readPackedSplat(${n}.texture, ${n}.numSplats, ${l}, ${s})) {
              bool zeroSize = all(equal(${s}.scales, vec3(0.0, 0.0, 0.0)));
              ${s}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
            } else {
              ${s}.flags = 0u;
            }
          `):d=[`${s}.flags = 0u;`],d.push(`${s}.index = ${l??"0"};`),d}})}dynoOut(){return new DynoOutput(this,"gsplat")}}class ReadPackedSplatRange extends Dyno{constructor({packedSplats:t,index:e,base:A,count:a}){super({inTypes:{packedSplats:TPackedSplats,index:"int",base:"int",count:"int"},outTypes:{gsplat:Gsplat},inputs:{packedSplats:t,index:e,base:A,count:a},globals:()=>[defineGsplat,definePackedSplats,defineReadPackedSplat],statements:({inputs:s,outputs:n})=>{const{gsplat:l}=n;if(!l)return[];const{packedSplats:d,index:f,base:E,count:I}=s;let B;return d&&f&&E&&I?B=unindentLines(`
            ${l}.flags = 0u;
            if ((${f} >= ${E}) && (${f} < (${E} + ${I}))) {
              if (readPackedSplat(${d}.texture, ${d}.numSplats, ${f}, ${l})) {
                bool zeroSize = all(equal(${l}.scales, vec3(0.0, 0.0, 0.0)));
                ${l}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
              }
            }
          `):B=[`${l}.flags = 0u;`],B.push(`${l}.index = ${f??"0"};`),B}})}dynoOut(){return new DynoOutput(this,"gsplat")}}class SplitGsplat extends Dyno{constructor({gsplat:t}){super({inTypes:{gsplat:Gsplat},outTypes:{flags:"uint",active:"bool",index:"int",center:"vec3",scales:"vec3",quaternion:"vec4",rgba:"vec4",rgb:"vec3",opacity:"float",x:"float",y:"float",z:"float",r:"float",g:"float",b:"float"},inputs:{gsplat:t},globals:()=>[defineGsplat],statements:({inputs:e,outputs:A})=>{const{gsplat:a}=e,{flags:s,active:n,index:l,center:d,scales:f,quaternion:E,rgba:I,rgb:B,opacity:y,x:v,y:S,z:_,r:Q,g:D,b}=A;return[s?`${s} = ${a?`${a}.flags`:"0u"};`:null,n?`${n} = isGsplatActive(${a?`${a}.flags`:"0u"});`:null,l?`${l} = ${a?`${a}.index`:"0"};`:null,d?`${d} = ${a?`${a}.center`:"vec3(0.0, 0.0, 0.0)"};`:null,f?`${f} = ${a?`${a}.scales`:"vec3(0.0, 0.0, 0.0)"};`:null,E?`${E} = ${a?`${a}.quaternion`:"vec4(0.0, 0.0, 0.0, 1.0)"};`:null,I?`${I} = ${a?`${a}.rgba`:"vec4(0.0, 0.0, 0.0, 0.0)"};`:null,B?`${B} = ${a?`${a}.rgba.rgb`:"vec3(0.0, 0.0, 0.0)"};`:null,y?`${y} = ${a?`${a}.rgba.a`:"0.0"};`:null,v?`${v} = ${a?`${a}.center.x`:"0.0"};`:null,S?`${S} = ${a?`${a}.center.y`:"0.0"};`:null,_?`${_} = ${a?`${a}.center.z`:"0.0"};`:null,Q?`${Q} = ${a?`${a}.rgba.r`:"0.0"};`:null,D?`${D} = ${a?`${a}.rgba.g`:"0.0"};`:null,b?`${b} = ${a?`${a}.rgba.b`:"0.0"};`:null].filter(Boolean)}})}}class CombineGsplat extends Dyno{constructor({gsplat:t,flags:e,index:A,center:a,scales:s,quaternion:n,rgba:l,rgb:d,opacity:f,x:E,y:I,z:B,r:y,g:v,b:S}){super({inTypes:{gsplat:Gsplat,flags:"uint",index:"int",center:"vec3",scales:"vec3",quaternion:"vec4",rgba:"vec4",rgb:"vec3",opacity:"float",x:"float",y:"float",z:"float",r:"float",g:"float",b:"float"},outTypes:{gsplat:Gsplat},inputs:{gsplat:t,flags:e,index:A,center:a,scales:s,quaternion:n,rgba:l,rgb:d,opacity:f,x:E,y:I,z:B,r:y,g:v,b:S},globals:()=>[defineGsplat],statements:({inputs:_,outputs:Q})=>{const{gsplat:D}=Q;if(!D)return[];const{gsplat:b,flags:T,index:P,center:R,scales:F,quaternion:O,rgba:N,rgb:L,opacity:Y,x:rt,y:tt,z:at,r:pt,g:ct,b:$}=_;return[`${D}.flags = ${T??(b?`${b}.flags`:"0u")};`,`${D}.index = ${P??(b?`${b}.index`:"0")};`,`${D}.center = ${R??(b?`${b}.center`:"vec3(0.0, 0.0, 0.0)")};`,`${D}.scales = ${F??(b?`${b}.scales`:"vec3(0.0, 0.0, 0.0)")};`,`${D}.quaternion = ${O??(b?`${b}.quaternion`:"vec4(0.0, 0.0, 0.0, 1.0)")};`,`${D}.rgba = ${N??(b?`${b}.rgba`:"vec4(0.0, 0.0, 0.0, 0.0)")};`,L?`${D}.rgba.rgb = ${L};`:null,Y?`${D}.rgba.a = ${Y};`:null,rt?`${D}.center.x = ${rt};`:null,tt?`${D}.center.y = ${tt};`:null,at?`${D}.center.z = ${at};`:null,pt?`${D}.rgba.r = ${pt};`:null,ct?`${D}.rgba.g = ${ct};`:null,$?`${D}.rgba.b = ${$};`:null].filter(Boolean)}})}dynoOut(){return new DynoOutput(this,"gsplat")}}unindent(`
  vec3 gsplatNormal(vec3 scales, vec4 quaternion) {
    float minScale = min(scales.x, min(scales.y, scales.z));
    vec3 normal;
    if (scales.z == minScale) {
      normal = vec3(0.0, 0.0, 1.0);
    } else if (scales.y == minScale) {
      normal = vec3(0.0, 1.0, 0.0);
    } else {
      normal = vec3(1.0, 0.0, 0.0);
    }
    return quatVec(quaternion, normal);
  }
`);class TransformGsplat extends Dyno{constructor({gsplat:t,scale:e,rotate:A,translate:a,recolor:s}){super({inTypes:{gsplat:Gsplat,scale:"float",rotate:"vec4",translate:"vec3",recolor:"vec4"},outTypes:{gsplat:Gsplat},inputs:{gsplat:t,scale:e,rotate:A,translate:a,recolor:s},globals:()=>[defineGsplat],statements:({inputs:n,outputs:l,compile:d})=>{const{gsplat:f}=l;if(!f||!n.gsplat)return[];const{scale:E,rotate:I,translate:B,recolor:y}=n,v=d.indent;return[`${f} = ${n.gsplat};`,`if (isGsplatActive(${f}.flags)) {`,E?`${v}${f}.center *= ${E};`:null,I?`${v}${f}.center = quatVec(${I}, ${f}.center);`:null,B?`${v}${f}.center += ${B};`:null,E?`${v}${f}.scales *= ${E};`:null,I?`${v}${f}.quaternion = quatQuat(${I}, ${f}.quaternion);`:null,y?`${v}${f}.rgba *= ${y};`:null,"}"].filter(Boolean)}})}dynoOut(){return new DynoOutput(this,"gsplat")}}const outputPackedSplat=r=>new OutputPackedSplat({gsplat:r});class OutputPackedSplat extends Dyno{constructor({gsplat:t}){super({inTypes:{gsplat:Gsplat},inputs:{gsplat:t},globals:()=>[defineGsplat],statements:({inputs:e,outputs:A})=>{const{output:a}=A;if(!a)return[];const{gsplat:s}=e;return s?unindentLines(`
            if (isGsplatActive(${s}.flags)) {
              ${a} = packSplat(${s}.center, ${s}.scales, ${s}.quaternion, ${s}.rgba);
            } else {
              ${a} = uvec4(0u, 0u, 0u, 0u);
            }
          `):[`${a} = uvec4(0u, 0u, 0u, 0u);`]}})}dynoOut(){return new DynoOutput(this,"output")}}class OutputRgba8 extends Dyno{constructor({rgba8:t}){super({inTypes:{rgba8:"vec4"},inputs:{rgba8:t},statements:({inputs:e,outputs:A})=>[`target = ${e.rgba8??"vec4(0.0, 0.0, 0.0, 0.0)"};`]})}dynoOut(){return new DynoOutput(this,"rgba8")}}class DynoUniform extends Dyno{constructor({key:t,type:e,count:A,value:a,update:s,globals:n}){t=t??"value",super({outTypes:{[t]:e},update:()=>{if(s){const l=s(this.value);l!==void 0&&(this.value=l)}this.uniform.value=this.value},generate:({inputs:l,outputs:d})=>{const f=(n==null?void 0:n({inputs:l,outputs:d}))??[],E={},I=d[t];return I&&(f.push(`uniform ${dynoDeclare(I,e,A)};`),E[I]=this.uniform),{globals:f,uniforms:E}}}),this.type=e,this.count=A,this.value=a,this.uniform={value:a},this.outKey=t}dynoOut(){return new DynoOutput(this,this.outKey)}}class DynoBool extends DynoUniform{constructor({key:t,value:e,update:A}){super({key:t,type:"bool",value:e,update:A})}}class DynoInt extends DynoUniform{constructor({key:t,value:e,update:A}){super({key:t,type:"int",value:e,update:A})}}class DynoFloat extends DynoUniform{constructor({key:t,value:e,update:A}){super({key:t,type:"float",value:e,update:A})}}class DynoVec3 extends DynoUniform{constructor({key:t,value:e,update:A}){super({key:t,type:"vec3",value:e,update:A})}}class DynoVec4 extends DynoUniform{constructor({key:t,value:e,update:A}){super({key:t,type:"vec4",value:e,update:A})}}class DynoUsampler2DArray extends DynoUniform{constructor({key:t,value:e,update:A}){super({key:t,type:"usampler2DArray",value:e,update:A})}}var u8=Uint8Array,u16=Uint16Array,i32=Int32Array,fleb=new u8([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),fdeb=new u8([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),clim=new u8([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),freb=function(r,t){for(var e=new u16(31),A=0;A<31;++A)e[A]=t+=1<<r[A-1];for(var a=new i32(e[30]),A=1;A<30;++A)for(var s=e[A];s<e[A+1];++s)a[s]=s-e[A]<<5|A;return{b:e,r:a}},_a=freb(fleb,2),fl=_a.b,revfl=_a.r;fl[28]=258,revfl[258]=28;var _b=freb(fdeb,0),fd=_b.b,rev=new u16(32768);for(var i=0;i<32768;++i){var x=(i&43690)>>1|(i&21845)<<1;x=(x&52428)>>2|(x&13107)<<2,x=(x&61680)>>4|(x&3855)<<4,rev[i]=((x&65280)>>8|(x&255)<<8)>>1}var hMap=function(r,t,e){for(var A=r.length,a=0,s=new u16(t);a<A;++a)r[a]&&++s[r[a]-1];var n=new u16(t);for(a=1;a<t;++a)n[a]=n[a-1]+s[a-1]<<1;var l;{l=new u16(1<<t);var d=15-t;for(a=0;a<A;++a)if(r[a])for(var f=a<<4|r[a],E=t-r[a],I=n[r[a]-1]++<<E,B=I|(1<<E)-1;I<=B;++I)l[rev[I]>>d]=f}return l},flt=new u8(288);for(var i=0;i<144;++i)flt[i]=8;for(var i=144;i<256;++i)flt[i]=9;for(var i=256;i<280;++i)flt[i]=7;for(var i=280;i<288;++i)flt[i]=8;var fdt=new u8(32);for(var i=0;i<32;++i)fdt[i]=5;var flrm=hMap(flt,9),fdrm=hMap(fdt,5),max$1=function(r){for(var t=r[0],e=1;e<r.length;++e)r[e]>t&&(t=r[e]);return t},bits=function(r,t,e){var A=t/8|0;return(r[A]|r[A+1]<<8)>>(t&7)&e},bits16=function(r,t){var e=t/8|0;return(r[e]|r[e+1]<<8|r[e+2]<<16)>>(t&7)},shft=function(r){return(r+7)/8|0},slc=function(r,t,e){return(t==null||t<0)&&(t=0),(e==null||e>r.length)&&(e=r.length),new u8(r.subarray(t,e))},ec=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],err=function(r,t,e){var A=new Error(t||ec[r]);if(A.code=r,Error.captureStackTrace&&Error.captureStackTrace(A,err),!e)throw A;return A},inflt=function(r,t,e,A){var a=r.length,s=0;if(!a||t.f&&!t.l)return e||new u8(0);var n=!e,l=n||t.i!=2,d=t.i;n&&(e=new u8(a*3));var f=function($t){var ne=e.length;if($t>ne){var Ae=new u8(Math.max(ne*2,$t));Ae.set(e),e=Ae}},E=t.f||0,I=t.p||0,B=t.b||0,y=t.l,v=t.d,S=t.m,_=t.n,Q=a*8;do{if(!y){E=bits(r,I,1);var D=bits(r,I+1,3);if(I+=3,D)if(D==1)y=flrm,v=fdrm,S=9,_=5;else if(D==2){var R=bits(r,I,31)+257,F=bits(r,I+10,15)+4,O=R+bits(r,I+5,31)+1;I+=14;for(var N=new u8(O),L=new u8(19),Y=0;Y<F;++Y)L[clim[Y]]=bits(r,I+Y*3,7);I+=F*3;for(var rt=max$1(L),tt=(1<<rt)-1,at=hMap(L,rt),Y=0;Y<O;){var pt=at[bits(r,I,tt)];I+=pt&15;var b=pt>>4;if(b<16)N[Y++]=b;else{var ct=0,$=0;for(b==16?($=3+bits(r,I,3),I+=2,ct=N[Y-1]):b==17?($=3+bits(r,I,7),I+=3):b==18&&($=11+bits(r,I,127),I+=7);$--;)N[Y++]=ct}}var q=N.subarray(0,R),Ct=N.subarray(R);S=max$1(q),_=max$1(Ct),y=hMap(q,S),v=hMap(Ct,_)}else err(1);else{var b=shft(I)+4,T=r[b-4]|r[b-3]<<8,P=b+T;if(P>a){d&&err(0);break}l&&f(B+T),e.set(r.subarray(b,P),B),t.b=B+=T,t.p=I=P*8,t.f=E;continue}if(I>Q){d&&err(0);break}}l&&f(B+131072);for(var wt=(1<<S)-1,Bt=(1<<_)-1,ut=I;;ut=I){var ct=y[bits16(r,I)&wt],K=ct>>4;if(I+=ct&15,I>Q){d&&err(0);break}if(ct||err(2),K<256)e[B++]=K;else if(K==256){ut=I,y=null;break}else{var J=K-254;if(K>264){var Y=K-257,At=fleb[Y];J=bits(r,I,(1<<At)-1)+fl[Y],I+=At}var xt=v[bits16(r,I)&Bt],mt=xt>>4;xt||err(3),I+=xt&15;var Ct=fd[mt];if(mt>3){var At=fdeb[mt];Ct+=bits16(r,I)&(1<<At)-1,I+=At}if(I>Q){d&&err(0);break}l&&f(B+131072);var Tt=B+J;if(B<Ct){var Vt=s-Ct,Nt=Math.min(Ct,Tt);for(Vt+B<0&&err(3);B<Nt;++B)e[B]=A[Vt+B]}for(;B<Tt;++B)e[B]=e[B-Ct]}}t.l=y,t.p=ut,t.b=B,t.f=E,y&&(E=1,t.m=S,t.d=v,t.n=_)}while(!E);return B!=e.length&&n?slc(e,0,B):e.subarray(0,B)},et=new u8(0),gzs=function(r){(r[0]!=31||r[1]!=139||r[2]!=8)&&err(6,"invalid gzip data");var t=r[3],e=10;t&4&&(e+=(r[10]|r[11]<<8)+2);for(var A=(t>>3&1)+(t>>4&1);A>0;A-=!r[e++]);return e+(t&2)},Inflate=function(){function r(t,e){typeof t=="function"&&(e=t,t={}),this.ondata=e;var A=t&&t.dictionary&&t.dictionary.subarray(-32768);this.s={i:0,b:A?A.length:0},this.o=new u8(32768),this.p=new u8(0),A&&this.o.set(A)}return r.prototype.e=function(t){if(this.ondata||err(5),this.d&&err(4),!this.p.length)this.p=t;else if(t.length){var e=new u8(this.p.length+t.length);e.set(this.p),e.set(t,this.p.length),this.p=e}},r.prototype.c=function(t){this.s.i=+(this.d=t||!1);var e=this.s.b,A=inflt(this.p,this.s,this.o);this.ondata(slc(A,e,this.s.b),this.d),this.o=slc(A,this.s.b-32768),this.s.b=this.o.length,this.p=slc(this.p,this.s.p/8|0),this.s.p&=7},r.prototype.push=function(t,e){this.e(t),this.c(e)},r}(),Gunzip=function(){function r(t,e){this.v=1,this.r=0,Inflate.call(this,t,e)}return r.prototype.push=function(t,e){if(Inflate.prototype.e.call(this,t),this.r+=t.length,this.v){var A=this.p.subarray(this.v-1),a=A.length>3?gzs(A):4;if(a>A.length){if(!e)return}else this.v>1&&this.onmember&&this.onmember(this.r-A.length);this.p=A.subarray(a),this.v=0}Inflate.prototype.c.call(this,e),this.s.f&&!this.s.l&&!e&&(this.v=shft(this.s.p)+9,this.s={i:0},this.o=new u8(0),this.push(new u8(0),e))},r}(),td=typeof TextDecoder<"u"&&new TextDecoder,tds=0;try{td.decode(et,{stream:!0}),tds=1}catch{}const f32buffer=new Float32Array(1),u32buffer=new Uint32Array(f32buffer.buffer);function toHalf(r){f32buffer[0]=r;const t=u32buffer[0],e=t>>31&1,A=t>>23&255,a=t&8388607,s=e<<15;if(A===255)return a!==0?s|32767:s|31744;const n=A-127+15;if(n>=31)return s|31744;if(n<=0){if(n<-10)return s;const d=(a|8388608)>>1-n+13;return s|d}const l=a>>13;return s|n<<10|l}function fromHalf(r){const t=r>>15&1,e=r>>10&31,A=r&1023;let a;if(e===0)if(A===0)a=t<<31;else{let s=A,n=-14;for(;(s&1024)===0;)s<<=1,n--;s&=1023;const l=n+127,d=s<<13;a=t<<31|l<<23|d}else if(e===31)A===0?a=t<<31|2139095040:a=t<<31|2143289344;else{const s=e-15+127,n=A<<13;a=t<<31|s<<23|n}return u32buffer[0]=a,f32buffer[0]}function floatToUint8(r){return Math.max(0,Math.min(255,Math.round(r*255)))}function getArrayBuffers(r){const t=[],e=new Set;function A(a){a&&typeof a=="object"&&!e.has(a)&&(e.add(a),a instanceof ArrayBuffer?t.push(a):ArrayBuffer.isView(a)?t.push(a.buffer):Array.isArray(a)?a.forEach(A):Object.values(a).forEach(A))}return A(r),t}class FreeList{constructor({allocate:t,dispose:e,valid:A}){this.items=[],this.allocate=t,this.dispose=e,this.valid=A}alloc(t){for(;;){const e=this.items.pop();if(!e)break;if(this.valid(e,t))return e;this.dispose&&this.dispose(e)}return this.allocate(t)}free(t){this.items.push(t)}disposeAll(){let t;for(t=this.items.pop();t;)this.dispose&&this.dispose(t),t=this.items.pop()}}function setPackedSplat(r,t,e,A,a,s,n,l,d,f,E,I,B,y,v,S){const _=floatToUint8(y),Q=floatToUint8(v),D=floatToUint8(S),b=floatToUint8(B),T=encodeQuatOctXy88R8(new Quaternion(d,f,E,I)),P=T&255,R=T>>>8&255,F=T>>>16&255,O=s===0?0:Math.min(255,Math.max(0,Math.round((Math.log(s)-LN_SCALE_MIN)/LN_RESCALE)+1)),N=n===0?0:Math.min(255,Math.max(0,Math.round((Math.log(n)-LN_SCALE_MIN)/LN_RESCALE)+1)),L=l===0?0:Math.min(255,Math.max(0,Math.round((Math.log(l)-LN_SCALE_MIN)/LN_RESCALE)+1)),Y=toHalf(e),rt=toHalf(A),tt=toHalf(a),at=t*4;r[at]=_|Q<<8|D<<16|b<<24,r[at+1]=Y|rt<<16,r[at+2]=tt|P<<16|R<<24,r[at+3]=O|N<<8|L<<16|F<<24}const packedCenter=new Vector3,packedScales=new Vector3,packedQuaternion=new Quaternion,packedColor=new Color,packedFields={center:packedCenter,scales:packedScales,quaternion:packedQuaternion,color:packedColor,opacity:0};function unpackSplat(r,t){const e=packedFields,A=t*4,a=r[A],s=r[A+1],n=r[A+2],l=r[A+3];e.color.set((a&255)/255,(a>>>8&255)/255,(a>>>16&255)/255),e.opacity=(a>>>24&255)/255,e.center.set(fromHalf(s&65535),fromHalf(s>>>16&65535),fromHalf(n&65535));const d=l&255;e.scales.x=d===0?0:Math.exp(LN_SCALE_MIN+(d-1)*LN_RESCALE);const f=l>>>8&255;e.scales.y=f===0?0:Math.exp(LN_SCALE_MIN+(f-1)*LN_RESCALE);const E=l>>>16&255;e.scales.z=E===0?0:Math.exp(LN_SCALE_MIN+(E-1)*LN_RESCALE);const I=n>>>16&65535|l>>>8&16711680;return decodeQuatOctXy88R8(I,e.quaternion),e}function getTextureSize(r){const t=SPLAT_TEX_WIDTH,e=Math.max(SPLAT_TEX_MIN_HEIGHT,Math.min(SPLAT_TEX_HEIGHT,Math.ceil(r/t))),A=Math.ceil(r/(t*e)),a=t*e*A;return{width:t,height:e,depth:A,maxSplats:a}}function cloneClock(r){const t=new Clock(r.autoStart);return t.startTime=r.startTime,t.oldTime=r.oldTime,t.elapsedTime=r.elapsedTime,t.running=r.running,t}const IDENT_VERTEX_SHADER=unindent(`
  precision highp float;

  in vec3 position;

  void main() {
    gl_Position = vec4(position.xy, 0.0, 1.0);
  }
`);function averagePositions(r){const t=new Vector3;for(const e of r)t.add(e);return t.divideScalar(r.length)}function averageQuaternions(r){if(r.length===0)return new Quaternion;const t=r[0].clone();for(let e=1;e<r.length;e++)r[e].dot(r[0])<0?(t.x-=r[e].x,t.y-=r[e].y,t.z-=r[e].z,t.w-=r[e].w):(t.x+=r[e].x,t.y+=r[e].y,t.z+=r[e].z,t.w+=r[e].w);return t.normalize()}function coorientDist(r,t){const[e,A]=[new Vector3,new Quaternion],[a,s]=[new Vector3,new Quaternion];r.decompose(e,A,new Vector3),t.decompose(a,s,new Vector3);const n=e.distanceTo(a),l=Math.abs(A.dot(s));return{distance:n,coorient:l}}function withinCoorientDist({matrix1:r,matrix2:t,maxDistance:e,minCoorient:A}){const{distance:a,coorient:s}=coorientDist(r,t);return a<=e&&(A==null||s>=A)}function encodeQuatOctXy88R8(r){const t=r.clone().normalize();t.w<0&&t.set(-t.x,-t.y,-t.z,-t.w);const e=2*Math.acos(t.w),A=Math.sqrt(t.x*t.x+t.y*t.y+t.z*t.z),a=A<1e-6?new Vector3(1,0,0):new Vector3(t.x,t.y,t.z).divideScalar(A),s=Math.abs(a.x)+Math.abs(a.y)+Math.abs(a.z);let n=a.x/s,l=a.y/s;if(a.z<0){const y=n;n=(1-Math.abs(l))*(n>=0?1:-1),l=(1-Math.abs(y))*(l>=0?1:-1)}const d=n*.5+.5,f=l*.5+.5,E=Math.round(d*255),I=Math.round(f*255);return Math.round(e*(255/Math.PI))<<16|I<<8|E}function decodeQuatOctXy88R8(r,t){const e=r&255,A=r>>>8&255,a=r>>>16&255,s=e/255,n=A/255;let l=(s-.5)*2,d=(n-.5)*2;const f=1-(Math.abs(l)+Math.abs(d)),E=Math.max(-f,0);l+=l>=0?-E:E,d+=d>=0?-E:E;const I=new Vector3(l,d,f).normalize(),y=a/255*Math.PI*.5,v=Math.sin(y),S=Math.cos(y);return t.set(I.x*v,I.y*v,I.z*v,S),t}function decompressPartialGzip(r,t){const e=[];let A=0,a=null;const s=new Gunzip((d,f)=>{if(e.push(d),A+=d.length,f||A>=t){const E=new Uint8Array(A);let I=0;for(const B of e)E.set(B,I),I+=B.length;a=E.slice(0,t)}}),n=1024;let l=0;for(;a==null&&l<r.length;){const d=r.slice(l,l+n);s.push(d,!1),l+=n}if(a==null&&(s.push(new Uint8Array,!0),a==null))throw new Error("Failed to decompress partial gzip");return a}class DynoProgram{constructor({graph:t,inputs:e,outputs:A,template:a}){this.graph=t,this.template=a,this.inputs=e??{},this.outputs=A??{};const s=new Compilation({indent:this.template.indent});for(const l in this.outputs)this.outputs[l]&&s.declares.add(this.outputs[l]);const n=t.compile({inputs:this.inputs,outputs:this.outputs,compile:s});this.shader=a.generate({globals:s.globals,statements:n}),this.uniforms=s.uniforms,this.updaters=s.updaters}prepareMaterial(){return getMaterial(this)}update(){for(const t of this.updaters)t()}}class DynoProgramTemplate{constructor(t){const e=t.match(/^([ \t]*)\{\{\s*GLOBALS\s*\}\}/m),A=t.match(/^([ \t]*)\{\{\s*STATEMENTS\s*\}\}/m);if(!e||!A)throw new Error("Template must contain {{ GLOBALS }} and {{ STATEMENTS }}");this.before=t.substring(0,e.index),this.between=t.substring(e.index+e[0].length,A.index),this.after=t.substring(A.index+A[0].length),this.indent=A[1]}generate({globals:t,statements:e}){return this.before+Array.from(t).join(`

`)+this.between+e.map(A=>this.indent+A).join(`
`)+this.after}}const programMaterial=new Map;function getMaterial(r){let t=programMaterial.get(r);return t||(t=new RawShaderMaterial({glslVersion:GLSL3,vertexShader:IDENT_VERTEX_SHADER,fragmentShader:r.shader,uniforms:r.uniforms}),programMaterial.set(r,t),t)}function addOutputType(r,t,e="add"){const A=()=>{throw new Error(`Invalid ${e} types: ${r}, ${t}`)};if(r===t)return r;if(r==="int"){if(isIntType(t))return t;A()}if(t==="int"){if(isIntType(r))return r;A()}if(r==="uint"){if(isUintType(t))return t;A()}if(t==="uint"){if(isUintType(r))return r;A()}if(r==="float"){if(isAllFloatType(t))return t;A()}if(t==="float"){if(isAllFloatType(r))return r;A()}throw new Error(`Invalid ${e} types: ${r}, ${t}`)}function subOutputType(r,t){return addOutputType(r,t,"sub")}function mulOutputType(r,t){const e=()=>{throw new Error(`Invalid mul types: ${r}, ${t}`)},A=a=>a;if(r==="int"){if(isIntType(t))return A(t);e()}if(t==="int"){if(isIntType(r))return A(r);e()}if(r==="uint"){if(isUintType(t))return A(t);e()}if(t==="uint"){if(isUintType(r))return A(r);e()}if(r==="float"){if(isAllFloatType(t))return A(t);e()}if(t==="float"){if(isAllFloatType(r))return A(r);e()}if(isIntType(r)||isUintType(r)||isIntType(t)||isUintType(t)){if(r===t)return A(r);e()}if(r==="vec2"){if(t==="vec2"||isMat2(t))return A("vec2");if(t==="mat3x2")return A("vec3");if(t==="mat4x2")return A("vec4");e()}if(r==="vec3"){if(t==="mat2x3")return A("vec2");if(t==="vec3"||isMat3(t))return A("vec3");if(t==="mat4x3")return A("vec4");e()}if(r==="vec4"){if(t==="mat2x4")return A("vec2");if(t==="mat3x4")return A("vec3");if(t==="vec4"||isMat4(t))return A("vec4");e()}if(t==="vec2"){if(isMat2(r))return A("vec2");if(r==="mat2x3")return A("vec3");if(r==="mat2x4")return A("vec4");e()}if(t==="vec3"){if(r==="mat3x2")return A("vec2");if(isMat3(r))return A("vec3");if(r==="mat3x4")return A("vec4");e()}if(t==="vec4"){if(r==="mat4x2")return A("vec2");if(r==="mat4x3")return A("vec3");if(isMat4(r))return A("vec4");e()}if(isMat2(r)){if(isMat2(t))return A("mat2");if(t==="mat3x2")return A("mat3x2");if(t==="mat4x2")return A("mat4x2");e()}if(r==="mat2x3"){if(isMat2(t))return A("mat2x3");if(t==="mat3x2")return A("mat3");if(t==="mat4x2")return A("mat4x3");e()}if(r==="mat2x4"){if(isMat2(t))return A("mat2x4");if(t==="mat3x2")return A("mat3x4");if(t==="mat4x2")return A("mat4");e()}if(r==="mat3x2"){if(t==="mat2x3")return A("mat2");if(isMat3(t))return A("mat3x2");if(t==="mat4x3")return A("mat4x2");e()}if(isMat3(r)){if(t==="mat2x3")return A("mat2x3");if(isMat3(t))return A("mat3");if(t==="mat4x3")return A("mat4x3");e()}if(r==="mat3x4"){if(t==="mat2x3")return A("mat2x4");if(isMat3(t))return A("mat3x4");if(t==="mat4x3")return A("mat4");e()}if(r==="mat4x2"){if(t==="mat2x4")return A("mat2");if(t==="mat3x4")return A("mat3x2");if(isMat4(t))return A("mat4x2");e()}if(r==="mat4x3"){if(t==="mat2x4")return A("mat2x3");if(t==="mat3x4")return A("mat3");if(isMat4(t))return A("mat4x3");e()}if(isMat4(r)){if(t==="mat2x4")return A("mat2x4");if(t==="mat3x4")return A("mat3x4");if(isMat4(t))return A("mat4");e()}throw new Error(`Invalid mul types: ${r}, ${t}`)}const add=(r,t)=>new Add({a:r,b:t}),sub=(r,t)=>new Sub({a:r,b:t}),mul=(r,t)=>new Mul({a:r,b:t});class Add extends BinaryOp{constructor({a:t,b:e}){super({a:t,b:e,outKey:"sum",outTypeFunc:addOutputType}),this.statements=({inputs:A,outputs:a})=>[`${a.sum} = ${A.a} + ${A.b};`]}}class Sub extends BinaryOp{constructor({a:t,b:e}){super({a:t,b:e,outKey:"difference",outTypeFunc:subOutputType}),this.statements=({inputs:A,outputs:a})=>[`${a.difference} = ${A.a} - ${A.b};`]}}class Mul extends BinaryOp{constructor({a:t,b:e}){super({a:t,b:e,outKey:"product",outTypeFunc:mulOutputType}),this.statements=({inputs:A,outputs:a})=>[`${a.product} = ${A.a} * ${A.b};`]}}const packHalf2x16=r=>new PackHalf2x16({value:r}),uintToRgba8=r=>new UintToRgba8({value:r});class PackHalf2x16 extends UnaryOp{constructor({value:t}){super({a:t,outKey:"uint",outTypeFunc:()=>"uint"}),this.statements=({inputs:e,outputs:A})=>[`${A.uint} = packHalf2x16(${e.a});`]}}class UintToRgba8 extends UnaryOp{constructor({value:t}){super({a:t,outKey:"rgba8",outTypeFunc:()=>"vec4"}),this.statements=({inputs:e,outputs:A})=>[`uvec4 uRgba = uvec4(${e.a} & 0xffu, (${e.a} >> 8u) & 0xffu, (${e.a} >> 16u) & 0xffu, (${e.a} >> 24u) & 0xffu);`,`${A.rgba8} = vec4(uRgba) / 255.0;`]}}const normalize=r=>new Normalize({a:r}),combine=({vector:r,vectorType:t,x:e,y:A,z:a,w:s,r:n,g:l,b:d,a:f})=>new Combine({vector:r,vectorType:t,x:e,y:A,z:a,w:s,r:n,g:l,b:d,a:f}),extendVec=(r,t)=>new ExtendVec({a:r,b:t});class Normalize extends UnaryOp{constructor({a:t}){super({a:t,outTypeFunc:e=>e,outKey:"normalize"}),this.statements=({inputs:e,outputs:A})=>[`${A.normalize} = normalize(${e.a});`]}}function extendVecOutputType(r){if(r==="float")return"vec2";if(r==="vec2")return"vec3";if(r==="vec3")return"vec4";throw new Error("Invalid type")}class ExtendVec extends BinaryOp{constructor({a:t,b:e}){const A=valType(t),a=extendVecOutputType(A);super({a:t,b:e,outKey:"extend",outTypeFunc:()=>a}),this.statements=({inputs:s,outputs:n})=>[`${n.extend} = ${a}(${s.a}, ${s.b});`]}}class Combine extends Dyno{constructor({vector:t,vectorType:e,x:A,y:a,z:s,w:n,r:l,g:d,b:f,a:E}){if(!t&&!e)throw new Error("Either vector or vectorType must be provided");const I=e??valType(t),B=vectorElementType(I),y=vectorDim(I),v={vector:I,x:B,y:B,r:B,g:B},S={vector:t,x:A,y:a,r:l,g:d};y>=3&&(Object.assign(v,{z:B,b:B}),Object.assign(S,{z:s,b:f})),y>=4&&(Object.assign(v,{w:B,a:B}),Object.assign(S,{w:n,a:E})),super({inTypes:v,outTypes:{vector:I},inputs:S}),this.statements=({inputs:_,outputs:Q})=>{const{vector:D}=Q,{vector:b,x:T,y:P,z:R,w:F,r:O,g:N,b:L,a:Y}=_,rt=[`${D}.x = ${T??O??(b?`${b}.x`:literalZero(B))};`,`${D}.y = ${P??N??(b?`${b}.y`:literalZero(B))};`];return y>=3&&rt.push(`${D}.z = ${R??L??(b?`${b}.z`:literalZero(B))};`),y>=4&&rt.push(`${D}.w = ${F??Y??(b?`${b}.w`:literalZero(B))};`),rt}}dynoOut(){return new DynoOutput(this,"vector")}}const transformPos=(r,{scale:t,scales:e,rotate:A,translate:a})=>new TransformPosition({position:r,scale:t,scales:e,rotate:A,translate:a}).outputs.position,transformDir=(r,{scale:t,scales:e,rotate:A})=>new TransformDir({dir:r,scale:t,scales:e,rotate:A}).outputs.dir;class TransformPosition extends Dyno{constructor({position:t,scale:e,scales:A,rotate:a,translate:s}){super({inTypes:{position:"vec3",scale:"float",scales:"vec3",rotate:"vec4",translate:"vec3"},outTypes:{position:"vec3"},inputs:{position:t,scale:e,scales:A,rotate:a,translate:s},statements:({inputs:n,outputs:l})=>{const{position:d}=l;if(!d)return[];const{scale:f,scales:E,rotate:I,translate:B}=n;return[`${d} = ${n.position??"vec3(0.0, 0.0, 0.0)"};`,f?`${d} *= ${f};`:null,E?`${d} *= ${E};`:null,I?`${d} = quatVec(${I}, ${d});`:null,B?`${d} += ${B};`:null].filter(Boolean)}})}}class TransformDir extends Dyno{constructor({dir:t,scale:e,scales:A,rotate:a}){super({inTypes:{dir:"vec3",scale:"float",scales:"vec3",rotate:"vec4"},outTypes:{dir:"vec3"},inputs:{dir:t,scale:e,scales:A,rotate:a},statements:({inputs:s,outputs:n})=>{const{dir:l}=n;if(!l)return[];const{scale:d,scales:f,rotate:E}=s;return[`${l} = ${s.dir??"vec3(0.0, 0.0, 0.0)"};`,d?`${l} *= ${d};`:null,f?`${l} *= ${f};`:null,E?`${l} = quatVec(${E}, ${l});`:null].filter(Boolean)}})}}var computeVec4_default=`precision highp float;
precision highp int;
precision highp sampler2D;
precision highp usampler2D;
precision highp isampler2D;
precision highp sampler2DArray;
precision highp usampler2DArray;
precision highp isampler2DArray;
precision highp sampler3D;
precision highp usampler3D;
precision highp isampler3D;

#include <splatDefines>

uniform uint targetLayer;
uniform int targetBase;
uniform int targetCount;

out vec4 target;

{{ GLOBALS }}

void computeReadback(int index) {
    {{ STATEMENTS }}
}

void main() {
    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);
    int index = targetIndex - targetBase;

    if ((index >= 0) && (index < targetCount)) {
        computeReadback(index);
    } else {
        target = vec4(0.0, 0.0, 0.0, 0.0);
    }
}`;const _Readback=class Xn{constructor({renderer:t}={}){this.renderer=t,this.capacity=0,this.count=0}dispose(){this.target&&(this.target.dispose(),this.target=void 0)}ensureBuffer(t,e){const a=Math.ceil(Math.max(1,t)/SPLAT_TEX_WIDTH)*SPLAT_TEX_WIDTH*4;if(e.byteLength>=a)return e;const s=new ArrayBuffer(a);if(e instanceof ArrayBuffer)return s;const n=e.constructor;return new n(s)}ensureCapacity(t){const{width:e,height:A,depth:a,maxSplats:s}=getTextureSize(t);(!this.target||s>this.capacity)&&(this.dispose(),this.capacity=s,this.target=new WebGLArrayRenderTarget(e,A,a,{depthBuffer:!1,stencilBuffer:!1,generateMipmaps:!1,magFilter:NearestFilter,minFilter:NearestFilter}),this.target.texture.format=RGBAFormat,this.target.texture.type=UnsignedByteType,this.target.texture.internalFormat="RGBA8")}prepareProgramMaterial(t){let e=Xn.readbackProgram.get(t);if(!e){const a=dynoBlock({index:"int"},{rgba8:"vec4"},({index:s})=>(t.inputs.index=s,{rgba8:new OutputRgba8({rgba8:t.outputs.rgba8})}));Xn.programTemplate||(Xn.programTemplate=new DynoProgramTemplate(computeVec4_default)),e=new DynoProgram({graph:a,inputs:{index:"index"},outputs:{rgba8:"target"},template:Xn.programTemplate}),Object.assign(e.uniforms,{targetLayer:{value:0},targetBase:{value:0},targetCount:{value:0}}),Xn.readbackProgram.set(t,e)}const A=e.prepareMaterial();return Xn.mesh.material=A,{program:e,material:A}}saveRenderState(t){return{xrPresenting:t.xr.isPresenting,autoClear:t.autoClear,scissorTest:t.getScissorTest(),pixelRatio:t.getPixelRatio()}}resetRenderState(t,e){t.setRenderTarget(null),t.setPixelRatio(e.pixelRatio),t.xr.isPresenting=e.xrPresenting,t.autoClear=e.autoClear,t.setScissorTest(e.scissorTest)}process({count:t,material:e}){const A=this.renderer;if(!A)throw new Error("No renderer");if(!this.target)throw new Error("No target");const a=SPLAT_TEX_WIDTH*SPLAT_TEX_HEIGHT;e.uniforms.targetBase.value=0,e.uniforms.targetCount.value=t;let s=0;for(;s<t;){const n=Math.floor(s/a),l=n*a,d=Math.min(SPLAT_TEX_HEIGHT,Math.ceil((t-l)/SPLAT_TEX_WIDTH));e.uniforms.targetLayer.value=n,A.setPixelRatio(1),A.setRenderTarget(this.target,n),A.xr.isPresenting=!1,A.autoClear=!1,A.setScissorTest(!0),A.setScissor(0,0,SPLAT_TEX_WIDTH,d),A.render(Xn.scene,Xn.camera),s+=SPLAT_TEX_WIDTH*d}this.count=t}async read({readback:t}){const e=this.renderer;if(!e)throw new Error("No renderer");if(!this.target)throw new Error("No target");const A=Math.ceil(this.count/SPLAT_TEX_WIDTH)*SPLAT_TEX_WIDTH;if(t.byteLength<A*4)throw new Error(`Readback buffer too small: ${t.byteLength} < ${A*4}`);const a=new Uint8Array(t instanceof ArrayBuffer?t:t.buffer),s=SPLAT_TEX_WIDTH*SPLAT_TEX_HEIGHT;let n=0;const l=[];for(;n<this.count;){const d=Math.floor(n/s),f=d*s,E=Math.min(SPLAT_TEX_HEIGHT,Math.ceil((this.count-f)/SPLAT_TEX_WIDTH));e.setPixelRatio(1),e.setRenderTarget(this.target,d);const I=SPLAT_TEX_WIDTH*E*4,B=a.subarray(f*4,f*4+I),y=e==null?void 0:e.readRenderTargetPixelsAsync(this.target,0,0,SPLAT_TEX_WIDTH,E,B);l.push(y),n+=SPLAT_TEX_WIDTH*E}return Promise.all(l).then(()=>t)}render({reader:t,count:e,renderer:A}){if(this.renderer=A||this.renderer,!this.renderer)throw new Error("No renderer");this.ensureCapacity(e);const{program:a,material:s}=this.prepareProgramMaterial(t);a.update();const n=this.saveRenderState(this.renderer);this.process({count:e,material:s}),this.resetRenderState(this.renderer,n)}async readback({readback:t}){if(!this.renderer)throw new Error("No renderer");const e=this.saveRenderState(this.renderer),A=this.read({readback:t});return this.resetRenderState(this.renderer,e),A}async renderReadback({reader:t,count:e,renderer:A,readback:a}){if(this.renderer=A||this.renderer,!this.renderer)throw new Error("No renderer");this.ensureCapacity(e);const{program:s,material:n}=this.prepareProgramMaterial(t);s.update();const l=this.saveRenderState(this.renderer);this.process({count:e,material:n});const d=this.read({readback:a});return this.resetRenderState(this.renderer,l),d}getTexture(){var t;return(t=this.target)==null?void 0:t.texture}};_Readback.programTemplate=null;_Readback.readbackProgram=new Map;_Readback.geometry=new PlaneGeometry(2,2);_Readback.mesh=new Mesh(_Readback.geometry,new RawShaderMaterial({visible:!1}));_Readback.scene=new Scene().add(_Readback.mesh);_Readback.camera=new Camera;let Readback=_Readback;const _RgbaArray=class _n{constructor(t={}){this.capacity=0,this.count=0,this.array=null,this.readback=null,this.source=null,this.needsUpdate=!0,this.dyno=new DynoUniform({key:"rgbaArray",type:TRgbaArray,globals:()=>[defineRgbaArray],value:{texture:_n.getEmpty(),count:0},update:e=>{var A;return e.texture=((A=this.readback)==null?void 0:A.getTexture())??this.source??_n.getEmpty(),e.count=this.count,e}}),t.array?(this.array=t.array,this.capacity=Math.floor(this.array.length/4),this.capacity=Math.floor(this.capacity/SPLAT_TEX_WIDTH)*SPLAT_TEX_WIDTH,this.count=Math.min(this.capacity,t.count??Number.POSITIVE_INFINITY)):(this.capacity=t.capacity??0,this.count=0)}dispose(){this.readback&&(this.readback.dispose(),this.readback=null),this.source&&(this.source.dispose(),this.source=null)}ensureCapacity(t){var e;if(!this.array||t>(((e=this.array)==null?void 0:e.length)??0)/4){this.capacity=getTextureSize(t).maxSplats;const A=new Uint8Array(this.capacity*4);this.array&&A.set(this.array),this.array=A}return this.array}getTexture(){var t;let e=(t=this.readback)==null?void 0:t.getTexture();return(this.source||this.array)&&(e=this.maybeUpdateSource()),e??_n.getEmpty()}maybeUpdateSource(){if(!this.array)throw new Error("No array");if(this.needsUpdate||!this.source){if(this.needsUpdate=!1,this.source){const{width:t,height:e,depth:A}=this.source.image;this.capacity!==t*e*A&&(this.source.dispose(),this.source=null)}if(this.source)this.array.buffer!==this.source.image.data.buffer&&(this.source.image.data=new Uint8Array(this.array.buffer));else{const{width:t,height:e,depth:A}=getTextureSize(this.capacity);this.source=new DataArrayTexture(this.array,t,e,A),this.source.format=RGBAFormat,this.source.type=UnsignedByteType,this.source.internalFormat="RGBA8",this.source.needsUpdate=!0}this.source.needsUpdate=!0}return this.source}render({reader:t,count:e,renderer:A}){this.readback||(this.readback=new Readback({renderer:A})),this.readback.render({reader:t,count:e,renderer:A}),this.capacity=this.readback.capacity,this.count=this.readback.count}fromPackedSplats({packedSplats:t,base:e,count:A,renderer:a}){const{dynoSplats:s,dynoBase:n,dynoCount:l,reader:d}=_n.makeDynos();return s.packedSplats=t,n.value=e,l.value=A,this.render({reader:d,count:A,renderer:a}),this}async read(){if(!this.readback)throw new Error("No readback");return(!this.array||this.array.length<this.count*4)&&(this.array=new Uint8Array(this.capacity*4)),(await this.readback.readback({readback:this.array})).subarray(0,this.count*4)}static getEmpty(){if(!_n.emptySource){const t=new Uint8Array(4);_n.emptySource=new DataArrayTexture(t,1,1,1),_n.emptySource.format=RGBAFormat,_n.emptySource.type=UnsignedByteType,_n.emptySource.internalFormat="RGBA8",_n.emptySource.needsUpdate=!0}return _n.emptySource}static makeDynos(){if(!_n.dynos){const t=new DynoPackedSplats,e=new DynoInt({value:0}),A=new DynoInt({value:0}),a=dynoBlock({index:"int"},{rgba8:"vec4"},({index:s})=>{if(!s)throw new Error("index is undefined");s=add(s,e);const n=readPackedSplatRange(t,s,e,A);return{rgba8:splitGsplat(n).outputs.rgba}});_n.dynos={dynoSplats:t,dynoBase:e,dynoCount:A,reader:a}}return _n.dynos}};_RgbaArray.emptySource=null;_RgbaArray.dynos=null;let RgbaArray=_RgbaArray;const TRgbaArray={type:"RgbaArray"},defineRgbaArray=unindent(`
  struct RgbaArray {
    sampler2DArray texture;
    int count;
  };
`);function readRgbaArray(r,t){return new Dyno({inTypes:{rgba:TRgbaArray,index:"int"},outTypes:{rgba:"vec4"},inputs:{rgba:r,index:t},globals:()=>[defineRgbaArray],statements:({inputs:A,outputs:a})=>unindentLines(`
        if ((index >= 0) && (index < ${A.rgba}.count)) {
          ${a.rgba} = texelFetch(${A.rgba}.texture, splatTexCoord(index), 0);
        } else {
          ${a.rgba} = vec4(0.0, 0.0, 0.0, 0.0);
        }
      `)}).outputs.rgba}function sdfTypeToNumber(r){switch(r){case"all":return 0;case"plane":return 1;case"sphere":return 2;case"box":return 3;case"ellipsoid":return 4;case"cylinder":return 5;case"capsule":return 6;case"infinite_cone":return 7;default:throw new Error(`Unknown SDF type: ${r}`)}}function rgbaBlendModeToNumber(r){switch(r){case"multiply":return 0;case"set_rgb":return 1;case"add_rgba":return 2;default:throw new Error(`Unknown blend mode: ${r}`)}}class SplatEditSdf extends Object3D{constructor(t={}){super();const{type:e,invert:A,opacity:a,color:s,displace:n,radius:l}=t;this.type=e??"sphere",this.invert=A??!1,this.opacity=a??1,this.color=s??new Color(1,1,1),this.displace=n??new Vector3(0,0,0),this.radius=l??0}}const _SplatEdit=class gr extends Object3D{constructor(t={}){const{name:e,rgbaBlendMode:A="multiply",sdfSmooth:a=0,softEdge:s=0,invert:n=!1,sdfs:l=null}=t;super(),this.rgbaBlendMode=A,this.sdfSmooth=a,this.softEdge=s,this.invert=n,this.sdfs=l,this.ordering=gr.nextOrdering++,this.name=e??`Edit ${this.ordering}`}addSdf(t){this.sdfs==null&&(this.sdfs=[]),this.sdfs.push(t)}removeSdf(t){this.sdfs!=null&&(this.sdfs=this.sdfs.filter(e=>e!==t))}};_SplatEdit.nextOrdering=1;let SplatEdit=_SplatEdit;class SplatEdits{constructor({maxSdfs:t,maxEdits:e}){this.maxSdfs=Math.max(16,t??0),this.numSdfs=0,this.sdfData=new Uint32Array(this.maxSdfs*8*4),this.sdfFloatData=new Float32Array(this.sdfData.buffer),this.sdfTexture=this.newSdfTexture(this.sdfData,this.maxSdfs),this.dynoSdfArray=new DynoUniform({key:"sdfArray",type:SdfArray,globals:()=>[defineSdfArray],value:{numSdfs:0,sdfTexture:this.sdfTexture},update:A=>(A.numSdfs=this.numSdfs,A.sdfTexture=this.sdfTexture,A)}),this.maxEdits=Math.max(16,e??0),this.numEdits=0,this.editData=new Uint32Array(this.maxEdits*4),this.editFloatData=new Float32Array(this.editData.buffer),this.dynoNumEdits=new DynoInt({value:0}),this.dynoEdits=this.newEdits(this.editData,this.maxEdits)}newSdfTexture(t,e){const A=new DataTexture(t,8,e,RGBAIntegerFormat,UnsignedIntType);return A.internalFormat="RGBA32UI",A.needsUpdate=!0,A}newEdits(t,e){return new DynoUniform({key:"edits",type:"uvec4",count:e,globals:()=>[defineEdit],value:t})}ensureCapacity({maxSdfs:t,maxEdits:e}){let A=!1;return t>this.sdfTexture.image.height&&(this.sdfTexture.dispose(),this.maxSdfs=Math.max(this.maxSdfs*2,t),this.sdfData=new Uint32Array(this.maxSdfs*8*4),this.sdfFloatData=new Float32Array(this.sdfData.buffer),this.sdfTexture=this.newSdfTexture(this.sdfData,this.maxSdfs)),e>(this.dynoEdits.count??0)&&(this.maxEdits=Math.max(this.maxEdits*2,e),this.editData=new Uint32Array(this.maxEdits*4),this.editFloatData=new Float32Array(this.editData.buffer),this.dynoEdits=this.newEdits(this.editData,this.maxEdits),A=!0),A}updateEditData(t,e){const A=this.editData[t]!==e;return this.editData[t]=e,A}updateEditFloatData(t,e){tempFloat32[0]=e;const A=this.editFloatData[t]!==tempFloat32[0];return A&&(this.editFloatData[t]=tempFloat32[0]),A}encodeEdit(t,{sdfFirst:e,sdfCount:A,invert:a,rgbaBlendMode:s,softEdge:n,sdfSmooth:l}){const d=t*4;let f=!1;return f=this.updateEditData(d+0,s|(a?256:0))||f,f=this.updateEditData(d+1,e|A<<16)||f,f=this.updateEditFloatData(d+2,n)||f,f=this.updateEditFloatData(d+3,l)||f,f}updateSdfData(t,e){const A=this.sdfData[t]!==e;return this.sdfData[t]=e,A}updateSdfFloatData(t,e){tempFloat32[0]=e;const A=this.sdfFloatData[t]!==tempFloat32[0];return A&&(this.sdfFloatData[t]=tempFloat32[0]),A}encodeSdf(t,{sdfType:e,invert:A,center:a,quaternion:s,scale:n,sizes:l},d){const f=t*32,E=e|(A?256:0);let I=!1;I=this.updateSdfFloatData(f+0,(a==null?void 0:a.x)??0)||I,I=this.updateSdfFloatData(f+1,(a==null?void 0:a.y)??0)||I,I=this.updateSdfFloatData(f+2,(a==null?void 0:a.z)??0)||I,I=this.updateSdfData(f+3,E)||I,I=this.updateSdfFloatData(f+4,(s==null?void 0:s.x)??0)||I,I=this.updateSdfFloatData(f+5,(s==null?void 0:s.y)??0)||I,I=this.updateSdfFloatData(f+6,(s==null?void 0:s.z)??0)||I,I=this.updateSdfFloatData(f+7,(s==null?void 0:s.w)??0)||I,I=this.updateSdfFloatData(f+8,(n==null?void 0:n.x)??0)||I,I=this.updateSdfFloatData(f+9,(n==null?void 0:n.y)??0)||I,I=this.updateSdfFloatData(f+10,(n==null?void 0:n.z)??0)||I,I=this.updateSdfData(f+11,0)||I,I=this.updateSdfFloatData(f+12,(l==null?void 0:l.x)??0)||I,I=this.updateSdfFloatData(f+13,(l==null?void 0:l.y)??0)||I,I=this.updateSdfFloatData(f+14,(l==null?void 0:l.z)??0)||I,I=this.updateSdfFloatData(f+15,(l==null?void 0:l.w)??0)||I;const B=Math.min(4,d.length);for(let y=0;y<B;++y){const v=f+16+y*4;I=this.updateSdfFloatData(v+0,d[y].x)||I,I=this.updateSdfFloatData(v+1,d[y].y)||I,I=this.updateSdfFloatData(v+2,d[y].z)||I,I=this.updateSdfFloatData(v+3,d[y].w)||I}return I}update(t){const e=t.reduce((I,{sdfs:B})=>I+B.length,0),A=this.ensureCapacity({maxEdits:t.length,maxSdfs:e}),a=[new Vector4,new Vector4],s=new Vector3,n=new Quaternion,l=new Vector3,d=new Vector4;let f=0,E=A;t.length!==this.dynoNumEdits.value&&(this.dynoNumEdits.value=t.length,this.numEdits=t.length,E=!0);for(const[I,{edit:B,sdfs:y}]of t.entries()){E=this.encodeEdit(I,{sdfFirst:f,sdfCount:y.length,invert:B.invert,rgbaBlendMode:rgbaBlendModeToNumber(B.rgbaBlendMode),softEdge:B.softEdge,sdfSmooth:B.sdfSmooth})||E;let v=!1;for(const S of y)d.set(S.scale.x,S.scale.y,S.scale.z,S.radius),S.scale.setScalar(1),S.updateMatrixWorld(),S.matrixWorld.clone().invert().decompose(s,n,l),S.scale.set(d.x,d.y,d.z),S.updateMatrixWorld(),a[0].set(S.color.r,S.color.g,S.color.b,S.opacity),a[1].set(S.displace.x,S.displace.y,S.displace.z,1),v=this.encodeSdf(f,{sdfType:sdfTypeToNumber(S.type),invert:S.invert,center:s,quaternion:n,scale:l,sizes:d},a)||v,f+=1;this.numSdfs=f,v&&(this.sdfTexture.needsUpdate=!0),E||(E=v)}return{updated:E,dynoUpdated:A}}modify(t){return applyGsplatRgbaDisplaceEdits(t,this.dynoSdfArray,this.dynoNumEdits,this.dynoEdits)}}const SdfArray={type:"SdfArray"},defineSdfArray=unindent(`
  struct SdfArray {
    int numSdfs;
    usampler2D sdfTexture;
  };

  void unpackSdfArray(
    usampler2D sdfTexture, int sdfIndex, out uint flags,
    out vec3 center, out vec4 quaternion, out vec3 scale, out vec4 sizes,
    int numValues, out vec4 values[4]
  ) {
    uvec4 temp = texelFetch(sdfTexture, ivec2(0, sdfIndex), 0);
    flags = temp.w;
    center = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(1, sdfIndex), 0);
    quaternion = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    temp = texelFetch(sdfTexture, ivec2(2, sdfIndex), 0);
    scale = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(3, sdfIndex), 0);
    sizes = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    for (int i = 0; i < numValues; ++i) {
      temp = texelFetch(sdfTexture, ivec2(4 + i, sdfIndex), 0);
      values[i] = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));
    }
  }

  const uint SDF_FLAG_TYPE = 0xFFu;
  const uint SDF_FLAG_INVERT = 1u << 8u;

  const uint SDF_TYPE_ALL = 0u;
  const uint SDF_TYPE_PLANE = 1u;
  const uint SDF_TYPE_SPHERE = 2u;
  const uint SDF_TYPE_BOX = 3u;
  const uint SDF_TYPE_ELLIPSOID = 4u;
  const uint SDF_TYPE_CYLINDER = 5u;
  const uint SDF_TYPE_CAPSULE = 6u;
  const uint SDF_TYPE_INFINITE_CONE = 7u;

  float evaluateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 outValues[4]
  ) {
    float distanceAccum = (smoothK == 0.0) ? 1.0 / 0.0 : 0.0;
    float maxExp = -1.0 / 0.0;
    for (int i = 0; i < numValues; ++i) {
        outValues[i] = vec4(0.0);
    }

    uint flags;
    vec3 center, scale;
    vec4 quaternion, sizes;
    vec4 values[4];

    int sdfLast = min(sdfFirst + sdfCount, numSdfs);
    for (int index = sdfFirst; index < sdfLast; ++index) {
      unpackSdfArray(sdfTexture, index, flags, center, quaternion, scale, sizes, numValues, values);
      uint sdfType = flags & SDF_FLAG_TYPE;
      vec3 sdfPos = quatVec(quaternion, pos * scale) + center;

      float distance;
      switch (sdfType) {
        case SDF_TYPE_ALL:
          distance = -1.0 / 0.0;
          break;
        case SDF_TYPE_PLANE: {
          distance = sdfPos.z;
          break;
        }
        case SDF_TYPE_SPHERE: {
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_BOX: {
          vec3 q = abs(sdfPos) - sizes.xyz + sizes.w;
          distance = length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - sizes.w;
          break;
        }
        case SDF_TYPE_ELLIPSOID: {
          vec3 sizes = sizes.xyz;
          float k0 = length(sdfPos / sizes);
          float k1 = length(sdfPos / dot(sizes, sizes));
          distance = k0 * (k0 - 1.0) / k1;
          break;
        }
        case SDF_TYPE_CYLINDER: {
          vec2 d = abs(vec2(length(sdfPos.xz), sdfPos.y)) - sizes.wy;
          distance = min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
          break;
        }
        case SDF_TYPE_CAPSULE: {
          sdfPos.y -= clamp(sdfPos.y, -0.5 * sizes.y, 0.5 * sizes.y);
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_INFINITE_CONE: {
          float angle = 0.25 * PI * sizes.w;
          vec2 c = vec2(sin(angle), cos(angle));
          vec2 q = vec2(length(sdfPos.xy), -sdfPos.z);
          float d = length(q - c * max(dot(q, c), 0.0));
          distance = d * (((q.x * c.y - q.y * c.x) < 0.0) ? -1.0 : 1.0);
          break;
        }
      }

      if ((flags & SDF_FLAG_INVERT) != 0u) {
        distance = -distance;
      }

      if (smoothK == 0.0) {
        if (distance < distanceAccum) {
          distanceAccum = distance;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] = values[i];
          }
        }
      } else {
        float scaledDistance = -distance / smoothK;
        if (scaledDistance > maxExp) {
          float scale = exp(maxExp - scaledDistance);
          distanceAccum *= scale;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] *= scale;
          }
          maxExp = scaledDistance;
        }

        float weight = exp(scaledDistance - maxExp);
        distanceAccum += weight;
        for (int i = 0; i < numValues; ++i) {
          outValues[i] += weight * values[i];
        }
      }
    }

    if (smoothK == 0.0) {
      return distanceAccum;
    } else {
      // Very distant SDFs may result in 0 accumulation
      if (distanceAccum == 0.0) {
        return 1.0 / 0.0;
      }
      for (int i = 0; i < numValues; ++i) {
        outValues[i] /= distanceAccum;
      }
      return (-log(distanceAccum) - maxExp) * smoothK;
    }
  }

  float modulateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 values[4],
    float softEdge, bool invert
  ) {
    float distance = evaluateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, numValues, values);
    if (invert) {
      distance = -distance;
    }

    return (softEdge == 0.0) ? ((distance < 0.0) ? 1.0 : 0.0)
      : clamp(-distance / softEdge + 0.5, 0.0, 1.0);
  }
`),defineEdit=unindent(`
  const uint EDIT_FLAG_BLEND = 0xFFu;
  const uint EDIT_BLEND_MULTIPLY = 0u;
  const uint EDIT_BLEND_SET_RGB = 1u;
  const uint EDIT_BLEND_ADD_RGBA = 2u;
  const uint EDIT_FLAG_INVERT = 0x100u;

  void decodeEdit(
    uvec4 packedEdit, out int sdfFirst, out int sdfCount,
    out bool invert, out uint rgbaBlendMode, out float softEdge, out float sdfSmooth
  ) {
    rgbaBlendMode = packedEdit.x & EDIT_FLAG_BLEND;
    invert = (packedEdit.x & EDIT_FLAG_INVERT) != 0u;

    sdfFirst = int(packedEdit.y & 0xFFFFu);
    sdfCount = int(packedEdit.y >> 16u);

    softEdge = uintBitsToFloat(packedEdit.z);
    sdfSmooth = uintBitsToFloat(packedEdit.w);
  }

  void applyRgbaDisplaceEdit(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, inout vec3 pos,
    float smoothK, float softEdge, bool invert, uint rgbaBlendMode, inout vec4 rgba
  ) {
    vec4 values[4];
    float modulate = modulateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, 2, values, softEdge, invert);
    // On Android, moving values[0] is necessary to work around a compiler bug.
    vec4 sdfRgba = values[0];
    vec4 sdfDisplaceScale = values[1];

    vec4 target;
    switch (rgbaBlendMode) {
      case EDIT_BLEND_MULTIPLY:
        target = rgba * sdfRgba;
        break;
      case EDIT_BLEND_SET_RGB:
        target = vec4(sdfRgba.rgb, rgba.a * sdfRgba.a);
        break;
      case EDIT_BLEND_ADD_RGBA:
        target = rgba + sdfRgba;
        break;
      default:
        // Debug output if blend mode not set
        target = vec4(fract(pos), 1.0);
    }
    rgba = mix(rgba, target, modulate);
    pos += sdfDisplaceScale.xyz * modulate;
  }

  void applyPackedRgbaDisplaceEdit(uvec4 packedEdit, usampler2D sdfTexture, int numSdfs, inout vec3 pos, inout vec4 rgba) {
    int sdfFirst, sdfCount;
    bool invert;
    uint rgbaBlendMode;
    float softEdge, sdfSmooth;
    decodeEdit(packedEdit, sdfFirst, sdfCount, invert, rgbaBlendMode, softEdge, sdfSmooth);
    applyRgbaDisplaceEdit(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, sdfSmooth, softEdge, invert, rgbaBlendMode, rgba);
  }
`);function applyGsplatRgbaDisplaceEdits(r,t,e,A){return new Dyno({inTypes:{gsplat:Gsplat,sdfArray:SdfArray,numEdits:"int",rgbaDisplaceEdits:"uvec4"},outTypes:{gsplat:Gsplat},globals:()=>[defineSdfArray,defineEdit],inputs:{gsplat:r,sdfArray:t,numEdits:e,rgbaDisplaceEdits:A},statements:({inputs:s,outputs:n})=>{const{sdfArray:l,numEdits:d,rgbaDisplaceEdits:f}=s,{gsplat:E}=n;return unindentLines(`
        ${E} = ${s.gsplat};
        if (isGsplatActive(${E}.flags)) {
          for (int editIndex = 0; editIndex < ${d}; ++editIndex) {
            applyPackedRgbaDisplaceEdit(
              ${f}[editIndex], ${l}.sdfTexture, ${l}.numSdfs,
              ${E}.center, ${E}.rgba
            );
          }
        }
      `)}}).outputs.gsplat}const tempFloat32=new Float32Array(1);class SplatModifier{constructor(t){this.modifier=t,this.cache=new Map}apply(t){let e=this.cache.get(t);return e||(e=dynoBlock({index:"int"},{gsplat:Gsplat},({index:A})=>{const{gsplat:a}=t.apply({index:A});return this.modifier.apply({gsplat:a})}),this.cache.set(t,e)),e}}class SplatTransformer{constructor(){this.scale=new DynoFloat({value:Number.NEGATIVE_INFINITY}),this.rotate=new DynoVec4({value:new Quaternion(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY)}),this.translate=new DynoVec3({value:new Vector3(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY)})}apply(t){return transformPos(t,{scale:this.scale,rotate:this.rotate,translate:this.translate})}applyDir(t){return transformDir(t,{rotate:this.rotate})}applyGsplat(t){return transformGsplat(t,{scale:this.scale,rotate:this.rotate,translate:this.translate})}updateFromMatrix(t){const e=new Vector3,A=new Quaternion,a=new Vector3;t.decompose(a,A,e);const s=(e.x+e.y+e.z)/3;let n=!1;return s!==this.scale.value&&(this.scale.value=s,n=!0),a.equals(this.translate.value)||(this.translate.value.copy(a),n=!0),A.equals(this.rotate.value)||(this.rotate.value.copy(A),n=!0),n}update(t){return t.updateMatrixWorld(),this.updateFromMatrix(t.matrixWorld)}}class SplatGenerator extends Object3D{constructor({numSplats:t,generator:e,construct:A,update:a}){if(super(),this.numSplats=t??0,this.generator=e,this.frameUpdate=a,this.version=0,A){const s=A(this);Object.assign(this,s)}}updateVersion(){this.version+=1}set needsUpdate(t){t&&this.updateVersion()}}const _SplatMesh=class jA extends SplatGenerator{constructor(t={}){const e=new SplatTransformer,A=new SplatTransformer,a=new SplatTransformer,s=new SplatTransformer,n=new DynoVec4({value:new Vector4(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY)}),l=new DynoFloat({value:0}),d=new DynoFloat({value:0}),f={transform:e,viewToWorld:A,worldToView:a,viewToObject:s,recolor:n,time:l,deltaTime:d};if(super({update:({time:E,deltaTime:I,viewToWorld:B,globalEdits:y})=>this.update({time:E,deltaTime:I,viewToWorld:B,globalEdits:y})}),this.isInitialized=!1,this.recolor=new Color(1,1,1),this.opacity=1,this.enableViewToObject=!1,this.enableViewToWorld=!1,this.enableWorldToView=!1,this.skinning=null,this.edits=null,this.rgbaDisplaceEdits=null,this.splatRgba=null,this.maxSh=3,this.packedSplats=t.packedSplats??new PackedSplats,this.numSplats=this.packedSplats.numSplats,this.editable=t.editable??!0,this.onFrame=t.onFrame,this.context=f,this.objectModifier=t.objectModifier,this.worldModifier=t.worldModifier,this.updateGenerator(),t.url||t.fileBytes||t.constructSplats||t.packedSplats&&!t.packedSplats.isInitialized)this.initialized=this.asyncInitialize(t).then(async()=>{if(this.updateGenerator(),this.isInitialized=!0,t.onLoad){const E=t.onLoad(this);E instanceof Promise&&await E}return this});else if(this.isInitialized=!0,this.initialized=Promise.resolve(this),t.onLoad){const E=t.onLoad(this);E instanceof Promise&&(this.initialized=E.then(()=>this))}}async asyncInitialize(t){const{url:e,fileBytes:A,fileType:a,fileName:s,maxSplats:n,constructSplats:l}=t;if(e||A||l){const d={url:e,fileBytes:A,fileType:a,fileName:s,maxSplats:n,construct:l};this.packedSplats.reinitialize(d)}this.packedSplats&&(await this.packedSplats.initialized,this.numSplats=this.packedSplats.numSplats,this.updateGenerator())}static async staticInitialize(){await __wbg_init(),jA.isStaticInitialized=!0}pushSplat(t,e,A,a,s){this.packedSplats.pushSplat(t,e,A,a,s)}forEachSplat(t){this.packedSplats.forEachSplat(t)}dispose(){this.packedSplats.dispose()}constructGenerator(t){const{transform:e,viewToObject:A,recolor:a}=t,s=dynoBlock({index:"int"},{gsplat:Gsplat},({index:n})=>{if(!n)throw new Error("index is undefined");let l=readPackedSplat(this.packedSplats.dyno,n);if(this.maxSh>=1){const{sh1Texture:f,sh2Texture:E,sh3Texture:I}=this.ensureShTextures();if(f){const B=A.translate,{center:y}=splitGsplat(l).outputs,v=normalize(sub(y,B));let S=evaluateSH1(l,f,v);this.maxSh>=2&&E&&(S=add(S,evaluateSH2(l,E,v))),this.maxSh>=3&&I&&(S=add(S,evaluateSH3(l,I,v)));let{rgba:_}=splitGsplat(l).outputs;_=add(_,extendVec(S,dynoConst("float",0))),l=combineGsplat({gsplat:l,rgba:_})}}if(this.splatRgba){const f=readRgbaArray(this.splatRgba.dyno,n);l=combineGsplat({gsplat:l,rgba:f})}this.skinning&&(l=this.skinning.modify(l)),this.objectModifier&&(l=this.objectModifier.apply({gsplat:l}).gsplat),l=e.applyGsplat(l);const d=mul(a,splitGsplat(l).outputs.rgba);return l=combineGsplat({gsplat:l,rgba:d}),this.rgbaDisplaceEdits&&(l=this.rgbaDisplaceEdits.modify(l)),this.worldModifier&&(l=this.worldModifier.apply({gsplat:l}).gsplat),{gsplat:l}});this.generator=s}updateGenerator(){this.constructGenerator(this.context)}update({time:t,viewToWorld:e,deltaTime:A,globalEdits:a}){var s;this.numSplats=this.packedSplats.numSplats,this.context.time.value=t,this.context.deltaTime.value=A,jA.dynoTime.value=t;const{transform:n,viewToObject:l,recolor:d}=this.context;let f=n.update(this);this.context.viewToWorld.updateFromMatrix(e)&&this.enableViewToWorld&&(f=!0);const E=e.clone().invert();this.context.worldToView.updateFromMatrix(E)&&this.enableWorldToView&&(f=!0);const y=new Matrix4().compose(n.translate.value,n.rotate.value,new Vector3().setScalar(n.scale.value)).invert().multiply(e);l.updateFromMatrix(y)&&(this.enableViewToObject||this.packedSplats.extra.sh1)&&(f=!0);const v=new Vector4(this.recolor.r,this.recolor.g,this.recolor.b,this.opacity);v.equals(d.value)||(d.value.copy(v),f=!0);const S=this.editable?(this.edits??[]).concat(a):[];this.editable&&!this.edits&&this.traverseVisible(Q=>{Q instanceof SplatEdit&&S.push(Q)}),S.sort((Q,D)=>Q.ordering-D.ordering);const _=S.map(Q=>{if(Q.sdfs!=null)return{edit:Q,sdfs:Q.sdfs};const D=[];return Q.traverseVisible(b=>{b instanceof SplatEditSdf&&D.push(b)}),{edit:Q,sdfs:D}});if(_.length>0&&!this.rgbaDisplaceEdits){const Q=_.length,D=_.reduce((b,T)=>b+T.sdfs.length,0);this.rgbaDisplaceEdits=new SplatEdits({maxEdits:Q,maxSdfs:D}),this.updateGenerator()}if(this.rgbaDisplaceEdits){const Q=this.rgbaDisplaceEdits.update(_);f||(f=Q.updated),Q.dynoUpdated&&this.updateGenerator()}f&&this.updateVersion(),(s=this.onFrame)==null||s.call(this,{mesh:this,time:t,deltaTime:A})}raycast(t,e){if(!this.packedSplats.packedArray||!this.packedSplats.numSplats)return;const{near:A,far:a,ray:s}=t,n=this.matrixWorld.clone().invert(),l=new Matrix3().setFromMatrix4(n),d=s.origin.clone().applyMatrix4(n),f=s.direction.clone().applyMatrix3(l),E=new Vector3;n.decompose(new Vector3,new Quaternion,E),(E.x*E.y*E.z)**(1/3);const B=raycast_splats(d.x,d.y,d.z,f.x,f.y,f.z,A,a,this.packedSplats.numSplats,this.packedSplats.packedArray,!0);for(const y of B){const v=s.direction.clone().multiplyScalar(y).add(s.origin);e.push({distance:y,point:v,object:this})}}ensureShTextures(){if(!this.packedSplats.extra.sh1)return{};let t=this.packedSplats.extra.sh1Texture;if(!t){let a=this.packedSplats.extra.sh1;const{width:s,height:n,depth:l,maxSplats:d}=getTextureSize(a.length/2);if(a.length<d*2){const E=new Uint32Array(d*2);E.set(a),this.packedSplats.extra.sh1=E,a=E}const f=new DataArrayTexture(a,s,n,l);f.format=RGIntegerFormat,f.type=UnsignedIntType,f.internalFormat="RG32UI",f.needsUpdate=!0,t=new DynoUsampler2DArray({value:f,key:"sh1"}),this.packedSplats.extra.sh1Texture=t}if(!this.packedSplats.extra.sh2)return{sh1Texture:t};let e=this.packedSplats.extra.sh2Texture;if(!e){let a=this.packedSplats.extra.sh2;const{width:s,height:n,depth:l,maxSplats:d}=getTextureSize(a.length/4);if(a.length<d*4){const E=new Uint32Array(d*4);E.set(a),this.packedSplats.extra.sh2=E,a=E}const f=new DataArrayTexture(a,s,n,l);f.format=RGBAIntegerFormat,f.type=UnsignedIntType,f.internalFormat="RGBA32UI",f.needsUpdate=!0,e=new DynoUsampler2DArray({value:f,key:"sh2"}),this.packedSplats.extra.sh2Texture=e}if(!this.packedSplats.extra.sh3)return{sh1Texture:t,sh2Texture:e};let A=this.packedSplats.extra.sh3Texture;if(!A){let a=this.packedSplats.extra.sh3;const{width:s,height:n,depth:l,maxSplats:d}=getTextureSize(a.length/4);if(a.length<d*4){const E=new Uint32Array(d*4);E.set(a),this.packedSplats.extra.sh3=E,a=E}const f=new DataArrayTexture(a,s,n,l);f.format=RGBAIntegerFormat,f.type=UnsignedIntType,f.internalFormat="RGBA32UI",f.needsUpdate=!0,A=new DynoUsampler2DArray({value:f,key:"sh3"}),this.packedSplats.extra.sh3Texture=A}return{sh1Texture:t,sh2Texture:e,sh3Texture:A}}};_SplatMesh.staticInitialized=_SplatMesh.staticInitialize();_SplatMesh.isStaticInitialized=!1;_SplatMesh.dynoTime=new DynoFloat({value:0});let SplatMesh=_SplatMesh;const defineEvaluateSH1=unindent(`
  vec3 evaluateSH1(Gsplat gsplat, usampler2DArray sh1, vec3 viewDir) {
    // Extract sint7 values packed into 2 x uint32
    uvec2 packed = texelFetch(sh1, splatTexCoord(gsplat.index), 0).rg;
    vec3 sh1_0 = vec3(ivec3(
      int(packed.x << 25u) >> 25,
      int(packed.x << 18u) >> 25,
      int(packed.x << 11u) >> 25
    )) / 63.0;
    vec3 sh1_1 = vec3(ivec3(
      int(packed.x << 4u) >> 25,
      int((packed.x >> 3u) | (packed.y << 29u)) >> 25,
      int(packed.y << 22u) >> 25
    )) / 63.0;
    vec3 sh1_2 = vec3(ivec3(
      int(packed.y << 15u) >> 25,
      int(packed.y << 8u) >> 25,
      int(packed.y << 1u) >> 25
    )) / 63.0;

    return sh1_0 * (-0.4886025 * viewDir.y)
      + sh1_1 * (0.4886025 * viewDir.z)
      + sh1_2 * (-0.4886025 * viewDir.x);
  }
`),defineEvaluateSH2=unindent(`
  vec3 evaluateSH2(Gsplat gsplat, usampler2DArray sh2, vec3 viewDir) {
    // Extract sint8 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh2, splatTexCoord(gsplat.index), 0);
    vec3 sh2_0 = vec3(ivec3(
      int(packed.x << 24u) >> 24,
      int(packed.x << 16u) >> 24,
      int(packed.x << 8u) >> 24
    )) / 127.0;
    vec3 sh2_1 = vec3(ivec3(
      int(packed.x) >> 24,
      int(packed.y << 24u) >> 24,
      int(packed.y << 16u) >> 24
    )) / 127.0;
    vec3 sh2_2 = vec3(ivec3(
      int(packed.y << 8u) >> 24,
      int(packed.y) >> 24,
      int(packed.z << 24u) >> 24
    )) / 127.0;
    vec3 sh2_3 = vec3(ivec3(
      int(packed.z << 16u) >> 24,
      int(packed.z << 8u) >> 24,
      int(packed.z) >> 24
    )) / 127.0;
    vec3 sh2_4 = vec3(ivec3(
      int(packed.w << 24u) >> 24,
      int(packed.w << 16u) >> 24,
      int(packed.w << 8u) >> 24
    )) / 127.0;

    return sh2_0 * (1.0925484 * viewDir.x * viewDir.y)
      + sh2_1 * (1.0925484 * viewDir.y * viewDir.z)
      + sh2_2 * (0.3153915 * (2.0 * viewDir.z * viewDir.z - viewDir.x * viewDir.x - viewDir.y * viewDir.y))
      + sh2_3 * (1.0925484 * viewDir.x * viewDir.z)
      + sh2_4 * (0.5462742 * (viewDir.x * viewDir.x - viewDir.y * viewDir.y));
  }
`),defineEvaluateSH3=unindent(`
  vec3 evaluateSH3(Gsplat gsplat, usampler2DArray sh3, vec3 viewDir) {
    // Extract sint6 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh3, splatTexCoord(gsplat.index), 0);
    vec3 sh3_0 = vec3(ivec3(
      int(packed.x << 26u) >> 26,
      int(packed.x << 20u) >> 26,
      int(packed.x << 14u) >> 26
    )) / 31.0;
    vec3 sh3_1 = vec3(ivec3(
      int(packed.x << 8u) >> 26,
      int(packed.x << 2u) >> 26,
      int((packed.x >> 4u) | (packed.y << 28u)) >> 26
    )) / 31.0;
    vec3 sh3_2 = vec3(ivec3(
      int(packed.y << 22u) >> 26,
      int(packed.y << 16u) >> 26,
      int(packed.y << 10u) >> 26
    )) / 31.0;
    vec3 sh3_3 = vec3(ivec3(
      int(packed.y << 4u) >> 26,
      int((packed.y >> 2u) | (packed.z << 30u)) >> 26,
      int(packed.z << 24u) >> 26
    )) / 31.0;
    vec3 sh3_4 = vec3(ivec3(
      int(packed.z << 18u) >> 26,
      int(packed.z << 12u) >> 26,
      int(packed.z << 6u) >> 26
    )) / 31.0;
    vec3 sh3_5 = vec3(ivec3(
      int(packed.z) >> 26,
      int(packed.w << 26u) >> 26,
      int(packed.w << 20u) >> 26
    )) / 31.0;
    vec3 sh3_6 = vec3(ivec3(
      int(packed.w << 14u) >> 26,
      int(packed.w << 8u) >> 26,
      int(packed.w << 2u) >> 26
    )) / 31.0;

    float xx = viewDir.x * viewDir.x;
    float yy = viewDir.y * viewDir.y;
    float zz = viewDir.z * viewDir.z;
    float xy = viewDir.x * viewDir.y;
    float yz = viewDir.y * viewDir.z;
    float zx = viewDir.z * viewDir.x;

    return sh3_0 * (-0.5900436 * viewDir.y * (3.0 * xx - yy))
      + sh3_1 * (2.8906114 * xy * viewDir.z) +
      + sh3_2 * (-0.4570458 * viewDir.y * (4.0 * zz - xx - yy))
      + sh3_3 * (0.3731763 * viewDir.z * (2.0 * zz - 3.0 * xx - 3.0 * yy))
      + sh3_4 * (-0.4570458 * viewDir.x * (4.0 * zz - xx - yy))
      + sh3_5 * (1.4453057 * viewDir.z * (xx - yy))
      + sh3_6 * (-0.5900436 * viewDir.x * (xx - 3.0 * yy));
  }
`);function evaluateSH1(r,t,e){return dyno$1({inTypes:{gsplat:Gsplat,sh1:"usampler2DArray",viewDir:"vec3"},outTypes:{rgb:"vec3"},inputs:{gsplat:r,sh1:t,viewDir:e},globals:()=>[defineGsplat,defineEvaluateSH1],statements:({inputs:A,outputs:a})=>unindentLines(`
        if (isGsplatActive(${A.gsplat}.flags)) {
          ${a.rgb} = evaluateSH1(${A.gsplat}, ${A.sh1}, ${A.viewDir});
        } else {
          ${a.rgb} = vec3(0.0);
        }
      `)}).outputs.rgb}function evaluateSH2(r,t,e){return dyno$1({inTypes:{gsplat:Gsplat,sh2:"usampler2DArray",viewDir:"vec3"},outTypes:{rgb:"vec3"},inputs:{gsplat:r,sh2:t,viewDir:e},globals:()=>[defineGsplat,defineEvaluateSH2],statements:({inputs:A,outputs:a})=>unindentLines(`
        if (isGsplatActive(${A.gsplat}.flags)) {
          ${a.rgb} = evaluateSH2(${A.gsplat}, ${A.sh2}, ${A.viewDir});
        } else {
          ${a.rgb} = vec3(0.0);
        }
      `)}).outputs.rgb}function evaluateSH3(r,t,e){return dyno$1({inTypes:{gsplat:Gsplat,sh3:"usampler2DArray",viewDir:"vec3"},outTypes:{rgb:"vec3"},inputs:{gsplat:r,sh3:t,viewDir:e},globals:()=>[defineGsplat,defineEvaluateSH3],statements:({inputs:A,outputs:a})=>unindentLines(`
        if (isGsplatActive(${A.gsplat}.flags)) {
          ${a.rgb} = evaluateSH3(${A.gsplat}, ${A.sh3}, ${A.viewDir});
        } else {
          ${a.rgb} = vec3(0.0);
        }
      `)}).outputs.rgb}const _PlyReader=class LA{constructor({fileBytes:t}){this.header="",this.littleEndian=!0,this.elements={},this.comments=[],this.data=null,this.numSplats=0,this.fileBytes=t instanceof ArrayBuffer?new Uint8Array(t):t}async parseHeader(){const e=new ReadableStream({start:n=>{n.enqueue(this.fileBytes.slice(0,65536)),n.close()}}).pipeThrough(new TextDecoderStream).getReader();this.header="";const A=`end_header
`;for(;;){const{value:n,done:l}=await e.read();if(l)throw new Error("Failed to read header");this.header+=n;const d=this.header.indexOf(A);if(d>=0){this.header=this.header.slice(0,d+A.length);break}}const a=new TextEncoder().encode(this.header).length;this.data=new DataView(this.fileBytes.buffer,a),this.elements={};let s=null;this.comments=[],this.header.trim().split(`
`).forEach((n,l)=>{const d=n.trim();if(l===0){if(d!=="ply")throw new Error("Invalid PLY header");return}if(d.length===0)return;const f=d.split(" ");switch(f[0]){case"format":if(f[1]==="binary_little_endian")this.littleEndian=!0;else if(f[1]==="binary_big_endian")this.littleEndian=!1;else throw new Error(`Unsupported PLY format: ${f[1]}`);if(f[2]!=="1.0")throw new Error(`Unsupported PLY version: ${f[2]}`);break;case"end_header":break;case"comment":this.comments.push(d.slice(8));break;case"element":{const E=f[1];s={name:E,count:Number.parseInt(f[2]),properties:{}},this.elements[E]=s;break}case"property":if(s==null)throw new Error("Property must be inside an element");f[1]==="list"?s.properties[f[4]]={isList:!0,type:f[3],countType:f[2]}:s.properties[f[2]]={isList:!1,type:f[1]};break}}),this.elements.vertex&&(this.numSplats=this.elements.vertex.count)}parseData(t){let e=0;const A=this.data;if(A==null)throw new Error("No data to parse");for(const a in this.elements){const s=this.elements[a],{count:n,properties:l}=s,d={},f=[];for(const[I,B]of Object.entries(l))B.isList?(d[I]=[],f.push(()=>{const y=d[I];y.length=PARSE_FIELD[B.countType](A,e,this.littleEndian),e+=FIELD_BYTES[B.countType];for(let v=0;v<y.length;v++)y[v]=PARSE_FIELD[B.type](A,e,this.littleEndian),e+=FIELD_BYTES[B.type]})):(d[I]=0,f.push(()=>{d[I]=PARSE_FIELD[B.type](A,e,this.littleEndian),e+=FIELD_BYTES[B.type]}));const E=t(s)??(()=>{});for(let I=0;I<n;I++){for(const B of f)B();E(I,d)}}}parseSplats(t,e){if(this.elements.vertex==null)throw new Error("No vertex element found");let A=!1;const a=[];let s=0,n=[],l=[],d=[],f,E,I;function B(){const Q=NUM_SH_TO_NUM_F_REST[s];n=new Array(3).fill(null).flatMap((D,b)=>[0,1,2].map((T,P)=>`f_rest_${b+P*Q/3}`)),l=new Array(5).fill(null).flatMap((D,b)=>[0,1,2].map((T,P)=>`f_rest_${3+b+P*Q/3}`)),d=new Array(7).fill(null).flatMap((D,b)=>[0,1,2].map((T,P)=>`f_rest_${8+b+P*Q/3}`)),f=s>=1?new Float32Array(3*3):void 0,E=s>=2?new Float32Array(5*3):void 0,I=s>=3?new Float32Array(7*3):void 0}function y(Q,D){if(!f)throw new Error("Missing sh1");for(const[b,T]of n.entries())f[b]=D[T]*8/255-4;if(E)for(const[b,T]of l.entries())E[b]=D[T]*8/255-4;if(I)for(const[b,T]of d.entries())I[b]=D[T]*8/255-4;e==null||e(Q,f,E,I)}function v(Q){const{min_x:D,min_y:b,min_z:T,max_x:P,max_y:R,max_z:F,min_scale_x:O,min_scale_y:N,min_scale_z:L,max_scale_x:Y,max_scale_y:rt,max_scale_z:tt,min_r:at,min_g:pt,min_b:ct,max_r:$,max_g:q,max_b:Ct}=Q.properties;if(!D||!b||!T||!P||!R||!F||!O||!N||!L||!Y||!rt||!tt||!at||!pt||!ct||!$||!q||!Ct)throw new Error("Missing PLY chunk properties");return A=!0,(wt,Bt)=>{const{min_x:ut,min_y:K,min_z:J,max_x:At,max_y:xt,max_z:mt,min_scale_x:Tt,min_scale_y:Vt,min_scale_z:Nt,max_scale_x:$t,max_scale_y:ne,max_scale_z:Ae,min_r:Z,min_g:ue,min_b:qt,max_r:Xt,max_g:Ht,max_b:oe}=Bt;a.push({min_x:ut,min_y:K,min_z:J,max_x:At,max_y:xt,max_z:mt,min_scale_x:Tt,min_scale_y:Vt,min_scale_z:Nt,max_scale_x:$t,max_scale_y:ne,max_scale_z:Ae,min_r:Z,min_g:ue,min_b:qt,max_r:Xt,max_g:Ht,max_b:oe})}}function S(Q){if(e&&Q.name==="sh")return s=getNumSh(Q.properties),B(),y;if(Q.name!=="vertex")return null;const{packed_position:D,packed_rotation:b,packed_scale:T,packed_color:P}=Q.properties;if(!D||!b||!T||!P)throw new Error("Missing PLY properties: packed_position, packed_rotation, packed_scale, packed_color");const R=Math.sqrt(2);return(F,O)=>{const N=a[F>>>8];if(N==null)throw new Error("Missing PLY chunk");const{min_x:L,min_y:Y,min_z:rt,max_x:tt,max_y:at,max_z:pt,min_scale_x:ct,min_scale_y:$,min_scale_z:q,max_scale_x:Ct,max_scale_y:wt,max_scale_z:Bt,min_r:ut,min_g:K,min_b:J,max_r:At,max_g:xt,max_b:mt}=N,{packed_position:Tt,packed_rotation:Vt,packed_scale:Nt,packed_color:$t}=O,ne=(Tt>>>21&2047)/2047*(tt-L)+L,Ae=(Tt>>>11&1023)/1023*(at-Y)+Y,Z=(Tt&2047)/2047*(pt-rt)+rt,ue=((Vt>>>20&1023)/1023-.5)*R,qt=((Vt>>>10&1023)/1023-.5)*R,Xt=((Vt&1023)/1023-.5)*R,Ht=Math.sqrt(Math.max(0,1-ue*ue-qt*qt-Xt*Xt)),oe=Vt>>>30,Kt=oe===0?ue:oe===1?Ht:qt,Ee=oe<=1?qt:oe===2?Ht:Xt,be=oe<=2?Xt:Ht,W=oe===0?Ht:ue,U=Math.exp((Nt>>>21&2047)/2047*(Ct-ct)+ct),It=Math.exp((Nt>>>11&1023)/1023*(wt-$)+$),St=Math.exp((Nt&2047)/2047*(Bt-q)+q),Mt=($t>>>24&255)/255*(At-ut)+ut,Dt=($t>>>16&255)/255*(xt-K)+K,te=($t>>>8&255)/255*(mt-J)+J,Gt=($t&255)/255;t(F,ne,Ae,Z,U,It,St,Kt,Ee,be,W,Gt,Mt,Dt,te)}}const _=Q=>{if(Q.name==="chunk")return v(Q);if(A)return S(Q);if(Q.name!=="vertex")return null;const{x:D,y:b,z:T,scale_0:P,scale_1:R,scale_2:F,rot_0:O,rot_1:N,rot_2:L,rot_3:Y,opacity:rt,f_dc_0:tt,f_dc_1:at,f_dc_2:pt,red:ct,green:$,blue:q,alpha:Ct}=Q.properties;if(!D||!b||!T)throw new Error("Missing PLY properties: x, y, z");const wt=P&&R&&F,Bt=O&&N&&L&&Y,ut=Ct!=null?FIELD_SCALE[Ct.type]:1,K=ct!=null?FIELD_SCALE[ct.type]:1,J=$!=null?FIELD_SCALE[$.type]:1,At=q!=null?FIELD_SCALE[q.type]:1;return s=getNumSh(Q.properties),B(),(xt,mt)=>{const Tt=wt?Math.exp(mt.scale_0):LA.defaultPointScale,Vt=wt?Math.exp(mt.scale_1):LA.defaultPointScale,Nt=wt?Math.exp(mt.scale_2):LA.defaultPointScale,$t=Bt?mt.rot_1:0,ne=Bt?mt.rot_2:0,Ae=Bt?mt.rot_3:0,Z=Bt?mt.rot_0:1,ue=rt!=null?1/(1+Math.exp(-mt.opacity)):Ct!=null?mt.alpha/ut:1,qt=tt!=null?mt.f_dc_0*SH_C0$1+.5:ct!=null?mt.red/K:1,Xt=at!=null?mt.f_dc_1*SH_C0$1+.5:$!=null?mt.green/J:1,Ht=pt!=null?mt.f_dc_2*SH_C0$1+.5:q!=null?mt.blue/At:1;if(t(xt,mt.x,mt.y,mt.z,Tt,Vt,Nt,$t,ne,Ae,Z,ue,qt,Xt,Ht),e&&f){if(f)for(const[oe,Kt]of n.entries())f[oe]=mt[Kt];if(E)for(const[oe,Kt]of l.entries())E[oe]=mt[Kt];if(I)for(const[oe,Kt]of d.entries())I[oe]=mt[Kt];e(xt,f,E,I)}}};this.parseData(_)}injectRgba(t){let e=0;const A=this.data;if(A==null)throw new Error("No parsed data");if(t.length!==this.numSplats*4)throw new Error("Invalid RGBA array length");for(const a in this.elements){const s=this.elements[a],{count:n,properties:l}=s,d=[];let f=0;const E=a==="vertex";if(E){for(const I of["opacity","f_dc_0","f_dc_1","f_dc_2"])if(!l[I]||l[I].type!=="float")throw new Error(`Can't injectRgba due to property: ${I}`)}for(const[I,B]of Object.entries(l))if(B.isList)d.push(()=>{const y=PARSE_FIELD[B.countType](A,e,this.littleEndian);e+=FIELD_BYTES[B.countType],e+=y*FIELD_BYTES[B.type]});else{if(E)if(I==="f_dc_0"||I==="f_dc_1"||I==="f_dc_2"){const y=Number.parseInt(I.slice(5));d.push(()=>{const v=(t[f+y]/255-.5)/SH_C0$1;SET_FIELD[B.type](A,e,this.littleEndian,v)})}else I==="opacity"&&d.push(()=>{const y=Math.max(-100,Math.min(100,-Math.log(1/(t[f+3]/255)-1)));SET_FIELD[B.type](A,e,this.littleEndian,y)});d.push(()=>{e+=FIELD_BYTES[B.type]})}for(let I=0;I<n;I++){for(const B of d)B();E&&(f+=4)}}}};_PlyReader.defaultPointScale=.001;let PlyReader=_PlyReader;const SH_C0$1=.28209479177387814,PARSE_FIELD={char:(r,t,e)=>r.getInt8(t),uchar:(r,t,e)=>r.getUint8(t),short:(r,t,e)=>r.getInt16(t,e),ushort:(r,t,e)=>r.getUint16(t,e),int:(r,t,e)=>r.getInt32(t,e),uint:(r,t,e)=>r.getUint32(t,e),float:(r,t,e)=>r.getFloat32(t,e),double:(r,t,e)=>r.getFloat64(t,e)},SET_FIELD={char:(r,t,e,A)=>{r.setInt8(t,A)},uchar:(r,t,e,A)=>{r.setUint8(t,A)},short:(r,t,e,A)=>{r.setInt16(t,A,e)},ushort:(r,t,e,A)=>{r.setUint16(t,A,e)},int:(r,t,e,A)=>{r.setInt32(t,A,e)},uint:(r,t,e,A)=>{r.setUint32(t,A,e)},float:(r,t,e,A)=>{r.setFloat32(t,A,e)},double:(r,t,e,A)=>{r.setFloat64(t,A,e)}},FIELD_BYTES={char:1,uchar:1,short:2,ushort:2,int:4,uint:4,float:4,double:8},FIELD_SCALE={char:127,uchar:255,short:32767,ushort:65535,int:2147483647,uint:4294967295,float:1,double:1},NUM_F_REST_TO_NUM_SH={0:0,9:1,24:2,45:3},NUM_SH_TO_NUM_F_REST={0:0,1:9,2:24,3:45};function getNumSh(r){let t=0;for(;r[`f_rest_${t}`];)t+=1;const e=NUM_F_REST_TO_NUM_SH[t];if(e==null)throw new Error(`Unsupported number of SH coefficients: ${t}`);return e}const jsContent=`(function() {
  "use strict";
  let wasm;
  const cachedTextDecoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-8", { ignoreBOM: true, fatal: true }) : { decode: () => {
    throw Error("TextDecoder not available");
  } };
  if (typeof TextDecoder !== "undefined") {
    cachedTextDecoder.decode();
  }
  let cachedUint8ArrayMemory0 = null;
  function getUint8ArrayMemory0() {
    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {
      cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachedUint8ArrayMemory0;
  }
  function getStringFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
  }
  function sort_splats(num_splats, readback, ordering) {
    const ret = wasm.sort_splats(num_splats, readback, ordering);
    return ret >>> 0;
  }
  function raycast_splats(origin_x, origin_y, origin_z, dir_x, dir_y, dir_z, near, far, num_splats, packed_splats, raycast_ellipsoid) {
    const ret = wasm.raycast_splats(origin_x, origin_y, origin_z, dir_x, dir_y, dir_z, near, far, num_splats, packed_splats, raycast_ellipsoid);
    return ret;
  }
  async function __wbg_load(module, imports) {
    if (typeof Response === "function" && module instanceof Response) {
      if (typeof WebAssembly.instantiateStreaming === "function") {
        try {
          return await WebAssembly.instantiateStreaming(module, imports);
        } catch (e) {
          if (module.headers.get("Content-Type") != "application/wasm") {
            console.warn("\`WebAssembly.instantiateStreaming\` failed because your server does not serve Wasm with \`application/wasm\` MIME type. Falling back to \`WebAssembly.instantiate\` which is slower. Original error:\\n", e);
          } else {
            throw e;
          }
        }
      }
      const bytes = await module.arrayBuffer();
      return await WebAssembly.instantiate(bytes, imports);
    } else {
      const instance = await WebAssembly.instantiate(module, imports);
      if (instance instanceof WebAssembly.Instance) {
        return { instance, module };
      } else {
        return instance;
      }
    }
  }
  function __wbg_get_imports() {
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbg_buffer_609cc3eee51ed158 = function(arg0) {
      const ret = arg0.buffer;
      return ret;
    };
    imports.wbg.__wbg_length_3b4f022188ae8db6 = function(arg0) {
      const ret = arg0.length;
      return ret;
    };
    imports.wbg.__wbg_length_6ca527665d89694d = function(arg0) {
      const ret = arg0.length;
      return ret;
    };
    imports.wbg.__wbg_length_8cfd2c6409af88ad = function(arg0) {
      const ret = arg0.length;
      return ret;
    };
    imports.wbg.__wbg_new_9fee97a409b32b68 = function(arg0) {
      const ret = new Uint16Array(arg0);
      return ret;
    };
    imports.wbg.__wbg_new_e3b321dcfef89fc7 = function(arg0) {
      const ret = new Uint32Array(arg0);
      return ret;
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354 = function(arg0, arg1, arg2) {
      const ret = new Float32Array(arg0, arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_f1dead44d1fc7212 = function(arg0, arg1, arg2) {
      const ret = new Uint32Array(arg0, arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_newwithlength_5a5efe313cfd59f1 = function(arg0) {
      const ret = new Float32Array(arg0 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_set_10bad9bee0e9c58b = function(arg0, arg1, arg2) {
      arg0.set(arg1, arg2 >>> 0);
    };
    imports.wbg.__wbg_set_d23661d19148b229 = function(arg0, arg1, arg2) {
      arg0.set(arg1, arg2 >>> 0);
    };
    imports.wbg.__wbg_set_f4f1f0daa30696fc = function(arg0, arg1, arg2) {
      arg0.set(arg1, arg2 >>> 0);
    };
    imports.wbg.__wbg_subarray_3aaeec89bb2544f0 = function(arg0, arg1, arg2) {
      const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbg_subarray_769e1e0f81bb259b = function(arg0, arg1, arg2) {
      const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);
      return ret;
    };
    imports.wbg.__wbindgen_init_externref_table = function() {
      const table = wasm.__wbindgen_export_0;
      const offset = table.grow(4);
      table.set(0, void 0);
      table.set(offset + 0, void 0);
      table.set(offset + 1, null);
      table.set(offset + 2, true);
      table.set(offset + 3, false);
    };
    imports.wbg.__wbindgen_memory = function() {
      const ret = wasm.memory;
      return ret;
    };
    imports.wbg.__wbindgen_throw = function(arg0, arg1) {
      throw new Error(getStringFromWasm0(arg0, arg1));
    };
    return imports;
  }
  function __wbg_finalize_init(instance, module) {
    wasm = instance.exports;
    __wbg_init.__wbindgen_wasm_module = module;
    cachedUint8ArrayMemory0 = null;
    wasm.__wbindgen_start();
    return wasm;
  }
  async function __wbg_init(module_or_path) {
    if (wasm !== void 0) return wasm;
    if (typeof module_or_path !== "undefined") {
      if (Object.getPrototypeOf(module_or_path) === Object.prototype) {
        ({ module_or_path } = module_or_path);
      } else {
        console.warn("using deprecated parameters for the initialization function; pass a single object instead");
      }
    }
    if (typeof module_or_path === "undefined") {
      module_or_path = new URL("data:application/wasm;base64,", self.location.href);
    }
    const imports = __wbg_get_imports();
    if (typeof module_or_path === "string" || typeof Request === "function" && module_or_path instanceof Request || typeof URL === "function" && module_or_path instanceof URL) {
      module_or_path = fetch(module_or_path);
    }
    const { instance, module } = await __wbg_load(await module_or_path, imports);
    return __wbg_finalize_init(instance, module);
  }
  var u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;
  var fleb = new u8([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    /* unused */
    0,
    0,
    /* impossible */
    0
  ]);
  var fdeb = new u8([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    /* unused */
    0,
    0
  ]);
  var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  var freb = function(eb, start) {
    var b = new u16(31);
    for (var i2 = 0; i2 < 31; ++i2) {
      b[i2] = start += 1 << eb[i2 - 1];
    }
    var r = new i32(b[30]);
    for (var i2 = 1; i2 < 30; ++i2) {
      for (var j = b[i2]; j < b[i2 + 1]; ++j) {
        r[j] = j - b[i2] << 5 | i2;
      }
    }
    return { b, r };
  };
  var _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;
  fl[28] = 258, revfl[258] = 28;
  var _b = freb(fdeb, 0), fd = _b.b;
  var rev = new u16(32768);
  for (var i = 0; i < 32768; ++i) {
    var x = (i & 43690) >> 1 | (i & 21845) << 1;
    x = (x & 52428) >> 2 | (x & 13107) << 2;
    x = (x & 61680) >> 4 | (x & 3855) << 4;
    rev[i] = ((x & 65280) >> 8 | (x & 255) << 8) >> 1;
  }
  var hMap = function(cd, mb, r) {
    var s = cd.length;
    var i2 = 0;
    var l = new u16(mb);
    for (; i2 < s; ++i2) {
      if (cd[i2])
        ++l[cd[i2] - 1];
    }
    var le = new u16(mb);
    for (i2 = 1; i2 < mb; ++i2) {
      le[i2] = le[i2 - 1] + l[i2 - 1] << 1;
    }
    var co;
    if (r) {
      co = new u16(1 << mb);
      var rvb = 15 - mb;
      for (i2 = 0; i2 < s; ++i2) {
        if (cd[i2]) {
          var sv = i2 << 4 | cd[i2];
          var r_1 = mb - cd[i2];
          var v = le[cd[i2] - 1]++ << r_1;
          for (var m = v | (1 << r_1) - 1; v <= m; ++v) {
            co[rev[v] >> rvb] = sv;
          }
        }
      }
    } else {
      co = new u16(s);
      for (i2 = 0; i2 < s; ++i2) {
        if (cd[i2]) {
          co[i2] = rev[le[cd[i2] - 1]++] >> 15 - cd[i2];
        }
      }
    }
    return co;
  };
  var flt = new u8(288);
  for (var i = 0; i < 144; ++i)
    flt[i] = 8;
  for (var i = 144; i < 256; ++i)
    flt[i] = 9;
  for (var i = 256; i < 280; ++i)
    flt[i] = 7;
  for (var i = 280; i < 288; ++i)
    flt[i] = 8;
  var fdt = new u8(32);
  for (var i = 0; i < 32; ++i)
    fdt[i] = 5;
  var flrm = /* @__PURE__ */ hMap(flt, 9, 1);
  var fdrm = /* @__PURE__ */ hMap(fdt, 5, 1);
  var max = function(a) {
    var m = a[0];
    for (var i2 = 1; i2 < a.length; ++i2) {
      if (a[i2] > m)
        m = a[i2];
    }
    return m;
  };
  var bits = function(d, p, m) {
    var o = p / 8 | 0;
    return (d[o] | d[o + 1] << 8) >> (p & 7) & m;
  };
  var bits16 = function(d, p) {
    var o = p / 8 | 0;
    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);
  };
  var shft = function(p) {
    return (p + 7) / 8 | 0;
  };
  var slc = function(v, s, e) {
    if (s == null || s < 0)
      s = 0;
    if (e == null || e > v.length)
      e = v.length;
    return new u8(v.subarray(s, e));
  };
  var ec = [
    "unexpected EOF",
    "invalid block type",
    "invalid length/literal",
    "invalid distance",
    "stream finished",
    "no stream handler",
    ,
    "no callback",
    "invalid UTF-8 data",
    "extra field too long",
    "date not in range 1980-2099",
    "filename too long",
    "stream finishing",
    "invalid zip data"
    // determined by unknown compression method
  ];
  var err = function(ind, msg, nt) {
    var e = new Error(msg || ec[ind]);
    e.code = ind;
    if (Error.captureStackTrace)
      Error.captureStackTrace(e, err);
    if (!nt)
      throw e;
    return e;
  };
  var inflt = function(dat, st, buf, dict) {
    var sl = dat.length, dl = 0;
    if (!sl || st.f && !st.l)
      return buf || new u8(0);
    var noBuf = !buf;
    var resize = noBuf || st.i != 2;
    var noSt = st.i;
    if (noBuf)
      buf = new u8(sl * 3);
    var cbuf = function(l2) {
      var bl = buf.length;
      if (l2 > bl) {
        var nbuf = new u8(Math.max(bl * 2, l2));
        nbuf.set(buf);
        buf = nbuf;
      }
    };
    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    var tbts = sl * 8;
    do {
      if (!lm) {
        final = bits(dat, pos, 1);
        var type = bits(dat, pos + 1, 3);
        pos += 3;
        if (!type) {
          var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
          if (t > sl) {
            if (noSt)
              err(0);
            break;
          }
          if (resize)
            cbuf(bt + l);
          buf.set(dat.subarray(s, t), bt);
          st.b = bt += l, st.p = pos = t * 8, st.f = final;
          continue;
        } else if (type == 1)
          lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
        else if (type == 2) {
          var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
          var tl = hLit + bits(dat, pos + 5, 31) + 1;
          pos += 14;
          var ldt = new u8(tl);
          var clt = new u8(19);
          for (var i2 = 0; i2 < hcLen; ++i2) {
            clt[clim[i2]] = bits(dat, pos + i2 * 3, 7);
          }
          pos += hcLen * 3;
          var clb = max(clt), clbmsk = (1 << clb) - 1;
          var clm = hMap(clt, clb, 1);
          for (var i2 = 0; i2 < tl; ) {
            var r = clm[bits(dat, pos, clbmsk)];
            pos += r & 15;
            var s = r >> 4;
            if (s < 16) {
              ldt[i2++] = s;
            } else {
              var c = 0, n = 0;
              if (s == 16)
                n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i2 - 1];
              else if (s == 17)
                n = 3 + bits(dat, pos, 7), pos += 3;
              else if (s == 18)
                n = 11 + bits(dat, pos, 127), pos += 7;
              while (n--)
                ldt[i2++] = c;
            }
          }
          var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
          lbt = max(lt);
          dbt = max(dt);
          lm = hMap(lt, lbt, 1);
          dm = hMap(dt, dbt, 1);
        } else
          err(1);
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
      }
      if (resize)
        cbuf(bt + 131072);
      var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
      var lpos = pos;
      for (; ; lpos = pos) {
        var c = lm[bits16(dat, pos) & lms], sym = c >> 4;
        pos += c & 15;
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
        if (!c)
          err(2);
        if (sym < 256)
          buf[bt++] = sym;
        else if (sym == 256) {
          lpos = pos, lm = null;
          break;
        } else {
          var add2 = sym - 254;
          if (sym > 264) {
            var i2 = sym - 257, b = fleb[i2];
            add2 = bits(dat, pos, (1 << b) - 1) + fl[i2];
            pos += b;
          }
          var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;
          if (!d)
            err(3);
          pos += d & 15;
          var dt = fd[dsym];
          if (dsym > 3) {
            var b = fdeb[dsym];
            dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
          }
          if (pos > tbts) {
            if (noSt)
              err(0);
            break;
          }
          if (resize)
            cbuf(bt + 131072);
          var end = bt + add2;
          if (bt < dt) {
            var shift = dl - dt, dend = Math.min(dt, end);
            if (shift + bt < 0)
              err(3);
            for (; bt < dend; ++bt)
              buf[bt] = dict[shift + bt];
          }
          for (; bt < end; ++bt)
            buf[bt] = buf[bt - dt];
        }
      }
      st.l = lm, st.p = lpos, st.b = bt, st.f = final;
      if (lm)
        final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    } while (!final);
    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);
  };
  var et = /* @__PURE__ */ new u8(0);
  var gzs = function(d) {
    if (d[0] != 31 || d[1] != 139 || d[2] != 8)
      err(6, "invalid gzip data");
    var flg = d[3];
    var st = 10;
    if (flg & 4)
      st += (d[10] | d[11] << 8) + 2;
    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])
      ;
    return st + (flg & 2);
  };
  var Inflate = /* @__PURE__ */ function() {
    function Inflate2(opts, cb) {
      if (typeof opts == "function")
        cb = opts, opts = {};
      this.ondata = cb;
      var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);
      this.s = { i: 0, b: dict ? dict.length : 0 };
      this.o = new u8(32768);
      this.p = new u8(0);
      if (dict)
        this.o.set(dict);
    }
    Inflate2.prototype.e = function(c) {
      if (!this.ondata)
        err(5);
      if (this.d)
        err(4);
      if (!this.p.length)
        this.p = c;
      else if (c.length) {
        var n = new u8(this.p.length + c.length);
        n.set(this.p), n.set(c, this.p.length), this.p = n;
      }
    };
    Inflate2.prototype.c = function(final) {
      this.s.i = +(this.d = final || false);
      var bts = this.s.b;
      var dt = inflt(this.p, this.s, this.o);
      this.ondata(slc(dt, bts, this.s.b), this.d);
      this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
      this.p = slc(this.p, this.s.p / 8 | 0), this.s.p &= 7;
    };
    Inflate2.prototype.push = function(chunk, final) {
      this.e(chunk), this.c(final);
    };
    return Inflate2;
  }();
  var Gunzip = /* @__PURE__ */ function() {
    function Gunzip2(opts, cb) {
      this.v = 1;
      this.r = 0;
      Inflate.call(this, opts, cb);
    }
    Gunzip2.prototype.push = function(chunk, final) {
      Inflate.prototype.e.call(this, chunk);
      this.r += chunk.length;
      if (this.v) {
        var p = this.p.subarray(this.v - 1);
        var s = p.length > 3 ? gzs(p) : 4;
        if (s > p.length) {
          if (!final)
            return;
        } else if (this.v > 1 && this.onmember) {
          this.onmember(this.r - p.length);
        }
        this.p = p.subarray(s), this.v = 0;
      }
      Inflate.prototype.c.call(this, final);
      if (this.s.f && !this.s.l && !final) {
        this.v = shft(this.s.p) + 9;
        this.s = { i: 0 };
        this.o = new u8(0);
        this.push(new u8(0), final);
      }
    };
    return Gunzip2;
  }();
  var td = typeof TextDecoder != "undefined" && /* @__PURE__ */ new TextDecoder();
  var tds = 0;
  try {
    td.decode(et, { stream: true });
    tds = 1;
  } catch (e) {
  }
  /**
   * @license
   * Copyright 2010-2024 Three.js Authors
   * SPDX-License-Identifier: MIT
   */
  const REVISION = "172";
  const FrontSide = 0;
  const BackSide = 1;
  const NormalBlending = 1;
  const AddEquation = 100;
  const SrcAlphaFactor = 204;
  const OneMinusSrcAlphaFactor = 205;
  const LessEqualDepth = 3;
  const MultiplyOperation = 0;
  const UVMapping = 300;
  const RepeatWrapping = 1e3;
  const ClampToEdgeWrapping = 1001;
  const MirroredRepeatWrapping = 1002;
  const NearestFilter = 1003;
  const LinearFilter = 1006;
  const LinearMipmapLinearFilter = 1008;
  const UnsignedByteType = 1009;
  const UnsignedIntType = 1014;
  const FloatType = 1015;
  const RGBAFormat = 1023;
  const RGIntegerFormat = 1031;
  const RGBAIntegerFormat = 1033;
  const NoColorSpace = "";
  const SRGBColorSpace = "srgb";
  const LinearSRGBColorSpace = "srgb-linear";
  const LinearTransfer = "linear";
  const SRGBTransfer = "srgb";
  const KeepStencilOp = 7680;
  const AlwaysStencilFunc = 519;
  const StaticDrawUsage = 35044;
  const GLSL3 = "300 es";
  const WebGLCoordinateSystem = 2e3;
  const WebGPUCoordinateSystem = 2001;
  class EventDispatcher {
    addEventListener(type, listener) {
      if (this._listeners === void 0) this._listeners = {};
      const listeners = this._listeners;
      if (listeners[type] === void 0) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    }
    hasEventListener(type, listener) {
      if (this._listeners === void 0) return false;
      const listeners = this._listeners;
      return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
    }
    removeEventListener(type, listener) {
      if (this._listeners === void 0) return;
      const listeners = this._listeners;
      const listenerArray = listeners[type];
      if (listenerArray !== void 0) {
        const index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    }
    dispatchEvent(event) {
      if (this._listeners === void 0) return;
      const listeners = this._listeners;
      const listenerArray = listeners[event.type];
      if (listenerArray !== void 0) {
        event.target = this;
        const array = listenerArray.slice(0);
        for (let i2 = 0, l = array.length; i2 < l; i2++) {
          array[i2].call(this, event);
        }
        event.target = null;
      }
    }
  }
  const _lut = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
  function generateUUID() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
    return uuid.toLowerCase();
  }
  function clamp(value, min, max2) {
    return Math.max(min, Math.min(max2, value));
  }
  function euclideanModulo(n, m) {
    return (n % m + m) % m;
  }
  function lerp(x2, y, t) {
    return (1 - t) * x2 + t * y;
  }
  function denormalize(value, array) {
    switch (array.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return value / 4294967295;
      case Uint16Array:
        return value / 65535;
      case Uint8Array:
        return value / 255;
      case Int32Array:
        return Math.max(value / 2147483647, -1);
      case Int16Array:
        return Math.max(value / 32767, -1);
      case Int8Array:
        return Math.max(value / 127, -1);
      default:
        throw new Error("Invalid component type.");
    }
  }
  function normalize$1(value, array) {
    switch (array.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return Math.round(value * 4294967295);
      case Uint16Array:
        return Math.round(value * 65535);
      case Uint8Array:
        return Math.round(value * 255);
      case Int32Array:
        return Math.round(value * 2147483647);
      case Int16Array:
        return Math.round(value * 32767);
      case Int8Array:
        return Math.round(value * 127);
      default:
        throw new Error("Invalid component type.");
    }
  }
  class Vector2 {
    constructor(x2 = 0, y = 0) {
      Vector2.prototype.isVector2 = true;
      this.x = x2;
      this.y = y;
    }
    get width() {
      return this.x;
    }
    set width(value) {
      this.x = value;
    }
    get height() {
      return this.y;
    }
    set height(value) {
      this.y = value;
    }
    set(x2, y) {
      this.x = x2;
      this.y = y;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      return this;
    }
    setX(x2) {
      this.x = x2;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this;
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    applyMatrix3(m) {
      const x2 = this.x, y = this.y;
      const e = m.elements;
      this.x = e[0] * x2 + e[3] * y + e[6];
      this.y = e[1] * x2 + e[4] * y + e[7];
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      return this;
    }
    clamp(min, max2) {
      this.x = clamp(this.x, min.x, max2.x);
      this.y = clamp(this.y, min.y, max2.y);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      return this;
    }
    clampLength(min, max2) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max2));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y;
    }
    cross(v) {
      return this.x * v.y - this.y * v.x;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    angle() {
      const angle = Math.atan2(-this.y, -this.x) + Math.PI;
      return angle;
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0) return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y;
      return dx * dx + dy * dy;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      return this;
    }
    rotateAround(center, angle) {
      const c = Math.cos(angle), s = Math.sin(angle);
      const x2 = this.x - center.x;
      const y = this.y - center.y;
      this.x = x2 * c - y * s + center.x;
      this.y = x2 * s + y * c + center.y;
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
    }
  }
  class Matrix3 {
    constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      Matrix3.prototype.isMatrix3 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
      }
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      const te = this.elements;
      te[0] = n11;
      te[1] = n21;
      te[2] = n31;
      te[3] = n12;
      te[4] = n22;
      te[5] = n32;
      te[6] = n13;
      te[7] = n23;
      te[8] = n33;
      return this;
    }
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      );
      return this;
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrix3Column(this, 0);
      yAxis.setFromMatrix3Column(this, 1);
      zAxis.setFromMatrix3Column(this, 2);
      return this;
    }
    setFromMatrix4(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[4],
        me[8],
        me[1],
        me[5],
        me[9],
        me[2],
        me[6],
        me[10]
      );
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[3], a13 = ae[6];
      const a21 = ae[1], a22 = ae[4], a23 = ae[7];
      const a31 = ae[2], a32 = ae[5], a33 = ae[8];
      const b11 = be[0], b12 = be[3], b13 = be[6];
      const b21 = be[1], b22 = be[4], b23 = be[7];
      const b31 = be[2], b32 = be[5], b33 = be[8];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31;
      te[3] = a11 * b12 + a12 * b22 + a13 * b32;
      te[6] = a11 * b13 + a12 * b23 + a13 * b33;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31;
      te[4] = a21 * b12 + a22 * b22 + a23 * b32;
      te[7] = a21 * b13 + a22 * b23 + a23 * b33;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31;
      te[5] = a31 * b12 + a32 * b22 + a33 * b32;
      te[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[3] *= s;
      te[6] *= s;
      te[1] *= s;
      te[4] *= s;
      te[7] *= s;
      te[2] *= s;
      te[5] *= s;
      te[8] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i2 = te[8];
      return a * e * i2 - a * f * h - b * d * i2 + b * f * g + c * d * h - c * e * g;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n31 * n23 - n33 * n21) * detInv;
      te[2] = (n32 * n21 - n31 * n22) * detInv;
      te[3] = t12 * detInv;
      te[4] = (n33 * n11 - n31 * n13) * detInv;
      te[5] = (n31 * n12 - n32 * n11) * detInv;
      te[6] = t13 * detInv;
      te[7] = (n21 * n13 - n23 * n11) * detInv;
      te[8] = (n22 * n11 - n21 * n12) * detInv;
      return this;
    }
    transpose() {
      let tmp;
      const m = this.elements;
      tmp = m[1];
      m[1] = m[3];
      m[3] = tmp;
      tmp = m[2];
      m[2] = m[6];
      m[6] = tmp;
      tmp = m[5];
      m[5] = m[7];
      m[7] = tmp;
      return this;
    }
    getNormalMatrix(matrix4) {
      return this.setFromMatrix4(matrix4).invert().transpose();
    }
    transposeIntoArray(r) {
      const m = this.elements;
      r[0] = m[0];
      r[1] = m[3];
      r[2] = m[6];
      r[3] = m[1];
      r[4] = m[4];
      r[5] = m[7];
      r[6] = m[2];
      r[7] = m[5];
      r[8] = m[8];
      return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
      const c = Math.cos(rotation);
      const s = Math.sin(rotation);
      this.set(
        sx * c,
        sx * s,
        -sx * (c * cx + s * cy) + cx + tx,
        -sy * s,
        sy * c,
        -sy * (-s * cx + c * cy) + cy + ty,
        0,
        0,
        1
      );
      return this;
    }
    //
    scale(sx, sy) {
      this.premultiply(_m3.makeScale(sx, sy));
      return this;
    }
    rotate(theta) {
      this.premultiply(_m3.makeRotation(-theta));
      return this;
    }
    translate(tx, ty) {
      this.premultiply(_m3.makeTranslation(tx, ty));
      return this;
    }
    // for 2D Transforms
    makeTranslation(x2, y) {
      if (x2.isVector2) {
        this.set(
          1,
          0,
          x2.x,
          0,
          1,
          x2.y,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          x2,
          0,
          1,
          y,
          0,
          0,
          1
        );
      }
      return this;
    }
    makeRotation(theta) {
      const c = Math.cos(theta);
      const s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        s,
        c,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeScale(x2, y) {
      this.set(
        x2,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        1
      );
      return this;
    }
    //
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i2 = 0; i2 < 9; i2++) {
        if (te[i2] !== me[i2]) return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i2 = 0; i2 < 9; i2++) {
        this.elements[i2] = array[i2 + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      return array;
    }
    clone() {
      return new this.constructor().fromArray(this.elements);
    }
  }
  const _m3 = /* @__PURE__ */ new Matrix3();
  function arrayNeedsUint32(array) {
    for (let i2 = array.length - 1; i2 >= 0; --i2) {
      if (array[i2] >= 65535) return true;
    }
    return false;
  }
  function createElementNS(name) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", name);
  }
  const LINEAR_REC709_TO_XYZ = /* @__PURE__ */ new Matrix3().set(
    0.4123908,
    0.3575843,
    0.1804808,
    0.212639,
    0.7151687,
    0.0721923,
    0.0193308,
    0.1191948,
    0.9505322
  );
  const XYZ_TO_LINEAR_REC709 = /* @__PURE__ */ new Matrix3().set(
    3.2409699,
    -1.5373832,
    -0.4986108,
    -0.9692436,
    1.8759675,
    0.0415551,
    0.0556301,
    -0.203977,
    1.0569715
  );
  function createColorManagement() {
    const ColorManagement2 = {
      enabled: true,
      workingColorSpace: LinearSRGBColorSpace,
      /**
       * Implementations of supported color spaces.
       *
       * Required:
       *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
       *	- whitePoint: reference white [ x y ]
       *	- transfer: transfer function (pre-defined)
       *	- toXYZ: Matrix3 RGB to XYZ transform
       *	- fromXYZ: Matrix3 XYZ to RGB transform
       *	- luminanceCoefficients: RGB luminance coefficients
       *
       * Optional:
       *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
       *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
       *
       * Reference:
       * - https://www.russellcottrell.com/photo/matrixCalculator.htm
       */
      spaces: {},
      convert: function(color, sourceColorSpace, targetColorSpace) {
        if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
          return color;
        }
        if (this.spaces[sourceColorSpace].transfer === SRGBTransfer) {
          color.r = SRGBToLinear(color.r);
          color.g = SRGBToLinear(color.g);
          color.b = SRGBToLinear(color.b);
        }
        if (this.spaces[sourceColorSpace].primaries !== this.spaces[targetColorSpace].primaries) {
          color.applyMatrix3(this.spaces[sourceColorSpace].toXYZ);
          color.applyMatrix3(this.spaces[targetColorSpace].fromXYZ);
        }
        if (this.spaces[targetColorSpace].transfer === SRGBTransfer) {
          color.r = LinearToSRGB(color.r);
          color.g = LinearToSRGB(color.g);
          color.b = LinearToSRGB(color.b);
        }
        return color;
      },
      fromWorkingColorSpace: function(color, targetColorSpace) {
        return this.convert(color, this.workingColorSpace, targetColorSpace);
      },
      toWorkingColorSpace: function(color, sourceColorSpace) {
        return this.convert(color, sourceColorSpace, this.workingColorSpace);
      },
      getPrimaries: function(colorSpace) {
        return this.spaces[colorSpace].primaries;
      },
      getTransfer: function(colorSpace) {
        if (colorSpace === NoColorSpace) return LinearTransfer;
        return this.spaces[colorSpace].transfer;
      },
      getLuminanceCoefficients: function(target, colorSpace = this.workingColorSpace) {
        return target.fromArray(this.spaces[colorSpace].luminanceCoefficients);
      },
      define: function(colorSpaces) {
        Object.assign(this.spaces, colorSpaces);
      },
      // Internal APIs
      _getMatrix: function(targetMatrix, sourceColorSpace, targetColorSpace) {
        return targetMatrix.copy(this.spaces[sourceColorSpace].toXYZ).multiply(this.spaces[targetColorSpace].fromXYZ);
      },
      _getDrawingBufferColorSpace: function(colorSpace) {
        return this.spaces[colorSpace].outputColorSpaceConfig.drawingBufferColorSpace;
      },
      _getUnpackColorSpace: function(colorSpace = this.workingColorSpace) {
        return this.spaces[colorSpace].workingColorSpaceConfig.unpackColorSpace;
      }
    };
    const REC709_PRIMARIES = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06];
    const REC709_LUMINANCE_COEFFICIENTS = [0.2126, 0.7152, 0.0722];
    const D65 = [0.3127, 0.329];
    ColorManagement2.define({
      [LinearSRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: LinearTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        workingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      },
      [SRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: SRGBTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      }
    });
    return ColorManagement2;
  }
  const ColorManagement = /* @__PURE__ */ createColorManagement();
  function SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
  }
  function LinearToSRGB(c) {
    return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
  }
  let _canvas;
  class ImageUtils {
    static getDataURL(image) {
      if (/^data:/i.test(image.src)) {
        return image.src;
      }
      if (typeof HTMLCanvasElement === "undefined") {
        return image.src;
      }
      let canvas;
      if (image instanceof HTMLCanvasElement) {
        canvas = image;
      } else {
        if (_canvas === void 0) _canvas = createElementNS("canvas");
        _canvas.width = image.width;
        _canvas.height = image.height;
        const context = _canvas.getContext("2d");
        if (image instanceof ImageData) {
          context.putImageData(image, 0, 0);
        } else {
          context.drawImage(image, 0, 0, image.width, image.height);
        }
        canvas = _canvas;
      }
      if (canvas.width > 2048 || canvas.height > 2048) {
        console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
        return canvas.toDataURL("image/jpeg", 0.6);
      } else {
        return canvas.toDataURL("image/png");
      }
    }
    static sRGBToLinear(image) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
        const canvas = createElementNS("canvas");
        canvas.width = image.width;
        canvas.height = image.height;
        const context = canvas.getContext("2d");
        context.drawImage(image, 0, 0, image.width, image.height);
        const imageData = context.getImageData(0, 0, image.width, image.height);
        const data = imageData.data;
        for (let i2 = 0; i2 < data.length; i2++) {
          data[i2] = SRGBToLinear(data[i2] / 255) * 255;
        }
        context.putImageData(imageData, 0, 0);
        return canvas;
      } else if (image.data) {
        const data = image.data.slice(0);
        for (let i2 = 0; i2 < data.length; i2++) {
          if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
            data[i2] = Math.floor(SRGBToLinear(data[i2] / 255) * 255);
          } else {
            data[i2] = SRGBToLinear(data[i2]);
          }
        }
        return {
          data,
          width: image.width,
          height: image.height
        };
      } else {
        console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
        return image;
      }
    }
  }
  let _sourceId = 0;
  class Source {
    constructor(data = null) {
      this.isSource = true;
      Object.defineProperty(this, "id", { value: _sourceId++ });
      this.uuid = generateUUID();
      this.data = data;
      this.dataReady = true;
      this.version = 0;
    }
    set needsUpdate(value) {
      if (value === true) this.version++;
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.images[this.uuid] !== void 0) {
        return meta.images[this.uuid];
      }
      const output = {
        uuid: this.uuid,
        url: ""
      };
      const data = this.data;
      if (data !== null) {
        let url;
        if (Array.isArray(data)) {
          url = [];
          for (let i2 = 0, l = data.length; i2 < l; i2++) {
            if (data[i2].isDataTexture) {
              url.push(serializeImage(data[i2].image));
            } else {
              url.push(serializeImage(data[i2]));
            }
          }
        } else {
          url = serializeImage(data);
        }
        output.url = url;
      }
      if (!isRootObject) {
        meta.images[this.uuid] = output;
      }
      return output;
    }
  }
  function serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      return ImageUtils.getDataURL(image);
    } else {
      if (image.data) {
        return {
          data: Array.from(image.data),
          width: image.width,
          height: image.height,
          type: image.data.constructor.name
        };
      } else {
        console.warn("THREE.Texture: Unable to serialize Texture.");
        return {};
      }
    }
  }
  let _textureId = 0;
  class Texture extends EventDispatcher {
    constructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace) {
      super();
      this.isTexture = true;
      Object.defineProperty(this, "id", { value: _textureId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.source = new Source(image);
      this.mipmaps = [];
      this.mapping = mapping;
      this.channel = 0;
      this.wrapS = wrapS;
      this.wrapT = wrapT;
      this.magFilter = magFilter;
      this.minFilter = minFilter;
      this.anisotropy = anisotropy;
      this.format = format;
      this.internalFormat = null;
      this.type = type;
      this.offset = new Vector2(0, 0);
      this.repeat = new Vector2(1, 1);
      this.center = new Vector2(0, 0);
      this.rotation = 0;
      this.matrixAutoUpdate = true;
      this.matrix = new Matrix3();
      this.generateMipmaps = true;
      this.premultiplyAlpha = false;
      this.flipY = true;
      this.unpackAlignment = 4;
      this.colorSpace = colorSpace;
      this.userData = {};
      this.version = 0;
      this.onUpdate = null;
      this.renderTarget = null;
      this.isRenderTargetTexture = false;
      this.pmremVersion = 0;
    }
    get image() {
      return this.source.data;
    }
    set image(value = null) {
      this.source.data = value;
    }
    updateMatrix() {
      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.source = source.source;
      this.mipmaps = source.mipmaps.slice(0);
      this.mapping = source.mapping;
      this.channel = source.channel;
      this.wrapS = source.wrapS;
      this.wrapT = source.wrapT;
      this.magFilter = source.magFilter;
      this.minFilter = source.minFilter;
      this.anisotropy = source.anisotropy;
      this.format = source.format;
      this.internalFormat = source.internalFormat;
      this.type = source.type;
      this.offset.copy(source.offset);
      this.repeat.copy(source.repeat);
      this.center.copy(source.center);
      this.rotation = source.rotation;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrix.copy(source.matrix);
      this.generateMipmaps = source.generateMipmaps;
      this.premultiplyAlpha = source.premultiplyAlpha;
      this.flipY = source.flipY;
      this.unpackAlignment = source.unpackAlignment;
      this.colorSpace = source.colorSpace;
      this.renderTarget = source.renderTarget;
      this.isRenderTargetTexture = source.isRenderTargetTexture;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      this.needsUpdate = true;
      return this;
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.textures[this.uuid] !== void 0) {
        return meta.textures[this.uuid];
      }
      const output = {
        metadata: {
          version: 4.6,
          type: "Texture",
          generator: "Texture.toJSON"
        },
        uuid: this.uuid,
        name: this.name,
        image: this.source.toJSON(meta).uuid,
        mapping: this.mapping,
        channel: this.channel,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        internalFormat: this.internalFormat,
        type: this.type,
        colorSpace: this.colorSpace,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        generateMipmaps: this.generateMipmaps,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment
      };
      if (Object.keys(this.userData).length > 0) output.userData = this.userData;
      if (!isRootObject) {
        meta.textures[this.uuid] = output;
      }
      return output;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    transformUv(uv) {
      if (this.mapping !== UVMapping) return uv;
      uv.applyMatrix3(this.matrix);
      if (uv.x < 0 || uv.x > 1) {
        switch (this.wrapS) {
          case RepeatWrapping:
            uv.x = uv.x - Math.floor(uv.x);
            break;
          case ClampToEdgeWrapping:
            uv.x = uv.x < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.x) % 2) === 1) {
              uv.x = Math.ceil(uv.x) - uv.x;
            } else {
              uv.x = uv.x - Math.floor(uv.x);
            }
            break;
        }
      }
      if (uv.y < 0 || uv.y > 1) {
        switch (this.wrapT) {
          case RepeatWrapping:
            uv.y = uv.y - Math.floor(uv.y);
            break;
          case ClampToEdgeWrapping:
            uv.y = uv.y < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.y) % 2) === 1) {
              uv.y = Math.ceil(uv.y) - uv.y;
            } else {
              uv.y = uv.y - Math.floor(uv.y);
            }
            break;
        }
      }
      if (this.flipY) {
        uv.y = 1 - uv.y;
      }
      return uv;
    }
    set needsUpdate(value) {
      if (value === true) {
        this.version++;
        this.source.needsUpdate = true;
      }
    }
    set needsPMREMUpdate(value) {
      if (value === true) {
        this.pmremVersion++;
      }
    }
  }
  Texture.DEFAULT_IMAGE = null;
  Texture.DEFAULT_MAPPING = UVMapping;
  Texture.DEFAULT_ANISOTROPY = 1;
  class Vector4 {
    constructor(x2 = 0, y = 0, z = 0, w = 1) {
      Vector4.prototype.isVector4 = true;
      this.x = x2;
      this.y = y;
      this.z = z;
      this.w = w;
    }
    get width() {
      return this.z;
    }
    set width(value) {
      this.z = value;
    }
    get height() {
      return this.w;
    }
    set height(value) {
      this.w = value;
    }
    set(x2, y, z, w) {
      this.x = x2;
      this.y = y;
      this.z = z;
      this.w = w;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      this.w = scalar;
      return this;
    }
    setX(x2) {
      this.x = x2;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setW(w) {
      this.w = w;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        case 3:
          this.w = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        case 3:
          return this.w;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      this.w = v.w !== void 0 ? v.w : 1;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      this.w += v.w;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      this.w += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      this.w = a.w + b.w;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      this.w += v.w * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      this.w -= v.w;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      this.w -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      this.w = a.w - b.w;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      this.w *= v.w;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      this.w *= scalar;
      return this;
    }
    applyMatrix4(m) {
      const x2 = this.x, y = this.y, z = this.z, w = this.w;
      const e = m.elements;
      this.x = e[0] * x2 + e[4] * y + e[8] * z + e[12] * w;
      this.y = e[1] * x2 + e[5] * y + e[9] * z + e[13] * w;
      this.z = e[2] * x2 + e[6] * y + e[10] * z + e[14] * w;
      this.w = e[3] * x2 + e[7] * y + e[11] * z + e[15] * w;
      return this;
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      this.w /= v.w;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    setAxisAngleFromQuaternion(q) {
      this.w = 2 * Math.acos(q.w);
      const s = Math.sqrt(1 - q.w * q.w);
      if (s < 1e-4) {
        this.x = 1;
        this.y = 0;
        this.z = 0;
      } else {
        this.x = q.x / s;
        this.y = q.y / s;
        this.z = q.z / s;
      }
      return this;
    }
    setAxisAngleFromRotationMatrix(m) {
      let angle, x2, y, z;
      const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
      if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
        if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
          this.set(1, 0, 0, 0);
          return this;
        }
        angle = Math.PI;
        const xx = (m11 + 1) / 2;
        const yy = (m22 + 1) / 2;
        const zz = (m33 + 1) / 2;
        const xy = (m12 + m21) / 4;
        const xz = (m13 + m31) / 4;
        const yz = (m23 + m32) / 4;
        if (xx > yy && xx > zz) {
          if (xx < epsilon) {
            x2 = 0;
            y = 0.707106781;
            z = 0.707106781;
          } else {
            x2 = Math.sqrt(xx);
            y = xy / x2;
            z = xz / x2;
          }
        } else if (yy > zz) {
          if (yy < epsilon) {
            x2 = 0.707106781;
            y = 0;
            z = 0.707106781;
          } else {
            y = Math.sqrt(yy);
            x2 = xy / y;
            z = yz / y;
          }
        } else {
          if (zz < epsilon) {
            x2 = 0.707106781;
            y = 0.707106781;
            z = 0;
          } else {
            z = Math.sqrt(zz);
            x2 = xz / z;
            y = yz / z;
          }
        }
        this.set(x2, y, z, angle);
        return this;
      }
      let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
      if (Math.abs(s) < 1e-3) s = 1;
      this.x = (m32 - m23) / s;
      this.y = (m13 - m31) / s;
      this.z = (m21 - m12) / s;
      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      this.w = e[15];
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      this.w = Math.min(this.w, v.w);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      this.w = Math.max(this.w, v.w);
      return this;
    }
    clamp(min, max2) {
      this.x = clamp(this.x, min.x, max2.x);
      this.y = clamp(this.y, min.y, max2.y);
      this.z = clamp(this.z, min.z, max2.z);
      this.w = clamp(this.w, min.w, max2.w);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      this.z = clamp(this.z, minVal, maxVal);
      this.w = clamp(this.w, minVal, maxVal);
      return this;
    }
    clampLength(min, max2) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max2));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      this.w = Math.floor(this.w);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      this.w = Math.ceil(this.w);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      this.w = Math.round(this.w);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      this.z = Math.trunc(this.z);
      this.w = Math.trunc(this.w);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      this.w = -this.w;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      this.w += (v.w - this.w) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      this.w = v1.w + (v2.w - v1.w) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      this.w = array[offset + 3];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      array[offset + 3] = this.w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      this.w = attribute.getW(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      this.w = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
      yield this.w;
    }
  }
  class RenderTarget extends EventDispatcher {
    constructor(width = 1, height = 1, options = {}) {
      super();
      this.isRenderTarget = true;
      this.width = width;
      this.height = height;
      this.depth = 1;
      this.scissor = new Vector4(0, 0, width, height);
      this.scissorTest = false;
      this.viewport = new Vector4(0, 0, width, height);
      const image = { width, height, depth: 1 };
      options = Object.assign({
        generateMipmaps: false,
        internalFormat: null,
        minFilter: LinearFilter,
        depthBuffer: true,
        stencilBuffer: false,
        resolveDepthBuffer: true,
        resolveStencilBuffer: true,
        depthTexture: null,
        samples: 0,
        count: 1
      }, options);
      const texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
      texture.flipY = false;
      texture.generateMipmaps = options.generateMipmaps;
      texture.internalFormat = options.internalFormat;
      this.textures = [];
      const count = options.count;
      for (let i2 = 0; i2 < count; i2++) {
        this.textures[i2] = texture.clone();
        this.textures[i2].isRenderTargetTexture = true;
        this.textures[i2].renderTarget = this;
      }
      this.depthBuffer = options.depthBuffer;
      this.stencilBuffer = options.stencilBuffer;
      this.resolveDepthBuffer = options.resolveDepthBuffer;
      this.resolveStencilBuffer = options.resolveStencilBuffer;
      this._depthTexture = null;
      this.depthTexture = options.depthTexture;
      this.samples = options.samples;
    }
    get texture() {
      return this.textures[0];
    }
    set texture(value) {
      this.textures[0] = value;
    }
    set depthTexture(current) {
      if (this._depthTexture !== null) this._depthTexture.renderTarget = null;
      if (current !== null) current.renderTarget = this;
      this._depthTexture = current;
    }
    get depthTexture() {
      return this._depthTexture;
    }
    setSize(width, height, depth = 1) {
      if (this.width !== width || this.height !== height || this.depth !== depth) {
        this.width = width;
        this.height = height;
        this.depth = depth;
        for (let i2 = 0, il = this.textures.length; i2 < il; i2++) {
          this.textures[i2].image.width = width;
          this.textures[i2].image.height = height;
          this.textures[i2].image.depth = depth;
        }
        this.dispose();
      }
      this.viewport.set(0, 0, width, height);
      this.scissor.set(0, 0, width, height);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.width = source.width;
      this.height = source.height;
      this.depth = source.depth;
      this.scissor.copy(source.scissor);
      this.scissorTest = source.scissorTest;
      this.viewport.copy(source.viewport);
      this.textures.length = 0;
      for (let i2 = 0, il = source.textures.length; i2 < il; i2++) {
        this.textures[i2] = source.textures[i2].clone();
        this.textures[i2].isRenderTargetTexture = true;
        this.textures[i2].renderTarget = this;
      }
      const image = Object.assign({}, source.texture.image);
      this.texture.source = new Source(image);
      this.depthBuffer = source.depthBuffer;
      this.stencilBuffer = source.stencilBuffer;
      this.resolveDepthBuffer = source.resolveDepthBuffer;
      this.resolveStencilBuffer = source.resolveStencilBuffer;
      if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
      this.samples = source.samples;
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  }
  class WebGLRenderTarget extends RenderTarget {
    constructor(width = 1, height = 1, options = {}) {
      super(width, height, options);
      this.isWebGLRenderTarget = true;
    }
  }
  class DataArrayTexture extends Texture {
    constructor(data = null, width = 1, height = 1, depth = 1) {
      super(null);
      this.isDataArrayTexture = true;
      this.image = { data, width, height, depth };
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.wrapR = ClampToEdgeWrapping;
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
      this.layerUpdates = /* @__PURE__ */ new Set();
    }
    addLayerUpdate(layerIndex) {
      this.layerUpdates.add(layerIndex);
    }
    clearLayerUpdates() {
      this.layerUpdates.clear();
    }
  }
  class WebGLArrayRenderTarget extends WebGLRenderTarget {
    constructor(width = 1, height = 1, depth = 1, options = {}) {
      super(width, height, options);
      this.isWebGLArrayRenderTarget = true;
      this.depth = depth;
      this.texture = new DataArrayTexture(null, width, height, depth);
      this.texture.isRenderTargetTexture = true;
    }
  }
  class Quaternion {
    constructor(x2 = 0, y = 0, z = 0, w = 1) {
      this.isQuaternion = true;
      this._x = x2;
      this._y = y;
      this._z = z;
      this._w = w;
    }
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
      let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
      if (t === 0) {
        dst[dstOffset + 0] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
        return;
      }
      if (t === 1) {
        dst[dstOffset + 0] = x1;
        dst[dstOffset + 1] = y1;
        dst[dstOffset + 2] = z1;
        dst[dstOffset + 3] = w1;
        return;
      }
      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
        let s = 1 - t;
        const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
        if (sqrSin > Number.EPSILON) {
          const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
          s = Math.sin(s * len) / sin;
          t = Math.sin(t * len) / sin;
        }
        const tDir = t * dir;
        x0 = x0 * s + x1 * tDir;
        y0 = y0 * s + y1 * tDir;
        z0 = z0 * s + z1 * tDir;
        w0 = w0 * s + w1 * tDir;
        if (s === 1 - t) {
          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
          x0 *= f;
          y0 *= f;
          z0 *= f;
          w0 *= f;
        }
      }
      dst[dstOffset] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
      const x0 = src0[srcOffset0];
      const y0 = src0[srcOffset0 + 1];
      const z0 = src0[srcOffset0 + 2];
      const w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1];
      const y1 = src1[srcOffset1 + 1];
      const z1 = src1[srcOffset1 + 2];
      const w1 = src1[srcOffset1 + 3];
      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
      return dst;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get w() {
      return this._w;
    }
    set w(value) {
      this._w = value;
      this._onChangeCallback();
    }
    set(x2, y, z, w) {
      this._x = x2;
      this._y = y;
      this._z = z;
      this._w = w;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
      this._x = quaternion.x;
      this._y = quaternion.y;
      this._z = quaternion.z;
      this._w = quaternion.w;
      this._onChangeCallback();
      return this;
    }
    setFromEuler(euler, update = true) {
      const x2 = euler._x, y = euler._y, z = euler._z, order = euler._order;
      const cos = Math.cos;
      const sin = Math.sin;
      const c1 = cos(x2 / 2);
      const c2 = cos(y / 2);
      const c3 = cos(z / 2);
      const s1 = sin(x2 / 2);
      const s2 = sin(y / 2);
      const s3 = sin(z / 2);
      switch (order) {
        case "XYZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "YXZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "ZXY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "ZYX":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "YZX":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "XZY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        default:
          console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
      }
      if (update === true) this._onChangeCallback();
      return this;
    }
    setFromAxisAngle(axis, angle) {
      const halfAngle = angle / 2, s = Math.sin(halfAngle);
      this._x = axis.x * s;
      this._y = axis.y * s;
      this._z = axis.z * s;
      this._w = Math.cos(halfAngle);
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m) {
      const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
      if (trace > 0) {
        const s = 0.5 / Math.sqrt(trace + 1);
        this._w = 0.25 / s;
        this._x = (m32 - m23) * s;
        this._y = (m13 - m31) * s;
        this._z = (m21 - m12) * s;
      } else if (m11 > m22 && m11 > m33) {
        const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
        this._w = (m32 - m23) / s;
        this._x = 0.25 * s;
        this._y = (m12 + m21) / s;
        this._z = (m13 + m31) / s;
      } else if (m22 > m33) {
        const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
        this._w = (m13 - m31) / s;
        this._x = (m12 + m21) / s;
        this._y = 0.25 * s;
        this._z = (m23 + m32) / s;
      } else {
        const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
        this._w = (m21 - m12) / s;
        this._x = (m13 + m31) / s;
        this._y = (m23 + m32) / s;
        this._z = 0.25 * s;
      }
      this._onChangeCallback();
      return this;
    }
    setFromUnitVectors(vFrom, vTo) {
      let r = vFrom.dot(vTo) + 1;
      if (r < Number.EPSILON) {
        r = 0;
        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
          this._x = -vFrom.y;
          this._y = vFrom.x;
          this._z = 0;
          this._w = r;
        } else {
          this._x = 0;
          this._y = -vFrom.z;
          this._z = vFrom.y;
          this._w = r;
        }
      } else {
        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
        this._w = r;
      }
      return this.normalize();
    }
    angleTo(q) {
      return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
    }
    rotateTowards(q, step) {
      const angle = this.angleTo(q);
      if (angle === 0) return this;
      const t = Math.min(1, step / angle);
      this.slerp(q, t);
      return this;
    }
    identity() {
      return this.set(0, 0, 0, 1);
    }
    invert() {
      return this.conjugate();
    }
    conjugate() {
      this._x *= -1;
      this._y *= -1;
      this._z *= -1;
      this._onChangeCallback();
      return this;
    }
    dot(v) {
      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
    lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
      let l = this.length();
      if (l === 0) {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
      } else {
        l = 1 / l;
        this._x = this._x * l;
        this._y = this._y * l;
        this._z = this._z * l;
        this._w = this._w * l;
      }
      this._onChangeCallback();
      return this;
    }
    multiply(q) {
      return this.multiplyQuaternions(this, q);
    }
    premultiply(q) {
      return this.multiplyQuaternions(q, this);
    }
    multiplyQuaternions(a, b) {
      const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
      const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
      this._onChangeCallback();
      return this;
    }
    slerp(qb, t) {
      if (t === 0) return this;
      if (t === 1) return this.copy(qb);
      const x2 = this._x, y = this._y, z = this._z, w = this._w;
      let cosHalfTheta = w * qb._w + x2 * qb._x + y * qb._y + z * qb._z;
      if (cosHalfTheta < 0) {
        this._w = -qb._w;
        this._x = -qb._x;
        this._y = -qb._y;
        this._z = -qb._z;
        cosHalfTheta = -cosHalfTheta;
      } else {
        this.copy(qb);
      }
      if (cosHalfTheta >= 1) {
        this._w = w;
        this._x = x2;
        this._y = y;
        this._z = z;
        return this;
      }
      const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
      if (sqrSinHalfTheta <= Number.EPSILON) {
        const s = 1 - t;
        this._w = s * w + t * this._w;
        this._x = s * x2 + t * this._x;
        this._y = s * y + t * this._y;
        this._z = s * z + t * this._z;
        this.normalize();
        return this;
      }
      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
      const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
      this._w = w * ratioA + this._w * ratioB;
      this._x = x2 * ratioA + this._x * ratioB;
      this._y = y * ratioA + this._y * ratioB;
      this._z = z * ratioA + this._z * ratioB;
      this._onChangeCallback();
      return this;
    }
    slerpQuaternions(qa, qb, t) {
      return this.copy(qa).slerp(qb, t);
    }
    random() {
      const theta1 = 2 * Math.PI * Math.random();
      const theta2 = 2 * Math.PI * Math.random();
      const x0 = Math.random();
      const r1 = Math.sqrt(1 - x0);
      const r2 = Math.sqrt(x0);
      return this.set(
        r1 * Math.sin(theta1),
        r1 * Math.cos(theta1),
        r2 * Math.sin(theta2),
        r2 * Math.cos(theta2)
      );
    }
    equals(quaternion) {
      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    fromArray(array, offset = 0) {
      this._x = array[offset];
      this._y = array[offset + 1];
      this._z = array[offset + 2];
      this._w = array[offset + 3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this._x = attribute.getX(index);
      this._y = attribute.getY(index);
      this._z = attribute.getZ(index);
      this._w = attribute.getW(index);
      this._onChangeCallback();
      return this;
    }
    toJSON() {
      return this.toArray();
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._w;
    }
  }
  class Vector3 {
    constructor(x2 = 0, y = 0, z = 0) {
      Vector3.prototype.isVector3 = true;
      this.x = x2;
      this.y = y;
      this.z = z;
    }
    set(x2, y, z) {
      if (z === void 0) z = this.z;
      this.x = x2;
      this.y = y;
      this.z = z;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      return this;
    }
    setX(x2) {
      this.x = x2;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this;
    }
    multiplyVectors(a, b) {
      this.x = a.x * b.x;
      this.y = a.y * b.y;
      this.z = a.z * b.z;
      return this;
    }
    applyEuler(euler) {
      return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
    }
    applyAxisAngle(axis, angle) {
      return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
    }
    applyMatrix3(m) {
      const x2 = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x2 + e[3] * y + e[6] * z;
      this.y = e[1] * x2 + e[4] * y + e[7] * z;
      this.z = e[2] * x2 + e[5] * y + e[8] * z;
      return this;
    }
    applyNormalMatrix(m) {
      return this.applyMatrix3(m).normalize();
    }
    applyMatrix4(m) {
      const x2 = this.x, y = this.y, z = this.z;
      const e = m.elements;
      const w = 1 / (e[3] * x2 + e[7] * y + e[11] * z + e[15]);
      this.x = (e[0] * x2 + e[4] * y + e[8] * z + e[12]) * w;
      this.y = (e[1] * x2 + e[5] * y + e[9] * z + e[13]) * w;
      this.z = (e[2] * x2 + e[6] * y + e[10] * z + e[14]) * w;
      return this;
    }
    applyQuaternion(q) {
      const vx = this.x, vy = this.y, vz = this.z;
      const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
      const tx = 2 * (qy * vz - qz * vy);
      const ty = 2 * (qz * vx - qx * vz);
      const tz = 2 * (qx * vy - qy * vx);
      this.x = vx + qw * tx + qy * tz - qz * ty;
      this.y = vy + qw * ty + qz * tx - qx * tz;
      this.z = vz + qw * tz + qx * ty - qy * tx;
      return this;
    }
    project(camera) {
      return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
    }
    unproject(camera) {
      return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
    }
    transformDirection(m) {
      const x2 = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x2 + e[4] * y + e[8] * z;
      this.y = e[1] * x2 + e[5] * y + e[9] * z;
      this.z = e[2] * x2 + e[6] * y + e[10] * z;
      return this.normalize();
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      return this;
    }
    clamp(min, max2) {
      this.x = clamp(this.x, min.x, max2.x);
      this.y = clamp(this.y, min.y, max2.y);
      this.z = clamp(this.z, min.z, max2.z);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      this.z = clamp(this.z, minVal, maxVal);
      return this;
    }
    clampLength(min, max2) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max2));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      this.z = Math.trunc(this.z);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    // TODO lengthSquared?
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      return this;
    }
    cross(v) {
      return this.crossVectors(this, v);
    }
    crossVectors(a, b) {
      const ax = a.x, ay = a.y, az = a.z;
      const bx = b.x, by = b.y, bz = b.z;
      this.x = ay * bz - az * by;
      this.y = az * bx - ax * bz;
      this.z = ax * by - ay * bx;
      return this;
    }
    projectOnVector(v) {
      const denominator = v.lengthSq();
      if (denominator === 0) return this.set(0, 0, 0);
      const scalar = v.dot(this) / denominator;
      return this.copy(v).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
      _vector$c.copy(this).projectOnVector(planeNormal);
      return this.sub(_vector$c);
    }
    reflect(normal) {
      return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0) return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
      return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
    setFromSpherical(s) {
      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
    setFromSphericalCoords(radius, phi, theta) {
      const sinPhiRadius = Math.sin(phi) * radius;
      this.x = sinPhiRadius * Math.sin(theta);
      this.y = Math.cos(phi) * radius;
      this.z = sinPhiRadius * Math.cos(theta);
      return this;
    }
    setFromCylindrical(c) {
      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
    setFromCylindricalCoords(radius, theta, y) {
      this.x = radius * Math.sin(theta);
      this.y = y;
      this.z = radius * Math.cos(theta);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      return this;
    }
    setFromMatrixScale(m) {
      const sx = this.setFromMatrixColumn(m, 0).length();
      const sy = this.setFromMatrixColumn(m, 1).length();
      const sz = this.setFromMatrixColumn(m, 2).length();
      this.x = sx;
      this.y = sy;
      this.z = sz;
      return this;
    }
    setFromMatrixColumn(m, index) {
      return this.fromArray(m.elements, index * 4);
    }
    setFromMatrix3Column(m, index) {
      return this.fromArray(m.elements, index * 3);
    }
    setFromEuler(e) {
      this.x = e._x;
      this.y = e._y;
      this.z = e._z;
      return this;
    }
    setFromColor(c) {
      this.x = c.r;
      this.y = c.g;
      this.z = c.b;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      return this;
    }
    randomDirection() {
      const theta = Math.random() * Math.PI * 2;
      const u = Math.random() * 2 - 1;
      const c = Math.sqrt(1 - u * u);
      this.x = c * Math.cos(theta);
      this.y = u;
      this.z = c * Math.sin(theta);
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
    }
  }
  const _vector$c = /* @__PURE__ */ new Vector3();
  const _quaternion$4 = /* @__PURE__ */ new Quaternion();
  class Box3 {
    constructor(min = new Vector3(Infinity, Infinity, Infinity), max2 = new Vector3(-Infinity, -Infinity, -Infinity)) {
      this.isBox3 = true;
      this.min = min;
      this.max = max2;
    }
    set(min, max2) {
      this.min.copy(min);
      this.max.copy(max2);
      return this;
    }
    setFromArray(array) {
      this.makeEmpty();
      for (let i2 = 0, il = array.length; i2 < il; i2 += 3) {
        this.expandByPoint(_vector$b.fromArray(array, i2));
      }
      return this;
    }
    setFromBufferAttribute(attribute) {
      this.makeEmpty();
      for (let i2 = 0, il = attribute.count; i2 < il; i2++) {
        this.expandByPoint(_vector$b.fromBufferAttribute(attribute, i2));
      }
      return this;
    }
    setFromPoints(points) {
      this.makeEmpty();
      for (let i2 = 0, il = points.length; i2 < il; i2++) {
        this.expandByPoint(points[i2]);
      }
      return this;
    }
    setFromCenterAndSize(center, size) {
      const halfSize = _vector$b.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    setFromObject(object, precise = false) {
      this.makeEmpty();
      return this.expandByObject(object, precise);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
    makeEmpty() {
      this.min.x = this.min.y = this.min.z = Infinity;
      this.max.x = this.max.y = this.max.z = -Infinity;
      return this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    expandByObject(object, precise = false) {
      object.updateWorldMatrix(false, false);
      const geometry = object.geometry;
      if (geometry !== void 0) {
        const positionAttribute = geometry.getAttribute("position");
        if (precise === true && positionAttribute !== void 0 && object.isInstancedMesh !== true) {
          for (let i2 = 0, l = positionAttribute.count; i2 < l; i2++) {
            if (object.isMesh === true) {
              object.getVertexPosition(i2, _vector$b);
            } else {
              _vector$b.fromBufferAttribute(positionAttribute, i2);
            }
            _vector$b.applyMatrix4(object.matrixWorld);
            this.expandByPoint(_vector$b);
          }
        } else {
          if (object.boundingBox !== void 0) {
            if (object.boundingBox === null) {
              object.computeBoundingBox();
            }
            _box$4.copy(object.boundingBox);
          } else {
            if (geometry.boundingBox === null) {
              geometry.computeBoundingBox();
            }
            _box$4.copy(geometry.boundingBox);
          }
          _box$4.applyMatrix4(object.matrixWorld);
          this.union(_box$4);
        }
      }
      const children = object.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        this.expandByObject(children[i2], precise);
      }
      return this;
    }
    containsPoint(point) {
      return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;
    }
    containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
    getParameter(point, target) {
      return target.set(
        (point.x - this.min.x) / (this.max.x - this.min.x),
        (point.y - this.min.y) / (this.max.y - this.min.y),
        (point.z - this.min.z) / (this.max.z - this.min.z)
      );
    }
    intersectsBox(box) {
      return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;
    }
    intersectsSphere(sphere) {
      this.clampPoint(sphere.center, _vector$b);
      return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
    intersectsPlane(plane) {
      let min, max2;
      if (plane.normal.x > 0) {
        min = plane.normal.x * this.min.x;
        max2 = plane.normal.x * this.max.x;
      } else {
        min = plane.normal.x * this.max.x;
        max2 = plane.normal.x * this.min.x;
      }
      if (plane.normal.y > 0) {
        min += plane.normal.y * this.min.y;
        max2 += plane.normal.y * this.max.y;
      } else {
        min += plane.normal.y * this.max.y;
        max2 += plane.normal.y * this.min.y;
      }
      if (plane.normal.z > 0) {
        min += plane.normal.z * this.min.z;
        max2 += plane.normal.z * this.max.z;
      } else {
        min += plane.normal.z * this.max.z;
        max2 += plane.normal.z * this.min.z;
      }
      return min <= -plane.constant && max2 >= -plane.constant;
    }
    intersectsTriangle(triangle) {
      if (this.isEmpty()) {
        return false;
      }
      this.getCenter(_center);
      _extents.subVectors(this.max, _center);
      _v0$2.subVectors(triangle.a, _center);
      _v1$7.subVectors(triangle.b, _center);
      _v2$4.subVectors(triangle.c, _center);
      _f0.subVectors(_v1$7, _v0$2);
      _f1.subVectors(_v2$4, _v1$7);
      _f2.subVectors(_v0$2, _v2$4);
      let axes = [
        0,
        -_f0.z,
        _f0.y,
        0,
        -_f1.z,
        _f1.y,
        0,
        -_f2.z,
        _f2.y,
        _f0.z,
        0,
        -_f0.x,
        _f1.z,
        0,
        -_f1.x,
        _f2.z,
        0,
        -_f2.x,
        -_f0.y,
        _f0.x,
        0,
        -_f1.y,
        _f1.x,
        0,
        -_f2.y,
        _f2.x,
        0
      ];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      _triangleNormal.crossVectors(_f0, _f1);
      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
      return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
    }
    clampPoint(point, target) {
      return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
      return this.clampPoint(point, _vector$b).distanceTo(point);
    }
    getBoundingSphere(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
      } else {
        this.getCenter(target.center);
        target.radius = this.getSize(_vector$b).length() * 0.5;
      }
      return target;
    }
    intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      if (this.isEmpty()) this.makeEmpty();
      return this;
    }
    union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
    applyMatrix4(matrix) {
      if (this.isEmpty()) return this;
      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
      this.setFromPoints(_points);
      return this;
    }
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  }
  const _points = [
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3()
  ];
  const _vector$b = /* @__PURE__ */ new Vector3();
  const _box$4 = /* @__PURE__ */ new Box3();
  const _v0$2 = /* @__PURE__ */ new Vector3();
  const _v1$7 = /* @__PURE__ */ new Vector3();
  const _v2$4 = /* @__PURE__ */ new Vector3();
  const _f0 = /* @__PURE__ */ new Vector3();
  const _f1 = /* @__PURE__ */ new Vector3();
  const _f2 = /* @__PURE__ */ new Vector3();
  const _center = /* @__PURE__ */ new Vector3();
  const _extents = /* @__PURE__ */ new Vector3();
  const _triangleNormal = /* @__PURE__ */ new Vector3();
  const _testAxis = /* @__PURE__ */ new Vector3();
  function satForAxes(axes, v0, v1, v2, extents) {
    for (let i2 = 0, j = axes.length - 3; i2 <= j; i2 += 3) {
      _testAxis.fromArray(axes, i2);
      const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
      const p0 = v0.dot(_testAxis);
      const p1 = v1.dot(_testAxis);
      const p2 = v2.dot(_testAxis);
      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
        return false;
      }
    }
    return true;
  }
  const _box$3 = /* @__PURE__ */ new Box3();
  const _v1$6 = /* @__PURE__ */ new Vector3();
  const _v2$3 = /* @__PURE__ */ new Vector3();
  class Sphere {
    constructor(center = new Vector3(), radius = -1) {
      this.isSphere = true;
      this.center = center;
      this.radius = radius;
    }
    set(center, radius) {
      this.center.copy(center);
      this.radius = radius;
      return this;
    }
    setFromPoints(points, optionalCenter) {
      const center = this.center;
      if (optionalCenter !== void 0) {
        center.copy(optionalCenter);
      } else {
        _box$3.setFromPoints(points).getCenter(center);
      }
      let maxRadiusSq = 0;
      for (let i2 = 0, il = points.length; i2 < il; i2++) {
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i2]));
      }
      this.radius = Math.sqrt(maxRadiusSq);
      return this;
    }
    copy(sphere) {
      this.center.copy(sphere.center);
      this.radius = sphere.radius;
      return this;
    }
    isEmpty() {
      return this.radius < 0;
    }
    makeEmpty() {
      this.center.set(0, 0, 0);
      this.radius = -1;
      return this;
    }
    containsPoint(point) {
      return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(point) {
      return point.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(sphere) {
      const radiusSum = this.radius + sphere.radius;
      return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    intersectsBox(box) {
      return box.intersectsSphere(this);
    }
    intersectsPlane(plane) {
      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(point, target) {
      const deltaLengthSq = this.center.distanceToSquared(point);
      target.copy(point);
      if (deltaLengthSq > this.radius * this.radius) {
        target.sub(this.center).normalize();
        target.multiplyScalar(this.radius).add(this.center);
      }
      return target;
    }
    getBoundingBox(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
        return target;
      }
      target.set(this.center, this.center);
      target.expandByScalar(this.radius);
      return target;
    }
    applyMatrix4(matrix) {
      this.center.applyMatrix4(matrix);
      this.radius = this.radius * matrix.getMaxScaleOnAxis();
      return this;
    }
    translate(offset) {
      this.center.add(offset);
      return this;
    }
    expandByPoint(point) {
      if (this.isEmpty()) {
        this.center.copy(point);
        this.radius = 0;
        return this;
      }
      _v1$6.subVectors(point, this.center);
      const lengthSq = _v1$6.lengthSq();
      if (lengthSq > this.radius * this.radius) {
        const length = Math.sqrt(lengthSq);
        const delta = (length - this.radius) * 0.5;
        this.center.addScaledVector(_v1$6, delta / length);
        this.radius += delta;
      }
      return this;
    }
    union(sphere) {
      if (sphere.isEmpty()) {
        return this;
      }
      if (this.isEmpty()) {
        this.copy(sphere);
        return this;
      }
      if (this.center.equals(sphere.center) === true) {
        this.radius = Math.max(this.radius, sphere.radius);
      } else {
        _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
        this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
        this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
      }
      return this;
    }
    equals(sphere) {
      return sphere.center.equals(this.center) && sphere.radius === this.radius;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  }
  const _vector$a = /* @__PURE__ */ new Vector3();
  const _segCenter = /* @__PURE__ */ new Vector3();
  const _segDir = /* @__PURE__ */ new Vector3();
  const _diff = /* @__PURE__ */ new Vector3();
  const _edge1 = /* @__PURE__ */ new Vector3();
  const _edge2 = /* @__PURE__ */ new Vector3();
  const _normal$1 = /* @__PURE__ */ new Vector3();
  class Ray {
    constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
      this.origin = origin;
      this.direction = direction;
    }
    set(origin, direction) {
      this.origin.copy(origin);
      this.direction.copy(direction);
      return this;
    }
    copy(ray) {
      this.origin.copy(ray.origin);
      this.direction.copy(ray.direction);
      return this;
    }
    at(t, target) {
      return target.copy(this.origin).addScaledVector(this.direction, t);
    }
    lookAt(v) {
      this.direction.copy(v).sub(this.origin).normalize();
      return this;
    }
    recast(t) {
      this.origin.copy(this.at(t, _vector$a));
      return this;
    }
    closestPointToPoint(point, target) {
      target.subVectors(point, this.origin);
      const directionDistance = target.dot(this.direction);
      if (directionDistance < 0) {
        return target.copy(this.origin);
      }
      return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
    }
    distanceToPoint(point) {
      return Math.sqrt(this.distanceSqToPoint(point));
    }
    distanceSqToPoint(point) {
      const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);
      if (directionDistance < 0) {
        return this.origin.distanceToSquared(point);
      }
      _vector$a.copy(this.origin).addScaledVector(this.direction, directionDistance);
      return _vector$a.distanceToSquared(point);
    }
    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
      _segDir.copy(v1).sub(v0).normalize();
      _diff.copy(this.origin).sub(_segCenter);
      const segExtent = v0.distanceTo(v1) * 0.5;
      const a01 = -this.direction.dot(_segDir);
      const b0 = _diff.dot(this.direction);
      const b1 = -_diff.dot(_segDir);
      const c = _diff.lengthSq();
      const det = Math.abs(1 - a01 * a01);
      let s0, s1, sqrDist, extDet;
      if (det > 0) {
        s0 = a01 * b1 - b0;
        s1 = a01 * b0 - b1;
        extDet = segExtent * det;
        if (s0 >= 0) {
          if (s1 >= -extDet) {
            if (s1 <= extDet) {
              const invDet = 1 / det;
              s0 *= invDet;
              s1 *= invDet;
              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
            } else {
              s1 = segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          } else {
            s1 = -segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          if (s1 <= -extDet) {
            s0 = Math.max(0, -(-a01 * segExtent + b0));
            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          } else if (s1 <= extDet) {
            s0 = 0;
            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = s1 * (s1 + 2 * b1) + c;
          } else {
            s0 = Math.max(0, -(a01 * segExtent + b0));
            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        }
      } else {
        s1 = a01 > 0 ? -segExtent : segExtent;
        s0 = Math.max(0, -(a01 * s1 + b0));
        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
      }
      if (optionalPointOnRay) {
        optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
      }
      if (optionalPointOnSegment) {
        optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
      }
      return sqrDist;
    }
    intersectSphere(sphere, target) {
      _vector$a.subVectors(sphere.center, this.origin);
      const tca = _vector$a.dot(this.direction);
      const d2 = _vector$a.dot(_vector$a) - tca * tca;
      const radius2 = sphere.radius * sphere.radius;
      if (d2 > radius2) return null;
      const thc = Math.sqrt(radius2 - d2);
      const t0 = tca - thc;
      const t1 = tca + thc;
      if (t1 < 0) return null;
      if (t0 < 0) return this.at(t1, target);
      return this.at(t0, target);
    }
    intersectsSphere(sphere) {
      return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
    }
    distanceToPlane(plane) {
      const denominator = plane.normal.dot(this.direction);
      if (denominator === 0) {
        if (plane.distanceToPoint(this.origin) === 0) {
          return 0;
        }
        return null;
      }
      const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
      return t >= 0 ? t : null;
    }
    intersectPlane(plane, target) {
      const t = this.distanceToPlane(plane);
      if (t === null) {
        return null;
      }
      return this.at(t, target);
    }
    intersectsPlane(plane) {
      const distToPoint = plane.distanceToPoint(this.origin);
      if (distToPoint === 0) {
        return true;
      }
      const denominator = plane.normal.dot(this.direction);
      if (denominator * distToPoint < 0) {
        return true;
      }
      return false;
    }
    intersectBox(box, target) {
      let tmin, tmax, tymin, tymax, tzmin, tzmax;
      const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
      const origin = this.origin;
      if (invdirx >= 0) {
        tmin = (box.min.x - origin.x) * invdirx;
        tmax = (box.max.x - origin.x) * invdirx;
      } else {
        tmin = (box.max.x - origin.x) * invdirx;
        tmax = (box.min.x - origin.x) * invdirx;
      }
      if (invdiry >= 0) {
        tymin = (box.min.y - origin.y) * invdiry;
        tymax = (box.max.y - origin.y) * invdiry;
      } else {
        tymin = (box.max.y - origin.y) * invdiry;
        tymax = (box.min.y - origin.y) * invdiry;
      }
      if (tmin > tymax || tymin > tmax) return null;
      if (tymin > tmin || isNaN(tmin)) tmin = tymin;
      if (tymax < tmax || isNaN(tmax)) tmax = tymax;
      if (invdirz >= 0) {
        tzmin = (box.min.z - origin.z) * invdirz;
        tzmax = (box.max.z - origin.z) * invdirz;
      } else {
        tzmin = (box.max.z - origin.z) * invdirz;
        tzmax = (box.min.z - origin.z) * invdirz;
      }
      if (tmin > tzmax || tzmin > tmax) return null;
      if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
      if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
      if (tmax < 0) return null;
      return this.at(tmin >= 0 ? tmin : tmax, target);
    }
    intersectsBox(box) {
      return this.intersectBox(box, _vector$a) !== null;
    }
    intersectTriangle(a, b, c, backfaceCulling, target) {
      _edge1.subVectors(b, a);
      _edge2.subVectors(c, a);
      _normal$1.crossVectors(_edge1, _edge2);
      let DdN = this.direction.dot(_normal$1);
      let sign;
      if (DdN > 0) {
        if (backfaceCulling) return null;
        sign = 1;
      } else if (DdN < 0) {
        sign = -1;
        DdN = -DdN;
      } else {
        return null;
      }
      _diff.subVectors(this.origin, a);
      const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
      if (DdQxE2 < 0) {
        return null;
      }
      const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));
      if (DdE1xQ < 0) {
        return null;
      }
      if (DdQxE2 + DdE1xQ > DdN) {
        return null;
      }
      const QdN = -sign * _diff.dot(_normal$1);
      if (QdN < 0) {
        return null;
      }
      return this.at(QdN / DdN, target);
    }
    applyMatrix4(matrix4) {
      this.origin.applyMatrix4(matrix4);
      this.direction.transformDirection(matrix4);
      return this;
    }
    equals(ray) {
      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
    clone() {
      return new this.constructor().copy(this);
    }
  }
  class Matrix4 {
    constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      Matrix4.prototype.isMatrix4 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
      }
    }
    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      const te = this.elements;
      te[0] = n11;
      te[4] = n12;
      te[8] = n13;
      te[12] = n14;
      te[1] = n21;
      te[5] = n22;
      te[9] = n23;
      te[13] = n24;
      te[2] = n31;
      te[6] = n32;
      te[10] = n33;
      te[14] = n34;
      te[3] = n41;
      te[7] = n42;
      te[11] = n43;
      te[15] = n44;
      return this;
    }
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    clone() {
      return new Matrix4().fromArray(this.elements);
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      te[9] = me[9];
      te[10] = me[10];
      te[11] = me[11];
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      te[15] = me[15];
      return this;
    }
    copyPosition(m) {
      const te = this.elements, me = m.elements;
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      return this;
    }
    setFromMatrix3(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[3],
        me[6],
        0,
        me[1],
        me[4],
        me[7],
        0,
        me[2],
        me[5],
        me[8],
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrixColumn(this, 0);
      yAxis.setFromMatrixColumn(this, 1);
      zAxis.setFromMatrixColumn(this, 2);
      return this;
    }
    makeBasis(xAxis, yAxis, zAxis) {
      this.set(
        xAxis.x,
        yAxis.x,
        zAxis.x,
        0,
        xAxis.y,
        yAxis.y,
        zAxis.y,
        0,
        xAxis.z,
        yAxis.z,
        zAxis.z,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    extractRotation(m) {
      const te = this.elements;
      const me = m.elements;
      const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
      const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
      const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
      te[0] = me[0] * scaleX;
      te[1] = me[1] * scaleX;
      te[2] = me[2] * scaleX;
      te[3] = 0;
      te[4] = me[4] * scaleY;
      te[5] = me[5] * scaleY;
      te[6] = me[6] * scaleY;
      te[7] = 0;
      te[8] = me[8] * scaleZ;
      te[9] = me[9] * scaleZ;
      te[10] = me[10] * scaleZ;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromEuler(euler) {
      const te = this.elements;
      const x2 = euler.x, y = euler.y, z = euler.z;
      const a = Math.cos(x2), b = Math.sin(x2);
      const c = Math.cos(y), d = Math.sin(y);
      const e = Math.cos(z), f = Math.sin(z);
      if (euler.order === "XYZ") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = -c * f;
        te[8] = d;
        te[1] = af + be * d;
        te[5] = ae - bf * d;
        te[9] = -b * c;
        te[2] = bf - ae * d;
        te[6] = be + af * d;
        te[10] = a * c;
      } else if (euler.order === "YXZ") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce + df * b;
        te[4] = de * b - cf;
        te[8] = a * d;
        te[1] = a * f;
        te[5] = a * e;
        te[9] = -b;
        te[2] = cf * b - de;
        te[6] = df + ce * b;
        te[10] = a * c;
      } else if (euler.order === "ZXY") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce - df * b;
        te[4] = -a * f;
        te[8] = de + cf * b;
        te[1] = cf + de * b;
        te[5] = a * e;
        te[9] = df - ce * b;
        te[2] = -a * d;
        te[6] = b;
        te[10] = a * c;
      } else if (euler.order === "ZYX") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = be * d - af;
        te[8] = ae * d + bf;
        te[1] = c * f;
        te[5] = bf * d + ae;
        te[9] = af * d - be;
        te[2] = -d;
        te[6] = b * c;
        te[10] = a * c;
      } else if (euler.order === "YZX") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = bd - ac * f;
        te[8] = bc * f + ad;
        te[1] = f;
        te[5] = a * e;
        te[9] = -b * e;
        te[2] = -d * e;
        te[6] = ad * f + bc;
        te[10] = ac - bd * f;
      } else if (euler.order === "XZY") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = -f;
        te[8] = d * e;
        te[1] = ac * f + bd;
        te[5] = a * e;
        te[9] = ad * f - bc;
        te[2] = bc * f - ad;
        te[6] = b * e;
        te[10] = bd * f + ac;
      }
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromQuaternion(q) {
      return this.compose(_zero, q, _one);
    }
    lookAt(eye, target, up) {
      const te = this.elements;
      _z.subVectors(eye, target);
      if (_z.lengthSq() === 0) {
        _z.z = 1;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
      if (_x.lengthSq() === 0) {
        if (Math.abs(up.z) === 1) {
          _z.x += 1e-4;
        } else {
          _z.z += 1e-4;
        }
        _z.normalize();
        _x.crossVectors(up, _z);
      }
      _x.normalize();
      _y.crossVectors(_z, _x);
      te[0] = _x.x;
      te[4] = _y.x;
      te[8] = _z.x;
      te[1] = _x.y;
      te[5] = _y.y;
      te[9] = _z.y;
      te[2] = _x.z;
      te[6] = _y.z;
      te[10] = _z.z;
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
      const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
      const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
      const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
      const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
      const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
      const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
      const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[4] *= s;
      te[8] *= s;
      te[12] *= s;
      te[1] *= s;
      te[5] *= s;
      te[9] *= s;
      te[13] *= s;
      te[2] *= s;
      te[6] *= s;
      te[10] *= s;
      te[14] *= s;
      te[3] *= s;
      te[7] *= s;
      te[11] *= s;
      te[15] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
      const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
      const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
      const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
      return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    transpose() {
      const te = this.elements;
      let tmp;
      tmp = te[1];
      te[1] = te[4];
      te[4] = tmp;
      tmp = te[2];
      te[2] = te[8];
      te[8] = tmp;
      tmp = te[6];
      te[6] = te[9];
      te[9] = tmp;
      tmp = te[3];
      te[3] = te[12];
      te[12] = tmp;
      tmp = te[7];
      te[7] = te[13];
      te[13] = tmp;
      tmp = te[11];
      te[11] = te[14];
      te[14] = tmp;
      return this;
    }
    setPosition(x2, y, z) {
      const te = this.elements;
      if (x2.isVector3) {
        te[12] = x2.x;
        te[13] = x2.y;
        te[14] = x2.z;
      } else {
        te[12] = x2;
        te[13] = y;
        te[14] = z;
      }
      return this;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
      const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
      te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
      te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
      te[4] = t12 * detInv;
      te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
      te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
      te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
      te[8] = t13 * detInv;
      te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
      te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
      te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
      te[12] = t14 * detInv;
      te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
      te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
      te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
      return this;
    }
    scale(v) {
      const te = this.elements;
      const x2 = v.x, y = v.y, z = v.z;
      te[0] *= x2;
      te[4] *= y;
      te[8] *= z;
      te[1] *= x2;
      te[5] *= y;
      te[9] *= z;
      te[2] *= x2;
      te[6] *= y;
      te[10] *= z;
      te[3] *= x2;
      te[7] *= y;
      te[11] *= z;
      return this;
    }
    getMaxScaleOnAxis() {
      const te = this.elements;
      const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
      const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
      const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    makeTranslation(x2, y, z) {
      if (x2.isVector3) {
        this.set(
          1,
          0,
          0,
          x2.x,
          0,
          1,
          0,
          x2.y,
          0,
          0,
          1,
          x2.z,
          0,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          0,
          x2,
          0,
          1,
          0,
          y,
          0,
          0,
          1,
          z,
          0,
          0,
          0,
          1
        );
      }
      return this;
    }
    makeRotationX(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        1,
        0,
        0,
        0,
        0,
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationY(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        0,
        s,
        0,
        0,
        1,
        0,
        0,
        -s,
        0,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationZ(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationAxis(axis, angle) {
      const c = Math.cos(angle);
      const s = Math.sin(angle);
      const t = 1 - c;
      const x2 = axis.x, y = axis.y, z = axis.z;
      const tx = t * x2, ty = t * y;
      this.set(
        tx * x2 + c,
        tx * y - s * z,
        tx * z + s * y,
        0,
        tx * y + s * z,
        ty * y + c,
        ty * z - s * x2,
        0,
        tx * z - s * y,
        ty * z + s * x2,
        t * z * z + c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeScale(x2, y, z) {
      this.set(
        x2,
        0,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        0,
        z,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeShear(xy, xz, yx, yz, zx, zy) {
      this.set(
        1,
        yx,
        zx,
        0,
        xy,
        1,
        zy,
        0,
        xz,
        yz,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    compose(position, quaternion, scale) {
      const te = this.elements;
      const x2 = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
      const x22 = x2 + x2, y2 = y + y, z2 = z + z;
      const xx = x2 * x22, xy = x2 * y2, xz = x2 * z2;
      const yy = y * y2, yz = y * z2, zz = z * z2;
      const wx = w * x22, wy = w * y2, wz = w * z2;
      const sx = scale.x, sy = scale.y, sz = scale.z;
      te[0] = (1 - (yy + zz)) * sx;
      te[1] = (xy + wz) * sx;
      te[2] = (xz - wy) * sx;
      te[3] = 0;
      te[4] = (xy - wz) * sy;
      te[5] = (1 - (xx + zz)) * sy;
      te[6] = (yz + wx) * sy;
      te[7] = 0;
      te[8] = (xz + wy) * sz;
      te[9] = (yz - wx) * sz;
      te[10] = (1 - (xx + yy)) * sz;
      te[11] = 0;
      te[12] = position.x;
      te[13] = position.y;
      te[14] = position.z;
      te[15] = 1;
      return this;
    }
    decompose(position, quaternion, scale) {
      const te = this.elements;
      let sx = _v1$5.set(te[0], te[1], te[2]).length();
      const sy = _v1$5.set(te[4], te[5], te[6]).length();
      const sz = _v1$5.set(te[8], te[9], te[10]).length();
      const det = this.determinant();
      if (det < 0) sx = -sx;
      position.x = te[12];
      position.y = te[13];
      position.z = te[14];
      _m1$2.copy(this);
      const invSX = 1 / sx;
      const invSY = 1 / sy;
      const invSZ = 1 / sz;
      _m1$2.elements[0] *= invSX;
      _m1$2.elements[1] *= invSX;
      _m1$2.elements[2] *= invSX;
      _m1$2.elements[4] *= invSY;
      _m1$2.elements[5] *= invSY;
      _m1$2.elements[6] *= invSY;
      _m1$2.elements[8] *= invSZ;
      _m1$2.elements[9] *= invSZ;
      _m1$2.elements[10] *= invSZ;
      quaternion.setFromRotationMatrix(_m1$2);
      scale.x = sx;
      scale.y = sy;
      scale.z = sz;
      return this;
    }
    makePerspective(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const x2 = 2 * near / (right - left);
      const y = 2 * near / (top - bottom);
      const a = (right + left) / (right - left);
      const b = (top + bottom) / (top - bottom);
      let c, d;
      if (coordinateSystem === WebGLCoordinateSystem) {
        c = -(far + near) / (far - near);
        d = -2 * far * near / (far - near);
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        c = -far / (far - near);
        d = -far * near / (far - near);
      } else {
        throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = x2;
      te[4] = 0;
      te[8] = a;
      te[12] = 0;
      te[1] = 0;
      te[5] = y;
      te[9] = b;
      te[13] = 0;
      te[2] = 0;
      te[6] = 0;
      te[10] = c;
      te[14] = d;
      te[3] = 0;
      te[7] = 0;
      te[11] = -1;
      te[15] = 0;
      return this;
    }
    makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const w = 1 / (right - left);
      const h = 1 / (top - bottom);
      const p = 1 / (far - near);
      const x2 = (right + left) * w;
      const y = (top + bottom) * h;
      let z, zInv;
      if (coordinateSystem === WebGLCoordinateSystem) {
        z = (far + near) * p;
        zInv = -2 * p;
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        z = near * p;
        zInv = -1 * p;
      } else {
        throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = 2 * w;
      te[4] = 0;
      te[8] = 0;
      te[12] = -x2;
      te[1] = 0;
      te[5] = 2 * h;
      te[9] = 0;
      te[13] = -y;
      te[2] = 0;
      te[6] = 0;
      te[10] = zInv;
      te[14] = -z;
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[15] = 1;
      return this;
    }
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i2 = 0; i2 < 16; i2++) {
        if (te[i2] !== me[i2]) return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i2 = 0; i2 < 16; i2++) {
        this.elements[i2] = array[i2 + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      array[offset + 9] = te[9];
      array[offset + 10] = te[10];
      array[offset + 11] = te[11];
      array[offset + 12] = te[12];
      array[offset + 13] = te[13];
      array[offset + 14] = te[14];
      array[offset + 15] = te[15];
      return array;
    }
  }
  const _v1$5 = /* @__PURE__ */ new Vector3();
  const _m1$2 = /* @__PURE__ */ new Matrix4();
  const _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
  const _one = /* @__PURE__ */ new Vector3(1, 1, 1);
  const _x = /* @__PURE__ */ new Vector3();
  const _y = /* @__PURE__ */ new Vector3();
  const _z = /* @__PURE__ */ new Vector3();
  const _matrix$2 = /* @__PURE__ */ new Matrix4();
  const _quaternion$3 = /* @__PURE__ */ new Quaternion();
  class Euler {
    constructor(x2 = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER) {
      this.isEuler = true;
      this._x = x2;
      this._y = y;
      this._z = z;
      this._order = order;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get order() {
      return this._order;
    }
    set order(value) {
      this._order = value;
      this._onChangeCallback();
    }
    set(x2, y, z, order = this._order) {
      this._x = x2;
      this._y = y;
      this._z = z;
      this._order = order;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(euler) {
      this._x = euler._x;
      this._y = euler._y;
      this._z = euler._z;
      this._order = euler._order;
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m, order = this._order, update = true) {
      const te = m.elements;
      const m11 = te[0], m12 = te[4], m13 = te[8];
      const m21 = te[1], m22 = te[5], m23 = te[9];
      const m31 = te[2], m32 = te[6], m33 = te[10];
      switch (order) {
        case "XYZ":
          this._y = Math.asin(clamp(m13, -1, 1));
          if (Math.abs(m13) < 0.9999999) {
            this._x = Math.atan2(-m23, m33);
            this._z = Math.atan2(-m12, m11);
          } else {
            this._x = Math.atan2(m32, m22);
            this._z = 0;
          }
          break;
        case "YXZ":
          this._x = Math.asin(-clamp(m23, -1, 1));
          if (Math.abs(m23) < 0.9999999) {
            this._y = Math.atan2(m13, m33);
            this._z = Math.atan2(m21, m22);
          } else {
            this._y = Math.atan2(-m31, m11);
            this._z = 0;
          }
          break;
        case "ZXY":
          this._x = Math.asin(clamp(m32, -1, 1));
          if (Math.abs(m32) < 0.9999999) {
            this._y = Math.atan2(-m31, m33);
            this._z = Math.atan2(-m12, m22);
          } else {
            this._y = 0;
            this._z = Math.atan2(m21, m11);
          }
          break;
        case "ZYX":
          this._y = Math.asin(-clamp(m31, -1, 1));
          if (Math.abs(m31) < 0.9999999) {
            this._x = Math.atan2(m32, m33);
            this._z = Math.atan2(m21, m11);
          } else {
            this._x = 0;
            this._z = Math.atan2(-m12, m22);
          }
          break;
        case "YZX":
          this._z = Math.asin(clamp(m21, -1, 1));
          if (Math.abs(m21) < 0.9999999) {
            this._x = Math.atan2(-m23, m22);
            this._y = Math.atan2(-m31, m11);
          } else {
            this._x = 0;
            this._y = Math.atan2(m13, m33);
          }
          break;
        case "XZY":
          this._z = Math.asin(-clamp(m12, -1, 1));
          if (Math.abs(m12) < 0.9999999) {
            this._x = Math.atan2(m32, m22);
            this._y = Math.atan2(m13, m11);
          } else {
            this._x = Math.atan2(-m23, m33);
            this._y = 0;
          }
          break;
        default:
          console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
      }
      this._order = order;
      if (update === true) this._onChangeCallback();
      return this;
    }
    setFromQuaternion(q, order, update) {
      _matrix$2.makeRotationFromQuaternion(q);
      return this.setFromRotationMatrix(_matrix$2, order, update);
    }
    setFromVector3(v, order = this._order) {
      return this.set(v.x, v.y, v.z, order);
    }
    reorder(newOrder) {
      _quaternion$3.setFromEuler(this);
      return this.setFromQuaternion(_quaternion$3, newOrder);
    }
    equals(euler) {
      return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
    }
    fromArray(array) {
      this._x = array[0];
      this._y = array[1];
      this._z = array[2];
      if (array[3] !== void 0) this._order = array[3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._order;
      return array;
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._order;
    }
  }
  Euler.DEFAULT_ORDER = "XYZ";
  class Layers {
    constructor() {
      this.mask = 1 | 0;
    }
    set(channel) {
      this.mask = (1 << channel | 0) >>> 0;
    }
    enable(channel) {
      this.mask |= 1 << channel | 0;
    }
    enableAll() {
      this.mask = 4294967295 | 0;
    }
    toggle(channel) {
      this.mask ^= 1 << channel | 0;
    }
    disable(channel) {
      this.mask &= ~(1 << channel | 0);
    }
    disableAll() {
      this.mask = 0;
    }
    test(layers) {
      return (this.mask & layers.mask) !== 0;
    }
    isEnabled(channel) {
      return (this.mask & (1 << channel | 0)) !== 0;
    }
  }
  let _object3DId = 0;
  const _v1$4 = /* @__PURE__ */ new Vector3();
  const _q1 = /* @__PURE__ */ new Quaternion();
  const _m1$1 = /* @__PURE__ */ new Matrix4();
  const _target = /* @__PURE__ */ new Vector3();
  const _position$3 = /* @__PURE__ */ new Vector3();
  const _scale$2 = /* @__PURE__ */ new Vector3();
  const _quaternion$2 = /* @__PURE__ */ new Quaternion();
  const _xAxis = /* @__PURE__ */ new Vector3(1, 0, 0);
  const _yAxis = /* @__PURE__ */ new Vector3(0, 1, 0);
  const _zAxis = /* @__PURE__ */ new Vector3(0, 0, 1);
  const _addedEvent = { type: "added" };
  const _removedEvent = { type: "removed" };
  const _childaddedEvent = { type: "childadded", child: null };
  const _childremovedEvent = { type: "childremoved", child: null };
  class Object3D extends EventDispatcher {
    constructor() {
      super();
      this.isObject3D = true;
      Object.defineProperty(this, "id", { value: _object3DId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Object3D";
      this.parent = null;
      this.children = [];
      this.up = Object3D.DEFAULT_UP.clone();
      const position = new Vector3();
      const rotation = new Euler();
      const quaternion = new Quaternion();
      const scale = new Vector3(1, 1, 1);
      function onRotationChange() {
        quaternion.setFromEuler(rotation, false);
      }
      function onQuaternionChange() {
        rotation.setFromQuaternion(quaternion, void 0, false);
      }
      rotation._onChange(onRotationChange);
      quaternion._onChange(onQuaternionChange);
      Object.defineProperties(this, {
        position: {
          configurable: true,
          enumerable: true,
          value: position
        },
        rotation: {
          configurable: true,
          enumerable: true,
          value: rotation
        },
        quaternion: {
          configurable: true,
          enumerable: true,
          value: quaternion
        },
        scale: {
          configurable: true,
          enumerable: true,
          value: scale
        },
        modelViewMatrix: {
          value: new Matrix4()
        },
        normalMatrix: {
          value: new Matrix3()
        }
      });
      this.matrix = new Matrix4();
      this.matrixWorld = new Matrix4();
      this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
      this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
      this.matrixWorldNeedsUpdate = false;
      this.layers = new Layers();
      this.visible = true;
      this.castShadow = false;
      this.receiveShadow = false;
      this.frustumCulled = true;
      this.renderOrder = 0;
      this.animations = [];
      this.userData = {};
    }
    onBeforeShadow() {
    }
    onAfterShadow() {
    }
    onBeforeRender() {
    }
    onAfterRender() {
    }
    applyMatrix4(matrix) {
      if (this.matrixAutoUpdate) this.updateMatrix();
      this.matrix.premultiply(matrix);
      this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(q) {
      this.quaternion.premultiply(q);
      return this;
    }
    setRotationFromAxisAngle(axis, angle) {
      this.quaternion.setFromAxisAngle(axis, angle);
    }
    setRotationFromEuler(euler) {
      this.quaternion.setFromEuler(euler, true);
    }
    setRotationFromMatrix(m) {
      this.quaternion.setFromRotationMatrix(m);
    }
    setRotationFromQuaternion(q) {
      this.quaternion.copy(q);
    }
    rotateOnAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.multiply(_q1);
      return this;
    }
    rotateOnWorldAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.premultiply(_q1);
      return this;
    }
    rotateX(angle) {
      return this.rotateOnAxis(_xAxis, angle);
    }
    rotateY(angle) {
      return this.rotateOnAxis(_yAxis, angle);
    }
    rotateZ(angle) {
      return this.rotateOnAxis(_zAxis, angle);
    }
    translateOnAxis(axis, distance) {
      _v1$4.copy(axis).applyQuaternion(this.quaternion);
      this.position.add(_v1$4.multiplyScalar(distance));
      return this;
    }
    translateX(distance) {
      return this.translateOnAxis(_xAxis, distance);
    }
    translateY(distance) {
      return this.translateOnAxis(_yAxis, distance);
    }
    translateZ(distance) {
      return this.translateOnAxis(_zAxis, distance);
    }
    localToWorld(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
    }
    lookAt(x2, y, z) {
      if (x2.isVector3) {
        _target.copy(x2);
      } else {
        _target.set(x2, y, z);
      }
      const parent = this.parent;
      this.updateWorldMatrix(true, false);
      _position$3.setFromMatrixPosition(this.matrixWorld);
      if (this.isCamera || this.isLight) {
        _m1$1.lookAt(_position$3, _target, this.up);
      } else {
        _m1$1.lookAt(_target, _position$3, this.up);
      }
      this.quaternion.setFromRotationMatrix(_m1$1);
      if (parent) {
        _m1$1.extractRotation(parent.matrixWorld);
        _q1.setFromRotationMatrix(_m1$1);
        this.quaternion.premultiply(_q1.invert());
      }
    }
    add(object) {
      if (arguments.length > 1) {
        for (let i2 = 0; i2 < arguments.length; i2++) {
          this.add(arguments[i2]);
        }
        return this;
      }
      if (object === this) {
        console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
        return this;
      }
      if (object && object.isObject3D) {
        object.removeFromParent();
        object.parent = this;
        this.children.push(object);
        object.dispatchEvent(_addedEvent);
        _childaddedEvent.child = object;
        this.dispatchEvent(_childaddedEvent);
        _childaddedEvent.child = null;
      } else {
        console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
      }
      return this;
    }
    remove(object) {
      if (arguments.length > 1) {
        for (let i2 = 0; i2 < arguments.length; i2++) {
          this.remove(arguments[i2]);
        }
        return this;
      }
      const index = this.children.indexOf(object);
      if (index !== -1) {
        object.parent = null;
        this.children.splice(index, 1);
        object.dispatchEvent(_removedEvent);
        _childremovedEvent.child = object;
        this.dispatchEvent(_childremovedEvent);
        _childremovedEvent.child = null;
      }
      return this;
    }
    removeFromParent() {
      const parent = this.parent;
      if (parent !== null) {
        parent.remove(this);
      }
      return this;
    }
    clear() {
      return this.remove(...this.children);
    }
    attach(object) {
      this.updateWorldMatrix(true, false);
      _m1$1.copy(this.matrixWorld).invert();
      if (object.parent !== null) {
        object.parent.updateWorldMatrix(true, false);
        _m1$1.multiply(object.parent.matrixWorld);
      }
      object.applyMatrix4(_m1$1);
      object.removeFromParent();
      object.parent = this;
      this.children.push(object);
      object.updateWorldMatrix(false, true);
      object.dispatchEvent(_addedEvent);
      _childaddedEvent.child = object;
      this.dispatchEvent(_childaddedEvent);
      _childaddedEvent.child = null;
      return this;
    }
    getObjectById(id) {
      return this.getObjectByProperty("id", id);
    }
    getObjectByName(name) {
      return this.getObjectByProperty("name", name);
    }
    getObjectByProperty(name, value) {
      if (this[name] === value) return this;
      for (let i2 = 0, l = this.children.length; i2 < l; i2++) {
        const child = this.children[i2];
        const object = child.getObjectByProperty(name, value);
        if (object !== void 0) {
          return object;
        }
      }
      return void 0;
    }
    getObjectsByProperty(name, value, result = []) {
      if (this[name] === value) result.push(this);
      const children = this.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        children[i2].getObjectsByProperty(name, value, result);
      }
      return result;
    }
    getWorldPosition(target) {
      this.updateWorldMatrix(true, false);
      return target.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, target, _scale$2);
      return target;
    }
    getWorldScale(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, _quaternion$2, target);
      return target;
    }
    getWorldDirection(target) {
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(e[8], e[9], e[10]).normalize();
    }
    raycast() {
    }
    traverse(callback) {
      callback(this);
      const children = this.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        children[i2].traverse(callback);
      }
    }
    traverseVisible(callback) {
      if (this.visible === false) return;
      callback(this);
      const children = this.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        children[i2].traverseVisible(callback);
      }
    }
    traverseAncestors(callback) {
      const parent = this.parent;
      if (parent !== null) {
        callback(parent);
        parent.traverseAncestors(callback);
      }
    }
    updateMatrix() {
      this.matrix.compose(this.position, this.quaternion, this.scale);
      this.matrixWorldNeedsUpdate = true;
    }
    updateMatrixWorld(force) {
      if (this.matrixAutoUpdate) this.updateMatrix();
      if (this.matrixWorldNeedsUpdate || force) {
        if (this.matrixWorldAutoUpdate === true) {
          if (this.parent === null) {
            this.matrixWorld.copy(this.matrix);
          } else {
            this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
          }
        }
        this.matrixWorldNeedsUpdate = false;
        force = true;
      }
      const children = this.children;
      for (let i2 = 0, l = children.length; i2 < l; i2++) {
        const child = children[i2];
        child.updateMatrixWorld(force);
      }
    }
    updateWorldMatrix(updateParents, updateChildren) {
      const parent = this.parent;
      if (updateParents === true && parent !== null) {
        parent.updateWorldMatrix(true, false);
      }
      if (this.matrixAutoUpdate) this.updateMatrix();
      if (this.matrixWorldAutoUpdate === true) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
      }
      if (updateChildren === true) {
        const children = this.children;
        for (let i2 = 0, l = children.length; i2 < l; i2++) {
          const child = children[i2];
          child.updateWorldMatrix(false, true);
        }
      }
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      const output = {};
      if (isRootObject) {
        meta = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
          skeletons: {},
          animations: {},
          nodes: {}
        };
        output.metadata = {
          version: 4.6,
          type: "Object",
          generator: "Object3D.toJSON"
        };
      }
      const object = {};
      object.uuid = this.uuid;
      object.type = this.type;
      if (this.name !== "") object.name = this.name;
      if (this.castShadow === true) object.castShadow = true;
      if (this.receiveShadow === true) object.receiveShadow = true;
      if (this.visible === false) object.visible = false;
      if (this.frustumCulled === false) object.frustumCulled = false;
      if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
      if (Object.keys(this.userData).length > 0) object.userData = this.userData;
      object.layers = this.layers.mask;
      object.matrix = this.matrix.toArray();
      object.up = this.up.toArray();
      if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
      if (this.isInstancedMesh) {
        object.type = "InstancedMesh";
        object.count = this.count;
        object.instanceMatrix = this.instanceMatrix.toJSON();
        if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
      }
      if (this.isBatchedMesh) {
        object.type = "BatchedMesh";
        object.perObjectFrustumCulled = this.perObjectFrustumCulled;
        object.sortObjects = this.sortObjects;
        object.drawRanges = this._drawRanges;
        object.reservedRanges = this._reservedRanges;
        object.visibility = this._visibility;
        object.active = this._active;
        object.bounds = this._bounds.map((bound) => ({
          boxInitialized: bound.boxInitialized,
          boxMin: bound.box.min.toArray(),
          boxMax: bound.box.max.toArray(),
          sphereInitialized: bound.sphereInitialized,
          sphereRadius: bound.sphere.radius,
          sphereCenter: bound.sphere.center.toArray()
        }));
        object.maxInstanceCount = this._maxInstanceCount;
        object.maxVertexCount = this._maxVertexCount;
        object.maxIndexCount = this._maxIndexCount;
        object.geometryInitialized = this._geometryInitialized;
        object.geometryCount = this._geometryCount;
        object.matricesTexture = this._matricesTexture.toJSON(meta);
        if (this._colorsTexture !== null) object.colorsTexture = this._colorsTexture.toJSON(meta);
        if (this.boundingSphere !== null) {
          object.boundingSphere = {
            center: object.boundingSphere.center.toArray(),
            radius: object.boundingSphere.radius
          };
        }
        if (this.boundingBox !== null) {
          object.boundingBox = {
            min: object.boundingBox.min.toArray(),
            max: object.boundingBox.max.toArray()
          };
        }
      }
      function serialize(library, element) {
        if (library[element.uuid] === void 0) {
          library[element.uuid] = element.toJSON(meta);
        }
        return element.uuid;
      }
      if (this.isScene) {
        if (this.background) {
          if (this.background.isColor) {
            object.background = this.background.toJSON();
          } else if (this.background.isTexture) {
            object.background = this.background.toJSON(meta).uuid;
          }
        }
        if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
          object.environment = this.environment.toJSON(meta).uuid;
        }
      } else if (this.isMesh || this.isLine || this.isPoints) {
        object.geometry = serialize(meta.geometries, this.geometry);
        const parameters = this.geometry.parameters;
        if (parameters !== void 0 && parameters.shapes !== void 0) {
          const shapes = parameters.shapes;
          if (Array.isArray(shapes)) {
            for (let i2 = 0, l = shapes.length; i2 < l; i2++) {
              const shape = shapes[i2];
              serialize(meta.shapes, shape);
            }
          } else {
            serialize(meta.shapes, shapes);
          }
        }
      }
      if (this.isSkinnedMesh) {
        object.bindMode = this.bindMode;
        object.bindMatrix = this.bindMatrix.toArray();
        if (this.skeleton !== void 0) {
          serialize(meta.skeletons, this.skeleton);
          object.skeleton = this.skeleton.uuid;
        }
      }
      if (this.material !== void 0) {
        if (Array.isArray(this.material)) {
          const uuids = [];
          for (let i2 = 0, l = this.material.length; i2 < l; i2++) {
            uuids.push(serialize(meta.materials, this.material[i2]));
          }
          object.material = uuids;
        } else {
          object.material = serialize(meta.materials, this.material);
        }
      }
      if (this.children.length > 0) {
        object.children = [];
        for (let i2 = 0; i2 < this.children.length; i2++) {
          object.children.push(this.children[i2].toJSON(meta).object);
        }
      }
      if (this.animations.length > 0) {
        object.animations = [];
        for (let i2 = 0; i2 < this.animations.length; i2++) {
          const animation = this.animations[i2];
          object.animations.push(serialize(meta.animations, animation));
        }
      }
      if (isRootObject) {
        const geometries = extractFromCache(meta.geometries);
        const materials = extractFromCache(meta.materials);
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        const shapes = extractFromCache(meta.shapes);
        const skeletons = extractFromCache(meta.skeletons);
        const animations = extractFromCache(meta.animations);
        const nodes = extractFromCache(meta.nodes);
        if (geometries.length > 0) output.geometries = geometries;
        if (materials.length > 0) output.materials = materials;
        if (textures.length > 0) output.textures = textures;
        if (images.length > 0) output.images = images;
        if (shapes.length > 0) output.shapes = shapes;
        if (skeletons.length > 0) output.skeletons = skeletons;
        if (animations.length > 0) output.animations = animations;
        if (nodes.length > 0) output.nodes = nodes;
      }
      output.object = object;
      return output;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data = cache[key];
          delete data.metadata;
          values.push(data);
        }
        return values;
      }
    }
    clone(recursive) {
      return new this.constructor().copy(this, recursive);
    }
    copy(source, recursive = true) {
      this.name = source.name;
      this.up.copy(source.up);
      this.position.copy(source.position);
      this.rotation.order = source.rotation.order;
      this.quaternion.copy(source.quaternion);
      this.scale.copy(source.scale);
      this.matrix.copy(source.matrix);
      this.matrixWorld.copy(source.matrixWorld);
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
      this.layers.mask = source.layers.mask;
      this.visible = source.visible;
      this.castShadow = source.castShadow;
      this.receiveShadow = source.receiveShadow;
      this.frustumCulled = source.frustumCulled;
      this.renderOrder = source.renderOrder;
      this.animations = source.animations.slice();
      this.userData = JSON.parse(JSON.stringify(source.userData));
      if (recursive === true) {
        for (let i2 = 0; i2 < source.children.length; i2++) {
          const child = source.children[i2];
          this.add(child.clone());
        }
      }
      return this;
    }
  }
  Object3D.DEFAULT_UP = /* @__PURE__ */ new Vector3(0, 1, 0);
  Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
  Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
  const _v0$1 = /* @__PURE__ */ new Vector3();
  const _v1$3 = /* @__PURE__ */ new Vector3();
  const _v2$2 = /* @__PURE__ */ new Vector3();
  const _v3$2 = /* @__PURE__ */ new Vector3();
  const _vab = /* @__PURE__ */ new Vector3();
  const _vac = /* @__PURE__ */ new Vector3();
  const _vbc = /* @__PURE__ */ new Vector3();
  const _vap = /* @__PURE__ */ new Vector3();
  const _vbp = /* @__PURE__ */ new Vector3();
  const _vcp = /* @__PURE__ */ new Vector3();
  const _v40 = /* @__PURE__ */ new Vector4();
  const _v41 = /* @__PURE__ */ new Vector4();
  const _v42 = /* @__PURE__ */ new Vector4();
  class Triangle {
    constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
      this.a = a;
      this.b = b;
      this.c = c;
    }
    static getNormal(a, b, c, target) {
      target.subVectors(c, b);
      _v0$1.subVectors(a, b);
      target.cross(_v0$1);
      const targetLengthSq = target.lengthSq();
      if (targetLengthSq > 0) {
        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
      }
      return target.set(0, 0, 0);
    }
    // static/instance method to calculate barycentric coordinates
    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
    static getBarycoord(point, a, b, c, target) {
      _v0$1.subVectors(c, a);
      _v1$3.subVectors(b, a);
      _v2$2.subVectors(point, a);
      const dot00 = _v0$1.dot(_v0$1);
      const dot01 = _v0$1.dot(_v1$3);
      const dot02 = _v0$1.dot(_v2$2);
      const dot11 = _v1$3.dot(_v1$3);
      const dot12 = _v1$3.dot(_v2$2);
      const denom = dot00 * dot11 - dot01 * dot01;
      if (denom === 0) {
        target.set(0, 0, 0);
        return null;
      }
      const invDenom = 1 / denom;
      const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
      return target.set(1 - u - v, v, u);
    }
    static containsPoint(point, a, b, c) {
      if (this.getBarycoord(point, a, b, c, _v3$2) === null) {
        return false;
      }
      return _v3$2.x >= 0 && _v3$2.y >= 0 && _v3$2.x + _v3$2.y <= 1;
    }
    static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {
      if (this.getBarycoord(point, p1, p2, p3, _v3$2) === null) {
        target.x = 0;
        target.y = 0;
        if ("z" in target) target.z = 0;
        if ("w" in target) target.w = 0;
        return null;
      }
      target.setScalar(0);
      target.addScaledVector(v1, _v3$2.x);
      target.addScaledVector(v2, _v3$2.y);
      target.addScaledVector(v3, _v3$2.z);
      return target;
    }
    static getInterpolatedAttribute(attr, i1, i2, i3, barycoord, target) {
      _v40.setScalar(0);
      _v41.setScalar(0);
      _v42.setScalar(0);
      _v40.fromBufferAttribute(attr, i1);
      _v41.fromBufferAttribute(attr, i2);
      _v42.fromBufferAttribute(attr, i3);
      target.setScalar(0);
      target.addScaledVector(_v40, barycoord.x);
      target.addScaledVector(_v41, barycoord.y);
      target.addScaledVector(_v42, barycoord.z);
      return target;
    }
    static isFrontFacing(a, b, c, direction) {
      _v0$1.subVectors(c, b);
      _v1$3.subVectors(a, b);
      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
    }
    set(a, b, c) {
      this.a.copy(a);
      this.b.copy(b);
      this.c.copy(c);
      return this;
    }
    setFromPointsAndIndices(points, i0, i1, i2) {
      this.a.copy(points[i0]);
      this.b.copy(points[i1]);
      this.c.copy(points[i2]);
      return this;
    }
    setFromAttributeAndIndices(attribute, i0, i1, i2) {
      this.a.fromBufferAttribute(attribute, i0);
      this.b.fromBufferAttribute(attribute, i1);
      this.c.fromBufferAttribute(attribute, i2);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(triangle) {
      this.a.copy(triangle.a);
      this.b.copy(triangle.b);
      this.c.copy(triangle.c);
      return this;
    }
    getArea() {
      _v0$1.subVectors(this.c, this.b);
      _v1$3.subVectors(this.a, this.b);
      return _v0$1.cross(_v1$3).length() * 0.5;
    }
    getMidpoint(target) {
      return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(target) {
      return Triangle.getNormal(this.a, this.b, this.c, target);
    }
    getPlane(target) {
      return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(point, target) {
      return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
    }
    getInterpolation(point, v1, v2, v3, target) {
      return Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);
    }
    containsPoint(point) {
      return Triangle.containsPoint(point, this.a, this.b, this.c);
    }
    isFrontFacing(direction) {
      return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
    }
    intersectsBox(box) {
      return box.intersectsTriangle(this);
    }
    closestPointToPoint(p, target) {
      const a = this.a, b = this.b, c = this.c;
      let v, w;
      _vab.subVectors(b, a);
      _vac.subVectors(c, a);
      _vap.subVectors(p, a);
      const d1 = _vab.dot(_vap);
      const d2 = _vac.dot(_vap);
      if (d1 <= 0 && d2 <= 0) {
        return target.copy(a);
      }
      _vbp.subVectors(p, b);
      const d3 = _vab.dot(_vbp);
      const d4 = _vac.dot(_vbp);
      if (d3 >= 0 && d4 <= d3) {
        return target.copy(b);
      }
      const vc = d1 * d4 - d3 * d2;
      if (vc <= 0 && d1 >= 0 && d3 <= 0) {
        v = d1 / (d1 - d3);
        return target.copy(a).addScaledVector(_vab, v);
      }
      _vcp.subVectors(p, c);
      const d5 = _vab.dot(_vcp);
      const d6 = _vac.dot(_vcp);
      if (d6 >= 0 && d5 <= d6) {
        return target.copy(c);
      }
      const vb = d5 * d2 - d1 * d6;
      if (vb <= 0 && d2 >= 0 && d6 <= 0) {
        w = d2 / (d2 - d6);
        return target.copy(a).addScaledVector(_vac, w);
      }
      const va = d3 * d6 - d5 * d4;
      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
        _vbc.subVectors(c, b);
        w = (d4 - d3) / (d4 - d3 + (d5 - d6));
        return target.copy(b).addScaledVector(_vbc, w);
      }
      const denom = 1 / (va + vb + vc);
      v = vb * denom;
      w = vc * denom;
      return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
    }
    equals(triangle) {
      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
  }
  const _colorKeywords = {
    "aliceblue": 15792383,
    "antiquewhite": 16444375,
    "aqua": 65535,
    "aquamarine": 8388564,
    "azure": 15794175,
    "beige": 16119260,
    "bisque": 16770244,
    "black": 0,
    "blanchedalmond": 16772045,
    "blue": 255,
    "blueviolet": 9055202,
    "brown": 10824234,
    "burlywood": 14596231,
    "cadetblue": 6266528,
    "chartreuse": 8388352,
    "chocolate": 13789470,
    "coral": 16744272,
    "cornflowerblue": 6591981,
    "cornsilk": 16775388,
    "crimson": 14423100,
    "cyan": 65535,
    "darkblue": 139,
    "darkcyan": 35723,
    "darkgoldenrod": 12092939,
    "darkgray": 11119017,
    "darkgreen": 25600,
    "darkgrey": 11119017,
    "darkkhaki": 12433259,
    "darkmagenta": 9109643,
    "darkolivegreen": 5597999,
    "darkorange": 16747520,
    "darkorchid": 10040012,
    "darkred": 9109504,
    "darksalmon": 15308410,
    "darkseagreen": 9419919,
    "darkslateblue": 4734347,
    "darkslategray": 3100495,
    "darkslategrey": 3100495,
    "darkturquoise": 52945,
    "darkviolet": 9699539,
    "deeppink": 16716947,
    "deepskyblue": 49151,
    "dimgray": 6908265,
    "dimgrey": 6908265,
    "dodgerblue": 2003199,
    "firebrick": 11674146,
    "floralwhite": 16775920,
    "forestgreen": 2263842,
    "fuchsia": 16711935,
    "gainsboro": 14474460,
    "ghostwhite": 16316671,
    "gold": 16766720,
    "goldenrod": 14329120,
    "gray": 8421504,
    "green": 32768,
    "greenyellow": 11403055,
    "grey": 8421504,
    "honeydew": 15794160,
    "hotpink": 16738740,
    "indianred": 13458524,
    "indigo": 4915330,
    "ivory": 16777200,
    "khaki": 15787660,
    "lavender": 15132410,
    "lavenderblush": 16773365,
    "lawngreen": 8190976,
    "lemonchiffon": 16775885,
    "lightblue": 11393254,
    "lightcoral": 15761536,
    "lightcyan": 14745599,
    "lightgoldenrodyellow": 16448210,
    "lightgray": 13882323,
    "lightgreen": 9498256,
    "lightgrey": 13882323,
    "lightpink": 16758465,
    "lightsalmon": 16752762,
    "lightseagreen": 2142890,
    "lightskyblue": 8900346,
    "lightslategray": 7833753,
    "lightslategrey": 7833753,
    "lightsteelblue": 11584734,
    "lightyellow": 16777184,
    "lime": 65280,
    "limegreen": 3329330,
    "linen": 16445670,
    "magenta": 16711935,
    "maroon": 8388608,
    "mediumaquamarine": 6737322,
    "mediumblue": 205,
    "mediumorchid": 12211667,
    "mediumpurple": 9662683,
    "mediumseagreen": 3978097,
    "mediumslateblue": 8087790,
    "mediumspringgreen": 64154,
    "mediumturquoise": 4772300,
    "mediumvioletred": 13047173,
    "midnightblue": 1644912,
    "mintcream": 16121850,
    "mistyrose": 16770273,
    "moccasin": 16770229,
    "navajowhite": 16768685,
    "navy": 128,
    "oldlace": 16643558,
    "olive": 8421376,
    "olivedrab": 7048739,
    "orange": 16753920,
    "orangered": 16729344,
    "orchid": 14315734,
    "palegoldenrod": 15657130,
    "palegreen": 10025880,
    "paleturquoise": 11529966,
    "palevioletred": 14381203,
    "papayawhip": 16773077,
    "peachpuff": 16767673,
    "peru": 13468991,
    "pink": 16761035,
    "plum": 14524637,
    "powderblue": 11591910,
    "purple": 8388736,
    "rebeccapurple": 6697881,
    "red": 16711680,
    "rosybrown": 12357519,
    "royalblue": 4286945,
    "saddlebrown": 9127187,
    "salmon": 16416882,
    "sandybrown": 16032864,
    "seagreen": 3050327,
    "seashell": 16774638,
    "sienna": 10506797,
    "silver": 12632256,
    "skyblue": 8900331,
    "slateblue": 6970061,
    "slategray": 7372944,
    "slategrey": 7372944,
    "snow": 16775930,
    "springgreen": 65407,
    "steelblue": 4620980,
    "tan": 13808780,
    "teal": 32896,
    "thistle": 14204888,
    "tomato": 16737095,
    "turquoise": 4251856,
    "violet": 15631086,
    "wheat": 16113331,
    "white": 16777215,
    "whitesmoke": 16119285,
    "yellow": 16776960,
    "yellowgreen": 10145074
  };
  const _hslA = { h: 0, s: 0, l: 0 };
  const _hslB = { h: 0, s: 0, l: 0 };
  function hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 1 / 2) return q;
    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
    return p;
  }
  class Color {
    constructor(r, g, b) {
      this.isColor = true;
      this.r = 1;
      this.g = 1;
      this.b = 1;
      return this.set(r, g, b);
    }
    set(r, g, b) {
      if (g === void 0 && b === void 0) {
        const value = r;
        if (value && value.isColor) {
          this.copy(value);
        } else if (typeof value === "number") {
          this.setHex(value);
        } else if (typeof value === "string") {
          this.setStyle(value);
        }
      } else {
        this.setRGB(r, g, b);
      }
      return this;
    }
    setScalar(scalar) {
      this.r = scalar;
      this.g = scalar;
      this.b = scalar;
      return this;
    }
    setHex(hex, colorSpace = SRGBColorSpace) {
      hex = Math.floor(hex);
      this.r = (hex >> 16 & 255) / 255;
      this.g = (hex >> 8 & 255) / 255;
      this.b = (hex & 255) / 255;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
      this.r = r;
      this.g = g;
      this.b = b;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
      h = euclideanModulo(h, 1);
      s = clamp(s, 0, 1);
      l = clamp(l, 0, 1);
      if (s === 0) {
        this.r = this.g = this.b = l;
      } else {
        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        const q = 2 * l - p;
        this.r = hue2rgb(q, p, h + 1 / 3);
        this.g = hue2rgb(q, p, h);
        this.b = hue2rgb(q, p, h - 1 / 3);
      }
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setStyle(style, colorSpace = SRGBColorSpace) {
      function handleAlpha(string) {
        if (string === void 0) return;
        if (parseFloat(string) < 1) {
          console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
        }
      }
      let m;
      if (m = /^(\\w+)\\(([^\\)]*)\\)/.exec(style)) {
        let color;
        const name = m[1];
        const components = m[2];
        switch (name) {
          case "rgb":
          case "rgba":
            if (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(255, parseInt(color[1], 10)) / 255,
                Math.min(255, parseInt(color[2], 10)) / 255,
                Math.min(255, parseInt(color[3], 10)) / 255,
                colorSpace
              );
            }
            if (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(100, parseInt(color[1], 10)) / 100,
                Math.min(100, parseInt(color[2], 10)) / 100,
                Math.min(100, parseInt(color[3], 10)) / 100,
                colorSpace
              );
            }
            break;
          case "hsl":
          case "hsla":
            if (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setHSL(
                parseFloat(color[1]) / 360,
                parseFloat(color[2]) / 100,
                parseFloat(color[3]) / 100,
                colorSpace
              );
            }
            break;
          default:
            console.warn("THREE.Color: Unknown color model " + style);
        }
      } else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {
        const hex = m[1];
        const size = hex.length;
        if (size === 3) {
          return this.setRGB(
            parseInt(hex.charAt(0), 16) / 15,
            parseInt(hex.charAt(1), 16) / 15,
            parseInt(hex.charAt(2), 16) / 15,
            colorSpace
          );
        } else if (size === 6) {
          return this.setHex(parseInt(hex, 16), colorSpace);
        } else {
          console.warn("THREE.Color: Invalid hex color " + style);
        }
      } else if (style && style.length > 0) {
        return this.setColorName(style, colorSpace);
      }
      return this;
    }
    setColorName(style, colorSpace = SRGBColorSpace) {
      const hex = _colorKeywords[style.toLowerCase()];
      if (hex !== void 0) {
        this.setHex(hex, colorSpace);
      } else {
        console.warn("THREE.Color: Unknown color " + style);
      }
      return this;
    }
    clone() {
      return new this.constructor(this.r, this.g, this.b);
    }
    copy(color) {
      this.r = color.r;
      this.g = color.g;
      this.b = color.b;
      return this;
    }
    copySRGBToLinear(color) {
      this.r = SRGBToLinear(color.r);
      this.g = SRGBToLinear(color.g);
      this.b = SRGBToLinear(color.b);
      return this;
    }
    copyLinearToSRGB(color) {
      this.r = LinearToSRGB(color.r);
      this.g = LinearToSRGB(color.g);
      this.b = LinearToSRGB(color.b);
      return this;
    }
    convertSRGBToLinear() {
      this.copySRGBToLinear(this);
      return this;
    }
    convertLinearToSRGB() {
      this.copyLinearToSRGB(this);
      return this;
    }
    getHex(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));
    }
    getHexString(colorSpace = SRGBColorSpace) {
      return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
    }
    getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      const max2 = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      let hue, saturation;
      const lightness = (min + max2) / 2;
      if (min === max2) {
        hue = 0;
        saturation = 0;
      } else {
        const delta = max2 - min;
        saturation = lightness <= 0.5 ? delta / (max2 + min) : delta / (2 - max2 - min);
        switch (max2) {
          case r:
            hue = (g - b) / delta + (g < b ? 6 : 0);
            break;
          case g:
            hue = (b - r) / delta + 2;
            break;
          case b:
            hue = (r - g) / delta + 4;
            break;
        }
        hue /= 6;
      }
      target.h = hue;
      target.s = saturation;
      target.l = lightness;
      return target;
    }
    getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      target.r = _color.r;
      target.g = _color.g;
      target.b = _color.b;
      return target;
    }
    getStyle(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      if (colorSpace !== SRGBColorSpace) {
        return \`color(\${colorSpace} \${r.toFixed(3)} \${g.toFixed(3)} \${b.toFixed(3)})\`;
      }
      return \`rgb(\${Math.round(r * 255)},\${Math.round(g * 255)},\${Math.round(b * 255)})\`;
    }
    offsetHSL(h, s, l) {
      this.getHSL(_hslA);
      return this.setHSL(_hslA.h + h, _hslA.s + s, _hslA.l + l);
    }
    add(color) {
      this.r += color.r;
      this.g += color.g;
      this.b += color.b;
      return this;
    }
    addColors(color1, color2) {
      this.r = color1.r + color2.r;
      this.g = color1.g + color2.g;
      this.b = color1.b + color2.b;
      return this;
    }
    addScalar(s) {
      this.r += s;
      this.g += s;
      this.b += s;
      return this;
    }
    sub(color) {
      this.r = Math.max(0, this.r - color.r);
      this.g = Math.max(0, this.g - color.g);
      this.b = Math.max(0, this.b - color.b);
      return this;
    }
    multiply(color) {
      this.r *= color.r;
      this.g *= color.g;
      this.b *= color.b;
      return this;
    }
    multiplyScalar(s) {
      this.r *= s;
      this.g *= s;
      this.b *= s;
      return this;
    }
    lerp(color, alpha) {
      this.r += (color.r - this.r) * alpha;
      this.g += (color.g - this.g) * alpha;
      this.b += (color.b - this.b) * alpha;
      return this;
    }
    lerpColors(color1, color2, alpha) {
      this.r = color1.r + (color2.r - color1.r) * alpha;
      this.g = color1.g + (color2.g - color1.g) * alpha;
      this.b = color1.b + (color2.b - color1.b) * alpha;
      return this;
    }
    lerpHSL(color, alpha) {
      this.getHSL(_hslA);
      color.getHSL(_hslB);
      const h = lerp(_hslA.h, _hslB.h, alpha);
      const s = lerp(_hslA.s, _hslB.s, alpha);
      const l = lerp(_hslA.l, _hslB.l, alpha);
      this.setHSL(h, s, l);
      return this;
    }
    setFromVector3(v) {
      this.r = v.x;
      this.g = v.y;
      this.b = v.z;
      return this;
    }
    applyMatrix3(m) {
      const r = this.r, g = this.g, b = this.b;
      const e = m.elements;
      this.r = e[0] * r + e[3] * g + e[6] * b;
      this.g = e[1] * r + e[4] * g + e[7] * b;
      this.b = e[2] * r + e[5] * g + e[8] * b;
      return this;
    }
    equals(c) {
      return c.r === this.r && c.g === this.g && c.b === this.b;
    }
    fromArray(array, offset = 0) {
      this.r = array[offset];
      this.g = array[offset + 1];
      this.b = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.r;
      array[offset + 1] = this.g;
      array[offset + 2] = this.b;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.r = attribute.getX(index);
      this.g = attribute.getY(index);
      this.b = attribute.getZ(index);
      return this;
    }
    toJSON() {
      return this.getHex();
    }
    *[Symbol.iterator]() {
      yield this.r;
      yield this.g;
      yield this.b;
    }
  }
  const _color = /* @__PURE__ */ new Color();
  Color.NAMES = _colorKeywords;
  let _materialId = 0;
  class Material extends EventDispatcher {
    constructor() {
      super();
      this.isMaterial = true;
      Object.defineProperty(this, "id", { value: _materialId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Material";
      this.blending = NormalBlending;
      this.side = FrontSide;
      this.vertexColors = false;
      this.opacity = 1;
      this.transparent = false;
      this.alphaHash = false;
      this.blendSrc = SrcAlphaFactor;
      this.blendDst = OneMinusSrcAlphaFactor;
      this.blendEquation = AddEquation;
      this.blendSrcAlpha = null;
      this.blendDstAlpha = null;
      this.blendEquationAlpha = null;
      this.blendColor = new Color(0, 0, 0);
      this.blendAlpha = 0;
      this.depthFunc = LessEqualDepth;
      this.depthTest = true;
      this.depthWrite = true;
      this.stencilWriteMask = 255;
      this.stencilFunc = AlwaysStencilFunc;
      this.stencilRef = 0;
      this.stencilFuncMask = 255;
      this.stencilFail = KeepStencilOp;
      this.stencilZFail = KeepStencilOp;
      this.stencilZPass = KeepStencilOp;
      this.stencilWrite = false;
      this.clippingPlanes = null;
      this.clipIntersection = false;
      this.clipShadows = false;
      this.shadowSide = null;
      this.colorWrite = true;
      this.precision = null;
      this.polygonOffset = false;
      this.polygonOffsetFactor = 0;
      this.polygonOffsetUnits = 0;
      this.dithering = false;
      this.alphaToCoverage = false;
      this.premultipliedAlpha = false;
      this.forceSinglePass = false;
      this.visible = true;
      this.toneMapped = true;
      this.userData = {};
      this.version = 0;
      this._alphaTest = 0;
    }
    get alphaTest() {
      return this._alphaTest;
    }
    set alphaTest(value) {
      if (this._alphaTest > 0 !== value > 0) {
        this.version++;
      }
      this._alphaTest = value;
    }
    // onBeforeRender and onBeforeCompile only supported in WebGLRenderer
    onBeforeRender() {
    }
    onBeforeCompile() {
    }
    customProgramCacheKey() {
      return this.onBeforeCompile.toString();
    }
    setValues(values) {
      if (values === void 0) return;
      for (const key in values) {
        const newValue = values[key];
        if (newValue === void 0) {
          console.warn(\`THREE.Material: parameter '\${key}' has value of undefined.\`);
          continue;
        }
        const currentValue = this[key];
        if (currentValue === void 0) {
          console.warn(\`THREE.Material: '\${key}' is not a property of THREE.\${this.type}.\`);
          continue;
        }
        if (currentValue && currentValue.isColor) {
          currentValue.set(newValue);
        } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
          currentValue.copy(newValue);
        } else {
          this[key] = newValue;
        }
      }
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (isRootObject) {
        meta = {
          textures: {},
          images: {}
        };
      }
      const data = {
        metadata: {
          version: 4.6,
          type: "Material",
          generator: "Material.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "") data.name = this.name;
      if (this.color && this.color.isColor) data.color = this.color.getHex();
      if (this.roughness !== void 0) data.roughness = this.roughness;
      if (this.metalness !== void 0) data.metalness = this.metalness;
      if (this.sheen !== void 0) data.sheen = this.sheen;
      if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
      if (this.sheenRoughness !== void 0) data.sheenRoughness = this.sheenRoughness;
      if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
      if (this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
      if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
      if (this.specularIntensity !== void 0) data.specularIntensity = this.specularIntensity;
      if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
      if (this.shininess !== void 0) data.shininess = this.shininess;
      if (this.clearcoat !== void 0) data.clearcoat = this.clearcoat;
      if (this.clearcoatRoughness !== void 0) data.clearcoatRoughness = this.clearcoatRoughness;
      if (this.clearcoatMap && this.clearcoatMap.isTexture) {
        data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
      }
      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
        data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
      }
      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
      }
      if (this.dispersion !== void 0) data.dispersion = this.dispersion;
      if (this.iridescence !== void 0) data.iridescence = this.iridescence;
      if (this.iridescenceIOR !== void 0) data.iridescenceIOR = this.iridescenceIOR;
      if (this.iridescenceThicknessRange !== void 0) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
      if (this.iridescenceMap && this.iridescenceMap.isTexture) {
        data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
      }
      if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
        data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
      }
      if (this.anisotropy !== void 0) data.anisotropy = this.anisotropy;
      if (this.anisotropyRotation !== void 0) data.anisotropyRotation = this.anisotropyRotation;
      if (this.anisotropyMap && this.anisotropyMap.isTexture) {
        data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
      }
      if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
      if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
      if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
      if (this.lightMap && this.lightMap.isTexture) {
        data.lightMap = this.lightMap.toJSON(meta).uuid;
        data.lightMapIntensity = this.lightMapIntensity;
      }
      if (this.aoMap && this.aoMap.isTexture) {
        data.aoMap = this.aoMap.toJSON(meta).uuid;
        data.aoMapIntensity = this.aoMapIntensity;
      }
      if (this.bumpMap && this.bumpMap.isTexture) {
        data.bumpMap = this.bumpMap.toJSON(meta).uuid;
        data.bumpScale = this.bumpScale;
      }
      if (this.normalMap && this.normalMap.isTexture) {
        data.normalMap = this.normalMap.toJSON(meta).uuid;
        data.normalMapType = this.normalMapType;
        data.normalScale = this.normalScale.toArray();
      }
      if (this.displacementMap && this.displacementMap.isTexture) {
        data.displacementMap = this.displacementMap.toJSON(meta).uuid;
        data.displacementScale = this.displacementScale;
        data.displacementBias = this.displacementBias;
      }
      if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
      if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
      if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
      if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
      if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
      if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
      if (this.envMap && this.envMap.isTexture) {
        data.envMap = this.envMap.toJSON(meta).uuid;
        if (this.combine !== void 0) data.combine = this.combine;
      }
      if (this.envMapRotation !== void 0) data.envMapRotation = this.envMapRotation.toArray();
      if (this.envMapIntensity !== void 0) data.envMapIntensity = this.envMapIntensity;
      if (this.reflectivity !== void 0) data.reflectivity = this.reflectivity;
      if (this.refractionRatio !== void 0) data.refractionRatio = this.refractionRatio;
      if (this.gradientMap && this.gradientMap.isTexture) {
        data.gradientMap = this.gradientMap.toJSON(meta).uuid;
      }
      if (this.transmission !== void 0) data.transmission = this.transmission;
      if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
      if (this.thickness !== void 0) data.thickness = this.thickness;
      if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
      if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;
      if (this.attenuationColor !== void 0) data.attenuationColor = this.attenuationColor.getHex();
      if (this.size !== void 0) data.size = this.size;
      if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
      if (this.sizeAttenuation !== void 0) data.sizeAttenuation = this.sizeAttenuation;
      if (this.blending !== NormalBlending) data.blending = this.blending;
      if (this.side !== FrontSide) data.side = this.side;
      if (this.vertexColors === true) data.vertexColors = true;
      if (this.opacity < 1) data.opacity = this.opacity;
      if (this.transparent === true) data.transparent = true;
      if (this.blendSrc !== SrcAlphaFactor) data.blendSrc = this.blendSrc;
      if (this.blendDst !== OneMinusSrcAlphaFactor) data.blendDst = this.blendDst;
      if (this.blendEquation !== AddEquation) data.blendEquation = this.blendEquation;
      if (this.blendSrcAlpha !== null) data.blendSrcAlpha = this.blendSrcAlpha;
      if (this.blendDstAlpha !== null) data.blendDstAlpha = this.blendDstAlpha;
      if (this.blendEquationAlpha !== null) data.blendEquationAlpha = this.blendEquationAlpha;
      if (this.blendColor && this.blendColor.isColor) data.blendColor = this.blendColor.getHex();
      if (this.blendAlpha !== 0) data.blendAlpha = this.blendAlpha;
      if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;
      if (this.depthTest === false) data.depthTest = this.depthTest;
      if (this.depthWrite === false) data.depthWrite = this.depthWrite;
      if (this.colorWrite === false) data.colorWrite = this.colorWrite;
      if (this.stencilWriteMask !== 255) data.stencilWriteMask = this.stencilWriteMask;
      if (this.stencilFunc !== AlwaysStencilFunc) data.stencilFunc = this.stencilFunc;
      if (this.stencilRef !== 0) data.stencilRef = this.stencilRef;
      if (this.stencilFuncMask !== 255) data.stencilFuncMask = this.stencilFuncMask;
      if (this.stencilFail !== KeepStencilOp) data.stencilFail = this.stencilFail;
      if (this.stencilZFail !== KeepStencilOp) data.stencilZFail = this.stencilZFail;
      if (this.stencilZPass !== KeepStencilOp) data.stencilZPass = this.stencilZPass;
      if (this.stencilWrite === true) data.stencilWrite = this.stencilWrite;
      if (this.rotation !== void 0 && this.rotation !== 0) data.rotation = this.rotation;
      if (this.polygonOffset === true) data.polygonOffset = true;
      if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
      if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
      if (this.linewidth !== void 0 && this.linewidth !== 1) data.linewidth = this.linewidth;
      if (this.dashSize !== void 0) data.dashSize = this.dashSize;
      if (this.gapSize !== void 0) data.gapSize = this.gapSize;
      if (this.scale !== void 0) data.scale = this.scale;
      if (this.dithering === true) data.dithering = true;
      if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
      if (this.alphaHash === true) data.alphaHash = true;
      if (this.alphaToCoverage === true) data.alphaToCoverage = true;
      if (this.premultipliedAlpha === true) data.premultipliedAlpha = true;
      if (this.forceSinglePass === true) data.forceSinglePass = true;
      if (this.wireframe === true) data.wireframe = true;
      if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
      if (this.wireframeLinecap !== "round") data.wireframeLinecap = this.wireframeLinecap;
      if (this.wireframeLinejoin !== "round") data.wireframeLinejoin = this.wireframeLinejoin;
      if (this.flatShading === true) data.flatShading = true;
      if (this.visible === false) data.visible = false;
      if (this.toneMapped === false) data.toneMapped = false;
      if (this.fog === false) data.fog = false;
      if (Object.keys(this.userData).length > 0) data.userData = this.userData;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data2 = cache[key];
          delete data2.metadata;
          values.push(data2);
        }
        return values;
      }
      if (isRootObject) {
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        if (textures.length > 0) data.textures = textures;
        if (images.length > 0) data.images = images;
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.blending = source.blending;
      this.side = source.side;
      this.vertexColors = source.vertexColors;
      this.opacity = source.opacity;
      this.transparent = source.transparent;
      this.blendSrc = source.blendSrc;
      this.blendDst = source.blendDst;
      this.blendEquation = source.blendEquation;
      this.blendSrcAlpha = source.blendSrcAlpha;
      this.blendDstAlpha = source.blendDstAlpha;
      this.blendEquationAlpha = source.blendEquationAlpha;
      this.blendColor.copy(source.blendColor);
      this.blendAlpha = source.blendAlpha;
      this.depthFunc = source.depthFunc;
      this.depthTest = source.depthTest;
      this.depthWrite = source.depthWrite;
      this.stencilWriteMask = source.stencilWriteMask;
      this.stencilFunc = source.stencilFunc;
      this.stencilRef = source.stencilRef;
      this.stencilFuncMask = source.stencilFuncMask;
      this.stencilFail = source.stencilFail;
      this.stencilZFail = source.stencilZFail;
      this.stencilZPass = source.stencilZPass;
      this.stencilWrite = source.stencilWrite;
      const srcPlanes = source.clippingPlanes;
      let dstPlanes = null;
      if (srcPlanes !== null) {
        const n = srcPlanes.length;
        dstPlanes = new Array(n);
        for (let i2 = 0; i2 !== n; ++i2) {
          dstPlanes[i2] = srcPlanes[i2].clone();
        }
      }
      this.clippingPlanes = dstPlanes;
      this.clipIntersection = source.clipIntersection;
      this.clipShadows = source.clipShadows;
      this.shadowSide = source.shadowSide;
      this.colorWrite = source.colorWrite;
      this.precision = source.precision;
      this.polygonOffset = source.polygonOffset;
      this.polygonOffsetFactor = source.polygonOffsetFactor;
      this.polygonOffsetUnits = source.polygonOffsetUnits;
      this.dithering = source.dithering;
      this.alphaTest = source.alphaTest;
      this.alphaHash = source.alphaHash;
      this.alphaToCoverage = source.alphaToCoverage;
      this.premultipliedAlpha = source.premultipliedAlpha;
      this.forceSinglePass = source.forceSinglePass;
      this.visible = source.visible;
      this.toneMapped = source.toneMapped;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    set needsUpdate(value) {
      if (value === true) this.version++;
    }
    onBuild() {
      console.warn("Material: onBuild() has been removed.");
    }
  }
  class MeshBasicMaterial extends Material {
    constructor(parameters) {
      super();
      this.isMeshBasicMaterial = true;
      this.type = "MeshBasicMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.specularMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.envMapRotation = new Euler();
      this.combine = MultiplyOperation;
      this.reflectivity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.envMapRotation.copy(source.envMapRotation);
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.fog = source.fog;
      return this;
    }
  }
  const _vector$9 = /* @__PURE__ */ new Vector3();
  const _vector2$1 = /* @__PURE__ */ new Vector2();
  class BufferAttribute {
    constructor(array, itemSize, normalized = false) {
      if (Array.isArray(array)) {
        throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
      }
      this.isBufferAttribute = true;
      this.name = "";
      this.array = array;
      this.itemSize = itemSize;
      this.count = array !== void 0 ? array.length / itemSize : 0;
      this.normalized = normalized;
      this.usage = StaticDrawUsage;
      this.updateRanges = [];
      this.gpuType = FloatType;
      this.version = 0;
    }
    onUploadCallback() {
    }
    set needsUpdate(value) {
      if (value === true) this.version++;
    }
    setUsage(value) {
      this.usage = value;
      return this;
    }
    addUpdateRange(start, count) {
      this.updateRanges.push({ start, count });
    }
    clearUpdateRanges() {
      this.updateRanges.length = 0;
    }
    copy(source) {
      this.name = source.name;
      this.array = new source.array.constructor(source.array);
      this.itemSize = source.itemSize;
      this.count = source.count;
      this.normalized = source.normalized;
      this.usage = source.usage;
      this.gpuType = source.gpuType;
      return this;
    }
    copyAt(index1, attribute, index2) {
      index1 *= this.itemSize;
      index2 *= attribute.itemSize;
      for (let i2 = 0, l = this.itemSize; i2 < l; i2++) {
        this.array[index1 + i2] = attribute.array[index2 + i2];
      }
      return this;
    }
    copyArray(array) {
      this.array.set(array);
      return this;
    }
    applyMatrix3(m) {
      if (this.itemSize === 2) {
        for (let i2 = 0, l = this.count; i2 < l; i2++) {
          _vector2$1.fromBufferAttribute(this, i2);
          _vector2$1.applyMatrix3(m);
          this.setXY(i2, _vector2$1.x, _vector2$1.y);
        }
      } else if (this.itemSize === 3) {
        for (let i2 = 0, l = this.count; i2 < l; i2++) {
          _vector$9.fromBufferAttribute(this, i2);
          _vector$9.applyMatrix3(m);
          this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
        }
      }
      return this;
    }
    applyMatrix4(m) {
      for (let i2 = 0, l = this.count; i2 < l; i2++) {
        _vector$9.fromBufferAttribute(this, i2);
        _vector$9.applyMatrix4(m);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    applyNormalMatrix(m) {
      for (let i2 = 0, l = this.count; i2 < l; i2++) {
        _vector$9.fromBufferAttribute(this, i2);
        _vector$9.applyNormalMatrix(m);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    transformDirection(m) {
      for (let i2 = 0, l = this.count; i2 < l; i2++) {
        _vector$9.fromBufferAttribute(this, i2);
        _vector$9.transformDirection(m);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    set(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    }
    getComponent(index, component) {
      let value = this.array[index * this.itemSize + component];
      if (this.normalized) value = denormalize(value, this.array);
      return value;
    }
    setComponent(index, component, value) {
      if (this.normalized) value = normalize$1(value, this.array);
      this.array[index * this.itemSize + component] = value;
      return this;
    }
    getX(index) {
      let x2 = this.array[index * this.itemSize];
      if (this.normalized) x2 = denormalize(x2, this.array);
      return x2;
    }
    setX(index, x2) {
      if (this.normalized) x2 = normalize$1(x2, this.array);
      this.array[index * this.itemSize] = x2;
      return this;
    }
    getY(index) {
      let y = this.array[index * this.itemSize + 1];
      if (this.normalized) y = denormalize(y, this.array);
      return y;
    }
    setY(index, y) {
      if (this.normalized) y = normalize$1(y, this.array);
      this.array[index * this.itemSize + 1] = y;
      return this;
    }
    getZ(index) {
      let z = this.array[index * this.itemSize + 2];
      if (this.normalized) z = denormalize(z, this.array);
      return z;
    }
    setZ(index, z) {
      if (this.normalized) z = normalize$1(z, this.array);
      this.array[index * this.itemSize + 2] = z;
      return this;
    }
    getW(index) {
      let w = this.array[index * this.itemSize + 3];
      if (this.normalized) w = denormalize(w, this.array);
      return w;
    }
    setW(index, w) {
      if (this.normalized) w = normalize$1(w, this.array);
      this.array[index * this.itemSize + 3] = w;
      return this;
    }
    setXY(index, x2, y) {
      index *= this.itemSize;
      if (this.normalized) {
        x2 = normalize$1(x2, this.array);
        y = normalize$1(y, this.array);
      }
      this.array[index + 0] = x2;
      this.array[index + 1] = y;
      return this;
    }
    setXYZ(index, x2, y, z) {
      index *= this.itemSize;
      if (this.normalized) {
        x2 = normalize$1(x2, this.array);
        y = normalize$1(y, this.array);
        z = normalize$1(z, this.array);
      }
      this.array[index + 0] = x2;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      return this;
    }
    setXYZW(index, x2, y, z, w) {
      index *= this.itemSize;
      if (this.normalized) {
        x2 = normalize$1(x2, this.array);
        y = normalize$1(y, this.array);
        z = normalize$1(z, this.array);
        w = normalize$1(w, this.array);
      }
      this.array[index + 0] = x2;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      this.array[index + 3] = w;
      return this;
    }
    onUpload(callback) {
      this.onUploadCallback = callback;
      return this;
    }
    clone() {
      return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
      const data = {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.from(this.array),
        normalized: this.normalized
      };
      if (this.name !== "") data.name = this.name;
      if (this.usage !== StaticDrawUsage) data.usage = this.usage;
      return data;
    }
  }
  class Uint16BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint16Array(array), itemSize, normalized);
    }
  }
  class Uint32BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint32Array(array), itemSize, normalized);
    }
  }
  class Float32BufferAttribute extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Float32Array(array), itemSize, normalized);
    }
  }
  let _id$1 = 0;
  const _m1 = /* @__PURE__ */ new Matrix4();
  const _obj = /* @__PURE__ */ new Object3D();
  const _offset = /* @__PURE__ */ new Vector3();
  const _box$2 = /* @__PURE__ */ new Box3();
  const _boxMorphTargets = /* @__PURE__ */ new Box3();
  const _vector$8 = /* @__PURE__ */ new Vector3();
  class BufferGeometry extends EventDispatcher {
    constructor() {
      super();
      this.isBufferGeometry = true;
      Object.defineProperty(this, "id", { value: _id$1++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "BufferGeometry";
      this.index = null;
      this.indirect = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.morphTargetsRelative = false;
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      this.drawRange = { start: 0, count: Infinity };
      this.userData = {};
    }
    getIndex() {
      return this.index;
    }
    setIndex(index) {
      if (Array.isArray(index)) {
        this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
      } else {
        this.index = index;
      }
      return this;
    }
    setIndirect(indirect) {
      this.indirect = indirect;
      return this;
    }
    getIndirect() {
      return this.indirect;
    }
    getAttribute(name) {
      return this.attributes[name];
    }
    setAttribute(name, attribute) {
      this.attributes[name] = attribute;
      return this;
    }
    deleteAttribute(name) {
      delete this.attributes[name];
      return this;
    }
    hasAttribute(name) {
      return this.attributes[name] !== void 0;
    }
    addGroup(start, count, materialIndex = 0) {
      this.groups.push({
        start,
        count,
        materialIndex
      });
    }
    clearGroups() {
      this.groups = [];
    }
    setDrawRange(start, count) {
      this.drawRange.start = start;
      this.drawRange.count = count;
    }
    applyMatrix4(matrix) {
      const position = this.attributes.position;
      if (position !== void 0) {
        position.applyMatrix4(matrix);
        position.needsUpdate = true;
      }
      const normal = this.attributes.normal;
      if (normal !== void 0) {
        const normalMatrix = new Matrix3().getNormalMatrix(matrix);
        normal.applyNormalMatrix(normalMatrix);
        normal.needsUpdate = true;
      }
      const tangent = this.attributes.tangent;
      if (tangent !== void 0) {
        tangent.transformDirection(matrix);
        tangent.needsUpdate = true;
      }
      if (this.boundingBox !== null) {
        this.computeBoundingBox();
      }
      if (this.boundingSphere !== null) {
        this.computeBoundingSphere();
      }
      return this;
    }
    applyQuaternion(q) {
      _m1.makeRotationFromQuaternion(q);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateX(angle) {
      _m1.makeRotationX(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateY(angle) {
      _m1.makeRotationY(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateZ(angle) {
      _m1.makeRotationZ(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    translate(x2, y, z) {
      _m1.makeTranslation(x2, y, z);
      this.applyMatrix4(_m1);
      return this;
    }
    scale(x2, y, z) {
      _m1.makeScale(x2, y, z);
      this.applyMatrix4(_m1);
      return this;
    }
    lookAt(vector) {
      _obj.lookAt(vector);
      _obj.updateMatrix();
      this.applyMatrix4(_obj.matrix);
      return this;
    }
    center() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(_offset).negate();
      this.translate(_offset.x, _offset.y, _offset.z);
      return this;
    }
    setFromPoints(points) {
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute === void 0) {
        const position = [];
        for (let i2 = 0, l = points.length; i2 < l; i2++) {
          const point = points[i2];
          position.push(point.x, point.y, point.z || 0);
        }
        this.setAttribute("position", new Float32BufferAttribute(position, 3));
      } else {
        const l = Math.min(points.length, positionAttribute.count);
        for (let i2 = 0; i2 < l; i2++) {
          const point = points[i2];
          positionAttribute.setXYZ(i2, point.x, point.y, point.z || 0);
        }
        if (points.length > positionAttribute.count) {
          console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.");
        }
        positionAttribute.needsUpdate = true;
      }
      return this;
    }
    computeBoundingBox() {
      if (this.boundingBox === null) {
        this.boundingBox = new Box3();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this);
        this.boundingBox.set(
          new Vector3(-Infinity, -Infinity, -Infinity),
          new Vector3(Infinity, Infinity, Infinity)
        );
        return;
      }
      if (position !== void 0) {
        this.boundingBox.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
            const morphAttribute = morphAttributesPosition[i2];
            _box$2.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(this.boundingBox.min, _box$2.min);
              this.boundingBox.expandByPoint(_vector$8);
              _vector$8.addVectors(this.boundingBox.max, _box$2.max);
              this.boundingBox.expandByPoint(_vector$8);
            } else {
              this.boundingBox.expandByPoint(_box$2.min);
              this.boundingBox.expandByPoint(_box$2.max);
            }
          }
        }
      } else {
        this.boundingBox.makeEmpty();
      }
      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      }
    }
    computeBoundingSphere() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this);
        this.boundingSphere.set(new Vector3(), Infinity);
        return;
      }
      if (position) {
        const center = this.boundingSphere.center;
        _box$2.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
            const morphAttribute = morphAttributesPosition[i2];
            _boxMorphTargets.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(_box$2.min, _boxMorphTargets.min);
              _box$2.expandByPoint(_vector$8);
              _vector$8.addVectors(_box$2.max, _boxMorphTargets.max);
              _box$2.expandByPoint(_vector$8);
            } else {
              _box$2.expandByPoint(_boxMorphTargets.min);
              _box$2.expandByPoint(_boxMorphTargets.max);
            }
          }
        }
        _box$2.getCenter(center);
        let maxRadiusSq = 0;
        for (let i2 = 0, il = position.count; i2 < il; i2++) {
          _vector$8.fromBufferAttribute(position, i2);
          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
        }
        if (morphAttributesPosition) {
          for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
            const morphAttribute = morphAttributesPosition[i2];
            const morphTargetsRelative = this.morphTargetsRelative;
            for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
              _vector$8.fromBufferAttribute(morphAttribute, j);
              if (morphTargetsRelative) {
                _offset.fromBufferAttribute(position, j);
                _vector$8.add(_offset);
              }
              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
            }
          }
        }
        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
        if (isNaN(this.boundingSphere.radius)) {
          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      }
    }
    computeTangents() {
      const index = this.index;
      const attributes = this.attributes;
      if (index === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
        console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
        return;
      }
      const positionAttribute = attributes.position;
      const normalAttribute = attributes.normal;
      const uvAttribute = attributes.uv;
      if (this.hasAttribute("tangent") === false) {
        this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * positionAttribute.count), 4));
      }
      const tangentAttribute = this.getAttribute("tangent");
      const tan1 = [], tan2 = [];
      for (let i2 = 0; i2 < positionAttribute.count; i2++) {
        tan1[i2] = new Vector3();
        tan2[i2] = new Vector3();
      }
      const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
      function handleTriangle(a, b, c) {
        vA.fromBufferAttribute(positionAttribute, a);
        vB.fromBufferAttribute(positionAttribute, b);
        vC.fromBufferAttribute(positionAttribute, c);
        uvA.fromBufferAttribute(uvAttribute, a);
        uvB.fromBufferAttribute(uvAttribute, b);
        uvC.fromBufferAttribute(uvAttribute, c);
        vB.sub(vA);
        vC.sub(vA);
        uvB.sub(uvA);
        uvC.sub(uvA);
        const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
        if (!isFinite(r)) return;
        sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
        tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
        tan1[a].add(sdir);
        tan1[b].add(sdir);
        tan1[c].add(sdir);
        tan2[a].add(tdir);
        tan2[b].add(tdir);
        tan2[c].add(tdir);
      }
      let groups = this.groups;
      if (groups.length === 0) {
        groups = [{
          start: 0,
          count: index.count
        }];
      }
      for (let i2 = 0, il = groups.length; i2 < il; ++i2) {
        const group = groups[i2];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleTriangle(
            index.getX(j + 0),
            index.getX(j + 1),
            index.getX(j + 2)
          );
        }
      }
      const tmp = new Vector3(), tmp2 = new Vector3();
      const n = new Vector3(), n2 = new Vector3();
      function handleVertex(v) {
        n.fromBufferAttribute(normalAttribute, v);
        n2.copy(n);
        const t = tan1[v];
        tmp.copy(t);
        tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
        tmp2.crossVectors(n2, t);
        const test = tmp2.dot(tan2[v]);
        const w = test < 0 ? -1 : 1;
        tangentAttribute.setXYZW(v, tmp.x, tmp.y, tmp.z, w);
      }
      for (let i2 = 0, il = groups.length; i2 < il; ++i2) {
        const group = groups[i2];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleVertex(index.getX(j + 0));
          handleVertex(index.getX(j + 1));
          handleVertex(index.getX(j + 2));
        }
      }
    }
    computeVertexNormals() {
      const index = this.index;
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute !== void 0) {
        let normalAttribute = this.getAttribute("normal");
        if (normalAttribute === void 0) {
          normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
          this.setAttribute("normal", normalAttribute);
        } else {
          for (let i2 = 0, il = normalAttribute.count; i2 < il; i2++) {
            normalAttribute.setXYZ(i2, 0, 0, 0);
          }
        }
        const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
        const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
        const cb = new Vector3(), ab = new Vector3();
        if (index) {
          for (let i2 = 0, il = index.count; i2 < il; i2 += 3) {
            const vA = index.getX(i2 + 0);
            const vB = index.getX(i2 + 1);
            const vC = index.getX(i2 + 2);
            pA.fromBufferAttribute(positionAttribute, vA);
            pB.fromBufferAttribute(positionAttribute, vB);
            pC.fromBufferAttribute(positionAttribute, vC);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            nA.fromBufferAttribute(normalAttribute, vA);
            nB.fromBufferAttribute(normalAttribute, vB);
            nC.fromBufferAttribute(normalAttribute, vC);
            nA.add(cb);
            nB.add(cb);
            nC.add(cb);
            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
          }
        } else {
          for (let i2 = 0, il = positionAttribute.count; i2 < il; i2 += 3) {
            pA.fromBufferAttribute(positionAttribute, i2 + 0);
            pB.fromBufferAttribute(positionAttribute, i2 + 1);
            pC.fromBufferAttribute(positionAttribute, i2 + 2);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            normalAttribute.setXYZ(i2 + 0, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i2 + 1, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i2 + 2, cb.x, cb.y, cb.z);
          }
        }
        this.normalizeNormals();
        normalAttribute.needsUpdate = true;
      }
    }
    normalizeNormals() {
      const normals = this.attributes.normal;
      for (let i2 = 0, il = normals.count; i2 < il; i2++) {
        _vector$8.fromBufferAttribute(normals, i2);
        _vector$8.normalize();
        normals.setXYZ(i2, _vector$8.x, _vector$8.y, _vector$8.z);
      }
    }
    toNonIndexed() {
      function convertBufferAttribute(attribute, indices2) {
        const array = attribute.array;
        const itemSize = attribute.itemSize;
        const normalized = attribute.normalized;
        const array2 = new array.constructor(indices2.length * itemSize);
        let index = 0, index2 = 0;
        for (let i2 = 0, l = indices2.length; i2 < l; i2++) {
          if (attribute.isInterleavedBufferAttribute) {
            index = indices2[i2] * attribute.data.stride + attribute.offset;
          } else {
            index = indices2[i2] * itemSize;
          }
          for (let j = 0; j < itemSize; j++) {
            array2[index2++] = array[index++];
          }
        }
        return new BufferAttribute(array2, itemSize, normalized);
      }
      if (this.index === null) {
        console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
        return this;
      }
      const geometry2 = new BufferGeometry();
      const indices = this.index.array;
      const attributes = this.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        const newAttribute = convertBufferAttribute(attribute, indices);
        geometry2.setAttribute(name, newAttribute);
      }
      const morphAttributes = this.morphAttributes;
      for (const name in morphAttributes) {
        const morphArray = [];
        const morphAttribute = morphAttributes[name];
        for (let i2 = 0, il = morphAttribute.length; i2 < il; i2++) {
          const attribute = morphAttribute[i2];
          const newAttribute = convertBufferAttribute(attribute, indices);
          morphArray.push(newAttribute);
        }
        geometry2.morphAttributes[name] = morphArray;
      }
      geometry2.morphTargetsRelative = this.morphTargetsRelative;
      const groups = this.groups;
      for (let i2 = 0, l = groups.length; i2 < l; i2++) {
        const group = groups[i2];
        geometry2.addGroup(group.start, group.count, group.materialIndex);
      }
      return geometry2;
    }
    toJSON() {
      const data = {
        metadata: {
          version: 4.6,
          type: "BufferGeometry",
          generator: "BufferGeometry.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "") data.name = this.name;
      if (Object.keys(this.userData).length > 0) data.userData = this.userData;
      if (this.parameters !== void 0) {
        const parameters = this.parameters;
        for (const key in parameters) {
          if (parameters[key] !== void 0) data[key] = parameters[key];
        }
        return data;
      }
      data.data = { attributes: {} };
      const index = this.index;
      if (index !== null) {
        data.data.index = {
          type: index.array.constructor.name,
          array: Array.prototype.slice.call(index.array)
        };
      }
      const attributes = this.attributes;
      for (const key in attributes) {
        const attribute = attributes[key];
        data.data.attributes[key] = attribute.toJSON(data.data);
      }
      const morphAttributes = {};
      let hasMorphAttributes = false;
      for (const key in this.morphAttributes) {
        const attributeArray = this.morphAttributes[key];
        const array = [];
        for (let i2 = 0, il = attributeArray.length; i2 < il; i2++) {
          const attribute = attributeArray[i2];
          array.push(attribute.toJSON(data.data));
        }
        if (array.length > 0) {
          morphAttributes[key] = array;
          hasMorphAttributes = true;
        }
      }
      if (hasMorphAttributes) {
        data.data.morphAttributes = morphAttributes;
        data.data.morphTargetsRelative = this.morphTargetsRelative;
      }
      const groups = this.groups;
      if (groups.length > 0) {
        data.data.groups = JSON.parse(JSON.stringify(groups));
      }
      const boundingSphere = this.boundingSphere;
      if (boundingSphere !== null) {
        data.data.boundingSphere = {
          center: boundingSphere.center.toArray(),
          radius: boundingSphere.radius
        };
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      const data = {};
      this.name = source.name;
      const index = source.index;
      if (index !== null) {
        this.setIndex(index.clone(data));
      }
      const attributes = source.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        this.setAttribute(name, attribute.clone(data));
      }
      const morphAttributes = source.morphAttributes;
      for (const name in morphAttributes) {
        const array = [];
        const morphAttribute = morphAttributes[name];
        for (let i2 = 0, l = morphAttribute.length; i2 < l; i2++) {
          array.push(morphAttribute[i2].clone(data));
        }
        this.morphAttributes[name] = array;
      }
      this.morphTargetsRelative = source.morphTargetsRelative;
      const groups = source.groups;
      for (let i2 = 0, l = groups.length; i2 < l; i2++) {
        const group = groups[i2];
        this.addGroup(group.start, group.count, group.materialIndex);
      }
      const boundingBox = source.boundingBox;
      if (boundingBox !== null) {
        this.boundingBox = boundingBox.clone();
      }
      const boundingSphere = source.boundingSphere;
      if (boundingSphere !== null) {
        this.boundingSphere = boundingSphere.clone();
      }
      this.drawRange.start = source.drawRange.start;
      this.drawRange.count = source.drawRange.count;
      this.userData = source.userData;
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  }
  const _inverseMatrix$3 = /* @__PURE__ */ new Matrix4();
  const _ray$3 = /* @__PURE__ */ new Ray();
  const _sphere$6 = /* @__PURE__ */ new Sphere();
  const _sphereHitAt = /* @__PURE__ */ new Vector3();
  const _vA$1 = /* @__PURE__ */ new Vector3();
  const _vB$1 = /* @__PURE__ */ new Vector3();
  const _vC$1 = /* @__PURE__ */ new Vector3();
  const _tempA = /* @__PURE__ */ new Vector3();
  const _morphA = /* @__PURE__ */ new Vector3();
  const _intersectionPoint = /* @__PURE__ */ new Vector3();
  const _intersectionPointWorld = /* @__PURE__ */ new Vector3();
  class Mesh extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
      super();
      this.isMesh = true;
      this.type = "Mesh";
      this.geometry = geometry;
      this.material = material;
      this.updateMorphTargets();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.morphTargetInfluences !== void 0) {
        this.morphTargetInfluences = source.morphTargetInfluences.slice();
      }
      if (source.morphTargetDictionary !== void 0) {
        this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
      }
      this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
      this.geometry = source.geometry;
      return this;
    }
    updateMorphTargets() {
      const geometry = this.geometry;
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
            const name = morphAttribute[m].name || String(m);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name] = m;
          }
        }
      }
    }
    getVertexPosition(index, target) {
      const geometry = this.geometry;
      const position = geometry.attributes.position;
      const morphPosition = geometry.morphAttributes.position;
      const morphTargetsRelative = geometry.morphTargetsRelative;
      target.fromBufferAttribute(position, index);
      const morphInfluences = this.morphTargetInfluences;
      if (morphPosition && morphInfluences) {
        _morphA.set(0, 0, 0);
        for (let i2 = 0, il = morphPosition.length; i2 < il; i2++) {
          const influence = morphInfluences[i2];
          const morphAttribute = morphPosition[i2];
          if (influence === 0) continue;
          _tempA.fromBufferAttribute(morphAttribute, index);
          if (morphTargetsRelative) {
            _morphA.addScaledVector(_tempA, influence);
          } else {
            _morphA.addScaledVector(_tempA.sub(target), influence);
          }
        }
        target.add(_morphA);
      }
      return target;
    }
    raycast(raycaster, intersects) {
      const geometry = this.geometry;
      const material = this.material;
      const matrixWorld = this.matrixWorld;
      if (material === void 0) return;
      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      _sphere$6.copy(geometry.boundingSphere);
      _sphere$6.applyMatrix4(matrixWorld);
      _ray$3.copy(raycaster.ray).recast(raycaster.near);
      if (_sphere$6.containsPoint(_ray$3.origin) === false) {
        if (_ray$3.intersectSphere(_sphere$6, _sphereHitAt) === null) return;
        if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;
      }
      _inverseMatrix$3.copy(matrixWorld).invert();
      _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);
      if (geometry.boundingBox !== null) {
        if (_ray$3.intersectsBox(geometry.boundingBox) === false) return;
      }
      this._computeIntersections(raycaster, intersects, _ray$3);
    }
    _computeIntersections(raycaster, intersects, rayLocalSpace) {
      let intersection;
      const geometry = this.geometry;
      const material = this.material;
      const index = geometry.index;
      const position = geometry.attributes.position;
      const uv = geometry.attributes.uv;
      const uv1 = geometry.attributes.uv1;
      const normal = geometry.attributes.normal;
      const groups = geometry.groups;
      const drawRange = geometry.drawRange;
      if (index !== null) {
        if (Array.isArray(material)) {
          for (let i2 = 0, il = groups.length; i2 < il; i2++) {
            const group = groups[i2];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = index.getX(j);
              const b = index.getX(j + 1);
              const c = index.getX(j + 2);
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i2 = start, il = end; i2 < il; i2 += 3) {
            const a = index.getX(i2);
            const b = index.getX(i2 + 1);
            const c = index.getX(i2 + 2);
            intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i2 / 3);
              intersects.push(intersection);
            }
          }
        }
      } else if (position !== void 0) {
        if (Array.isArray(material)) {
          for (let i2 = 0, il = groups.length; i2 < il; i2++) {
            const group = groups[i2];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = j;
              const b = j + 1;
              const c = j + 2;
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(position.count, drawRange.start + drawRange.count);
          for (let i2 = start, il = end; i2 < il; i2 += 3) {
            const a = i2;
            const b = i2 + 1;
            const c = i2 + 2;
            intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i2 / 3);
              intersects.push(intersection);
            }
          }
        }
      }
    }
  }
  function checkIntersection$1(object, material, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === BackSide) {
      intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    } else {
      intersect = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point);
    }
    if (intersect === null) return null;
    _intersectionPointWorld.copy(point);
    _intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far) return null;
    return {
      distance,
      point: _intersectionPointWorld.clone(),
      object
    };
  }
  function checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {
    object.getVertexPosition(a, _vA$1);
    object.getVertexPosition(b, _vB$1);
    object.getVertexPosition(c, _vC$1);
    const intersection = checkIntersection$1(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
    if (intersection) {
      const barycoord = new Vector3();
      Triangle.getBarycoord(_intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord);
      if (uv) {
        intersection.uv = Triangle.getInterpolatedAttribute(uv, a, b, c, barycoord, new Vector2());
      }
      if (uv1) {
        intersection.uv1 = Triangle.getInterpolatedAttribute(uv1, a, b, c, barycoord, new Vector2());
      }
      if (normal) {
        intersection.normal = Triangle.getInterpolatedAttribute(normal, a, b, c, barycoord, new Vector3());
        if (intersection.normal.dot(ray.direction) > 0) {
          intersection.normal.multiplyScalar(-1);
        }
      }
      const face = {
        a,
        b,
        c,
        normal: new Vector3(),
        materialIndex: 0
      };
      Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
      intersection.face = face;
      intersection.barycoord = barycoord;
    }
    return intersection;
  }
  function cloneUniforms(src) {
    const dst = {};
    for (const u in src) {
      dst[u] = {};
      for (const p in src[u]) {
        const property = src[u][p];
        if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
          if (property.isRenderTargetTexture) {
            console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
            dst[u][p] = null;
          } else {
            dst[u][p] = property.clone();
          }
        } else if (Array.isArray(property)) {
          dst[u][p] = property.slice();
        } else {
          dst[u][p] = property;
        }
      }
    }
    return dst;
  }
  function cloneUniformsGroups(src) {
    const dst = [];
    for (let u = 0; u < src.length; u++) {
      dst.push(src[u].clone());
    }
    return dst;
  }
  var default_vertex = "void main() {\\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}";
  var default_fragment = "void main() {\\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}";
  class ShaderMaterial extends Material {
    constructor(parameters) {
      super();
      this.isShaderMaterial = true;
      this.type = "ShaderMaterial";
      this.defines = {};
      this.uniforms = {};
      this.uniformsGroups = [];
      this.vertexShader = default_vertex;
      this.fragmentShader = default_fragment;
      this.linewidth = 1;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.fog = false;
      this.lights = false;
      this.clipping = false;
      this.forceSinglePass = true;
      this.extensions = {
        clipCullDistance: false,
        // set to use vertex shader clipping
        multiDraw: false
        // set to use vertex shader multi_draw / enable gl_DrawID
      };
      this.defaultAttributeValues = {
        "color": [1, 1, 1],
        "uv": [0, 0],
        "uv1": [0, 0]
      };
      this.index0AttributeName = void 0;
      this.uniformsNeedUpdate = false;
      this.glslVersion = null;
      if (parameters !== void 0) {
        this.setValues(parameters);
      }
    }
    copy(source) {
      super.copy(source);
      this.fragmentShader = source.fragmentShader;
      this.vertexShader = source.vertexShader;
      this.uniforms = cloneUniforms(source.uniforms);
      this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);
      this.defines = Object.assign({}, source.defines);
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.fog = source.fog;
      this.lights = source.lights;
      this.clipping = source.clipping;
      this.extensions = Object.assign({}, source.extensions);
      this.glslVersion = source.glslVersion;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.glslVersion = this.glslVersion;
      data.uniforms = {};
      for (const name in this.uniforms) {
        const uniform = this.uniforms[name];
        const value = uniform.value;
        if (value && value.isTexture) {
          data.uniforms[name] = {
            type: "t",
            value: value.toJSON(meta).uuid
          };
        } else if (value && value.isColor) {
          data.uniforms[name] = {
            type: "c",
            value: value.getHex()
          };
        } else if (value && value.isVector2) {
          data.uniforms[name] = {
            type: "v2",
            value: value.toArray()
          };
        } else if (value && value.isVector3) {
          data.uniforms[name] = {
            type: "v3",
            value: value.toArray()
          };
        } else if (value && value.isVector4) {
          data.uniforms[name] = {
            type: "v4",
            value: value.toArray()
          };
        } else if (value && value.isMatrix3) {
          data.uniforms[name] = {
            type: "m3",
            value: value.toArray()
          };
        } else if (value && value.isMatrix4) {
          data.uniforms[name] = {
            type: "m4",
            value: value.toArray()
          };
        } else {
          data.uniforms[name] = {
            value
          };
        }
      }
      if (Object.keys(this.defines).length > 0) data.defines = this.defines;
      data.vertexShader = this.vertexShader;
      data.fragmentShader = this.fragmentShader;
      data.lights = this.lights;
      data.clipping = this.clipping;
      const extensions = {};
      for (const key in this.extensions) {
        if (this.extensions[key] === true) extensions[key] = true;
      }
      if (Object.keys(extensions).length > 0) data.extensions = extensions;
      return data;
    }
  }
  class Camera extends Object3D {
    constructor() {
      super();
      this.isCamera = true;
      this.type = "Camera";
      this.matrixWorldInverse = new Matrix4();
      this.projectionMatrix = new Matrix4();
      this.projectionMatrixInverse = new Matrix4();
      this.coordinateSystem = WebGLCoordinateSystem;
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.matrixWorldInverse.copy(source.matrixWorldInverse);
      this.projectionMatrix.copy(source.projectionMatrix);
      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
      this.coordinateSystem = source.coordinateSystem;
      return this;
    }
    getWorldDirection(target) {
      return super.getWorldDirection(target).negate();
    }
    updateMatrixWorld(force) {
      super.updateMatrixWorld(force);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(updateParents, updateChildren) {
      super.updateWorldMatrix(updateParents, updateChildren);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
      return new this.constructor().copy(this);
    }
  }
  class Scene extends Object3D {
    constructor() {
      super();
      this.isScene = true;
      this.type = "Scene";
      this.background = null;
      this.environment = null;
      this.fog = null;
      this.backgroundBlurriness = 0;
      this.backgroundIntensity = 1;
      this.backgroundRotation = new Euler();
      this.environmentIntensity = 1;
      this.environmentRotation = new Euler();
      this.overrideMaterial = null;
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
      }
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.background !== null) this.background = source.background.clone();
      if (source.environment !== null) this.environment = source.environment.clone();
      if (source.fog !== null) this.fog = source.fog.clone();
      this.backgroundBlurriness = source.backgroundBlurriness;
      this.backgroundIntensity = source.backgroundIntensity;
      this.backgroundRotation.copy(source.backgroundRotation);
      this.environmentIntensity = source.environmentIntensity;
      this.environmentRotation.copy(source.environmentRotation);
      if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      if (this.fog !== null) data.object.fog = this.fog.toJSON();
      if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;
      if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;
      data.object.backgroundRotation = this.backgroundRotation.toArray();
      if (this.environmentIntensity !== 1) data.object.environmentIntensity = this.environmentIntensity;
      data.object.environmentRotation = this.environmentRotation.toArray();
      return data;
    }
  }
  class DataTexture extends Texture {
    constructor(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace) {
      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);
      this.isDataTexture = true;
      this.image = { data, width, height };
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
    }
  }
  class PlaneGeometry extends BufferGeometry {
    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
      super();
      this.type = "PlaneGeometry";
      this.parameters = {
        width,
        height,
        widthSegments,
        heightSegments
      };
      const width_half = width / 2;
      const height_half = height / 2;
      const gridX = Math.floor(widthSegments);
      const gridY = Math.floor(heightSegments);
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      const segment_width = width / gridX;
      const segment_height = height / gridY;
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      for (let iy = 0; iy < gridY1; iy++) {
        const y = iy * segment_height - height_half;
        for (let ix = 0; ix < gridX1; ix++) {
          const x2 = ix * segment_width - width_half;
          vertices.push(x2, -y, 0);
          normals.push(0, 0, 1);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a = ix + gridX1 * iy;
          const b = ix + gridX1 * (iy + 1);
          const c = ix + 1 + gridX1 * (iy + 1);
          const d = ix + 1 + gridX1 * iy;
          indices.push(a, b, d);
          indices.push(b, c, d);
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    static fromJSON(data) {
      return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
    }
  }
  class RawShaderMaterial extends ShaderMaterial {
    constructor(parameters) {
      super(parameters);
      this.isRawShaderMaterial = true;
      this.type = "RawShaderMaterial";
    }
  }
  class Matrix2 {
    constructor(n11, n12, n21, n22) {
      Matrix2.prototype.isMatrix2 = true;
      this.elements = [
        1,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n21, n22);
      }
    }
    identity() {
      this.set(
        1,
        0,
        0,
        1
      );
      return this;
    }
    fromArray(array, offset = 0) {
      for (let i2 = 0; i2 < 4; i2++) {
        this.elements[i2] = array[i2 + offset];
      }
      return this;
    }
    set(n11, n12, n21, n22) {
      const te = this.elements;
      te[0] = n11;
      te[2] = n12;
      te[1] = n21;
      te[3] = n22;
      return this;
    }
  }
  if (typeof __THREE_DEVTOOLS__ !== "undefined") {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
      revision: REVISION
    } }));
  }
  if (typeof window !== "undefined") {
    if (window.__THREE__) {
      console.warn("WARNING: Multiple instances of Three.js being imported.");
    } else {
      window.__THREE__ = REVISION;
    }
  }
  const LN_SCALE_MIN = -9;
  const LN_SCALE_MAX = 9;
  const LN_RESCALE = (LN_SCALE_MAX - LN_SCALE_MIN) / 254;
  const SCALE_MIN = Math.exp(LN_SCALE_MIN);
  const SPLAT_TEX_WIDTH_BITS = 11;
  const SPLAT_TEX_HEIGHT_BITS = 11;
  const SPLAT_TEX_WIDTH = 1 << SPLAT_TEX_WIDTH_BITS;
  const SPLAT_TEX_HEIGHT = 1 << SPLAT_TEX_HEIGHT_BITS;
  const SPLAT_TEX_MIN_HEIGHT = 1;
  const WASM_SPLAT_SORT = true;
  function isIntType(type) {
    return type === "int" || type === "ivec2" || type === "ivec3" || type === "ivec4";
  }
  function isUintType(type) {
    return type === "uint" || type === "uvec2" || type === "uvec3" || type === "uvec4";
  }
  function isFloatType(type) {
    return type === "float" || type === "vec2" || type === "vec3" || type === "vec4";
  }
  function isMatFloatType(type) {
    return type === "mat2" || type === "mat2x2" || type === "mat2x3" || type === "mat2x4" || type === "mat3" || type === "mat3x2" || type === "mat3x3" || type === "mat3x4" || type === "mat4" || type === "mat4x2" || type === "mat4x3" || type === "mat4x4";
  }
  function isAllFloatType(type) {
    return isFloatType(type) || isMatFloatType(type);
  }
  function isMat2(type) {
    return type === "mat2" || type === "mat2x2";
  }
  function isMat3(type) {
    return type === "mat3" || type === "mat3x3";
  }
  function isMat4(type) {
    return type === "mat4" || type === "mat4x4";
  }
  function numberAsInt(value) {
    return Math.trunc(value).toString();
  }
  function numberAsUint(value) {
    const v = Math.max(0, Math.trunc(value));
    return \`\${v.toString()}u\`;
  }
  function numberAsFloat(value) {
    return value === Number.POSITIVE_INFINITY ? "INFINITY" : value === Number.NEGATIVE_INFINITY ? "-INFINITY" : Number.isInteger(value) ? value.toFixed(1) : value.toString();
  }
  function valType(val) {
    if (val instanceof DynoValue) {
      return val.type;
    }
    const value = val.dynoOut();
    return value.type;
  }
  class DynoValue {
    constructor(type) {
      this.__isDynoValue = true;
      this.type = type;
    }
  }
  class DynoOutput extends DynoValue {
    constructor(dyno2, key) {
      super(dyno2.outTypes[key]);
      this.dyno = dyno2;
      this.key = key;
    }
  }
  class DynoLiteral extends DynoValue {
    constructor(type, literal) {
      super(type);
      this.literal = literal;
    }
    getLiteral() {
      return this.literal;
    }
  }
  class DynoConst extends DynoLiteral {
    constructor(type, value) {
      super(type, "");
      this.value = value;
    }
    getLiteral() {
      const { type, value } = this;
      switch (type) {
        case "bool":
          return value ? "true" : "false";
        case "uint":
          return numberAsUint(value);
        case "int":
          return numberAsInt(value);
        case "float":
          return numberAsFloat(value);
        case "bvec2": {
          const v = value;
          return \`bvec2(\${v[0]}, \${v[1]})\`;
        }
        case "uvec2": {
          if (value instanceof Vector2) {
            return \`uvec2(\${numberAsUint(value.x)}, \${numberAsUint(value.y)})\`;
          }
          const v = value;
          return \`uvec2(\${numberAsUint(v[0])}, \${numberAsUint(v[1])})\`;
        }
        case "ivec2": {
          if (value instanceof Vector2) {
            return \`ivec2(\${numberAsInt(value.x)}, \${numberAsInt(value.y)})\`;
          }
          const v = value;
          return \`ivec2(\${numberAsInt(v[0])}, \${numberAsInt(v[1])})\`;
        }
        case "vec2": {
          if (value instanceof Vector2) {
            return \`vec2(\${numberAsFloat(value.x)}, \${numberAsFloat(value.y)})\`;
          }
          const v = value;
          return \`vec2(\${numberAsFloat(v[0])}, \${numberAsFloat(v[1])})\`;
        }
        case "bvec3": {
          const v = value;
          return \`bvec3(\${v[0]}, \${v[1]}, \${v[2]})\`;
        }
        case "uvec3": {
          if (value instanceof Vector3) {
            return \`uvec3(\${numberAsUint(value.x)}, \${numberAsUint(value.y)}, \${numberAsUint(value.z)})\`;
          }
          const v = value;
          return \`uvec3(\${numberAsUint(v[0])}, \${numberAsUint(v[1])}, \${numberAsUint(v[2])})\`;
        }
        case "ivec3": {
          if (value instanceof Vector3) {
            return \`ivec3(\${numberAsInt(value.x)}, \${numberAsInt(value.y)}, \${numberAsInt(value.z)})\`;
          }
          const v = value;
          return \`ivec3(\${numberAsInt(v[0])}, \${numberAsInt(v[1])}, \${numberAsInt(v[2])})\`;
        }
        case "vec3": {
          if (value instanceof Vector3) {
            return \`vec3(\${numberAsFloat(value.x)}, \${numberAsFloat(value.y)}, \${numberAsFloat(value.z)})\`;
          }
          const v = value;
          return \`vec3(\${numberAsFloat(v[0])}, \${numberAsFloat(v[1])}, \${numberAsFloat(v[2])})\`;
        }
        case "bvec4": {
          const v = value;
          return \`bvec4(\${v[0]}, \${v[1]}, \${v[2]}, \${v[3]})\`;
        }
        case "uvec4": {
          if (value instanceof Vector4) {
            return \`uvec4(\${numberAsUint(value.x)}, \${numberAsUint(value.y)}, \${numberAsUint(value.z)}, \${numberAsUint(value.w)})\`;
          }
          const v = value;
          return \`uvec4(\${numberAsUint(v[0])}, \${numberAsUint(v[1])}, \${numberAsUint(v[2])}, \${numberAsUint(v[3])})\`;
        }
        case "ivec4": {
          if (value instanceof Vector4) {
            return \`ivec4(\${numberAsInt(value.x)}, \${numberAsInt(value.y)}, \${numberAsInt(value.z)}, \${numberAsInt(value.w)})\`;
          }
          const v = value;
          return \`ivec4(\${numberAsInt(v[0])}, \${numberAsInt(v[1])}, \${numberAsInt(v[2])}, \${numberAsInt(v[3])})\`;
        }
        case "vec4": {
          if (value instanceof Vector4) {
            return \`vec4(\${numberAsFloat(value.x)}, \${numberAsFloat(value.y)}, \${numberAsFloat(value.z)}, \${numberAsFloat(value.w)})\`;
          }
          if (value instanceof Quaternion) {
            return \`vec4(\${numberAsFloat(value.x)}, \${numberAsFloat(value.y)}, \${numberAsFloat(value.z)}, \${numberAsFloat(value.w)})\`;
          }
          const v = value;
          return \`vec4(\${numberAsFloat(v[0])}, \${numberAsFloat(v[1])}, \${numberAsFloat(v[2])}, \${numberAsFloat(v[3])})\`;
        }
        case "mat2":
        case "mat2x2": {
          const m = value;
          const e = m instanceof Matrix2 ? m.elements : value;
          const arg = new Array(4).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat2x3": {
          const e = value;
          const arg = new Array(6).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat2x4": {
          const e = value;
          const arg = new Array(8).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat3":
        case "mat3x3": {
          const m = value;
          const e = m instanceof Matrix3 ? m.elements : value;
          const arg = new Array(9).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat3x2": {
          const e = value;
          const arg = new Array(6).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat3x4": {
          const e = value;
          const arg = new Array(12).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat4":
        case "mat4x4": {
          const m = value;
          const e = m instanceof Matrix4 ? m.elements : value;
          const arg = new Array(16).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat4x2": {
          const e = value;
          const arg = new Array(8).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        case "mat4x3": {
          const e = value;
          const arg = new Array(12).fill(0).map((_, i2) => numberAsFloat(e[i2]));
          return \`\${type}(\${arg.join(", ")})\`;
        }
        default:
          throw new Error(\`Type not implemented: \${String(type)}\`);
      }
    }
  }
  function dynoConst(type, value) {
    return new DynoConst(type, value);
  }
  const DEFAULT_INDENT = "    ";
  class Compilation {
    constructor({ indent } = {}) {
      this.globals = /* @__PURE__ */ new Set();
      this.statements = [];
      this.uniforms = {};
      this.declares = /* @__PURE__ */ new Set();
      this.updaters = [];
      this.sequence = 0;
      this.indent = DEFAULT_INDENT;
      this.indent = indent ?? DEFAULT_INDENT;
    }
    nextSequence() {
      return this.sequence++;
    }
  }
  class Dyno {
    constructor({
      inTypes,
      outTypes,
      inputs,
      update,
      globals,
      statements,
      generate
    }) {
      this.inTypes = inTypes ?? {};
      this.outTypes = outTypes ?? {};
      this.inputs = inputs ?? {};
      this.update = update;
      this.globals = globals;
      this.statements = statements;
      this.generate = generate ?? (({ inputs: inputs2, outputs, compile }) => {
        var _a2, _b2;
        return {
          globals: (_a2 = this.globals) == null ? void 0 : _a2.call(this, { inputs: inputs2, outputs, compile }),
          statements: (_b2 = this.statements) == null ? void 0 : _b2.call(this, { inputs: inputs2, outputs, compile })
        };
      });
    }
    get outputs() {
      const outputs = {};
      for (const key in this.outTypes) {
        outputs[key] = new DynoOutput(this, key);
      }
      return outputs;
    }
    apply(inputs) {
      Object.assign(this.inputs, inputs);
      return this.outputs;
    }
    compile({
      inputs,
      outputs,
      compile
    }) {
      const result = [
        \`// \${this.constructor.name}(\${Object.values(inputs).join(", ")}) => (\${Object.values(outputs).join(", ")})\`
      ];
      const declares = [];
      for (const key in outputs) {
        const name = outputs[key];
        if (name && !compile.declares.has(name)) {
          compile.declares.add(name);
          declares.push(key);
        }
      }
      const { globals, statements, uniforms } = this.generate({
        inputs,
        outputs,
        compile
      });
      for (const global of globals ?? []) {
        compile.globals.add(global);
      }
      for (const key in uniforms) {
        compile.uniforms[key] = uniforms[key];
      }
      if (this.update) {
        compile.updaters.push(this.update);
      }
      for (const key of declares) {
        const name = outputs[key];
        if (name) {
          if (!compile.uniforms[name]) {
            result.push(\`\${dynoDeclare(name, this.outTypes[key])};\`);
          }
        }
      }
      if (statements == null ? void 0 : statements.length) {
        result.push("{");
        result.push(...statements.map((line) => compile.indent + line));
        result.push("}");
      }
      return result;
    }
  }
  class DynoBlock extends Dyno {
    constructor({
      inTypes,
      outTypes,
      inputs,
      update,
      globals,
      construct
    }) {
      super({
        inTypes,
        outTypes,
        inputs,
        update,
        globals,
        generate: (args) => this.generateBlock(args)
      });
      this.construct = construct;
    }
    generateBlock({
      inputs,
      outputs,
      compile
    }) {
      var _a2, _b2;
      const blockInputs = {};
      const blockOutputs = {};
      for (const key in inputs) {
        if (inputs[key] != null) {
          blockInputs[key] = new DynoLiteral(this.inTypes[key], inputs[key]);
        }
      }
      for (const key in outputs) {
        if (outputs[key] != null) {
          blockOutputs[key] = new DynoValue(this.outTypes[key]);
        }
      }
      const options = { roots: [] };
      const returned = this.construct(blockInputs, blockOutputs, options);
      for (const global of ((_a2 = this.globals) == null ? void 0 : _a2.call(this, { inputs, outputs, compile })) ?? []) {
        compile.globals.add(global);
      }
      const ordering = [];
      const nodeOuts = /* @__PURE__ */ new Map();
      function visit(node, outKey, outName) {
        let outs = nodeOuts.get(node);
        if (!outs) {
          outs = {
            sequence: compile.nextSequence(),
            outNames: /* @__PURE__ */ new Map(),
            newOuts: /* @__PURE__ */ new Set()
          };
          nodeOuts.set(node, outs);
          for (const key in node.inputs) {
            let input = node.inputs[key];
            while (input) {
              if (input instanceof DynoValue) {
                if (input instanceof DynoOutput) {
                  visit(input.dyno, input.key);
                }
                break;
              }
              input = input.dynoOut();
            }
          }
          ordering.push(node);
        }
        if (outKey) {
          if (!outName) {
            outs.newOuts.add(outKey);
          }
          outs.outNames.set(outKey, outName ?? \`\${outKey}_\${outs.sequence}\`);
        }
      }
      for (const root of options.roots) {
        visit(root);
      }
      for (const key in blockOutputs) {
        let value = (returned == null ? void 0 : returned[key]) ?? blockOutputs[key];
        while (value) {
          if (value instanceof DynoValue) {
            if (value instanceof DynoOutput) {
              visit(value.dyno, value.key, outputs[key]);
            }
            break;
          }
          value = value.dynoOut();
        }
        blockOutputs[key] = value;
      }
      const steps = [];
      for (const dyno2 of ordering) {
        const inputs2 = {};
        const outputs2 = {};
        for (const key in dyno2.inputs) {
          let value = dyno2.inputs[key];
          while (value) {
            if (value instanceof DynoValue) {
              if (value instanceof DynoLiteral) {
                inputs2[key] = value.getLiteral();
              } else if (value instanceof DynoOutput) {
                const source = (_b2 = nodeOuts.get(value.dyno)) == null ? void 0 : _b2.outNames.get(value.key);
                if (!source) {
                  throw new Error(
                    \`Source not found for \${value.dyno.constructor.name}.\${value.key}\`
                  );
                }
                inputs2[key] = source;
              }
              break;
            }
            value = value.dynoOut();
          }
        }
        const outs = nodeOuts.get(dyno2) ?? { outNames: /* @__PURE__ */ new Map() };
        for (const [key, name] of outs.outNames.entries()) {
          outputs2[key] = name;
        }
        const newSteps = dyno2.compile({ inputs: inputs2, outputs: outputs2, compile });
        steps.push(newSteps);
      }
      const literalOutputs = [];
      for (const key in outputs) {
        if (blockOutputs[key] instanceof DynoLiteral) {
          literalOutputs.push(
            \`\${outputs[key]} = \${blockOutputs[key].getLiteral()};\`
          );
        }
      }
      if (literalOutputs.length > 0) {
        steps.push(literalOutputs);
      }
      const statements = steps.flatMap((step, index) => {
        return index === 0 ? step : ["", ...step];
      });
      return { statements };
    }
  }
  function dynoBlock(inTypes, outTypes, construct, { update, globals } = {}) {
    return new DynoBlock({ inTypes, outTypes, construct, update, globals });
  }
  function dyno({
    inTypes,
    outTypes,
    inputs,
    update,
    globals,
    statements,
    generate
  }) {
    return new Dyno({
      inTypes,
      outTypes,
      inputs,
      update,
      globals,
      statements,
      generate
    });
  }
  function dynoDeclare(name, type, count) {
    const typeStr = typeof type === "string" ? type : type.type;
    if (!typeStr) {
      throw new Error(\`Invalid DynoType: \${String(type)}\`);
    }
    return \`\${typeStr} \${name}\${count != null ? \`[\${count}]\` : ""}\`;
  }
  function unindentLines(s) {
    var _a2;
    let seenNonEmpty = false;
    const lines = s.split("\\n").map((line) => {
      const trimmedLine = line.trimEnd();
      if (seenNonEmpty) {
        return trimmedLine;
      }
      if (trimmedLine.length > 0) {
        seenNonEmpty = true;
        return trimmedLine;
      }
      return null;
    }).filter((line) => line != null);
    while (lines.length > 0 && lines[lines.length - 1].length === 0) {
      lines.pop();
    }
    if (lines.length === 0) {
      return [];
    }
    const indent = (_a2 = lines[0].match(/^\\s*/)) == null ? void 0 : _a2[0];
    if (!indent) {
      return lines;
    }
    const regex = new RegExp(\`^\${indent}\`);
    return lines.map((line) => line.replace(regex, ""));
  }
  function unindent(s) {
    return unindentLines(s).join("\\n");
  }
  class UnaryOp extends Dyno {
    constructor({
      a,
      outKey,
      outTypeFunc
    }) {
      const inTypes = { a: valType(a) };
      const outType = outTypeFunc(valType(a));
      const outTypes = { [outKey]: outType };
      super({ inTypes, outTypes, inputs: { a } });
      this.outKey = outKey;
    }
    dynoOut() {
      return new DynoOutput(this, this.outKey);
    }
  }
  class BinaryOp extends Dyno {
    constructor({
      a,
      b,
      outKey,
      outTypeFunc
    }) {
      const inTypes = { a: valType(a), b: valType(b) };
      const outType = outTypeFunc(valType(a), valType(b));
      const outTypes = { [outKey]: outType };
      super({ inTypes, outTypes, inputs: { a, b } });
      this.outKey = outKey;
    }
    dynoOut() {
      return new DynoOutput(this, this.outKey);
    }
  }
  const f32buffer = new Float32Array(1);
  const u32buffer = new Uint32Array(f32buffer.buffer);
  function toHalf(f) {
    f32buffer[0] = f;
    const bits2 = u32buffer[0];
    const sign = bits2 >> 31 & 1;
    const exp = bits2 >> 23 & 255;
    const frac = bits2 & 8388607;
    const halfSign = sign << 15;
    if (exp === 255) {
      if (frac !== 0) {
        return halfSign | 32767;
      }
      return halfSign | 31744;
    }
    const newExp = exp - 127 + 15;
    if (newExp >= 31) {
      return halfSign | 31744;
    }
    if (newExp <= 0) {
      if (newExp < -10) {
        return halfSign;
      }
      const subFrac = (frac | 8388608) >> 1 - newExp + 13;
      return halfSign | subFrac;
    }
    const halfFrac = frac >> 13;
    return halfSign | newExp << 10 | halfFrac;
  }
  function fromHalf(h) {
    const sign = h >> 15 & 1;
    const exp = h >> 10 & 31;
    const frac = h & 1023;
    let f32bits;
    if (exp === 0) {
      if (frac === 0) {
        f32bits = sign << 31;
      } else {
        let mant = frac;
        let e = -14;
        while ((mant & 1024) === 0) {
          mant <<= 1;
          e--;
        }
        mant &= 1023;
        const newExp = e + 127;
        const newFrac = mant << 13;
        f32bits = sign << 31 | newExp << 23 | newFrac;
      }
    } else if (exp === 31) {
      if (frac === 0) {
        f32bits = sign << 31 | 2139095040;
      } else {
        f32bits = sign << 31 | 2143289344;
      }
    } else {
      const newExp = exp - 15 + 127;
      const newFrac = frac << 13;
      f32bits = sign << 31 | newExp << 23 | newFrac;
    }
    u32buffer[0] = f32bits;
    return f32buffer[0];
  }
  function floatToUint8(v) {
    return Math.max(0, Math.min(255, Math.round(v * 255)));
  }
  function getArrayBuffers(ctx) {
    const buffers = [];
    const seen = /* @__PURE__ */ new Set();
    function traverse(obj) {
      if (obj && typeof obj === "object" && !seen.has(obj)) {
        seen.add(obj);
        if (obj instanceof ArrayBuffer) {
          buffers.push(obj);
        } else if (ArrayBuffer.isView(obj)) {
          buffers.push(obj.buffer);
        } else if (Array.isArray(obj)) {
          obj.forEach(traverse);
        } else {
          Object.values(obj).forEach(traverse);
        }
      }
    }
    traverse(ctx);
    return buffers;
  }
  function setPackedSplat(packedSplats, index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) {
    const uR = floatToUint8(r);
    const uG = floatToUint8(g);
    const uB = floatToUint8(b);
    const uA = floatToUint8(opacity);
    const uQuat = encodeQuatOctXy88R8(
      new Quaternion(quatX, quatY, quatZ, quatW)
    );
    const uQuatX = uQuat & 255;
    const uQuatY = uQuat >>> 8 & 255;
    const uQuatZ = uQuat >>> 16 & 255;
    const uScaleX = scaleX === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleX) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uScaleY = scaleY === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleY) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uScaleZ = scaleZ === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleZ) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uCenterX = toHalf(x2);
    const uCenterY = toHalf(y);
    const uCenterZ = toHalf(z);
    const i4 = index * 4;
    packedSplats[i4] = uR | uG << 8 | uB << 16 | uA << 24;
    packedSplats[i4 + 1] = uCenterX | uCenterY << 16;
    packedSplats[i4 + 2] = uCenterZ | uQuatX << 16 | uQuatY << 24;
    packedSplats[i4 + 3] = uScaleX | uScaleY << 8 | uScaleZ << 16 | uQuatZ << 24;
  }
  function setPackedSplatCenter(packedSplats, index, x2, y, z) {
    const uCenterX = toHalf(x2);
    const uCenterY = toHalf(y);
    const uCenterZ = toHalf(z);
    const i4 = index * 4;
    packedSplats[i4 + 1] = uCenterX | uCenterY << 16;
    packedSplats[i4 + 2] = uCenterZ | packedSplats[i4 + 2] & 4294901760;
  }
  function setPackedSplatScales(packedSplats, index, scaleX, scaleY, scaleZ) {
    const uScaleX = scaleX === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleX) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uScaleY = scaleY === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleY) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const uScaleZ = scaleZ === 0 ? 0 : Math.min(
      255,
      Math.max(
        0,
        Math.round((Math.log(scaleZ) - LN_SCALE_MIN) / LN_RESCALE) + 1
      )
    );
    const i4 = index * 4;
    packedSplats[i4 + 3] = uScaleX | uScaleY << 8 | uScaleZ << 16 | packedSplats[i4 + 3] & 4278190080;
  }
  function setPackedSplatQuat(packedSplats, index, quatX, quatY, quatZ, quatW) {
    const uQuat = encodeQuatOctXy88R8(
      new Quaternion(quatX, quatY, quatZ, quatW)
    );
    const uQuatX = uQuat & 255;
    const uQuatY = uQuat >>> 8 & 255;
    const uQuatZ = uQuat >>> 16 & 255;
    const i4 = index * 4;
    packedSplats[i4 + 2] = packedSplats[i4 + 2] & 65535 | uQuatX << 16 | uQuatY << 24;
    packedSplats[i4 + 3] = packedSplats[i4 + 3] & 16777215 | uQuatZ << 24;
  }
  function setPackedSplatRgb(packedSplats, index, r, g, b) {
    const uR = floatToUint8(r);
    const uG = floatToUint8(g);
    const uB = floatToUint8(b);
    const i4 = index * 4;
    packedSplats[i4] = uR | uG << 8 | uB << 16 | packedSplats[i4] & 4278190080;
  }
  function setPackedSplatOpacity(packedSplats, index, opacity) {
    const uA = floatToUint8(opacity);
    const i4 = index * 4;
    packedSplats[i4] = packedSplats[i4] & 16777215 | uA << 24;
  }
  const packedCenter = new Vector3();
  const packedScales = new Vector3();
  const packedQuaternion = new Quaternion();
  const packedColor = new Color();
  const packedFields = {
    center: packedCenter,
    scales: packedScales,
    quaternion: packedQuaternion,
    color: packedColor,
    opacity: 0
  };
  function unpackSplat(packedSplats, index) {
    const result = packedFields;
    const i4 = index * 4;
    const word0 = packedSplats[i4];
    const word1 = packedSplats[i4 + 1];
    const word2 = packedSplats[i4 + 2];
    const word3 = packedSplats[i4 + 3];
    result.color.set(
      (word0 & 255) / 255,
      (word0 >>> 8 & 255) / 255,
      (word0 >>> 16 & 255) / 255
    );
    result.opacity = (word0 >>> 24 & 255) / 255;
    result.center.set(
      fromHalf(word1 & 65535),
      fromHalf(word1 >>> 16 & 65535),
      fromHalf(word2 & 65535)
    );
    const uScalesX = word3 & 255;
    result.scales.x = uScalesX === 0 ? 0 : Math.exp(LN_SCALE_MIN + (uScalesX - 1) * LN_RESCALE);
    const uScalesY = word3 >>> 8 & 255;
    result.scales.y = uScalesY === 0 ? 0 : Math.exp(LN_SCALE_MIN + (uScalesY - 1) * LN_RESCALE);
    const uScalesZ = word3 >>> 16 & 255;
    result.scales.z = uScalesZ === 0 ? 0 : Math.exp(LN_SCALE_MIN + (uScalesZ - 1) * LN_RESCALE);
    const uQuat = word2 >>> 16 & 65535 | word3 >>> 8 & 16711680;
    decodeQuatOctXy88R8(uQuat, result.quaternion);
    return result;
  }
  function getTextureSize(numSplats) {
    const width = SPLAT_TEX_WIDTH;
    const height = Math.max(
      SPLAT_TEX_MIN_HEIGHT,
      Math.min(SPLAT_TEX_HEIGHT, Math.ceil(numSplats / width))
    );
    const depth = Math.ceil(numSplats / (width * height));
    const maxSplats = width * height * depth;
    return { width, height, depth, maxSplats };
  }
  function computeMaxSplats(numSplats) {
    const width = SPLAT_TEX_WIDTH;
    const height = Math.max(
      SPLAT_TEX_MIN_HEIGHT,
      Math.min(SPLAT_TEX_HEIGHT, Math.ceil(numSplats / width))
    );
    const depth = Math.ceil(numSplats / (width * height));
    return width * height * depth;
  }
  const IDENT_VERTEX_SHADER = unindent(\`
  precision highp float;

  in vec3 position;

  void main() {
    gl_Position = vec4(position.xy, 0.0, 1.0);
  }
\`);
  function encodeQuatOctXy88R8(q) {
    const qnorm = q.clone().normalize();
    if (qnorm.w < 0) {
      qnorm.set(-qnorm.x, -qnorm.y, -qnorm.z, -qnorm.w);
    }
    const theta = 2 * Math.acos(qnorm.w);
    const xyz_norm = Math.sqrt(
      qnorm.x * qnorm.x + qnorm.y * qnorm.y + qnorm.z * qnorm.z
    );
    const axis = xyz_norm < 1e-6 ? new Vector3(1, 0, 0) : new Vector3(qnorm.x, qnorm.y, qnorm.z).divideScalar(xyz_norm);
    const sum = Math.abs(axis.x) + Math.abs(axis.y) + Math.abs(axis.z);
    let p_x = axis.x / sum;
    let p_y = axis.y / sum;
    if (axis.z < 0) {
      const tmp = p_x;
      p_x = (1 - Math.abs(p_y)) * (p_x >= 0 ? 1 : -1);
      p_y = (1 - Math.abs(tmp)) * (p_y >= 0 ? 1 : -1);
    }
    const u_f = p_x * 0.5 + 0.5;
    const v_f = p_y * 0.5 + 0.5;
    const quantU = Math.round(u_f * 255);
    const quantV = Math.round(v_f * 255);
    const angleInt = Math.round(theta * (255 / Math.PI));
    return angleInt << 16 | quantV << 8 | quantU;
  }
  function decodeQuatOctXy88R8(encoded, out) {
    const quantU = encoded & 255;
    const quantV = encoded >>> 8 & 255;
    const angleInt = encoded >>> 16 & 255;
    const u_f = quantU / 255;
    const v_f = quantV / 255;
    let f_x = (u_f - 0.5) * 2;
    let f_y = (v_f - 0.5) * 2;
    const f_z = 1 - (Math.abs(f_x) + Math.abs(f_y));
    const t = Math.max(-f_z, 0);
    f_x += f_x >= 0 ? -t : t;
    f_y += f_y >= 0 ? -t : t;
    const axis = new Vector3(f_x, f_y, f_z).normalize();
    const theta = angleInt / 255 * Math.PI;
    const halfTheta = theta * 0.5;
    const s = Math.sin(halfTheta);
    const w = Math.cos(halfTheta);
    out.set(axis.x * s, axis.y * s, axis.z * s, w);
    return out;
  }
  function packSint8Bytes(b0, b1, b2, b3) {
    const clampedB0 = Math.max(-127, Math.min(127, b0 * 127));
    const clampedB1 = Math.max(-127, Math.min(127, b1 * 127));
    const clampedB2 = Math.max(-127, Math.min(127, b2 * 127));
    const clampedB3 = Math.max(-127, Math.min(127, b3 * 127));
    return clampedB0 & 255 | (clampedB1 & 255) << 8 | (clampedB2 & 255) << 16 | (clampedB3 & 255) << 24;
  }
  function encodeSh1Rgb(sh1Array, index, sh1Rgb) {
    const base = index * 2;
    for (let i2 = 0; i2 < 9; ++i2) {
      const value = Math.max(-63, Math.min(63, sh1Rgb[i2] * 63)) & 127;
      const bitStart = i2 * 7;
      const bitEnd = bitStart + 7;
      const wordStart = Math.floor(bitStart / 32);
      const bitOffset = bitStart - wordStart * 32;
      const firstWord = value << bitOffset & 4294967295;
      sh1Array[base + wordStart] |= firstWord;
      if (bitEnd > wordStart * 32 + 32) {
        const secondWord = value >>> 32 - bitOffset & 4294967295;
        sh1Array[base + wordStart + 1] |= secondWord;
      }
    }
  }
  function encodeSh2Rgb(sh2Array, index, sh2Rgb) {
    sh2Array[index * 4 + 0] = packSint8Bytes(
      sh2Rgb[0],
      sh2Rgb[1],
      sh2Rgb[2],
      sh2Rgb[3]
    );
    sh2Array[index * 4 + 1] = packSint8Bytes(
      sh2Rgb[4],
      sh2Rgb[5],
      sh2Rgb[6],
      sh2Rgb[7]
    );
    sh2Array[index * 4 + 2] = packSint8Bytes(
      sh2Rgb[8],
      sh2Rgb[9],
      sh2Rgb[10],
      sh2Rgb[11]
    );
    sh2Array[index * 4 + 3] = packSint8Bytes(
      sh2Rgb[12],
      sh2Rgb[13],
      sh2Rgb[14],
      0
    );
  }
  function encodeSh3Rgb(sh3Array, index, sh3Rgb) {
    const base = index * 4;
    for (let i2 = 0; i2 < 21; ++i2) {
      const value = Math.max(-31, Math.min(31, sh3Rgb[i2] * 31)) & 63;
      const bitStart = i2 * 6;
      const bitEnd = bitStart + 6;
      const wordStart = Math.floor(bitStart / 32);
      const bitOffset = bitStart - wordStart * 32;
      const firstWord = value << bitOffset & 4294967295;
      sh3Array[base + wordStart] |= firstWord;
      if (bitEnd > wordStart * 32 + 32) {
        const secondWord = value >>> 32 - bitOffset & 4294967295;
        sh3Array[base + wordStart + 1] |= secondWord;
      }
    }
  }
  function decompressPartialGzip(fileBytes, numBytes) {
    const chunks = [];
    let totalBytes = 0;
    let result = null;
    const gunzip = new Gunzip((data, final) => {
      chunks.push(data);
      totalBytes += data.length;
      if (final || totalBytes >= numBytes) {
        const allBytes = new Uint8Array(totalBytes);
        let offset2 = 0;
        for (const chunk of chunks) {
          allBytes.set(chunk, offset2);
          offset2 += chunk.length;
        }
        result = allBytes.slice(0, numBytes);
      }
    });
    const CHUNK_SIZE = 1024;
    let offset = 0;
    while (result == null && offset < fileBytes.length) {
      const chunk = fileBytes.slice(offset, offset + CHUNK_SIZE);
      gunzip.push(chunk, false);
      offset += CHUNK_SIZE;
    }
    if (result == null) {
      gunzip.push(new Uint8Array(), true);
      if (result == null) {
        throw new Error("Failed to decompress partial gzip");
      }
    }
    return result;
  }
  class GunzipReader {
    constructor({
      fileBytes,
      chunkBytes = 64 * 1024
    }) {
      this.fileBytes = fileBytes;
      this.chunkBytes = chunkBytes;
      this.offset = 0;
      this.chunks = [];
      this.totalBytes = 0;
      this.gunzip = new Gunzip((chunk, _final) => {
        this.chunks.push(chunk);
        this.totalBytes += chunk.length;
      });
    }
    read(numBytes) {
      while (this.totalBytes < numBytes && this.offset < this.fileBytes.length) {
        const end = Math.min(
          this.offset + this.chunkBytes,
          this.fileBytes.length
        );
        this.gunzip.push(this.fileBytes.subarray(this.offset, end), false);
        this.offset = end;
      }
      if (this.totalBytes < numBytes && this.offset >= this.fileBytes.length) {
        this.gunzip.push(new Uint8Array(0), true);
      }
      if (this.totalBytes < numBytes) {
        throw new Error(
          \`Unexpected EOF: needed \${numBytes}, got \${this.totalBytes}\`
        );
      }
      const allBytes = new Uint8Array(this.totalBytes);
      let outOffset = 0;
      for (const chunk of this.chunks) {
        allBytes.set(chunk, outOffset);
        outOffset += chunk.length;
      }
      const result = allBytes.subarray(0, numBytes);
      this.chunks = [allBytes.subarray(numBytes)];
      this.totalBytes -= numBytes;
      return result;
    }
  }
  function decodeAntiSplat(fileBytes, initNumSplats, splatCallback) {
    const numSplats = Math.floor(fileBytes.length / 32);
    if (numSplats * 32 !== fileBytes.length) {
      throw new Error("Invalid .splat file size");
    }
    initNumSplats(numSplats);
    const f32 = new Float32Array(fileBytes.buffer);
    for (let i2 = 0; i2 < numSplats; ++i2) {
      const i322 = i2 * 32;
      const i8 = i2 * 8;
      const x2 = f32[i8 + 0];
      const y = f32[i8 + 1];
      const z = f32[i8 + 2];
      const scaleX = f32[i8 + 3];
      const scaleY = f32[i8 + 4];
      const scaleZ = f32[i8 + 5];
      const r = fileBytes[i322 + 24] / 255;
      const g = fileBytes[i322 + 25] / 255;
      const b = fileBytes[i322 + 26] / 255;
      const opacity = fileBytes[i322 + 27] / 255;
      const quatW = (fileBytes[i322 + 28] - 128) / 128;
      const quatX = (fileBytes[i322 + 29] - 128) / 128;
      const quatY = (fileBytes[i322 + 30] - 128) / 128;
      const quatZ = (fileBytes[i322 + 31] - 128) / 128;
      splatCallback(
        i2,
        x2,
        y,
        z,
        scaleX,
        scaleY,
        scaleZ,
        quatX,
        quatY,
        quatZ,
        quatW,
        opacity,
        r,
        g,
        b
      );
    }
  }
  function unpackAntiSplat(fileBytes) {
    let numSplats = 0;
    let maxSplats = 0;
    let packedArray = new Uint32Array(0);
    decodeAntiSplat(
      fileBytes,
      (cbNumSplats) => {
        numSplats = cbNumSplats;
        maxSplats = computeMaxSplats(numSplats);
        packedArray = new Uint32Array(maxSplats * 4);
      },
      (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
        setPackedSplat(
          packedArray,
          index,
          x2,
          y,
          z,
          scaleX,
          scaleY,
          scaleZ,
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b
        );
      }
    );
    return { packedArray, numSplats };
  }
  const KSPLAT_COMPRESSION = {
    0: {
      bytesPerCenter: 12,
      bytesPerScale: 12,
      bytesPerRotation: 16,
      bytesPerColor: 4,
      bytesPerSphericalHarmonicsComponent: 4,
      scaleOffsetBytes: 12,
      rotationOffsetBytes: 24,
      colorOffsetBytes: 40,
      sphericalHarmonicsOffsetBytes: 44,
      scaleRange: 1
    },
    1: {
      bytesPerCenter: 6,
      bytesPerScale: 6,
      bytesPerRotation: 8,
      bytesPerColor: 4,
      bytesPerSphericalHarmonicsComponent: 2,
      scaleOffsetBytes: 6,
      rotationOffsetBytes: 12,
      colorOffsetBytes: 20,
      sphericalHarmonicsOffsetBytes: 24,
      scaleRange: 32767
    },
    2: {
      bytesPerCenter: 6,
      bytesPerScale: 6,
      bytesPerRotation: 8,
      bytesPerColor: 4,
      bytesPerSphericalHarmonicsComponent: 1,
      scaleOffsetBytes: 6,
      rotationOffsetBytes: 12,
      colorOffsetBytes: 20,
      sphericalHarmonicsOffsetBytes: 24,
      scaleRange: 32767
    }
  };
  const KSPLAT_SH_DEGREE_TO_COMPONENTS = {
    0: 0,
    1: 9,
    2: 24,
    3: 45
  };
  function decodeKsplat(fileBytes, initNumSplats, splatCallback, shCallback) {
    var _a2;
    const HEADER_BYTES = 4096;
    const SECTION_BYTES = 1024;
    let headerOffset = 0;
    const header = new DataView(fileBytes.buffer, headerOffset, HEADER_BYTES);
    headerOffset += HEADER_BYTES;
    const versionMajor = header.getUint8(0);
    const versionMinor = header.getUint8(1);
    if (versionMajor !== 0 || versionMinor < 1) {
      throw new Error(
        \`Unsupported .ksplat version: \${versionMajor}.\${versionMinor}\`
      );
    }
    const maxSectionCount = header.getUint32(4, true);
    header.getUint32(16, true);
    const compressionLevel = header.getUint16(20, true);
    if (compressionLevel < 0 || compressionLevel > 2) {
      throw new Error(\`Invalid .ksplat compression level: \${compressionLevel}\`);
    }
    header.getFloat32(36, true) || -1.5;
    header.getFloat32(40, true) || 1.5;
    let sectionBase = HEADER_BYTES + maxSectionCount * SECTION_BYTES;
    for (let section = 0; section < maxSectionCount; ++section) {
      const section2 = new DataView(fileBytes.buffer, headerOffset, SECTION_BYTES);
      headerOffset += SECTION_BYTES;
      const sectionSplatCount = section2.getUint32(0, true);
      const sectionMaxSplatCount = section2.getUint32(4, true);
      const bucketSize = section2.getUint32(8, true);
      const bucketCount = section2.getUint32(12, true);
      const bucketBlockSize = section2.getFloat32(16, true);
      const bucketStorageSizeBytes = section2.getUint16(20, true);
      const compressionScaleRange = (section2.getUint32(24, true) || ((_a2 = KSPLAT_COMPRESSION[compressionLevel]) == null ? void 0 : _a2.scaleRange)) ?? 1;
      const partiallyFilledBucketCount = section2.getUint32(36, true);
      const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;
      const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;
      const sphericalHarmonicsDegree = section2.getUint16(40, true);
      const shComponents = KSPLAT_SH_DEGREE_TO_COMPONENTS[sphericalHarmonicsDegree];
      const {
        bytesPerCenter,
        bytesPerScale,
        bytesPerRotation,
        bytesPerColor,
        bytesPerSphericalHarmonicsComponent,
        scaleOffsetBytes,
        rotationOffsetBytes,
        colorOffsetBytes,
        sphericalHarmonicsOffsetBytes
      } = KSPLAT_COMPRESSION[compressionLevel];
      const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor + shComponents * bytesPerSphericalHarmonicsComponent;
      const splatDataStorageSizeBytes = bytesPerSplat * sectionMaxSplatCount;
      const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;
      const sh1 = sphericalHarmonicsDegree >= 1 ? new Float32Array(3 * 3) : void 0;
      const sh2 = sphericalHarmonicsDegree >= 2 ? new Float32Array(5 * 3) : void 0;
      const sh3 = sphericalHarmonicsDegree >= 3 ? new Float32Array(7 * 3) : void 0;
      const compressionScaleFactor = bucketBlockSize / 2 / compressionScaleRange;
      const bucketsBase = sectionBase + bucketsMetaDataSizeBytes;
      const dataBase = sectionBase + bucketsStorageSizeBytes;
      const data = new DataView(
        fileBytes.buffer,
        dataBase,
        splatDataStorageSizeBytes
      );
      const bucketArray = new Float32Array(
        fileBytes.buffer,
        bucketsBase,
        bucketCount * 3
      );
      for (let i2 = 0; i2 < sectionSplatCount; ++i2) {
        const splatOffset = i2 * bytesPerSplat;
        const bucketIndex = Math.floor(i2 / bucketSize);
        const x2 = compressionLevel === 0 ? data.getFloat32(splatOffset + 0, true) : (data.getUint16(splatOffset + 0, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 0];
        const y = compressionLevel === 0 ? data.getFloat32(splatOffset + 4, true) : (data.getUint16(splatOffset + 2, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 1];
        const z = compressionLevel === 0 ? data.getFloat32(splatOffset + 8, true) : (data.getUint16(splatOffset + 4, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 2];
        const scaleX = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 0, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 0, true));
        const scaleY = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 4, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 2, true));
        const scaleZ = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 8, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 4, true));
        const quatW = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 0, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 0, true)
        );
        const quatX = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 4, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 2, true)
        );
        const quatY = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 8, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 4, true)
        );
        const quatZ = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 12, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 6, true)
        );
        const r = data.getUint8(splatOffset + colorOffsetBytes + 0) / 255;
        const g = data.getUint8(splatOffset + colorOffsetBytes + 1) / 255;
        const b = data.getUint8(splatOffset + colorOffsetBytes + 2) / 255;
        const opacity = data.getUint8(splatOffset + colorOffsetBytes + 3) / 255;
        splatCallback(
          i2,
          x2,
          y,
          z,
          scaleX,
          scaleY,
          scaleZ,
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b
        );
        if (sphericalHarmonicsDegree >= 1 && sh1) {
          shCallback == null ? void 0 : shCallback(i2, sh1, sh2, sh3);
        }
      }
      sectionBase += storageSizeBytes;
    }
  }
  function unpackKsplat(fileBytes) {
    var _a2;
    const HEADER_BYTES = 4096;
    const SECTION_BYTES = 1024;
    let headerOffset = 0;
    const header = new DataView(fileBytes.buffer, headerOffset, HEADER_BYTES);
    headerOffset += HEADER_BYTES;
    const versionMajor = header.getUint8(0);
    const versionMinor = header.getUint8(1);
    if (versionMajor !== 0 || versionMinor < 1) {
      throw new Error(
        \`Unsupported .ksplat version: \${versionMajor}.\${versionMinor}\`
      );
    }
    const maxSectionCount = header.getUint32(4, true);
    const splatCount = header.getUint32(16, true);
    const compressionLevel = header.getUint16(20, true);
    if (compressionLevel < 0 || compressionLevel > 2) {
      throw new Error(\`Invalid .ksplat compression level: \${compressionLevel}\`);
    }
    const minSphericalHarmonicsCoeff = header.getFloat32(36, true) || -1.5;
    const maxSphericalHarmonicsCoeff = header.getFloat32(40, true) || 1.5;
    const numSplats = splatCount;
    const maxSplats = computeMaxSplats(numSplats);
    const packedArray = new Uint32Array(maxSplats * 4);
    const extra = {};
    let sectionBase = HEADER_BYTES + maxSectionCount * SECTION_BYTES;
    for (let section = 0; section < maxSectionCount; ++section) {
      let getSh = function(splatOffset, component) {
        if (compressionLevel === 0) {
          return data.getFloat32(
            splatOffset + sphericalHarmonicsOffsetBytes + component * 4,
            true
          );
        }
        if (compressionLevel === 1) {
          return fromHalf(
            data.getUint16(
              splatOffset + sphericalHarmonicsOffsetBytes + component * 2,
              true
            )
          );
        }
        const t = data.getUint8(splatOffset + sphericalHarmonicsOffsetBytes + component) / 255;
        return minSphericalHarmonicsCoeff + t * (maxSphericalHarmonicsCoeff - minSphericalHarmonicsCoeff);
      };
      const section2 = new DataView(fileBytes.buffer, headerOffset, SECTION_BYTES);
      headerOffset += SECTION_BYTES;
      const sectionSplatCount = section2.getUint32(0, true);
      const sectionMaxSplatCount = section2.getUint32(4, true);
      const bucketSize = section2.getUint32(8, true);
      const bucketCount = section2.getUint32(12, true);
      const bucketBlockSize = section2.getFloat32(16, true);
      const bucketStorageSizeBytes = section2.getUint16(20, true);
      const compressionScaleRange = (section2.getUint32(24, true) || ((_a2 = KSPLAT_COMPRESSION[compressionLevel]) == null ? void 0 : _a2.scaleRange)) ?? 1;
      const partiallyFilledBucketCount = section2.getUint32(36, true);
      const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;
      const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;
      const sphericalHarmonicsDegree = section2.getUint16(40, true);
      const shComponents = KSPLAT_SH_DEGREE_TO_COMPONENTS[sphericalHarmonicsDegree];
      const {
        bytesPerCenter,
        bytesPerScale,
        bytesPerRotation,
        bytesPerColor,
        bytesPerSphericalHarmonicsComponent,
        scaleOffsetBytes,
        rotationOffsetBytes,
        colorOffsetBytes,
        sphericalHarmonicsOffsetBytes
      } = KSPLAT_COMPRESSION[compressionLevel];
      const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor + shComponents * bytesPerSphericalHarmonicsComponent;
      const splatDataStorageSizeBytes = bytesPerSplat * sectionMaxSplatCount;
      const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;
      const sh1Index = [0, 3, 6, 1, 4, 7, 2, 5, 8];
      const sh2Index = [
        9,
        14,
        19,
        10,
        15,
        20,
        11,
        16,
        21,
        12,
        17,
        22,
        13,
        18,
        23
      ];
      const sh3Index = [
        24,
        31,
        38,
        25,
        32,
        39,
        26,
        33,
        40,
        27,
        34,
        41,
        28,
        35,
        42,
        29,
        36,
        43,
        30,
        37,
        44
      ];
      const sh1 = sphericalHarmonicsDegree >= 1 ? new Float32Array(3 * 3) : void 0;
      const sh2 = sphericalHarmonicsDegree >= 2 ? new Float32Array(5 * 3) : void 0;
      const sh3 = sphericalHarmonicsDegree >= 3 ? new Float32Array(7 * 3) : void 0;
      const compressionScaleFactor = bucketBlockSize / 2 / compressionScaleRange;
      const bucketsBase = sectionBase + bucketsMetaDataSizeBytes;
      const dataBase = sectionBase + bucketsStorageSizeBytes;
      const data = new DataView(
        fileBytes.buffer,
        dataBase,
        splatDataStorageSizeBytes
      );
      const bucketArray = new Float32Array(
        fileBytes.buffer,
        bucketsBase,
        bucketCount * 3
      );
      for (let i2 = 0; i2 < sectionSplatCount; ++i2) {
        const splatOffset = i2 * bytesPerSplat;
        const bucketIndex = Math.floor(i2 / bucketSize);
        const x2 = compressionLevel === 0 ? data.getFloat32(splatOffset + 0, true) : (data.getUint16(splatOffset + 0, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 0];
        const y = compressionLevel === 0 ? data.getFloat32(splatOffset + 4, true) : (data.getUint16(splatOffset + 2, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 1];
        const z = compressionLevel === 0 ? data.getFloat32(splatOffset + 8, true) : (data.getUint16(splatOffset + 4, true) - compressionScaleRange) * compressionScaleFactor + bucketArray[3 * bucketIndex + 2];
        const scaleX = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 0, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 0, true));
        const scaleY = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 4, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 2, true));
        const scaleZ = compressionLevel === 0 ? data.getFloat32(splatOffset + scaleOffsetBytes + 8, true) : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 4, true));
        const quatW = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 0, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 0, true)
        );
        const quatX = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 4, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 2, true)
        );
        const quatY = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 8, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 4, true)
        );
        const quatZ = compressionLevel === 0 ? data.getFloat32(splatOffset + rotationOffsetBytes + 12, true) : fromHalf(
          data.getUint16(splatOffset + rotationOffsetBytes + 6, true)
        );
        const r = data.getUint8(splatOffset + colorOffsetBytes + 0) / 255;
        const g = data.getUint8(splatOffset + colorOffsetBytes + 1) / 255;
        const b = data.getUint8(splatOffset + colorOffsetBytes + 2) / 255;
        const opacity = data.getUint8(splatOffset + colorOffsetBytes + 3) / 255;
        setPackedSplat(
          packedArray,
          i2,
          x2,
          y,
          z,
          scaleX,
          scaleY,
          scaleZ,
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b
        );
        if (sphericalHarmonicsDegree >= 1) {
          if (sh1) {
            if (!extra.sh1) {
              extra.sh1 = new Uint32Array(numSplats * 2);
            }
            for (const [i22, key] of sh1Index.entries()) {
              sh1[i22] = getSh(splatOffset, key);
            }
            encodeSh1Rgb(extra.sh1, i2, sh1);
          }
          if (sh2) {
            if (!extra.sh2) {
              extra.sh2 = new Uint32Array(numSplats * 4);
            }
            for (const [i22, key] of sh2Index.entries()) {
              sh2[i22] = getSh(splatOffset, key);
            }
            encodeSh2Rgb(extra.sh2, i2, sh2);
          }
          if (sh3) {
            if (!extra.sh3) {
              extra.sh3 = new Uint32Array(numSplats * 4);
            }
            for (const [i22, key] of sh3Index.entries()) {
              sh3[i22] = getSh(splatOffset, key);
            }
            encodeSh3Rgb(extra.sh3, i2, sh3);
          }
        }
      }
      sectionBase += storageSizeBytes;
    }
    return { packedArray, numSplats, extra };
  }
  const _PlyReader = class _PlyReader {
    // Create a PlyReader from a Uint8Array/ArrayBuffer, no parsing done yet
    constructor({ fileBytes }) {
      this.header = "";
      this.littleEndian = true;
      this.elements = {};
      this.comments = [];
      this.data = null;
      this.numSplats = 0;
      this.fileBytes = fileBytes instanceof ArrayBuffer ? new Uint8Array(fileBytes) : fileBytes;
    }
    // Identify and parse the PLY text header (assumed to be <64KB in size).
    // this.elements will contain all the elements in the file, typically
    // "vertex" contains the Gsplat data.
    async parseHeader() {
      const bufferStream = new ReadableStream({
        start: (controller) => {
          controller.enqueue(this.fileBytes.slice(0, 65536));
          controller.close();
        }
      });
      const decoder = bufferStream.pipeThrough(new TextDecoderStream()).getReader();
      this.header = "";
      const headerTerminator = "end_header\\n";
      while (true) {
        const { value, done } = await decoder.read();
        if (done) {
          throw new Error("Failed to read header");
        }
        this.header += value;
        const endHeader = this.header.indexOf(headerTerminator);
        if (endHeader >= 0) {
          this.header = this.header.slice(0, endHeader + headerTerminator.length);
          break;
        }
      }
      const headerLen = new TextEncoder().encode(this.header).length;
      this.data = new DataView(this.fileBytes.buffer, headerLen);
      this.elements = {};
      let curElement = null;
      this.comments = [];
      this.header.trim().split("\\n").forEach((line, lineIndex) => {
        const trimmedLine = line.trim();
        if (lineIndex === 0) {
          if (trimmedLine !== "ply") {
            throw new Error("Invalid PLY header");
          }
          return;
        }
        if (trimmedLine.length === 0) {
          return;
        }
        const fields = trimmedLine.split(" ");
        switch (fields[0]) {
          case "format":
            if (fields[1] === "binary_little_endian") {
              this.littleEndian = true;
            } else if (fields[1] === "binary_big_endian") {
              this.littleEndian = false;
            } else {
              throw new Error(\`Unsupported PLY format: \${fields[1]}\`);
            }
            if (fields[2] !== "1.0") {
              throw new Error(\`Unsupported PLY version: \${fields[2]}\`);
            }
            break;
          case "end_header":
            break;
          case "comment":
            this.comments.push(trimmedLine.slice("comment ".length));
            break;
          case "element": {
            const name = fields[1];
            curElement = {
              name,
              count: Number.parseInt(fields[2]),
              properties: {}
            };
            this.elements[name] = curElement;
            break;
          }
          case "property":
            if (curElement == null) {
              throw new Error("Property must be inside an element");
            }
            if (fields[1] === "list") {
              curElement.properties[fields[4]] = {
                isList: true,
                type: fields[3],
                countType: fields[2]
              };
            } else {
              curElement.properties[fields[2]] = {
                isList: false,
                type: fields[1]
              };
            }
            break;
        }
      });
      if (this.elements.vertex) {
        this.numSplats = this.elements.vertex.count;
      }
    }
    parseData(elementCallback) {
      let offset = 0;
      const data = this.data;
      if (data == null) {
        throw new Error("No data to parse");
      }
      for (const elementName in this.elements) {
        const element = this.elements[elementName];
        const { count, properties } = element;
        const item = {};
        const parsers = [];
        for (const [propertyName, property] of Object.entries(properties)) {
          if (!property.isList) {
            item[propertyName] = 0;
            parsers.push(() => {
              item[propertyName] = PARSE_FIELD[property.type](
                data,
                offset,
                this.littleEndian
              );
              offset += FIELD_BYTES[property.type];
            });
          } else {
            item[propertyName] = [];
            parsers.push(() => {
              const list = item[propertyName];
              list.length = PARSE_FIELD[property.countType](
                data,
                offset,
                this.littleEndian
              );
              offset += FIELD_BYTES[property.countType];
              for (let i2 = 0; i2 < list.length; i2++) {
                list[i2] = PARSE_FIELD[property.type](
                  data,
                  offset,
                  this.littleEndian
                );
                offset += FIELD_BYTES[property.type];
              }
            });
          }
        }
        const callback = elementCallback(element) ?? (() => {
        });
        for (let index = 0; index < count; index++) {
          for (const parser of parsers) {
            parser();
          }
          callback(index, item);
        }
      }
    }
    // Parse all the Gsplat data in the PLY file in go, invoking the given
    // callbacks for each Gsplat.
    parseSplats(splatCallback, shCallback) {
      if (this.elements.vertex == null) {
        throw new Error("No vertex element found");
      }
      let isSuperSplat = false;
      const ssChunks = [];
      let numSh = 0;
      let sh1Props = [];
      let sh2Props = [];
      let sh3Props = [];
      let sh1 = void 0;
      let sh2 = void 0;
      let sh3 = void 0;
      function prepareSh() {
        const num_f_rest = NUM_SH_TO_NUM_F_REST[numSh];
        sh1Props = new Array(3).fill(null).flatMap(
          (_, k) => [0, 1, 2].map((_2, d) => \`f_rest_\${k + d * num_f_rest / 3}\`)
        );
        sh2Props = new Array(5).fill(null).flatMap(
          (_, k) => [0, 1, 2].map((_2, d) => \`f_rest_\${3 + k + d * num_f_rest / 3}\`)
        );
        sh3Props = new Array(7).fill(null).flatMap(
          (_, k) => [0, 1, 2].map((_2, d) => \`f_rest_\${8 + k + d * num_f_rest / 3}\`)
        );
        sh1 = numSh >= 1 ? new Float32Array(3 * 3) : void 0;
        sh2 = numSh >= 2 ? new Float32Array(5 * 3) : void 0;
        sh3 = numSh >= 3 ? new Float32Array(7 * 3) : void 0;
      }
      function ssShCallback(index, item) {
        if (!sh1) {
          throw new Error("Missing sh1");
        }
        for (const [i2, key] of sh1Props.entries()) {
          sh1[i2] = item[key] * 8 / 255 - 4;
        }
        if (sh2) {
          for (const [i2, key] of sh2Props.entries()) {
            sh2[i2] = item[key] * 8 / 255 - 4;
          }
        }
        if (sh3) {
          for (const [i2, key] of sh3Props.entries()) {
            sh3[i2] = item[key] * 8 / 255 - 4;
          }
        }
        shCallback == null ? void 0 : shCallback(index, sh1, sh2, sh3);
      }
      function initSuperSplat(element) {
        const {
          min_x,
          min_y,
          min_z,
          max_x,
          max_y,
          max_z,
          min_scale_x,
          min_scale_y,
          min_scale_z,
          max_scale_x,
          max_scale_y,
          max_scale_z,
          min_r,
          min_g,
          min_b,
          max_r,
          max_g,
          max_b
        } = element.properties;
        if (!min_x || !min_y || !min_z || !max_x || !max_y || !max_z || !min_scale_x || !min_scale_y || !min_scale_z || !max_scale_x || !max_scale_y || !max_scale_z || !min_r || !min_g || !min_b || !max_r || !max_g || !max_b) {
          throw new Error("Missing PLY chunk properties");
        }
        isSuperSplat = true;
        return (index, item) => {
          const {
            min_x: min_x2,
            min_y: min_y2,
            min_z: min_z2,
            max_x: max_x2,
            max_y: max_y2,
            max_z: max_z2,
            min_scale_x: min_scale_x2,
            min_scale_y: min_scale_y2,
            min_scale_z: min_scale_z2,
            max_scale_x: max_scale_x2,
            max_scale_y: max_scale_y2,
            max_scale_z: max_scale_z2,
            min_r: min_r2,
            min_g: min_g2,
            min_b: min_b2,
            max_r: max_r2,
            max_g: max_g2,
            max_b: max_b2
          } = item;
          ssChunks.push({
            min_x: min_x2,
            min_y: min_y2,
            min_z: min_z2,
            max_x: max_x2,
            max_y: max_y2,
            max_z: max_z2,
            min_scale_x: min_scale_x2,
            min_scale_y: min_scale_y2,
            min_scale_z: min_scale_z2,
            max_scale_x: max_scale_x2,
            max_scale_y: max_scale_y2,
            max_scale_z: max_scale_z2,
            min_r: min_r2,
            min_g: min_g2,
            min_b: min_b2,
            max_r: max_r2,
            max_g: max_g2,
            max_b: max_b2
          });
        };
      }
      function decodeSuperSplat(element) {
        if (shCallback && element.name === "sh") {
          numSh = getNumSh(element.properties);
          prepareSh();
          return ssShCallback;
        }
        if (element.name !== "vertex") {
          return null;
        }
        const { packed_position, packed_rotation, packed_scale, packed_color } = element.properties;
        if (!packed_position || !packed_rotation || !packed_scale || !packed_color) {
          throw new Error(
            "Missing PLY properties: packed_position, packed_rotation, packed_scale, packed_color"
          );
        }
        const SQRT2 = Math.sqrt(2);
        return (index, item) => {
          const chunk = ssChunks[index >>> 8];
          if (chunk == null) {
            throw new Error("Missing PLY chunk");
          }
          const {
            min_x,
            min_y,
            min_z,
            max_x,
            max_y,
            max_z,
            min_scale_x,
            min_scale_y,
            min_scale_z,
            max_scale_x,
            max_scale_y,
            max_scale_z,
            min_r,
            min_g,
            min_b,
            max_r,
            max_g,
            max_b
          } = chunk;
          const { packed_position: packed_position2, packed_rotation: packed_rotation2, packed_scale: packed_scale2, packed_color: packed_color2 } = item;
          const x2 = (packed_position2 >>> 21 & 2047) / 2047 * (max_x - min_x) + min_x;
          const y = (packed_position2 >>> 11 & 1023) / 1023 * (max_y - min_y) + min_y;
          const z = (packed_position2 & 2047) / 2047 * (max_z - min_z) + min_z;
          const r0 = ((packed_rotation2 >>> 20 & 1023) / 1023 - 0.5) * SQRT2;
          const r1 = ((packed_rotation2 >>> 10 & 1023) / 1023 - 0.5) * SQRT2;
          const r2 = ((packed_rotation2 & 1023) / 1023 - 0.5) * SQRT2;
          const rr = Math.sqrt(Math.max(0, 1 - r0 * r0 - r1 * r1 - r2 * r2));
          const rOrder = packed_rotation2 >>> 30;
          const quatX = rOrder === 0 ? r0 : rOrder === 1 ? rr : r1;
          const quatY = rOrder <= 1 ? r1 : rOrder === 2 ? rr : r2;
          const quatZ = rOrder <= 2 ? r2 : rr;
          const quatW = rOrder === 0 ? rr : r0;
          const scaleX = Math.exp(
            (packed_scale2 >>> 21 & 2047) / 2047 * (max_scale_x - min_scale_x) + min_scale_x
          );
          const scaleY = Math.exp(
            (packed_scale2 >>> 11 & 1023) / 1023 * (max_scale_y - min_scale_y) + min_scale_y
          );
          const scaleZ = Math.exp(
            (packed_scale2 & 2047) / 2047 * (max_scale_z - min_scale_z) + min_scale_z
          );
          const r = (packed_color2 >>> 24 & 255) / 255 * (max_r - min_r) + min_r;
          const g = (packed_color2 >>> 16 & 255) / 255 * (max_g - min_g) + min_g;
          const b = (packed_color2 >>> 8 & 255) / 255 * (max_b - min_b) + min_b;
          const opacity = (packed_color2 & 255) / 255;
          splatCallback(
            index,
            x2,
            y,
            z,
            scaleX,
            scaleY,
            scaleZ,
            quatX,
            quatY,
            quatZ,
            quatW,
            opacity,
            r,
            g,
            b
          );
        };
      }
      const elementCallback = (element) => {
        if (element.name === "chunk") {
          return initSuperSplat(element);
        }
        if (isSuperSplat) {
          return decodeSuperSplat(element);
        }
        if (element.name !== "vertex") {
          return null;
        }
        const {
          x: x2,
          y,
          z,
          scale_0,
          scale_1,
          scale_2,
          rot_0,
          rot_1,
          rot_2,
          rot_3,
          opacity,
          f_dc_0,
          f_dc_1,
          f_dc_2,
          red,
          green,
          blue,
          alpha
        } = element.properties;
        if (!x2 || !y || !z) {
          throw new Error("Missing PLY properties: x, y, z");
        }
        const hasScales = scale_0 && scale_1 && scale_2;
        const hasRots = rot_0 && rot_1 && rot_2 && rot_3;
        const alphaDiv = alpha != null ? FIELD_SCALE[alpha.type] : 1;
        const redDiv = red != null ? FIELD_SCALE[red.type] : 1;
        const greenDiv = green != null ? FIELD_SCALE[green.type] : 1;
        const blueDiv = blue != null ? FIELD_SCALE[blue.type] : 1;
        numSh = getNumSh(element.properties);
        prepareSh();
        return (index, item) => {
          const scaleX = hasScales ? Math.exp(item.scale_0) : _PlyReader.defaultPointScale;
          const scaleY = hasScales ? Math.exp(item.scale_1) : _PlyReader.defaultPointScale;
          const scaleZ = hasScales ? Math.exp(item.scale_2) : _PlyReader.defaultPointScale;
          const quatX = hasRots ? item.rot_1 : 0;
          const quatY = hasRots ? item.rot_2 : 0;
          const quatZ = hasRots ? item.rot_3 : 0;
          const quatW = hasRots ? item.rot_0 : 1;
          const op = opacity != null ? 1 / (1 + Math.exp(-item.opacity)) : alpha != null ? item.alpha / alphaDiv : 1;
          const r = f_dc_0 != null ? item.f_dc_0 * SH_C0$1 + 0.5 : red != null ? item.red / redDiv : 1;
          const g = f_dc_1 != null ? item.f_dc_1 * SH_C0$1 + 0.5 : green != null ? item.green / greenDiv : 1;
          const b = f_dc_2 != null ? item.f_dc_2 * SH_C0$1 + 0.5 : blue != null ? item.blue / blueDiv : 1;
          splatCallback(
            index,
            item.x,
            item.y,
            item.z,
            scaleX,
            scaleY,
            scaleZ,
            quatX,
            quatY,
            quatZ,
            quatW,
            op,
            r,
            g,
            b
          );
          if (shCallback && sh1) {
            if (sh1) {
              for (const [i2, key] of sh1Props.entries()) {
                sh1[i2] = item[key];
              }
            }
            if (sh2) {
              for (const [i2, key] of sh2Props.entries()) {
                sh2[i2] = item[key];
              }
            }
            if (sh3) {
              for (const [i2, key] of sh3Props.entries()) {
                sh3[i2] = item[key];
              }
            }
            shCallback(index, sh1, sh2, sh3);
          }
        };
      };
      this.parseData(elementCallback);
    }
    // Inject RGBA values into original PLY file, which can be used to modify
    // the color/opacity of the Gsplats and write out the modified PLY file.
    injectRgba(rgba) {
      let offset = 0;
      const data = this.data;
      if (data == null) {
        throw new Error("No parsed data");
      }
      if (rgba.length !== this.numSplats * 4) {
        throw new Error("Invalid RGBA array length");
      }
      for (const elementName in this.elements) {
        const element = this.elements[elementName];
        const { count, properties } = element;
        const parsers = [];
        let rgbaOffset = 0;
        const isVertex = elementName === "vertex";
        if (isVertex) {
          for (const name of ["opacity", "f_dc_0", "f_dc_1", "f_dc_2"]) {
            if (!properties[name] || properties[name].type !== "float") {
              throw new Error(\`Can't injectRgba due to property: \${name}\`);
            }
          }
        }
        for (const [propertyName, property] of Object.entries(properties)) {
          if (!property.isList) {
            if (isVertex) {
              if (propertyName === "f_dc_0" || propertyName === "f_dc_1" || propertyName === "f_dc_2") {
                const component = Number.parseInt(
                  propertyName.slice("f_dc_".length)
                );
                parsers.push(() => {
                  const value = (rgba[rgbaOffset + component] / 255 - 0.5) / SH_C0$1;
                  SET_FIELD[property.type](
                    data,
                    offset,
                    this.littleEndian,
                    value
                  );
                });
              } else if (propertyName === "opacity") {
                parsers.push(() => {
                  const value = Math.max(
                    -100,
                    Math.min(
                      100,
                      -Math.log(1 / (rgba[rgbaOffset + 3] / 255) - 1)
                    )
                  );
                  SET_FIELD[property.type](
                    data,
                    offset,
                    this.littleEndian,
                    value
                  );
                });
              }
            }
            parsers.push(() => {
              offset += FIELD_BYTES[property.type];
            });
          } else {
            parsers.push(() => {
              const length = PARSE_FIELD[property.countType](
                data,
                offset,
                this.littleEndian
              );
              offset += FIELD_BYTES[property.countType];
              offset += length * FIELD_BYTES[property.type];
            });
          }
        }
        for (let index = 0; index < count; index++) {
          for (const parser of parsers) {
            parser();
          }
          if (isVertex) {
            rgbaOffset += 4;
          }
        }
      }
    }
  };
  _PlyReader.defaultPointScale = 1e-3;
  let PlyReader = _PlyReader;
  const SH_C0$1 = 0.28209479177387814;
  const PARSE_FIELD = {
    char: (data, offset, littleEndian) => {
      return data.getInt8(offset);
    },
    uchar: (data, offset, littleEndian) => {
      return data.getUint8(offset);
    },
    short: (data, offset, littleEndian) => {
      return data.getInt16(offset, littleEndian);
    },
    ushort: (data, offset, littleEndian) => {
      return data.getUint16(offset, littleEndian);
    },
    int: (data, offset, littleEndian) => {
      return data.getInt32(offset, littleEndian);
    },
    uint: (data, offset, littleEndian) => {
      return data.getUint32(offset, littleEndian);
    },
    float: (data, offset, littleEndian) => {
      return data.getFloat32(offset, littleEndian);
    },
    double: (data, offset, littleEndian) => {
      return data.getFloat64(offset, littleEndian);
    }
  };
  const SET_FIELD = {
    char: (data, offset, littleEndian, value) => {
      data.setInt8(offset, value);
    },
    uchar: (data, offset, littleEndian, value) => {
      data.setUint8(offset, value);
    },
    short: (data, offset, littleEndian, value) => {
      data.setInt16(offset, value, littleEndian);
    },
    ushort: (data, offset, littleEndian, value) => {
      data.setUint16(offset, value, littleEndian);
    },
    int: (data, offset, littleEndian, value) => {
      data.setInt32(offset, value, littleEndian);
    },
    uint: (data, offset, littleEndian, value) => {
      data.setUint32(offset, value, littleEndian);
    },
    float: (data, offset, littleEndian, value) => {
      data.setFloat32(offset, value, littleEndian);
    },
    double: (data, offset, littleEndian, value) => {
      data.setFloat64(offset, value, littleEndian);
    }
  };
  const FIELD_BYTES = {
    char: 1,
    uchar: 1,
    short: 2,
    ushort: 2,
    int: 4,
    uint: 4,
    float: 4,
    double: 8
  };
  const FIELD_SCALE = {
    char: 127,
    uchar: 255,
    short: 32767,
    ushort: 65535,
    int: 2147483647,
    uint: 4294967295,
    float: 1,
    double: 1
  };
  const NUM_F_REST_TO_NUM_SH = {
    0: 0,
    9: 1,
    24: 2,
    45: 3
  };
  const NUM_SH_TO_NUM_F_REST = {
    0: 0,
    1: 9,
    2: 24,
    3: 45
  };
  function getNumSh(properties) {
    let num_f_rest = 0;
    while (properties[\`f_rest_\${num_f_rest}\`]) {
      num_f_rest += 1;
    }
    const numSh = NUM_F_REST_TO_NUM_SH[num_f_rest];
    if (numSh == null) {
      throw new Error(\`Unsupported number of SH coefficients: \${num_f_rest}\`);
    }
    return numSh;
  }
  const Gsplat = { type: "Gsplat" };
  const TPackedSplats = { type: "PackedSplats" };
  const readPackedSplat = (packedSplats, index) => new ReadPackedSplat({ packedSplats, index });
  const readPackedSplatRange = (packedSplats, index, base, count) => new ReadPackedSplatRange({ packedSplats, index, base, count });
  const splitGsplat = (gsplat) => new SplitGsplat({ gsplat });
  const combineGsplat = ({
    gsplat,
    flags,
    index,
    center,
    scales,
    quaternion,
    rgba,
    rgb,
    opacity,
    x: x2,
    y,
    z,
    r,
    g,
    b
  }) => {
    return new CombineGsplat({
      gsplat,
      flags,
      index,
      center,
      scales,
      quaternion,
      rgba,
      rgb,
      opacity,
      x: x2,
      y,
      z,
      r,
      g,
      b
    });
  };
  const transformGsplat = (gsplat, {
    scale,
    rotate,
    translate,
    recolor
  }) => {
    return new TransformGsplat({ gsplat, scale, rotate, translate, recolor });
  };
  const defineGsplat = unindent(\`
  struct Gsplat {
    vec3 center;
    uint flags;
    vec3 scales;
    int index;
    vec4 quaternion;
    vec4 rgba;
  };
  const uint GSPLAT_FLAG_ACTIVE = 1u << 0u;

  bool isGsplatActive(uint flags) {
    return (flags & GSPLAT_FLAG_ACTIVE) != 0u;
  }
\`);
  const definePackedSplats = unindent(\`
  struct PackedSplats {
    usampler2DArray texture;
    int numSplats;
  };
\`);
  const defineReadPackedSplat = unindent(\`
  bool readPackedSplat(usampler2DArray texture, int numSplats, int index, out Gsplat gsplat) {
    if ((index >= 0) && (index < numSplats)) {
      uvec4 packed = texelFetch(texture, splatTexCoord(index), 0);
      unpackSplat(packed, gsplat.center, gsplat.scales, gsplat.quaternion, gsplat.rgba);
      return true;
    } else {
      return false;
    }
  }
\`);
  class ReadPackedSplat extends Dyno {
    constructor({
      packedSplats,
      index
    }) {
      super({
        inTypes: { packedSplats: TPackedSplats, index: "int" },
        outTypes: { gsplat: Gsplat },
        inputs: { packedSplats, index },
        globals: () => [defineGsplat, definePackedSplats, defineReadPackedSplat],
        statements: ({ inputs, outputs }) => {
          const { gsplat } = outputs;
          if (!gsplat) {
            return [];
          }
          const { packedSplats: packedSplats2, index: index2 } = inputs;
          let statements;
          if (packedSplats2 && index2) {
            statements = unindentLines(\`
            if (readPackedSplat(\${packedSplats2}.texture, \${packedSplats2}.numSplats, \${index2}, \${gsplat})) {
              bool zeroSize = all(equal(\${gsplat}.scales, vec3(0.0, 0.0, 0.0)));
              \${gsplat}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
            } else {
              \${gsplat}.flags = 0u;
            }
          \`);
          } else {
            statements = [\`\${gsplat}.flags = 0u;\`];
          }
          statements.push(\`\${gsplat}.index = \${index2 ?? "0"};\`);
          return statements;
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "gsplat");
    }
  }
  class ReadPackedSplatRange extends Dyno {
    constructor({
      packedSplats,
      index,
      base,
      count
    }) {
      super({
        inTypes: {
          packedSplats: TPackedSplats,
          index: "int",
          base: "int",
          count: "int"
        },
        outTypes: { gsplat: Gsplat },
        inputs: { packedSplats, index, base, count },
        globals: () => [defineGsplat, definePackedSplats, defineReadPackedSplat],
        statements: ({ inputs, outputs }) => {
          const { gsplat } = outputs;
          if (!gsplat) {
            return [];
          }
          const { packedSplats: packedSplats2, index: index2, base: base2, count: count2 } = inputs;
          let statements;
          if (packedSplats2 && index2 && base2 && count2) {
            statements = unindentLines(\`
            \${gsplat}.flags = 0u;
            if ((\${index2} >= \${base2}) && (\${index2} < (\${base2} + \${count2}))) {
              if (readPackedSplat(\${packedSplats2}.texture, \${packedSplats2}.numSplats, \${index2}, \${gsplat})) {
                bool zeroSize = all(equal(\${gsplat}.scales, vec3(0.0, 0.0, 0.0)));
                \${gsplat}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
              }
            }
          \`);
          } else {
            statements = [\`\${gsplat}.flags = 0u;\`];
          }
          statements.push(\`\${gsplat}.index = \${index2 ?? "0"};\`);
          return statements;
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "gsplat");
    }
  }
  class SplitGsplat extends Dyno {
    constructor({ gsplat }) {
      super({
        inTypes: { gsplat: Gsplat },
        outTypes: {
          flags: "uint",
          active: "bool",
          index: "int",
          center: "vec3",
          scales: "vec3",
          quaternion: "vec4",
          rgba: "vec4",
          rgb: "vec3",
          opacity: "float",
          x: "float",
          y: "float",
          z: "float",
          r: "float",
          g: "float",
          b: "float"
        },
        inputs: { gsplat },
        globals: () => [defineGsplat],
        statements: ({ inputs, outputs }) => {
          const { gsplat: gsplat2 } = inputs;
          const {
            flags,
            active,
            index,
            center,
            scales,
            quaternion,
            rgba,
            rgb,
            opacity,
            x: x2,
            y,
            z,
            r,
            g,
            b
          } = outputs;
          return [
            !flags ? null : \`\${flags} = \${gsplat2 ? \`\${gsplat2}.flags\` : "0u"};\`,
            !active ? null : \`\${active} = isGsplatActive(\${gsplat2 ? \`\${gsplat2}.flags\` : "0u"});\`,
            !index ? null : \`\${index} = \${gsplat2 ? \`\${gsplat2}.index\` : "0"};\`,
            !center ? null : \`\${center} = \${gsplat2 ? \`\${gsplat2}.center\` : "vec3(0.0, 0.0, 0.0)"};\`,
            !scales ? null : \`\${scales} = \${gsplat2 ? \`\${gsplat2}.scales\` : "vec3(0.0, 0.0, 0.0)"};\`,
            !quaternion ? null : \`\${quaternion} = \${gsplat2 ? \`\${gsplat2}.quaternion\` : "vec4(0.0, 0.0, 0.0, 1.0)"};\`,
            !rgba ? null : \`\${rgba} = \${gsplat2 ? \`\${gsplat2}.rgba\` : "vec4(0.0, 0.0, 0.0, 0.0)"};\`,
            !rgb ? null : \`\${rgb} = \${gsplat2 ? \`\${gsplat2}.rgba.rgb\` : "vec3(0.0, 0.0, 0.0)"};\`,
            !opacity ? null : \`\${opacity} = \${gsplat2 ? \`\${gsplat2}.rgba.a\` : "0.0"};\`,
            !x2 ? null : \`\${x2} = \${gsplat2 ? \`\${gsplat2}.center.x\` : "0.0"};\`,
            !y ? null : \`\${y} = \${gsplat2 ? \`\${gsplat2}.center.y\` : "0.0"};\`,
            !z ? null : \`\${z} = \${gsplat2 ? \`\${gsplat2}.center.z\` : "0.0"};\`,
            !r ? null : \`\${r} = \${gsplat2 ? \`\${gsplat2}.rgba.r\` : "0.0"};\`,
            !g ? null : \`\${g} = \${gsplat2 ? \`\${gsplat2}.rgba.g\` : "0.0"};\`,
            !b ? null : \`\${b} = \${gsplat2 ? \`\${gsplat2}.rgba.b\` : "0.0"};\`
          ].filter(Boolean);
        }
      });
    }
  }
  class CombineGsplat extends Dyno {
    constructor({
      gsplat,
      flags,
      index,
      center,
      scales,
      quaternion,
      rgba,
      rgb,
      opacity,
      x: x2,
      y,
      z,
      r,
      g,
      b
    }) {
      super({
        inTypes: {
          gsplat: Gsplat,
          flags: "uint",
          index: "int",
          center: "vec3",
          scales: "vec3",
          quaternion: "vec4",
          rgba: "vec4",
          rgb: "vec3",
          opacity: "float",
          x: "float",
          y: "float",
          z: "float",
          r: "float",
          g: "float",
          b: "float"
        },
        outTypes: { gsplat: Gsplat },
        inputs: {
          gsplat,
          flags,
          index,
          center,
          scales,
          quaternion,
          rgba,
          rgb,
          opacity,
          x: x2,
          y,
          z,
          r,
          g,
          b
        },
        globals: () => [defineGsplat],
        statements: ({ inputs, outputs }) => {
          const { gsplat: outGsplat } = outputs;
          if (!outGsplat) {
            return [];
          }
          const {
            gsplat: gsplat2,
            flags: flags2,
            index: index2,
            center: center2,
            scales: scales2,
            quaternion: quaternion2,
            rgba: rgba2,
            rgb: rgb2,
            opacity: opacity2,
            x: x22,
            y: y2,
            z: z2,
            r: r2,
            g: g2,
            b: b2
          } = inputs;
          return [
            \`\${outGsplat}.flags = \${flags2 ?? (gsplat2 ? \`\${gsplat2}.flags\` : "0u")};\`,
            \`\${outGsplat}.index = \${index2 ?? (gsplat2 ? \`\${gsplat2}.index\` : "0")};\`,
            \`\${outGsplat}.center = \${center2 ?? (gsplat2 ? \`\${gsplat2}.center\` : "vec3(0.0, 0.0, 0.0)")};\`,
            \`\${outGsplat}.scales = \${scales2 ?? (gsplat2 ? \`\${gsplat2}.scales\` : "vec3(0.0, 0.0, 0.0)")};\`,
            \`\${outGsplat}.quaternion = \${quaternion2 ?? (gsplat2 ? \`\${gsplat2}.quaternion\` : "vec4(0.0, 0.0, 0.0, 1.0)")};\`,
            \`\${outGsplat}.rgba = \${rgba2 ?? (gsplat2 ? \`\${gsplat2}.rgba\` : "vec4(0.0, 0.0, 0.0, 0.0)")};\`,
            !rgb2 ? null : \`\${outGsplat}.rgba.rgb = \${rgb2};\`,
            !opacity2 ? null : \`\${outGsplat}.rgba.a = \${opacity2};\`,
            !x22 ? null : \`\${outGsplat}.center.x = \${x22};\`,
            !y2 ? null : \`\${outGsplat}.center.y = \${y2};\`,
            !z2 ? null : \`\${outGsplat}.center.z = \${z2};\`,
            !r2 ? null : \`\${outGsplat}.rgba.r = \${r2};\`,
            !g2 ? null : \`\${outGsplat}.rgba.g = \${g2};\`,
            !b2 ? null : \`\${outGsplat}.rgba.b = \${b2};\`
          ].filter(Boolean);
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "gsplat");
    }
  }
  unindent(\`
  vec3 gsplatNormal(vec3 scales, vec4 quaternion) {
    float minScale = min(scales.x, min(scales.y, scales.z));
    vec3 normal;
    if (scales.z == minScale) {
      normal = vec3(0.0, 0.0, 1.0);
    } else if (scales.y == minScale) {
      normal = vec3(0.0, 1.0, 0.0);
    } else {
      normal = vec3(1.0, 0.0, 0.0);
    }
    return quatVec(quaternion, normal);
  }
\`);
  class TransformGsplat extends Dyno {
    constructor({
      gsplat,
      scale,
      rotate,
      translate,
      recolor
    }) {
      super({
        inTypes: {
          gsplat: Gsplat,
          scale: "float",
          rotate: "vec4",
          translate: "vec3",
          recolor: "vec4"
        },
        outTypes: { gsplat: Gsplat },
        inputs: { gsplat, scale, rotate, translate, recolor },
        globals: () => [defineGsplat],
        statements: ({ inputs, outputs, compile }) => {
          const { gsplat: gsplat2 } = outputs;
          if (!gsplat2 || !inputs.gsplat) {
            return [];
          }
          const { scale: scale2, rotate: rotate2, translate: translate2, recolor: recolor2 } = inputs;
          const indent = compile.indent;
          const statements = [
            \`\${gsplat2} = \${inputs.gsplat};\`,
            \`if (isGsplatActive(\${gsplat2}.flags)) {\`,
            scale2 ? \`\${indent}\${gsplat2}.center *= \${scale2};\` : null,
            rotate2 ? \`\${indent}\${gsplat2}.center = quatVec(\${rotate2}, \${gsplat2}.center);\` : null,
            translate2 ? \`\${indent}\${gsplat2}.center += \${translate2};\` : null,
            scale2 ? \`\${indent}\${gsplat2}.scales *= \${scale2};\` : null,
            rotate2 ? \`\${indent}\${gsplat2}.quaternion = quatQuat(\${rotate2}, \${gsplat2}.quaternion);\` : null,
            recolor2 ? \`\${indent}\${gsplat2}.rgba *= \${recolor2};\` : null,
            "}"
          ].filter(Boolean);
          return statements;
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "gsplat");
    }
  }
  const outputPackedSplat = (gsplat) => new OutputPackedSplat({ gsplat });
  class OutputPackedSplat extends Dyno {
    constructor({ gsplat }) {
      super({
        inTypes: { gsplat: Gsplat },
        inputs: { gsplat },
        globals: () => [defineGsplat],
        statements: ({ inputs, outputs }) => {
          const { output } = outputs;
          if (!output) {
            return [];
          }
          const { gsplat: gsplat2 } = inputs;
          if (gsplat2) {
            return unindentLines(\`
            if (isGsplatActive(\${gsplat2}.flags)) {
              \${output} = packSplat(\${gsplat2}.center, \${gsplat2}.scales, \${gsplat2}.quaternion, \${gsplat2}.rgba);
            } else {
              \${output} = uvec4(0u, 0u, 0u, 0u);
            }
          \`);
          }
          return [\`\${output} = uvec4(0u, 0u, 0u, 0u);\`];
        }
      });
    }
    dynoOut() {
      return new DynoOutput(this, "output");
    }
  }
  class OutputRgba8 extends Dyno {
    constructor({ rgba8 }) {
      super({
        inTypes: { rgba8: "vec4" },
        inputs: { rgba8 },
        statements: ({ inputs, outputs }) => [
          \`target = \${inputs.rgba8 ?? "vec4(0.0, 0.0, 0.0, 0.0)"};\`
        ]
      });
    }
    dynoOut() {
      return new DynoOutput(this, "rgba8");
    }
  }
  class DynoUniform extends Dyno {
    constructor({
      key,
      type,
      count,
      value,
      update,
      globals
    }) {
      key = key ?? "value";
      super({
        outTypes: { [key]: type },
        update: () => {
          if (update) {
            const value2 = update(this.value);
            if (value2 !== void 0) {
              this.value = value2;
            }
          }
          this.uniform.value = this.value;
        },
        generate: ({ inputs, outputs }) => {
          const allGlobals = (globals == null ? void 0 : globals({ inputs, outputs })) ?? [];
          const uniforms = {};
          const name = outputs[key];
          if (name) {
            allGlobals.push(\`uniform \${dynoDeclare(name, type, count)};\`);
            uniforms[name] = this.uniform;
          }
          return { globals: allGlobals, uniforms };
        }
      });
      this.type = type;
      this.count = count;
      this.value = value;
      this.uniform = { value };
      this.outKey = key;
    }
    dynoOut() {
      return new DynoOutput(this, this.outKey);
    }
  }
  class DynoInt extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "int", value, update });
    }
  }
  class DynoFloat extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "float", value, update });
    }
  }
  class DynoVec3 extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "vec3", value, update });
    }
  }
  class DynoVec4 extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "vec4", value, update });
    }
  }
  class DynoUsampler2DArray extends DynoUniform {
    constructor({
      key,
      value,
      update
    }) {
      super({ key, type: "usampler2DArray", value, update });
    }
  }
  class DynoProgram {
    constructor({
      graph,
      inputs,
      outputs,
      template
    }) {
      this.graph = graph;
      this.template = template;
      this.inputs = inputs ?? {};
      this.outputs = outputs ?? {};
      const compile = new Compilation({ indent: this.template.indent });
      for (const key in this.outputs) {
        if (this.outputs[key]) {
          compile.declares.add(this.outputs[key]);
        }
      }
      const statements = graph.compile({
        inputs: this.inputs,
        outputs: this.outputs,
        compile
      });
      this.shader = template.generate({ globals: compile.globals, statements });
      this.uniforms = compile.uniforms;
      this.updaters = compile.updaters;
    }
    prepareMaterial() {
      return getMaterial(this);
    }
    update() {
      for (const updater of this.updaters) {
        updater();
      }
    }
  }
  class DynoProgramTemplate {
    constructor(template) {
      const globals = template.match(/^([ \\t]*)\\{\\{\\s*GLOBALS\\s*\\}\\}/m);
      const statements = template.match(/^([ \\t]*)\\{\\{\\s*STATEMENTS\\s*\\}\\}/m);
      if (!globals || !statements) {
        throw new Error(
          "Template must contain {{ GLOBALS }} and {{ STATEMENTS }}"
        );
      }
      this.before = template.substring(0, globals.index);
      this.between = template.substring(
        globals.index + globals[0].length,
        statements.index
      );
      this.after = template.substring(
        statements.index + statements[0].length
      );
      this.indent = statements[1];
    }
    generate({
      globals,
      statements
    }) {
      return this.before + Array.from(globals).join("\\n\\n") + this.between + statements.map((s) => this.indent + s).join("\\n") + this.after;
    }
  }
  const programMaterial = /* @__PURE__ */ new Map();
  function getMaterial(program) {
    let material = programMaterial.get(program);
    if (material) {
      return material;
    }
    material = new RawShaderMaterial({
      glslVersion: GLSL3,
      vertexShader: IDENT_VERTEX_SHADER,
      fragmentShader: program.shader,
      uniforms: program.uniforms
    });
    programMaterial.set(program, material);
    return material;
  }
  function addOutputType(a, b, operation = "add") {
    const error = () => {
      throw new Error(\`Invalid \${operation} types: \${a}, \${b}\`);
    };
    if (a === b) return a;
    if (a === "int") {
      if (isIntType(b)) return b;
      error();
    }
    if (b === "int") {
      if (isIntType(a)) return a;
      error();
    }
    if (a === "uint") {
      if (isUintType(b)) return b;
      error();
    }
    if (b === "uint") {
      if (isUintType(a)) return a;
      error();
    }
    if (a === "float") {
      if (isAllFloatType(b)) return b;
      error();
    }
    if (b === "float") {
      if (isAllFloatType(a)) return a;
      error();
    }
    throw new Error(\`Invalid \${operation} types: \${a}, \${b}\`);
  }
  function subOutputType(a, b) {
    return addOutputType(a, b, "sub");
  }
  function mulOutputType(a, b) {
    const error = () => {
      throw new Error(\`Invalid mul types: \${a}, \${b}\`);
    };
    const result = (value) => value;
    if (a === "int") {
      if (isIntType(b)) return result(b);
      error();
    }
    if (b === "int") {
      if (isIntType(a)) return result(a);
      error();
    }
    if (a === "uint") {
      if (isUintType(b)) return result(b);
      error();
    }
    if (b === "uint") {
      if (isUintType(a)) return result(a);
      error();
    }
    if (a === "float") {
      if (isAllFloatType(b)) return result(b);
      error();
    }
    if (b === "float") {
      if (isAllFloatType(a)) return result(a);
      error();
    }
    if (isIntType(a) || isUintType(a) || isIntType(b) || isUintType(b)) {
      if (a === b) return result(a);
      error();
    }
    if (a === "vec2") {
      if (b === "vec2" || isMat2(b)) return result("vec2");
      if (b === "mat3x2") return result("vec3");
      if (b === "mat4x2") return result("vec4");
      error();
    }
    if (a === "vec3") {
      if (b === "mat2x3") return result("vec2");
      if (b === "vec3" || isMat3(b)) return result("vec3");
      if (b === "mat4x3") return result("vec4");
      error();
    }
    if (a === "vec4") {
      if (b === "mat2x4") return result("vec2");
      if (b === "mat3x4") return result("vec3");
      if (b === "vec4" || isMat4(b)) return result("vec4");
      error();
    }
    if (b === "vec2") {
      if (isMat2(a)) return result("vec2");
      if (a === "mat2x3") return result("vec3");
      if (a === "mat2x4") return result("vec4");
      error();
    }
    if (b === "vec3") {
      if (a === "mat3x2") return result("vec2");
      if (isMat3(a)) return result("vec3");
      if (a === "mat3x4") return result("vec4");
      error();
    }
    if (b === "vec4") {
      if (a === "mat4x2") return result("vec2");
      if (a === "mat4x3") return result("vec3");
      if (isMat4(a)) return result("vec4");
      error();
    }
    if (isMat2(a)) {
      if (isMat2(b)) return result("mat2");
      if (b === "mat3x2") return result("mat3x2");
      if (b === "mat4x2") return result("mat4x2");
      error();
    }
    if (a === "mat2x3") {
      if (isMat2(b)) return result("mat2x3");
      if (b === "mat3x2") return result("mat3");
      if (b === "mat4x2") return result("mat4x3");
      error();
    }
    if (a === "mat2x4") {
      if (isMat2(b)) return result("mat2x4");
      if (b === "mat3x2") return result("mat3x4");
      if (b === "mat4x2") return result("mat4");
      error();
    }
    if (a === "mat3x2") {
      if (b === "mat2x3") return result("mat2");
      if (isMat3(b)) return result("mat3x2");
      if (b === "mat4x3") return result("mat4x2");
      error();
    }
    if (isMat3(a)) {
      if (b === "mat2x3") return result("mat2x3");
      if (isMat3(b)) return result("mat3");
      if (b === "mat4x3") return result("mat4x3");
      error();
    }
    if (a === "mat3x4") {
      if (b === "mat2x3") return result("mat2x4");
      if (isMat3(b)) return result("mat3x4");
      if (b === "mat4x3") return result("mat4");
      error();
    }
    if (a === "mat4x2") {
      if (b === "mat2x4") return result("mat2");
      if (b === "mat3x4") return result("mat3x2");
      if (isMat4(b)) return result("mat4x2");
      error();
    }
    if (a === "mat4x3") {
      if (b === "mat2x4") return result("mat2x3");
      if (b === "mat3x4") return result("mat3");
      if (isMat4(b)) return result("mat4x3");
      error();
    }
    if (isMat4(a)) {
      if (b === "mat2x4") return result("mat2x4");
      if (b === "mat3x4") return result("mat3x4");
      if (isMat4(b)) return result("mat4");
      error();
    }
    throw new Error(\`Invalid mul types: \${a}, \${b}\`);
  }
  const add = (a, b) => new Add({ a, b });
  const sub = (a, b) => new Sub({ a, b });
  const mul = (a, b) => new Mul({ a, b });
  class Add extends BinaryOp {
    constructor({ a, b }) {
      super({ a, b, outKey: "sum", outTypeFunc: addOutputType });
      this.statements = ({ inputs, outputs }) => {
        return [\`\${outputs.sum} = \${inputs.a} + \${inputs.b};\`];
      };
    }
  }
  class Sub extends BinaryOp {
    constructor({ a, b }) {
      super({ a, b, outKey: "difference", outTypeFunc: subOutputType });
      this.statements = ({ inputs, outputs }) => {
        return [\`\${outputs.difference} = \${inputs.a} - \${inputs.b};\`];
      };
    }
  }
  class Mul extends BinaryOp {
    constructor({ a, b }) {
      super({ a, b, outKey: "product", outTypeFunc: mulOutputType });
      this.statements = ({ inputs, outputs }) => {
        return [\`\${outputs.product} = \${inputs.a} * \${inputs.b};\`];
      };
    }
  }
  const normalize = (a) => new Normalize({ a });
  const extendVec = (a, b) => new ExtendVec({ a, b });
  class Normalize extends UnaryOp {
    constructor({ a }) {
      super({ a, outTypeFunc: (aType) => aType, outKey: "normalize" });
      this.statements = ({ inputs, outputs }) => [
        \`\${outputs.normalize} = normalize(\${inputs.a});\`
      ];
    }
  }
  function extendVecOutputType(type) {
    if (type === "float") return "vec2";
    if (type === "vec2") return "vec3";
    if (type === "vec3") return "vec4";
    throw new Error("Invalid type");
  }
  class ExtendVec extends BinaryOp {
    constructor({ a, b }) {
      const type = valType(a);
      const outType = extendVecOutputType(type);
      super({ a, b, outKey: "extend", outTypeFunc: () => outType });
      this.statements = ({ inputs, outputs }) => [
        \`\${outputs.extend} = \${outType}(\${inputs.a}, \${inputs.b});\`
      ];
    }
  }
  const transformPos = (position, {
    scale,
    scales,
    rotate,
    translate
  }) => {
    return new TransformPosition({ position, scale, scales, rotate, translate }).outputs.position;
  };
  const transformDir = (dir, {
    scale,
    scales,
    rotate
  }) => {
    return new TransformDir({ dir, scale, scales, rotate }).outputs.dir;
  };
  class TransformPosition extends Dyno {
    constructor({
      position,
      scale,
      scales,
      rotate,
      translate
    }) {
      super({
        inTypes: {
          position: "vec3",
          scale: "float",
          scales: "vec3",
          rotate: "vec4",
          translate: "vec3"
        },
        outTypes: { position: "vec3" },
        inputs: { position, scale, scales, rotate, translate },
        statements: ({ inputs, outputs }) => {
          const { position: position2 } = outputs;
          if (!position2) {
            return [];
          }
          const { scale: scale2, scales: scales2, rotate: rotate2, translate: translate2 } = inputs;
          return [
            \`\${position2} = \${inputs.position ?? "vec3(0.0, 0.0, 0.0)"};\`,
            !scale2 ? null : \`\${position2} *= \${scale2};\`,
            !scales2 ? null : \`\${position2} *= \${scales2};\`,
            !rotate2 ? null : \`\${position2} = quatVec(\${rotate2}, \${position2});\`,
            !translate2 ? null : \`\${position2} += \${translate2};\`
          ].filter(Boolean);
        }
      });
    }
  }
  class TransformDir extends Dyno {
    constructor({
      dir,
      scale,
      scales,
      rotate
    }) {
      super({
        inTypes: { dir: "vec3", scale: "float", scales: "vec3", rotate: "vec4" },
        outTypes: { dir: "vec3" },
        inputs: { dir, scale, scales, rotate },
        statements: ({ inputs, outputs }) => {
          const { dir: dir2 } = outputs;
          if (!dir2) {
            return [];
          }
          const { scale: scale2, scales: scales2, rotate: rotate2 } = inputs;
          return [
            \`\${dir2} = \${inputs.dir ?? "vec3(0.0, 0.0, 0.0)"};\`,
            !scale2 ? null : \`\${dir2} *= \${scale2};\`,
            !scales2 ? null : \`\${dir2} *= \${scales2};\`,
            !rotate2 ? null : \`\${dir2} = quatVec(\${rotate2}, \${dir2});\`
          ].filter(Boolean);
        }
      });
    }
  }
  var computeUvec4_default = "precision highp float;\\nprecision highp int;\\nprecision highp sampler2D;\\nprecision highp usampler2D;\\nprecision highp isampler2D;\\nprecision highp sampler2DArray;\\nprecision highp usampler2DArray;\\nprecision highp isampler2DArray;\\nprecision highp sampler3D;\\nprecision highp usampler3D;\\nprecision highp isampler3D;\\n\\n#include <splatDefines>\\n\\nuniform uint targetLayer;\\nuniform int targetBase;\\nuniform int targetCount;\\n\\nout uvec4 target;\\n\\n{{ GLOBALS }}\\n\\nvoid produceSplat(int index) {\\n    {{ STATEMENTS }}\\n}\\n\\nvoid main() {\\n    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);\\n    int index = targetIndex - targetBase;\\n\\n    if ((index >= 0) && (index < targetCount)) {\\n        produceSplat(index);\\n    } else {\\n        target = uvec4(0u, 0u, 0u, 0u);\\n    }\\n}";
  const _PackedSplats = class _PackedSplats {
    constructor(options = {}) {
      this.maxSplats = 0;
      this.numSplats = 0;
      this.packedArray = null;
      this.isInitialized = false;
      this.target = null;
      this.source = null;
      this.needsUpdate = true;
      this.extra = {};
      this.dyno = new DynoPackedSplats({ packedSplats: this });
      this.initialized = Promise.resolve(this);
      this.reinitialize(options);
    }
    reinitialize(options) {
      this.isInitialized = false;
      if (options.url || options.fileBytes || options.construct) {
        this.initialized = this.asyncInitialize(options).then(() => {
          this.isInitialized = true;
          return this;
        });
      } else {
        this.initialize(options);
        this.isInitialized = true;
        this.initialized = Promise.resolve(this);
      }
    }
    initialize(options) {
      if (options.packedArray) {
        this.packedArray = options.packedArray;
        this.maxSplats = Math.floor(this.packedArray.length / 4);
        this.maxSplats = Math.floor(this.maxSplats / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
        this.numSplats = Math.min(
          this.maxSplats,
          options.numSplats ?? Number.POSITIVE_INFINITY
        );
      } else {
        this.maxSplats = options.maxSplats ?? 0;
        this.numSplats = 0;
      }
      this.extra = options.extra ?? {};
    }
    async asyncInitialize(options) {
      let { url, fileBytes, construct } = options;
      if (url) {
        fileBytes = await fetch(url).then(async (response) => {
          if (!response.ok) {
            throw new Error(
              \`\${response.status} "\${response.statusText}" fetching URL: \${url}\`
            );
          }
          const arrayBuffer = await response.arrayBuffer();
          return arrayBuffer;
        });
      }
      if (fileBytes) {
        const unpacked = await unpackSplats({
          input: fileBytes,
          fileType: options.fileType,
          pathOrUrl: options.fileName ?? url
        });
        this.initialize(unpacked);
      }
      if (construct) {
        const maybePromise = construct(this);
        if (maybePromise instanceof Promise) {
          await maybePromise;
        }
      }
    }
    // Call this when you are finished with the PackedSplats and want to free
    // any buffers it holds.
    dispose() {
      if (this.target) {
        this.target.dispose();
        this.target = null;
      }
      if (this.source) {
        this.source.dispose();
        this.source = null;
      }
    }
    // Ensures that this.packedArray can fit numSplats Gsplats. If it's too small,
    // resize exponentially and copy over the original data.
    //
    // Typically you don't need to call this, because calling this.setSplat(index, ...)
    // and this.pushSplat(...) will automatically call ensureSplats() so we have
    // enough splats.
    ensureSplats(numSplats) {
      const targetSize = numSplats <= this.maxSplats ? this.maxSplats : (
        // Grow exponentially to avoid frequent reallocations
        Math.max(numSplats, 2 * this.maxSplats)
      );
      const currentSize = !this.packedArray ? 0 : this.packedArray.length / 4;
      if (!this.packedArray || targetSize > currentSize) {
        this.maxSplats = getTextureSize(targetSize).maxSplats;
        const newArray = new Uint32Array(this.maxSplats * 4);
        if (this.packedArray) {
          newArray.set(this.packedArray);
        }
        this.packedArray = newArray;
      }
      return this.packedArray;
    }
    // Ensure the extra array for the given level is large enough to hold numSplats
    ensureSplatsSh(level, numSplats) {
      let wordsPerSplat;
      let key;
      if (level === 0) {
        return this.ensureSplats(numSplats);
      }
      if (level === 1) {
        wordsPerSplat = 2;
        key = "sh1";
      } else if (level === 2) {
        wordsPerSplat = 4;
        key = "sh2";
      } else if (level === 3) {
        wordsPerSplat = 4;
        key = "sh3";
      } else {
        throw new Error(\`Invalid level: \${level}\`);
      }
      let maxSplats = !this.extra[key] ? 0 : this.extra[key].length / wordsPerSplat;
      const targetSize = numSplats <= maxSplats ? maxSplats : Math.max(numSplats, 2 * maxSplats);
      if (!this.extra[key] || targetSize > maxSplats) {
        maxSplats = getTextureSize(targetSize).maxSplats;
        const newArray = new Uint32Array(maxSplats * wordsPerSplat);
        if (this.extra[key]) {
          newArray.set(this.extra[key]);
        }
        this.extra[key] = newArray;
      }
      return this.extra[key];
    }
    // Unpack the 16-byte Gsplat data at index into the Three.js components
    // center: THREE.Vector3, scales: THREE.Vector3, quaternion: THREE.Quaternion,
    // opacity: number 0..1, color: THREE.Color 0..1.
    getSplat(index) {
      if (!this.packedArray || index >= this.numSplats) {
        throw new Error("Invalid index");
      }
      return unpackSplat(this.packedArray, index);
    }
    // Set all PackedSplat components at index with the provided Gsplat attributes
    // (can be the same objects returned by getSplat). Ensures there is capacity
    // for at least index+1 Gsplats.
    setSplat(index, center, scales, quaternion, opacity, color) {
      const packedSplats = this.ensureSplats(index + 1);
      setPackedSplat(
        packedSplats,
        index,
        center.x,
        center.y,
        center.z,
        scales.x,
        scales.y,
        scales.z,
        quaternion.x,
        quaternion.y,
        quaternion.z,
        quaternion.w,
        opacity,
        color.r,
        color.g,
        color.b
      );
      this.numSplats = Math.max(this.numSplats, index + 1);
    }
    // Effectively calls this.setSplat(this.numSplats++, center, ...), useful on
    // construction where you just want to iterate and create a collection of Gsplats.
    pushSplat(center, scales, quaternion, opacity, color) {
      const packedSplats = this.ensureSplats(this.numSplats + 1);
      setPackedSplat(
        packedSplats,
        this.numSplats,
        center.x,
        center.y,
        center.z,
        scales.x,
        scales.y,
        scales.z,
        quaternion.x,
        quaternion.y,
        quaternion.z,
        quaternion.w,
        opacity,
        color.r,
        color.g,
        color.b
      );
      ++this.numSplats;
    }
    // Iterate over Gsplats index 0..=(this.numSplats-1), unpack each Gsplat
    // and invoke the callback function with the Gsplat attributes.
    forEachSplat(callback) {
      if (!this.packedArray || !this.numSplats) {
        return;
      }
      for (let i2 = 0; i2 < this.numSplats; ++i2) {
        const unpacked = unpackSplat(this.packedArray, i2);
        callback(
          i2,
          unpacked.center,
          unpacked.scales,
          unpacked.quaternion,
          unpacked.opacity,
          unpacked.color
        );
      }
    }
    // Ensures our PackedSplats.target render target has enough space to generate
    // maxSplats total Gsplats, and reallocate if not large enough.
    ensureGenerate(maxSplats) {
      if (this.target && (maxSplats ?? 1) <= this.maxSplats) {
        return false;
      }
      this.dispose();
      const textureSize = getTextureSize(maxSplats ?? 1);
      const { width, height, depth } = textureSize;
      this.maxSplats = textureSize.maxSplats;
      this.target = new WebGLArrayRenderTarget(width, height, depth, {
        depthBuffer: false,
        stencilBuffer: false,
        generateMipmaps: false,
        magFilter: NearestFilter,
        minFilter: NearestFilter
      });
      this.target.texture.format = RGBAIntegerFormat;
      this.target.texture.type = UnsignedIntType;
      this.target.texture.internalFormat = "RGBA32UI";
      return true;
    }
    // Given an array of splatCounts (.numSplats for each
    // SplatGenerator/SplatMesh in the scene), compute a
    // "mapping layout" in the composite array of generated outputs.
    generateMapping(splatCounts) {
      let maxSplats = 0;
      const mapping = splatCounts.map((numSplats) => {
        const base = maxSplats;
        const rounded = Math.ceil(numSplats / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
        maxSplats += rounded;
        return { base, count: numSplats };
      });
      return { maxSplats, mapping };
    }
    // Returns a THREE.DataArrayTexture representing the PackedSplats content as
    // a Uint32x4 data array texture (2048 x 2048 x depth in size)
    getTexture() {
      if (this.target) {
        return this.target.texture;
      }
      if (this.source || this.packedArray) {
        const source = this.maybeUpdateSource();
        return source;
      }
      return _PackedSplats.getEmpty();
    }
    // Check if source texture needs to be created/updated
    maybeUpdateSource() {
      if (!this.packedArray) {
        throw new Error("No packed splats");
      }
      if (this.needsUpdate || !this.source) {
        this.needsUpdate = false;
        if (this.source) {
          const { width, height, depth } = this.source.image;
          if (this.maxSplats !== width * height * depth) {
            this.source.dispose();
            this.source = null;
          }
        }
        if (!this.source) {
          const { width, height, depth } = getTextureSize(this.maxSplats);
          this.source = new DataArrayTexture(
            this.packedArray,
            width,
            height,
            depth
          );
          this.source.format = RGBAIntegerFormat;
          this.source.type = UnsignedIntType;
          this.source.internalFormat = "RGBA32UI";
          this.source.needsUpdate = true;
        } else if (this.packedArray.buffer !== this.source.image.data.buffer) {
          this.source.image.data = new Uint8Array(this.packedArray.buffer);
        }
        this.source.needsUpdate = true;
      }
      return this.source;
    }
    // Can be used where you need an uninitialized THREE.DataArrayTexture like
    // a uniform you will update with the result of this.getTexture() later.
    static getEmpty() {
      if (!_PackedSplats.emptySource) {
        const { width, height, depth, maxSplats } = getTextureSize(1);
        const emptyArray = new Uint32Array(maxSplats * 4);
        _PackedSplats.emptySource = new DataArrayTexture(
          emptyArray,
          width,
          height,
          depth
        );
        _PackedSplats.emptySource.format = RGBAIntegerFormat;
        _PackedSplats.emptySource.type = UnsignedIntType;
        _PackedSplats.emptySource.internalFormat = "RGBA32UI";
        _PackedSplats.emptySource.needsUpdate = true;
      }
      return _PackedSplats.emptySource;
    }
    // Get a program and THREE.RawShaderMaterial for a given GsplatGenerator,
    // generating it if necessary and caching the result.
    prepareProgramMaterial(generator) {
      let program = _PackedSplats.generatorProgram.get(generator);
      if (!program) {
        const graph = dynoBlock(
          { index: "int" },
          { output: "uvec4" },
          ({ index }) => {
            generator.inputs.index = index;
            const gsplat = generator.outputs.gsplat;
            const output = outputPackedSplat(gsplat);
            return { output };
          }
        );
        if (!_PackedSplats.programTemplate) {
          _PackedSplats.programTemplate = new DynoProgramTemplate(
            computeUvec4_default
          );
        }
        program = new DynoProgram({
          graph,
          inputs: { index: "index" },
          outputs: { output: "target" },
          template: _PackedSplats.programTemplate
        });
        Object.assign(program.uniforms, {
          targetLayer: { value: 0 },
          targetBase: { value: 0 },
          targetCount: { value: 0 }
        });
        _PackedSplats.generatorProgram.set(generator, program);
      }
      const material = program.prepareMaterial();
      _PackedSplats.mesh.material = material;
      return { program, material };
    }
    saveRenderState(renderer) {
      return {
        xrPresenting: renderer.xr.isPresenting,
        autoClear: renderer.autoClear,
        scissorTest: renderer.getScissorTest(),
        pixelRatio: renderer.getPixelRatio()
      };
    }
    resetRenderState(renderer, state) {
      renderer.setRenderTarget(null);
      renderer.setPixelRatio(state.pixelRatio);
      renderer.xr.isPresenting = state.xrPresenting;
      renderer.autoClear = state.autoClear;
      renderer.setScissorTest(state.scissorTest);
    }
    // Executes a dyno program specified by generator which is any DynoBlock that
    // maps { index: "int" } to { gsplat: Gsplat }. This is called in
    // SparkRenderer.updateInternal() to re-generate Gsplats in the scene for
    // SplatGenerator instances whose version is newer than what was generated
    // for it last time.
    generate({
      generator,
      base,
      count,
      renderer
    }) {
      if (!this.target) {
        throw new Error("Target must be initialized with ensureSplats");
      }
      if (base + count > this.maxSplats) {
        throw new Error("Base + count exceeds maxSplats");
      }
      const { program, material } = this.prepareProgramMaterial(generator);
      program.update();
      const renderState = this.saveRenderState(renderer);
      const nextBase = Math.ceil((base + count) / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
      const layerSize = SPLAT_TEX_WIDTH * SPLAT_TEX_HEIGHT;
      material.uniforms.targetBase.value = base;
      material.uniforms.targetCount.value = count;
      while (base < nextBase) {
        const layer = Math.floor(base / layerSize);
        material.uniforms.targetLayer.value = layer;
        const layerBase = layer * layerSize;
        const layerYStart = Math.floor((base - layerBase) / SPLAT_TEX_WIDTH);
        const layerYEnd = Math.min(
          SPLAT_TEX_HEIGHT,
          Math.ceil((nextBase - layerBase) / SPLAT_TEX_WIDTH)
        );
        renderer.setPixelRatio(1);
        renderer.setRenderTarget(this.target, layer);
        renderer.xr.isPresenting = false;
        renderer.autoClear = false;
        renderer.setScissorTest(true);
        renderer.setScissor(
          0,
          layerYStart,
          SPLAT_TEX_WIDTH,
          layerYEnd - layerYStart
        );
        renderer.render(_PackedSplats.scene, _PackedSplats.camera);
        base += SPLAT_TEX_WIDTH * (layerYEnd - layerYStart);
      }
      this.resetRenderState(renderer, renderState);
      return { nextBase };
    }
  };
  _PackedSplats.emptySource = null;
  _PackedSplats.programTemplate = null;
  _PackedSplats.generatorProgram = /* @__PURE__ */ new Map();
  _PackedSplats.geometry = new PlaneGeometry(2, 2);
  _PackedSplats.mesh = new Mesh(
    _PackedSplats.geometry,
    new RawShaderMaterial({ visible: false })
  );
  _PackedSplats.scene = new Scene().add(_PackedSplats.mesh);
  _PackedSplats.camera = new Camera();
  let PackedSplats = _PackedSplats;
  class DynoPackedSplats extends DynoUniform {
    constructor({ packedSplats } = {}) {
      super({
        key: "packedSplats",
        type: TPackedSplats,
        globals: () => [definePackedSplats],
        value: {
          texture: PackedSplats.getEmpty(),
          numSplats: 0
        },
        update: (value) => {
          var _a2, _b2;
          value.texture = ((_a2 = this.packedSplats) == null ? void 0 : _a2.getTexture()) ?? PackedSplats.getEmpty();
          value.numSplats = ((_b2 = this.packedSplats) == null ? void 0 : _b2.numSplats) ?? 0;
          return value;
        }
      });
      this.packedSplats = packedSplats;
    }
  }
  var computeVec4_default = "precision highp float;\\nprecision highp int;\\nprecision highp sampler2D;\\nprecision highp usampler2D;\\nprecision highp isampler2D;\\nprecision highp sampler2DArray;\\nprecision highp usampler2DArray;\\nprecision highp isampler2DArray;\\nprecision highp sampler3D;\\nprecision highp usampler3D;\\nprecision highp isampler3D;\\n\\n#include <splatDefines>\\n\\nuniform uint targetLayer;\\nuniform int targetBase;\\nuniform int targetCount;\\n\\nout vec4 target;\\n\\n{{ GLOBALS }}\\n\\nvoid computeReadback(int index) {\\n    {{ STATEMENTS }}\\n}\\n\\nvoid main() {\\n    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);\\n    int index = targetIndex - targetBase;\\n\\n    if ((index >= 0) && (index < targetCount)) {\\n        computeReadback(index);\\n    } else {\\n        target = vec4(0.0, 0.0, 0.0, 0.0);\\n    }\\n}";
  const _Readback = class _Readback {
    constructor({ renderer } = {}) {
      this.renderer = renderer;
      this.capacity = 0;
      this.count = 0;
    }
    dispose() {
      if (this.target) {
        this.target.dispose();
        this.target = void 0;
      }
    }
    // Ensure we have a buffer large enough for the readback of count indices.
    // Pass in previous bufer of the desired type.
    ensureBuffer(count, buffer) {
      const roundedCount = Math.ceil(Math.max(1, count) / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
      const bytes = roundedCount * 4;
      if (buffer.byteLength >= bytes) {
        return buffer;
      }
      const newBuffer = new ArrayBuffer(bytes);
      if (buffer instanceof ArrayBuffer) {
        return newBuffer;
      }
      const ctor = buffer.constructor;
      return new ctor(newBuffer);
    }
    // Ensure our render target is large enough for the readback of capacity indices.
    ensureCapacity(capacity) {
      const { width, height, depth, maxSplats } = getTextureSize(capacity);
      if (!this.target || maxSplats > this.capacity) {
        this.dispose();
        this.capacity = maxSplats;
        this.target = new WebGLArrayRenderTarget(width, height, depth, {
          depthBuffer: false,
          stencilBuffer: false,
          generateMipmaps: false,
          magFilter: NearestFilter,
          minFilter: NearestFilter
        });
        this.target.texture.format = RGBAFormat;
        this.target.texture.type = UnsignedByteType;
        this.target.texture.internalFormat = "RGBA8";
      }
    }
    // Get a program and THREE.RawShaderMaterial for a given Rgba8Readback,
    // generating it if necessary and caching the result.
    prepareProgramMaterial(reader) {
      let program = _Readback.readbackProgram.get(reader);
      if (!program) {
        const graph = dynoBlock(
          { index: "int" },
          { rgba8: "vec4" },
          ({ index }) => {
            reader.inputs.index = index;
            const rgba8 = new OutputRgba8({ rgba8: reader.outputs.rgba8 });
            return { rgba8 };
          }
        );
        if (!_Readback.programTemplate) {
          _Readback.programTemplate = new DynoProgramTemplate(computeVec4_default);
        }
        program = new DynoProgram({
          graph,
          inputs: { index: "index" },
          outputs: { rgba8: "target" },
          template: _Readback.programTemplate
        });
        Object.assign(program.uniforms, {
          targetLayer: { value: 0 },
          targetBase: { value: 0 },
          targetCount: { value: 0 }
        });
        _Readback.readbackProgram.set(reader, program);
      }
      const material = program.prepareMaterial();
      _Readback.mesh.material = material;
      return { program, material };
    }
    saveRenderState(renderer) {
      return {
        xrPresenting: renderer.xr.isPresenting,
        autoClear: renderer.autoClear,
        scissorTest: renderer.getScissorTest(),
        pixelRatio: renderer.getPixelRatio()
      };
    }
    resetRenderState(renderer, state) {
      renderer.setRenderTarget(null);
      renderer.setPixelRatio(state.pixelRatio);
      renderer.xr.isPresenting = state.xrPresenting;
      renderer.autoClear = state.autoClear;
      renderer.setScissorTest(state.scissorTest);
    }
    process({
      count,
      material
    }) {
      const renderer = this.renderer;
      if (!renderer) {
        throw new Error("No renderer");
      }
      if (!this.target) {
        throw new Error("No target");
      }
      const layerSize = SPLAT_TEX_WIDTH * SPLAT_TEX_HEIGHT;
      material.uniforms.targetBase.value = 0;
      material.uniforms.targetCount.value = count;
      let baseIndex = 0;
      while (baseIndex < count) {
        const layer = Math.floor(baseIndex / layerSize);
        const layerBase = layer * layerSize;
        const layerYEnd = Math.min(
          SPLAT_TEX_HEIGHT,
          Math.ceil((count - layerBase) / SPLAT_TEX_WIDTH)
        );
        material.uniforms.targetLayer.value = layer;
        renderer.setPixelRatio(1);
        renderer.setRenderTarget(this.target, layer);
        renderer.xr.isPresenting = false;
        renderer.autoClear = false;
        renderer.setScissorTest(true);
        renderer.setScissor(0, 0, SPLAT_TEX_WIDTH, layerYEnd);
        renderer.render(_Readback.scene, _Readback.camera);
        baseIndex += SPLAT_TEX_WIDTH * layerYEnd;
      }
      this.count = count;
    }
    async read({
      readback
    }) {
      const renderer = this.renderer;
      if (!renderer) {
        throw new Error("No renderer");
      }
      if (!this.target) {
        throw new Error("No target");
      }
      const roundedCount = Math.ceil(this.count / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
      if (readback.byteLength < roundedCount * 4) {
        throw new Error(
          \`Readback buffer too small: \${readback.byteLength} < \${roundedCount * 4}\`
        );
      }
      const readbackUint8 = new Uint8Array(
        readback instanceof ArrayBuffer ? readback : readback.buffer
      );
      const layerSize = SPLAT_TEX_WIDTH * SPLAT_TEX_HEIGHT;
      let baseIndex = 0;
      const promises = [];
      while (baseIndex < this.count) {
        const layer = Math.floor(baseIndex / layerSize);
        const layerBase = layer * layerSize;
        const layerYEnd = Math.min(
          SPLAT_TEX_HEIGHT,
          Math.ceil((this.count - layerBase) / SPLAT_TEX_WIDTH)
        );
        renderer.setPixelRatio(1);
        renderer.setRenderTarget(this.target, layer);
        const readbackSize = SPLAT_TEX_WIDTH * layerYEnd * 4;
        const subReadback = readbackUint8.subarray(
          layerBase * 4,
          layerBase * 4 + readbackSize
        );
        const promise = renderer == null ? void 0 : renderer.readRenderTargetPixelsAsync(
          this.target,
          0,
          0,
          SPLAT_TEX_WIDTH,
          layerYEnd,
          subReadback
        );
        promises.push(promise);
        baseIndex += SPLAT_TEX_WIDTH * layerYEnd;
      }
      return Promise.all(promises).then(() => readback);
    }
    // Perform render operation to run the Rgba8Readback program
    // but don't perform the readback yet.
    render({
      reader,
      count,
      renderer
    }) {
      this.renderer = renderer || this.renderer;
      if (!this.renderer) {
        throw new Error("No renderer");
      }
      this.ensureCapacity(count);
      const { program, material } = this.prepareProgramMaterial(reader);
      program.update();
      const renderState = this.saveRenderState(this.renderer);
      this.process({ count, material });
      this.resetRenderState(this.renderer, renderState);
    }
    // Perform a readback of the render target, returning a buffer of the
    // given type.
    async readback({
      readback
    }) {
      if (!this.renderer) {
        throw new Error("No renderer");
      }
      const renderState = this.saveRenderState(this.renderer);
      const promise = this.read({ readback });
      this.resetRenderState(this.renderer, renderState);
      return promise;
    }
    // Perform a render and readback operation for the given Rgba8Readback,
    // and readback buffer (call ensureBuffer first).
    async renderReadback({
      reader,
      count,
      renderer,
      readback
    }) {
      this.renderer = renderer || this.renderer;
      if (!this.renderer) {
        throw new Error("No renderer");
      }
      this.ensureCapacity(count);
      const { program, material } = this.prepareProgramMaterial(reader);
      program.update();
      const renderState = this.saveRenderState(this.renderer);
      this.process({ count, material });
      const promise = this.read({ readback });
      this.resetRenderState(this.renderer, renderState);
      return promise;
    }
    getTexture() {
      var _a2;
      return (_a2 = this.target) == null ? void 0 : _a2.texture;
    }
  };
  _Readback.programTemplate = null;
  _Readback.readbackProgram = /* @__PURE__ */ new Map();
  _Readback.geometry = new PlaneGeometry(2, 2);
  _Readback.mesh = new Mesh(
    _Readback.geometry,
    new RawShaderMaterial({ visible: false })
  );
  _Readback.scene = new Scene().add(_Readback.mesh);
  _Readback.camera = new Camera();
  let Readback = _Readback;
  const _RgbaArray = class _RgbaArray {
    constructor(options = {}) {
      this.capacity = 0;
      this.count = 0;
      this.array = null;
      this.readback = null;
      this.source = null;
      this.needsUpdate = true;
      this.dyno = new DynoUniform({
        key: "rgbaArray",
        type: TRgbaArray,
        globals: () => [defineRgbaArray],
        value: {
          texture: _RgbaArray.getEmpty(),
          count: 0
        },
        update: (value) => {
          var _a2;
          value.texture = ((_a2 = this.readback) == null ? void 0 : _a2.getTexture()) ?? this.source ?? _RgbaArray.getEmpty();
          value.count = this.count;
          return value;
        }
      });
      if (options.array) {
        this.array = options.array;
        this.capacity = Math.floor(this.array.length / 4);
        this.capacity = Math.floor(this.capacity / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;
        this.count = Math.min(
          this.capacity,
          options.count ?? Number.POSITIVE_INFINITY
        );
      } else {
        this.capacity = options.capacity ?? 0;
        this.count = 0;
      }
    }
    // Free up resources
    dispose() {
      if (this.readback) {
        this.readback.dispose();
        this.readback = null;
      }
      if (this.source) {
        this.source.dispose();
        this.source = null;
      }
    }
    // Ensure that our array is large enough to hold capacity RGBA8 values.
    ensureCapacity(capacity) {
      var _a2;
      if (!this.array || capacity > (((_a2 = this.array) == null ? void 0 : _a2.length) ?? 0) / 4) {
        this.capacity = getTextureSize(capacity).maxSplats;
        const newArray = new Uint8Array(this.capacity * 4);
        if (this.array) {
          newArray.set(this.array);
        }
        this.array = newArray;
      }
      return this.array;
    }
    // Get the THREE.DataArrayTexture from either the readback or the source.
    getTexture() {
      var _a2;
      let texture = (_a2 = this.readback) == null ? void 0 : _a2.getTexture();
      if (this.source || this.array) {
        texture = this.maybeUpdateSource();
      }
      return texture ?? _RgbaArray.getEmpty();
    }
    // Create or get a THREE.DataArrayTexture from the data array.
    maybeUpdateSource() {
      if (!this.array) {
        throw new Error("No array");
      }
      if (this.needsUpdate || !this.source) {
        this.needsUpdate = false;
        if (this.source) {
          const { width, height, depth } = this.source.image;
          if (this.capacity !== width * height * depth) {
            this.source.dispose();
            this.source = null;
          }
        }
        if (!this.source) {
          const { width, height, depth } = getTextureSize(this.capacity);
          this.source = new DataArrayTexture(
            this.array,
            width,
            height,
            depth
          );
          this.source.format = RGBAFormat;
          this.source.type = UnsignedByteType;
          this.source.internalFormat = "RGBA8";
          this.source.needsUpdate = true;
        } else if (this.array.buffer !== this.source.image.data.buffer) {
          this.source.image.data = new Uint8Array(this.array.buffer);
        }
        this.source.needsUpdate = true;
      }
      return this.source;
    }
    // Generate the RGBA8 values from a Rgba8Readback dyno program.
    render({
      reader,
      count,
      renderer
    }) {
      if (!this.readback) {
        this.readback = new Readback({ renderer });
      }
      this.readback.render({ reader, count, renderer });
      this.capacity = this.readback.capacity;
      this.count = this.readback.count;
    }
    // Extract the RGBA8 values from a PackedSplats collection.
    fromPackedSplats({
      packedSplats,
      base,
      count,
      renderer
    }) {
      const { dynoSplats, dynoBase, dynoCount, reader } = _RgbaArray.makeDynos();
      dynoSplats.packedSplats = packedSplats;
      dynoBase.value = base;
      dynoCount.value = count;
      this.render({ reader, count, renderer });
      return this;
    }
    // Read back the RGBA8 values from the readback buffer.
    async read() {
      if (!this.readback) {
        throw new Error("No readback");
      }
      if (!this.array || this.array.length < this.count * 4) {
        this.array = new Uint8Array(this.capacity * 4);
      }
      const result = await this.readback.readback({ readback: this.array });
      return result.subarray(0, this.count * 4);
    }
    // Can be used where you need an uninitialized THREE.DataArrayTexture like
    // a uniform you will update with the result of this.getTexture() later.
    static getEmpty() {
      if (!_RgbaArray.emptySource) {
        const emptyArray = new Uint8Array(1 * 4);
        _RgbaArray.emptySource = new DataArrayTexture(emptyArray, 1, 1, 1);
        _RgbaArray.emptySource.format = RGBAFormat;
        _RgbaArray.emptySource.type = UnsignedByteType;
        _RgbaArray.emptySource.internalFormat = "RGBA8";
        _RgbaArray.emptySource.needsUpdate = true;
      }
      return _RgbaArray.emptySource;
    }
    // Create a dyno program that can extract RGBA8 values from a PackedSplats
    static makeDynos() {
      if (!_RgbaArray.dynos) {
        const dynoSplats = new DynoPackedSplats();
        const dynoBase = new DynoInt({ value: 0 });
        const dynoCount = new DynoInt({ value: 0 });
        const reader = dynoBlock(
          { index: "int" },
          { rgba8: "vec4" },
          ({ index }) => {
            if (!index) {
              throw new Error("index is undefined");
            }
            index = add(index, dynoBase);
            const gsplat = readPackedSplatRange(
              dynoSplats,
              index,
              dynoBase,
              dynoCount
            );
            return { rgba8: splitGsplat(gsplat).outputs.rgba };
          }
        );
        _RgbaArray.dynos = { dynoSplats, dynoBase, dynoCount, reader };
      }
      return _RgbaArray.dynos;
    }
  };
  _RgbaArray.emptySource = null;
  _RgbaArray.dynos = null;
  let RgbaArray = _RgbaArray;
  const TRgbaArray = { type: "RgbaArray" };
  const defineRgbaArray = unindent(\`
  struct RgbaArray {
    sampler2DArray texture;
    int count;
  };
\`);
  function readRgbaArray(rgba, index) {
    const dyno2 = new Dyno({
      inTypes: { rgba: TRgbaArray, index: "int" },
      outTypes: { rgba: "vec4" },
      inputs: { rgba, index },
      globals: () => [defineRgbaArray],
      statements: ({ inputs, outputs }) => unindentLines(\`
        if ((index >= 0) && (index < \${inputs.rgba}.count)) {
          \${outputs.rgba} = texelFetch(\${inputs.rgba}.texture, splatTexCoord(index), 0);
        } else {
          \${outputs.rgba} = vec4(0.0, 0.0, 0.0, 0.0);
        }
      \`)
    });
    return dyno2.outputs.rgba;
  }
  function sdfTypeToNumber(type) {
    switch (type) {
      case "all":
        return 0;
      case "plane":
        return 1;
      case "sphere":
        return 2;
      case "box":
        return 3;
      case "ellipsoid":
        return 4;
      case "cylinder":
        return 5;
      case "capsule":
        return 6;
      case "infinite_cone":
        return 7;
      default:
        throw new Error(\`Unknown SDF type: \${type}\`);
    }
  }
  function rgbaBlendModeToNumber(mode) {
    switch (mode) {
      case "multiply":
        return 0;
      case "set_rgb":
        return 1;
      case "add_rgba":
        return 2;
      default:
        throw new Error(\`Unknown blend mode: \${mode}\`);
    }
  }
  class SplatEditSdf extends Object3D {
    constructor(options = {}) {
      super();
      const { type, invert, opacity, color, displace, radius } = options;
      this.type = type ?? "sphere";
      this.invert = invert ?? false;
      this.opacity = opacity ?? 1;
      this.color = color ?? new Color(1, 1, 1);
      this.displace = displace ?? new Vector3(0, 0, 0);
      this.radius = radius ?? 0;
    }
  }
  const _SplatEdit = class _SplatEdit extends Object3D {
    constructor(options = {}) {
      const {
        name,
        rgbaBlendMode = "multiply",
        sdfSmooth = 0,
        softEdge = 0,
        invert = false,
        sdfs = null
      } = options;
      super();
      this.rgbaBlendMode = rgbaBlendMode;
      this.sdfSmooth = sdfSmooth;
      this.softEdge = softEdge;
      this.invert = invert;
      this.sdfs = sdfs;
      this.ordering = _SplatEdit.nextOrdering++;
      this.name = name ?? \`Edit \${this.ordering}\`;
    }
    addSdf(sdf) {
      if (this.sdfs == null) {
        this.sdfs = [];
      }
      this.sdfs.push(sdf);
    }
    removeSdf(sdf) {
      if (this.sdfs == null) {
        return;
      }
      this.sdfs = this.sdfs.filter((s) => s !== sdf);
    }
  };
  _SplatEdit.nextOrdering = 1;
  let SplatEdit = _SplatEdit;
  class SplatEdits {
    constructor({ maxSdfs, maxEdits }) {
      this.maxSdfs = Math.max(16, maxSdfs ?? 0);
      this.numSdfs = 0;
      this.sdfData = new Uint32Array(this.maxSdfs * 8 * 4);
      this.sdfFloatData = new Float32Array(this.sdfData.buffer);
      this.sdfTexture = this.newSdfTexture(this.sdfData, this.maxSdfs);
      this.dynoSdfArray = new DynoUniform({
        key: "sdfArray",
        type: SdfArray,
        globals: () => [defineSdfArray],
        value: {
          numSdfs: 0,
          sdfTexture: this.sdfTexture
        },
        update: (uniform) => {
          uniform.numSdfs = this.numSdfs;
          uniform.sdfTexture = this.sdfTexture;
          return uniform;
        }
      });
      this.maxEdits = Math.max(16, maxEdits ?? 0);
      this.numEdits = 0;
      this.editData = new Uint32Array(this.maxEdits * 4);
      this.editFloatData = new Float32Array(this.editData.buffer);
      this.dynoNumEdits = new DynoInt({ value: 0 });
      this.dynoEdits = this.newEdits(this.editData, this.maxEdits);
    }
    newSdfTexture(data, maxSdfs) {
      const texture = new DataTexture(
        data,
        8,
        maxSdfs,
        RGBAIntegerFormat,
        UnsignedIntType
      );
      texture.internalFormat = "RGBA32UI";
      texture.needsUpdate = true;
      return texture;
    }
    newEdits(data, maxEdits) {
      return new DynoUniform({
        key: "edits",
        type: "uvec4",
        count: maxEdits,
        globals: () => [defineEdit],
        value: data
      });
    }
    // Ensure our SDF texture and edits uniform array have enough capacity.
    // Reallocate if not.
    ensureCapacity({
      maxSdfs,
      maxEdits
    }) {
      let dynoUpdated = false;
      if (maxSdfs > this.sdfTexture.image.height) {
        this.sdfTexture.dispose();
        this.maxSdfs = Math.max(this.maxSdfs * 2, maxSdfs);
        this.sdfData = new Uint32Array(this.maxSdfs * 8 * 4);
        this.sdfFloatData = new Float32Array(this.sdfData.buffer);
        this.sdfTexture = this.newSdfTexture(this.sdfData, this.maxSdfs);
      }
      if (maxEdits > (this.dynoEdits.count ?? 0)) {
        this.maxEdits = Math.max(this.maxEdits * 2, maxEdits);
        this.editData = new Uint32Array(this.maxEdits * 4);
        this.editFloatData = new Float32Array(this.editData.buffer);
        this.dynoEdits = this.newEdits(this.editData, this.maxEdits);
        dynoUpdated = true;
      }
      return dynoUpdated;
    }
    updateEditData(offset, value) {
      const updated = this.editData[offset] !== value;
      this.editData[offset] = value;
      return updated;
    }
    updateEditFloatData(offset, value) {
      tempFloat32[0] = value;
      const updated = this.editFloatData[offset] !== tempFloat32[0];
      if (updated) {
        this.editFloatData[offset] = tempFloat32[0];
      }
      return updated;
    }
    encodeEdit(editIndex, {
      sdfFirst,
      sdfCount,
      invert,
      rgbaBlendMode,
      softEdge,
      sdfSmooth
    }) {
      const base = editIndex * 4;
      let updated = false;
      updated = this.updateEditData(base + 0, rgbaBlendMode | (invert ? 1 << 8 : 0)) || updated;
      updated = this.updateEditData(base + 1, sdfFirst | sdfCount << 16) || updated;
      updated = this.updateEditFloatData(base + 2, softEdge) || updated;
      updated = this.updateEditFloatData(base + 3, sdfSmooth) || updated;
      return updated;
    }
    updateSdfData(offset, value) {
      const updated = this.sdfData[offset] !== value;
      this.sdfData[offset] = value;
      return updated;
    }
    updateSdfFloatData(offset, value) {
      tempFloat32[0] = value;
      const updated = this.sdfFloatData[offset] !== tempFloat32[0];
      if (updated) {
        this.sdfFloatData[offset] = tempFloat32[0];
      }
      return updated;
    }
    encodeSdf(sdfIndex, {
      sdfType,
      invert,
      center,
      quaternion,
      scale,
      sizes
    }, values) {
      const base = sdfIndex * (8 * 4);
      const flags = sdfType | (invert ? 1 << 8 : 0);
      let updated = false;
      updated = this.updateSdfFloatData(base + 0, (center == null ? void 0 : center.x) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 1, (center == null ? void 0 : center.y) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 2, (center == null ? void 0 : center.z) ?? 0) || updated;
      updated = this.updateSdfData(base + 3, flags) || updated;
      updated = this.updateSdfFloatData(base + 4, (quaternion == null ? void 0 : quaternion.x) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 5, (quaternion == null ? void 0 : quaternion.y) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 6, (quaternion == null ? void 0 : quaternion.z) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 7, (quaternion == null ? void 0 : quaternion.w) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 8, (scale == null ? void 0 : scale.x) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 9, (scale == null ? void 0 : scale.y) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 10, (scale == null ? void 0 : scale.z) ?? 0) || updated;
      updated = this.updateSdfData(base + 11, 0) || updated;
      updated = this.updateSdfFloatData(base + 12, (sizes == null ? void 0 : sizes.x) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 13, (sizes == null ? void 0 : sizes.y) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 14, (sizes == null ? void 0 : sizes.z) ?? 0) || updated;
      updated = this.updateSdfFloatData(base + 15, (sizes == null ? void 0 : sizes.w) ?? 0) || updated;
      const nValues = Math.min(4, values.length);
      for (let i2 = 0; i2 < nValues; ++i2) {
        const vBase = base + 16 + i2 * 4;
        updated = this.updateSdfFloatData(vBase + 0, values[i2].x) || updated;
        updated = this.updateSdfFloatData(vBase + 1, values[i2].y) || updated;
        updated = this.updateSdfFloatData(vBase + 2, values[i2].z) || updated;
        updated = this.updateSdfFloatData(vBase + 3, values[i2].w) || updated;
      }
      return updated;
    }
    // Update the SDFs and edits from an array of SplatEdits and their
    // associated SplatEditSdfs, updating it for the dyno shader program.
    update(edits) {
      const sdfCount = edits.reduce((total, { sdfs }) => total + sdfs.length, 0);
      const dynoUpdated = this.ensureCapacity({
        maxEdits: edits.length,
        maxSdfs: sdfCount
      });
      const values = [new Vector4(), new Vector4()];
      const center = new Vector3();
      const quaternion = new Quaternion();
      const scale = new Vector3();
      const sizes = new Vector4();
      let sdfIndex = 0;
      let updated = dynoUpdated;
      if (edits.length !== this.dynoNumEdits.value) {
        this.dynoNumEdits.value = edits.length;
        this.numEdits = edits.length;
        updated = true;
      }
      for (const [editIndex, { edit, sdfs }] of edits.entries()) {
        updated = this.encodeEdit(editIndex, {
          sdfFirst: sdfIndex,
          sdfCount: sdfs.length,
          invert: edit.invert,
          rgbaBlendMode: rgbaBlendModeToNumber(edit.rgbaBlendMode),
          softEdge: edit.softEdge,
          sdfSmooth: edit.sdfSmooth
        }) || updated;
        let sdfUpdated = false;
        for (const sdf of sdfs) {
          sizes.set(sdf.scale.x, sdf.scale.y, sdf.scale.z, sdf.radius);
          sdf.scale.setScalar(1);
          sdf.updateMatrixWorld();
          const worldToSdf = sdf.matrixWorld.clone().invert();
          worldToSdf.decompose(center, quaternion, scale);
          sdf.scale.set(sizes.x, sizes.y, sizes.z);
          sdf.updateMatrixWorld();
          values[0].set(sdf.color.r, sdf.color.g, sdf.color.b, sdf.opacity);
          values[1].set(sdf.displace.x, sdf.displace.y, sdf.displace.z, 1);
          sdfUpdated = this.encodeSdf(
            sdfIndex,
            {
              sdfType: sdfTypeToNumber(sdf.type),
              invert: sdf.invert,
              center,
              quaternion,
              scale,
              sizes
            },
            values
          ) || sdfUpdated;
          sdfIndex += 1;
        }
        this.numSdfs = sdfIndex;
        if (sdfUpdated) {
          this.sdfTexture.needsUpdate = true;
        }
        updated || (updated = sdfUpdated);
      }
      return { updated, dynoUpdated };
    }
    // Modify a Gsplat in a dyno shader program using the current edits and SDFs.
    modify(gsplat) {
      return applyGsplatRgbaDisplaceEdits(
        gsplat,
        this.dynoSdfArray,
        this.dynoNumEdits,
        this.dynoEdits
      );
    }
  }
  const SdfArray = { type: "SdfArray" };
  const defineSdfArray = unindent(\`
  struct SdfArray {
    int numSdfs;
    usampler2D sdfTexture;
  };

  void unpackSdfArray(
    usampler2D sdfTexture, int sdfIndex, out uint flags,
    out vec3 center, out vec4 quaternion, out vec3 scale, out vec4 sizes,
    int numValues, out vec4 values[4]
  ) {
    uvec4 temp = texelFetch(sdfTexture, ivec2(0, sdfIndex), 0);
    flags = temp.w;
    center = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(1, sdfIndex), 0);
    quaternion = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    temp = texelFetch(sdfTexture, ivec2(2, sdfIndex), 0);
    scale = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(3, sdfIndex), 0);
    sizes = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    for (int i = 0; i < numValues; ++i) {
      temp = texelFetch(sdfTexture, ivec2(4 + i, sdfIndex), 0);
      values[i] = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));
    }
  }

  const uint SDF_FLAG_TYPE = 0xFFu;
  const uint SDF_FLAG_INVERT = 1u << 8u;

  const uint SDF_TYPE_ALL = 0u;
  const uint SDF_TYPE_PLANE = 1u;
  const uint SDF_TYPE_SPHERE = 2u;
  const uint SDF_TYPE_BOX = 3u;
  const uint SDF_TYPE_ELLIPSOID = 4u;
  const uint SDF_TYPE_CYLINDER = 5u;
  const uint SDF_TYPE_CAPSULE = 6u;
  const uint SDF_TYPE_INFINITE_CONE = 7u;

  float evaluateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 outValues[4]
  ) {
    float distanceAccum = (smoothK == 0.0) ? 1.0 / 0.0 : 0.0;
    float maxExp = -1.0 / 0.0;
    for (int i = 0; i < numValues; ++i) {
        outValues[i] = vec4(0.0);
    }

    uint flags;
    vec3 center, scale;
    vec4 quaternion, sizes;
    vec4 values[4];

    int sdfLast = min(sdfFirst + sdfCount, numSdfs);
    for (int index = sdfFirst; index < sdfLast; ++index) {
      unpackSdfArray(sdfTexture, index, flags, center, quaternion, scale, sizes, numValues, values);
      uint sdfType = flags & SDF_FLAG_TYPE;
      vec3 sdfPos = quatVec(quaternion, pos * scale) + center;

      float distance;
      switch (sdfType) {
        case SDF_TYPE_ALL:
          distance = -1.0 / 0.0;
          break;
        case SDF_TYPE_PLANE: {
          distance = sdfPos.z;
          break;
        }
        case SDF_TYPE_SPHERE: {
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_BOX: {
          vec3 q = abs(sdfPos) - sizes.xyz + sizes.w;
          distance = length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - sizes.w;
          break;
        }
        case SDF_TYPE_ELLIPSOID: {
          vec3 sizes = sizes.xyz;
          float k0 = length(sdfPos / sizes);
          float k1 = length(sdfPos / dot(sizes, sizes));
          distance = k0 * (k0 - 1.0) / k1;
          break;
        }
        case SDF_TYPE_CYLINDER: {
          vec2 d = abs(vec2(length(sdfPos.xz), sdfPos.y)) - sizes.wy;
          distance = min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
          break;
        }
        case SDF_TYPE_CAPSULE: {
          sdfPos.y -= clamp(sdfPos.y, -0.5 * sizes.y, 0.5 * sizes.y);
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_INFINITE_CONE: {
          float angle = 0.25 * PI * sizes.w;
          vec2 c = vec2(sin(angle), cos(angle));
          vec2 q = vec2(length(sdfPos.xy), -sdfPos.z);
          float d = length(q - c * max(dot(q, c), 0.0));
          distance = d * (((q.x * c.y - q.y * c.x) < 0.0) ? -1.0 : 1.0);
          break;
        }
      }

      if ((flags & SDF_FLAG_INVERT) != 0u) {
        distance = -distance;
      }

      if (smoothK == 0.0) {
        if (distance < distanceAccum) {
          distanceAccum = distance;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] = values[i];
          }
        }
      } else {
        float scaledDistance = -distance / smoothK;
        if (scaledDistance > maxExp) {
          float scale = exp(maxExp - scaledDistance);
          distanceAccum *= scale;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] *= scale;
          }
          maxExp = scaledDistance;
        }

        float weight = exp(scaledDistance - maxExp);
        distanceAccum += weight;
        for (int i = 0; i < numValues; ++i) {
          outValues[i] += weight * values[i];
        }
      }
    }

    if (smoothK == 0.0) {
      return distanceAccum;
    } else {
      // Very distant SDFs may result in 0 accumulation
      if (distanceAccum == 0.0) {
        return 1.0 / 0.0;
      }
      for (int i = 0; i < numValues; ++i) {
        outValues[i] /= distanceAccum;
      }
      return (-log(distanceAccum) - maxExp) * smoothK;
    }
  }

  float modulateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 values[4],
    float softEdge, bool invert
  ) {
    float distance = evaluateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, numValues, values);
    if (invert) {
      distance = -distance;
    }

    return (softEdge == 0.0) ? ((distance < 0.0) ? 1.0 : 0.0)
      : clamp(-distance / softEdge + 0.5, 0.0, 1.0);
  }
\`);
  const defineEdit = unindent(\`
  const uint EDIT_FLAG_BLEND = 0xFFu;
  const uint EDIT_BLEND_MULTIPLY = 0u;
  const uint EDIT_BLEND_SET_RGB = 1u;
  const uint EDIT_BLEND_ADD_RGBA = 2u;
  const uint EDIT_FLAG_INVERT = 0x100u;

  void decodeEdit(
    uvec4 packedEdit, out int sdfFirst, out int sdfCount,
    out bool invert, out uint rgbaBlendMode, out float softEdge, out float sdfSmooth
  ) {
    rgbaBlendMode = packedEdit.x & EDIT_FLAG_BLEND;
    invert = (packedEdit.x & EDIT_FLAG_INVERT) != 0u;

    sdfFirst = int(packedEdit.y & 0xFFFFu);
    sdfCount = int(packedEdit.y >> 16u);

    softEdge = uintBitsToFloat(packedEdit.z);
    sdfSmooth = uintBitsToFloat(packedEdit.w);
  }

  void applyRgbaDisplaceEdit(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, inout vec3 pos,
    float smoothK, float softEdge, bool invert, uint rgbaBlendMode, inout vec4 rgba
  ) {
    vec4 values[4];
    float modulate = modulateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, 2, values, softEdge, invert);
    // On Android, moving values[0] is necessary to work around a compiler bug.
    vec4 sdfRgba = values[0];
    vec4 sdfDisplaceScale = values[1];

    vec4 target;
    switch (rgbaBlendMode) {
      case EDIT_BLEND_MULTIPLY:
        target = rgba * sdfRgba;
        break;
      case EDIT_BLEND_SET_RGB:
        target = vec4(sdfRgba.rgb, rgba.a * sdfRgba.a);
        break;
      case EDIT_BLEND_ADD_RGBA:
        target = rgba + sdfRgba;
        break;
      default:
        // Debug output if blend mode not set
        target = vec4(fract(pos), 1.0);
    }
    rgba = mix(rgba, target, modulate);
    pos += sdfDisplaceScale.xyz * modulate;
  }

  void applyPackedRgbaDisplaceEdit(uvec4 packedEdit, usampler2D sdfTexture, int numSdfs, inout vec3 pos, inout vec4 rgba) {
    int sdfFirst, sdfCount;
    bool invert;
    uint rgbaBlendMode;
    float softEdge, sdfSmooth;
    decodeEdit(packedEdit, sdfFirst, sdfCount, invert, rgbaBlendMode, softEdge, sdfSmooth);
    applyRgbaDisplaceEdit(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, sdfSmooth, softEdge, invert, rgbaBlendMode, rgba);
  }
\`);
  function applyGsplatRgbaDisplaceEdits(gsplat, sdfArray, numEdits, rgbaDisplaceEdits) {
    const dyno2 = new Dyno({
      inTypes: {
        gsplat: Gsplat,
        sdfArray: SdfArray,
        numEdits: "int",
        rgbaDisplaceEdits: "uvec4"
      },
      outTypes: { gsplat: Gsplat },
      globals: () => [defineSdfArray, defineEdit],
      inputs: { gsplat, sdfArray, numEdits, rgbaDisplaceEdits },
      statements: ({ inputs, outputs }) => {
        const { sdfArray: sdfArray2, numEdits: numEdits2, rgbaDisplaceEdits: rgbaDisplaceEdits2 } = inputs;
        const { gsplat: gsplat2 } = outputs;
        return unindentLines(\`
        \${gsplat2} = \${inputs.gsplat};
        if (isGsplatActive(\${gsplat2}.flags)) {
          for (int editIndex = 0; editIndex < \${numEdits2}; ++editIndex) {
            applyPackedRgbaDisplaceEdit(
              \${rgbaDisplaceEdits2}[editIndex], \${sdfArray2}.sdfTexture, \${sdfArray2}.numSdfs,
              \${gsplat2}.center, \${gsplat2}.rgba
            );
          }
        }
      \`);
      }
    });
    return dyno2.outputs.gsplat;
  }
  const tempFloat32 = new Float32Array(1);
  class SplatTransformer {
    // Create the dyno uniforms that parameterize the transform, setting them
    // to initial values that are different from any valid transform.
    constructor() {
      this.scale = new DynoFloat({ value: Number.NEGATIVE_INFINITY });
      this.rotate = new DynoVec4({
        value: new Quaternion(
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY
        )
      });
      this.translate = new DynoVec3({
        value: new Vector3(
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY,
          Number.POSITIVE_INFINITY
        )
      });
    }
    // Apply the transform to a Vec3 position in a dyno program.
    apply(position) {
      return transformPos(position, {
        scale: this.scale,
        rotate: this.rotate,
        translate: this.translate
      });
    }
    applyDir(dir) {
      return transformDir(dir, {
        rotate: this.rotate
      });
    }
    // Apply the transform to a Gsplat in a dyno program.
    applyGsplat(gsplat) {
      return transformGsplat(gsplat, {
        scale: this.scale,
        rotate: this.rotate,
        translate: this.translate
      });
    }
    // Update the uniforms to match the given transform matrix.
    updateFromMatrix(transform) {
      const scale = new Vector3();
      const quaternion = new Quaternion();
      const position = new Vector3();
      transform.decompose(position, quaternion, scale);
      const newScale = (scale.x + scale.y + scale.z) / 3;
      let updated = false;
      if (newScale !== this.scale.value) {
        this.scale.value = newScale;
        updated = true;
      }
      if (!position.equals(this.translate.value)) {
        this.translate.value.copy(position);
        updated = true;
      }
      if (!quaternion.equals(this.rotate.value)) {
        this.rotate.value.copy(quaternion);
        updated = true;
      }
      return updated;
    }
    // Update this transform to match the object's to-world transform.
    update(object) {
      object.updateMatrixWorld();
      return this.updateFromMatrix(object.matrixWorld);
    }
  }
  class SplatGenerator extends Object3D {
    constructor({
      numSplats,
      generator,
      construct,
      update
    }) {
      super();
      this.numSplats = numSplats ?? 0;
      this.generator = generator;
      this.frameUpdate = update;
      this.version = 0;
      if (construct) {
        const constructed = construct(this);
        Object.assign(this, constructed);
      }
    }
    updateVersion() {
      this.version += 1;
    }
    set needsUpdate(value) {
      if (value) {
        this.updateVersion();
      }
    }
  }
  const _SplatMesh = class _SplatMesh extends SplatGenerator {
    constructor(options = {}) {
      const transform = new SplatTransformer();
      const viewToWorld = new SplatTransformer();
      const worldToView = new SplatTransformer();
      const viewToObject = new SplatTransformer();
      const recolor = new DynoVec4({
        value: new Vector4(
          Number.NEGATIVE_INFINITY,
          Number.NEGATIVE_INFINITY,
          Number.NEGATIVE_INFINITY,
          Number.NEGATIVE_INFINITY
        )
      });
      const time = new DynoFloat({ value: 0 });
      const deltaTime = new DynoFloat({ value: 0 });
      const context = {
        transform,
        viewToWorld,
        worldToView,
        viewToObject,
        recolor,
        time,
        deltaTime
      };
      super({
        update: ({ time: time2, deltaTime: deltaTime2, viewToWorld: viewToWorld2, globalEdits }) => this.update({ time: time2, deltaTime: deltaTime2, viewToWorld: viewToWorld2, globalEdits })
      });
      this.isInitialized = false;
      this.recolor = new Color(1, 1, 1);
      this.opacity = 1;
      this.enableViewToObject = false;
      this.enableViewToWorld = false;
      this.enableWorldToView = false;
      this.skinning = null;
      this.edits = null;
      this.rgbaDisplaceEdits = null;
      this.splatRgba = null;
      this.maxSh = 3;
      this.packedSplats = options.packedSplats ?? new PackedSplats();
      this.numSplats = this.packedSplats.numSplats;
      this.editable = options.editable ?? true;
      this.onFrame = options.onFrame;
      this.context = context;
      this.objectModifier = options.objectModifier;
      this.worldModifier = options.worldModifier;
      this.updateGenerator();
      if (options.url || options.fileBytes || options.constructSplats || options.packedSplats && !options.packedSplats.isInitialized) {
        this.initialized = this.asyncInitialize(options).then(async () => {
          this.updateGenerator();
          this.isInitialized = true;
          if (options.onLoad) {
            const maybePromise = options.onLoad(this);
            if (maybePromise instanceof Promise) {
              await maybePromise;
            }
          }
          return this;
        });
      } else {
        this.isInitialized = true;
        this.initialized = Promise.resolve(this);
        if (options.onLoad) {
          const maybePromise = options.onLoad(this);
          if (maybePromise instanceof Promise) {
            this.initialized = maybePromise.then(() => this);
          }
        }
      }
    }
    async asyncInitialize(options) {
      const { url, fileBytes, fileType, fileName, maxSplats, constructSplats } = options;
      if (url || fileBytes || constructSplats) {
        const packedSplatsOptions = {
          url,
          fileBytes,
          fileType,
          fileName,
          maxSplats,
          construct: constructSplats
        };
        this.packedSplats.reinitialize(packedSplatsOptions);
      }
      if (this.packedSplats) {
        await this.packedSplats.initialized;
        this.numSplats = this.packedSplats.numSplats;
        this.updateGenerator();
      }
    }
    static async staticInitialize() {
      await __wbg_init();
      _SplatMesh.isStaticInitialized = true;
    }
    // Creates a new Gsplat with the provided parameters (all values in "float" space,
    // i.e. 0-1 for opacity and color) and adds it to the end of the packedSplats,
    // increasing numSplats by 1. If necessary, reallocates the buffer with an exponential
    // doubling strategy to fit the new data, so it's fairly efficient to just
    // pushSplat(...) each Gsplat you want to create in a loop.
    pushSplat(center, scales, quaternion, opacity, color) {
      this.packedSplats.pushSplat(center, scales, quaternion, opacity, color);
    }
    // This method iterates over all Gsplats in this instance's packedSplats,
    // invoking the provided callback with index: number in 0..=(this.numSplats-1) and
    // center: THREE.Vector3, scales: THREE.Vector3, quaternion: THREE.Quaternion,
    // opacity: number (0..1), and color: THREE.Color (rgb values in 0..1).
    // Note that the objects passed in as center etc. are the same for every callback
    // invocation: these objects are reused for efficiency. Changing these values has
    // no effect as they are decoded/unpacked copies of the underlying data. To update
    // the packedSplats, call .packedSplats.setSplat(index, center, scales,
    // quaternion, opacity, color).
    forEachSplat(callback) {
      this.packedSplats.forEachSplat(callback);
    }
    // Call this when you are finished with the SplatMesh and want to free
    // any buffers it holds (via packedSplats).
    dispose() {
      this.packedSplats.dispose();
    }
    constructGenerator(context) {
      const { transform, viewToObject, recolor } = context;
      const generator = dynoBlock(
        { index: "int" },
        { gsplat: Gsplat },
        ({ index }) => {
          if (!index) {
            throw new Error("index is undefined");
          }
          let gsplat = readPackedSplat(this.packedSplats.dyno, index);
          if (this.maxSh >= 1) {
            const { sh1Texture, sh2Texture, sh3Texture } = this.ensureShTextures();
            if (sh1Texture) {
              const viewCenterInObject = viewToObject.translate;
              const { center } = splitGsplat(gsplat).outputs;
              const viewDir = normalize(sub(center, viewCenterInObject));
              let rgb = evaluateSH1(gsplat, sh1Texture, viewDir);
              if (this.maxSh >= 2 && sh2Texture) {
                rgb = add(rgb, evaluateSH2(gsplat, sh2Texture, viewDir));
              }
              if (this.maxSh >= 3 && sh3Texture) {
                rgb = add(rgb, evaluateSH3(gsplat, sh3Texture, viewDir));
              }
              let { rgba } = splitGsplat(gsplat).outputs;
              rgba = add(rgba, extendVec(rgb, dynoConst("float", 0)));
              gsplat = combineGsplat({ gsplat, rgba });
            }
          }
          if (this.splatRgba) {
            const rgba = readRgbaArray(this.splatRgba.dyno, index);
            gsplat = combineGsplat({ gsplat, rgba });
          }
          if (this.skinning) {
            gsplat = this.skinning.modify(gsplat);
          }
          if (this.objectModifier) {
            gsplat = this.objectModifier.apply({ gsplat }).gsplat;
          }
          gsplat = transform.applyGsplat(gsplat);
          const recolorRgba = mul(recolor, splitGsplat(gsplat).outputs.rgba);
          gsplat = combineGsplat({ gsplat, rgba: recolorRgba });
          if (this.rgbaDisplaceEdits) {
            gsplat = this.rgbaDisplaceEdits.modify(gsplat);
          }
          if (this.worldModifier) {
            gsplat = this.worldModifier.apply({ gsplat }).gsplat;
          }
          return { gsplat };
        }
      );
      this.generator = generator;
    }
    // Call this whenever something changes in the Gsplat processing pipeline,
    // for example changing maxSh or updating objectModifier or worldModifier.
    // Compiled generators are cached for efficiency and re-use when the same
    // pipeline structure emerges after successive changes.
    updateGenerator() {
      this.constructGenerator(this.context);
    }
    // This is called automatically by SparkRenderer and you should not have to
    // call it. It updates parameters for the generated pipeline and calls
    // updateGenerator() if the pipeline needs to change.
    update({
      time,
      viewToWorld,
      deltaTime,
      globalEdits
    }) {
      var _a2;
      this.numSplats = this.packedSplats.numSplats;
      this.context.time.value = time;
      this.context.deltaTime.value = deltaTime;
      _SplatMesh.dynoTime.value = time;
      const { transform, viewToObject, recolor } = this.context;
      let updated = transform.update(this);
      if (this.context.viewToWorld.updateFromMatrix(viewToWorld) && this.enableViewToWorld) {
        updated = true;
      }
      const worldToView = viewToWorld.clone().invert();
      if (this.context.worldToView.updateFromMatrix(worldToView) && this.enableWorldToView) {
        updated = true;
      }
      const objectToWorld = new Matrix4().compose(
        transform.translate.value,
        transform.rotate.value,
        new Vector3().setScalar(transform.scale.value)
      );
      const worldToObject = objectToWorld.invert();
      const viewToObjectMatrix = worldToObject.multiply(viewToWorld);
      if (viewToObject.updateFromMatrix(viewToObjectMatrix) && (this.enableViewToObject || this.packedSplats.extra.sh1)) {
        updated = true;
      }
      const newRecolor = new Vector4(
        this.recolor.r,
        this.recolor.g,
        this.recolor.b,
        this.opacity
      );
      if (!newRecolor.equals(recolor.value)) {
        recolor.value.copy(newRecolor);
        updated = true;
      }
      const edits = this.editable ? (this.edits ?? []).concat(globalEdits) : [];
      if (this.editable && !this.edits) {
        this.traverseVisible((node) => {
          if (node instanceof SplatEdit) {
            edits.push(node);
          }
        });
      }
      edits.sort((a, b) => a.ordering - b.ordering);
      const editsSdfs = edits.map((edit) => {
        if (edit.sdfs != null) {
          return { edit, sdfs: edit.sdfs };
        }
        const sdfs = [];
        edit.traverseVisible((node) => {
          if (node instanceof SplatEditSdf) {
            sdfs.push(node);
          }
        });
        return { edit, sdfs };
      });
      if (editsSdfs.length > 0 && !this.rgbaDisplaceEdits) {
        const edits2 = editsSdfs.length;
        const sdfs = editsSdfs.reduce(
          (total, edit) => total + edit.sdfs.length,
          0
        );
        this.rgbaDisplaceEdits = new SplatEdits({
          maxEdits: edits2,
          maxSdfs: sdfs
        });
        this.updateGenerator();
      }
      if (this.rgbaDisplaceEdits) {
        const editResult = this.rgbaDisplaceEdits.update(editsSdfs);
        updated || (updated = editResult.updated);
        if (editResult.dynoUpdated) {
          this.updateGenerator();
        }
      }
      if (updated) {
        this.updateVersion();
      }
      (_a2 = this.onFrame) == null ? void 0 : _a2.call(this, { mesh: this, time, deltaTime });
    }
    // This method conforms to the standard THREE.Raycaster API, performing object-ray
    // intersections using this method to populate the provided intersects[] array
    // with each intersection point.
    raycast(raycaster, intersects) {
      if (!this.packedSplats.packedArray || !this.packedSplats.numSplats) {
        return;
      }
      const { near, far, ray } = raycaster;
      const worldToMesh = this.matrixWorld.clone().invert();
      const worldToMeshRot = new Matrix3().setFromMatrix4(worldToMesh);
      const origin = ray.origin.clone().applyMatrix4(worldToMesh);
      const direction = ray.direction.clone().applyMatrix3(worldToMeshRot);
      const scales = new Vector3();
      worldToMesh.decompose(new Vector3(), new Quaternion(), scales);
      (scales.x * scales.y * scales.z) ** (1 / 3);
      const RAYCAST_ELLIPSOID = true;
      const distances = raycast_splats(
        origin.x,
        origin.y,
        origin.z,
        direction.x,
        direction.y,
        direction.z,
        near,
        far,
        this.packedSplats.numSplats,
        this.packedSplats.packedArray,
        RAYCAST_ELLIPSOID
      );
      for (const distance of distances) {
        const point = ray.direction.clone().multiplyScalar(distance).add(ray.origin);
        intersects.push({
          distance,
          point,
          object: this
        });
      }
    }
    ensureShTextures() {
      if (!this.packedSplats.extra.sh1) {
        return {};
      }
      let sh1Texture = this.packedSplats.extra.sh1Texture;
      if (!sh1Texture) {
        let sh1 = this.packedSplats.extra.sh1;
        const { width, height, depth, maxSplats } = getTextureSize(
          sh1.length / 2
        );
        if (sh1.length < maxSplats * 2) {
          const newSh1 = new Uint32Array(maxSplats * 2);
          newSh1.set(sh1);
          this.packedSplats.extra.sh1 = newSh1;
          sh1 = newSh1;
        }
        const texture = new DataArrayTexture(sh1, width, height, depth);
        texture.format = RGIntegerFormat;
        texture.type = UnsignedIntType;
        texture.internalFormat = "RG32UI";
        texture.needsUpdate = true;
        sh1Texture = new DynoUsampler2DArray({
          value: texture,
          key: "sh1"
        });
        this.packedSplats.extra.sh1Texture = sh1Texture;
      }
      if (!this.packedSplats.extra.sh2) {
        return { sh1Texture };
      }
      let sh2Texture = this.packedSplats.extra.sh2Texture;
      if (!sh2Texture) {
        let sh2 = this.packedSplats.extra.sh2;
        const { width, height, depth, maxSplats } = getTextureSize(
          sh2.length / 4
        );
        if (sh2.length < maxSplats * 4) {
          const newSh2 = new Uint32Array(maxSplats * 4);
          newSh2.set(sh2);
          this.packedSplats.extra.sh2 = newSh2;
          sh2 = newSh2;
        }
        const texture = new DataArrayTexture(sh2, width, height, depth);
        texture.format = RGBAIntegerFormat;
        texture.type = UnsignedIntType;
        texture.internalFormat = "RGBA32UI";
        texture.needsUpdate = true;
        sh2Texture = new DynoUsampler2DArray({
          value: texture,
          key: "sh2"
        });
        this.packedSplats.extra.sh2Texture = sh2Texture;
      }
      if (!this.packedSplats.extra.sh3) {
        return { sh1Texture, sh2Texture };
      }
      let sh3Texture = this.packedSplats.extra.sh3Texture;
      if (!sh3Texture) {
        let sh3 = this.packedSplats.extra.sh3;
        const { width, height, depth, maxSplats } = getTextureSize(
          sh3.length / 4
        );
        if (sh3.length < maxSplats * 4) {
          const newSh3 = new Uint32Array(maxSplats * 4);
          newSh3.set(sh3);
          this.packedSplats.extra.sh3 = newSh3;
          sh3 = newSh3;
        }
        const texture = new DataArrayTexture(sh3, width, height, depth);
        texture.format = RGBAIntegerFormat;
        texture.type = UnsignedIntType;
        texture.internalFormat = "RGBA32UI";
        texture.needsUpdate = true;
        sh3Texture = new DynoUsampler2DArray({
          value: texture,
          key: "sh3"
        });
        this.packedSplats.extra.sh3Texture = sh3Texture;
      }
      return { sh1Texture, sh2Texture, sh3Texture };
    }
  };
  _SplatMesh.staticInitialized = _SplatMesh.staticInitialize();
  _SplatMesh.isStaticInitialized = false;
  _SplatMesh.dynoTime = new DynoFloat({ value: 0 });
  let SplatMesh = _SplatMesh;
  const defineEvaluateSH1 = unindent(\`
  vec3 evaluateSH1(Gsplat gsplat, usampler2DArray sh1, vec3 viewDir) {
    // Extract sint7 values packed into 2 x uint32
    uvec2 packed = texelFetch(sh1, splatTexCoord(gsplat.index), 0).rg;
    vec3 sh1_0 = vec3(ivec3(
      int(packed.x << 25u) >> 25,
      int(packed.x << 18u) >> 25,
      int(packed.x << 11u) >> 25
    )) / 63.0;
    vec3 sh1_1 = vec3(ivec3(
      int(packed.x << 4u) >> 25,
      int((packed.x >> 3u) | (packed.y << 29u)) >> 25,
      int(packed.y << 22u) >> 25
    )) / 63.0;
    vec3 sh1_2 = vec3(ivec3(
      int(packed.y << 15u) >> 25,
      int(packed.y << 8u) >> 25,
      int(packed.y << 1u) >> 25
    )) / 63.0;

    return sh1_0 * (-0.4886025 * viewDir.y)
      + sh1_1 * (0.4886025 * viewDir.z)
      + sh1_2 * (-0.4886025 * viewDir.x);
  }
\`);
  const defineEvaluateSH2 = unindent(\`
  vec3 evaluateSH2(Gsplat gsplat, usampler2DArray sh2, vec3 viewDir) {
    // Extract sint8 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh2, splatTexCoord(gsplat.index), 0);
    vec3 sh2_0 = vec3(ivec3(
      int(packed.x << 24u) >> 24,
      int(packed.x << 16u) >> 24,
      int(packed.x << 8u) >> 24
    )) / 127.0;
    vec3 sh2_1 = vec3(ivec3(
      int(packed.x) >> 24,
      int(packed.y << 24u) >> 24,
      int(packed.y << 16u) >> 24
    )) / 127.0;
    vec3 sh2_2 = vec3(ivec3(
      int(packed.y << 8u) >> 24,
      int(packed.y) >> 24,
      int(packed.z << 24u) >> 24
    )) / 127.0;
    vec3 sh2_3 = vec3(ivec3(
      int(packed.z << 16u) >> 24,
      int(packed.z << 8u) >> 24,
      int(packed.z) >> 24
    )) / 127.0;
    vec3 sh2_4 = vec3(ivec3(
      int(packed.w << 24u) >> 24,
      int(packed.w << 16u) >> 24,
      int(packed.w << 8u) >> 24
    )) / 127.0;

    return sh2_0 * (1.0925484 * viewDir.x * viewDir.y)
      + sh2_1 * (1.0925484 * viewDir.y * viewDir.z)
      + sh2_2 * (0.3153915 * (2.0 * viewDir.z * viewDir.z - viewDir.x * viewDir.x - viewDir.y * viewDir.y))
      + sh2_3 * (1.0925484 * viewDir.x * viewDir.z)
      + sh2_4 * (0.5462742 * (viewDir.x * viewDir.x - viewDir.y * viewDir.y));
  }
\`);
  const defineEvaluateSH3 = unindent(\`
  vec3 evaluateSH3(Gsplat gsplat, usampler2DArray sh3, vec3 viewDir) {
    // Extract sint6 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh3, splatTexCoord(gsplat.index), 0);
    vec3 sh3_0 = vec3(ivec3(
      int(packed.x << 26u) >> 26,
      int(packed.x << 20u) >> 26,
      int(packed.x << 14u) >> 26
    )) / 31.0;
    vec3 sh3_1 = vec3(ivec3(
      int(packed.x << 8u) >> 26,
      int(packed.x << 2u) >> 26,
      int((packed.x >> 4u) | (packed.y << 28u)) >> 26
    )) / 31.0;
    vec3 sh3_2 = vec3(ivec3(
      int(packed.y << 22u) >> 26,
      int(packed.y << 16u) >> 26,
      int(packed.y << 10u) >> 26
    )) / 31.0;
    vec3 sh3_3 = vec3(ivec3(
      int(packed.y << 4u) >> 26,
      int((packed.y >> 2u) | (packed.z << 30u)) >> 26,
      int(packed.z << 24u) >> 26
    )) / 31.0;
    vec3 sh3_4 = vec3(ivec3(
      int(packed.z << 18u) >> 26,
      int(packed.z << 12u) >> 26,
      int(packed.z << 6u) >> 26
    )) / 31.0;
    vec3 sh3_5 = vec3(ivec3(
      int(packed.z) >> 26,
      int(packed.w << 26u) >> 26,
      int(packed.w << 20u) >> 26
    )) / 31.0;
    vec3 sh3_6 = vec3(ivec3(
      int(packed.w << 14u) >> 26,
      int(packed.w << 8u) >> 26,
      int(packed.w << 2u) >> 26
    )) / 31.0;

    float xx = viewDir.x * viewDir.x;
    float yy = viewDir.y * viewDir.y;
    float zz = viewDir.z * viewDir.z;
    float xy = viewDir.x * viewDir.y;
    float yz = viewDir.y * viewDir.z;
    float zx = viewDir.z * viewDir.x;

    return sh3_0 * (-0.5900436 * viewDir.y * (3.0 * xx - yy))
      + sh3_1 * (2.8906114 * xy * viewDir.z) +
      + sh3_2 * (-0.4570458 * viewDir.y * (4.0 * zz - xx - yy))
      + sh3_3 * (0.3731763 * viewDir.z * (2.0 * zz - 3.0 * xx - 3.0 * yy))
      + sh3_4 * (-0.4570458 * viewDir.x * (4.0 * zz - xx - yy))
      + sh3_5 * (1.4453057 * viewDir.z * (xx - yy))
      + sh3_6 * (-0.5900436 * viewDir.x * (xx - 3.0 * yy));
  }
\`);
  function evaluateSH1(gsplat, sh1, viewDir) {
    return dyno({
      inTypes: { gsplat: Gsplat, sh1: "usampler2DArray", viewDir: "vec3" },
      outTypes: { rgb: "vec3" },
      inputs: { gsplat, sh1, viewDir },
      globals: () => [defineGsplat, defineEvaluateSH1],
      statements: ({ inputs, outputs }) => {
        const statements = unindentLines(\`
        if (isGsplatActive(\${inputs.gsplat}.flags)) {
          \${outputs.rgb} = evaluateSH1(\${inputs.gsplat}, \${inputs.sh1}, \${inputs.viewDir});
        } else {
          \${outputs.rgb} = vec3(0.0);
        }
      \`);
        return statements;
      }
    }).outputs.rgb;
  }
  function evaluateSH2(gsplat, sh2, viewDir) {
    return dyno({
      inTypes: { gsplat: Gsplat, sh2: "usampler2DArray", viewDir: "vec3" },
      outTypes: { rgb: "vec3" },
      inputs: { gsplat, sh2, viewDir },
      globals: () => [defineGsplat, defineEvaluateSH2],
      statements: ({ inputs, outputs }) => unindentLines(\`
        if (isGsplatActive(\${inputs.gsplat}.flags)) {
          \${outputs.rgb} = evaluateSH2(\${inputs.gsplat}, \${inputs.sh2}, \${inputs.viewDir});
        } else {
          \${outputs.rgb} = vec3(0.0);
        }
      \`)
    }).outputs.rgb;
  }
  function evaluateSH3(gsplat, sh3, viewDir) {
    return dyno({
      inTypes: { gsplat: Gsplat, sh3: "usampler2DArray", viewDir: "vec3" },
      outTypes: { rgb: "vec3" },
      inputs: { gsplat, sh3, viewDir },
      globals: () => [defineGsplat, defineEvaluateSH3],
      statements: ({ inputs, outputs }) => unindentLines(\`
        if (isGsplatActive(\${inputs.gsplat}.flags)) {
          \${outputs.rgb} = evaluateSH3(\${inputs.gsplat}, \${inputs.sh3}, \${inputs.viewDir});
        } else {
          \${outputs.rgb} = vec3(0.0);
        }
      \`)
    }).outputs.rgb;
  }
  function WorkerWrapper(options) {
    return new Worker(
      self.location.href,
      {
        name: options == null ? void 0 : options.name
      }
    );
  }
  class SplatWorker {
    constructor() {
      this.messages = {};
      this.messageIdNext = 0;
      this.worker = new WorkerWrapper();
      this.worker.onmessage = (event) => this.onMessage(event);
    }
    makeMessageId() {
      return ++this.messageIdNext;
    }
    makeMessagePromiseId() {
      const id = this.makeMessageId();
      const promise = new Promise((resolve, reject) => {
        this.messages[id] = { resolve, reject };
      });
      return { id, promise };
    }
    onMessage(event) {
      const { id, result, error } = event.data;
      const handler = this.messages[id];
      if (handler) {
        delete this.messages[id];
        if (error) {
          handler.reject(error);
        } else {
          handler.resolve(result);
        }
      }
    }
    // Invoke an RPC on the worker with the given name and arguments.
    // The normal usage of a worker is to run one activity at a time,
    // but this function allows for concurrent calls, tagging each request
    // with a unique message Id and awaiting a response to that same Id.
    // The method will automatically transfer any ArrayBuffers in the
    // arguments to the worker. If you'd like to transfer a copy of a
    // buffer then you must clone it before passing to this function.
    async call(name, args) {
      const { id, promise } = this.makeMessagePromiseId();
      this.worker.postMessage(
        { name, args, id },
        { transfer: getArrayBuffers(args) }
      );
      return promise;
    }
  }
  let maxWorkers = 4;
  let numWorkers = 0;
  const freeWorkers = [];
  const workerQueue = [];
  async function allocWorker() {
    const worker = freeWorkers.shift();
    if (worker) {
      return worker;
    }
    if (numWorkers < maxWorkers) {
      const worker2 = new SplatWorker();
      numWorkers += 1;
      return worker2;
    }
    return new Promise((resolve) => {
      workerQueue.push(resolve);
    });
  }
  function freeWorker(worker) {
    if (numWorkers > maxWorkers) {
      numWorkers -= 1;
      return;
    }
    const waiter = workerQueue.shift();
    if (waiter) {
      waiter(worker);
      return;
    }
    freeWorkers.push(worker);
  }
  async function withWorker(callback) {
    const worker = await allocWorker();
    try {
      return await callback(worker);
    } finally {
      freeWorker(worker);
    }
  }
  var SplatFileType = /* @__PURE__ */ ((SplatFileType2) => {
    SplatFileType2["PLY"] = "ply";
    SplatFileType2["SPZ"] = "spz";
    SplatFileType2["SPLAT"] = "splat";
    SplatFileType2["KSPLAT"] = "ksplat";
    return SplatFileType2;
  })(SplatFileType || {});
  function getSplatFileType(fileBytes) {
    const view = new DataView(fileBytes.buffer);
    if ((view.getUint32(0, true) & 16777215) === 7957616) {
      return "ply";
    }
    if ((view.getUint32(0, true) & 16777215) === 559903) {
      const header = decompressPartialGzip(fileBytes, 4);
      const gView = new DataView(header.buffer);
      if (gView.getUint32(0, true) === 1347635022) {
        return "spz";
      }
      return void 0;
    }
    return void 0;
  }
  function getFileExtension(pathOrUrl) {
    const noTrailing = pathOrUrl.split(/[?#]/, 1)[0];
    const lastSlash = Math.max(
      noTrailing.lastIndexOf("/"),
      noTrailing.lastIndexOf("\\\\")
    );
    const filename = noTrailing.slice(lastSlash + 1);
    const lastDot = filename.lastIndexOf(".");
    if (lastDot <= 0 || lastDot === filename.length - 1) {
      return "";
    }
    return filename.slice(lastDot + 1).toLowerCase();
  }
  function getSplatFileTypeFromPath(pathOrUrl) {
    const extension = getFileExtension(pathOrUrl);
    if (extension === "ply") {
      return "ply";
    }
    if (extension === "spz") {
      return "spz";
    }
    if (extension === "splat") {
      return "splat";
    }
    if (extension === "ksplat") {
      return "ksplat";
    }
    return void 0;
  }
  async function unpackSplats({
    input,
    fileType,
    pathOrUrl
  }) {
    const fileBytes = input instanceof ArrayBuffer ? new Uint8Array(input) : input;
    let splatFileType = fileType;
    if (!fileType) {
      splatFileType = getSplatFileType(fileBytes);
      if (!splatFileType && pathOrUrl) {
        splatFileType = getSplatFileTypeFromPath(pathOrUrl);
      }
    }
    switch (splatFileType) {
      case "ply": {
        const ply = new PlyReader({ fileBytes });
        await ply.parseHeader();
        const numSplats = ply.numSplats;
        const maxSplats = getTextureSize(numSplats).maxSplats;
        const args = { fileBytes, packedArray: new Uint32Array(maxSplats * 4) };
        return await withWorker(async (worker) => {
          const { packedArray, numSplats: numSplats2, extra } = await worker.call(
            "unpackPly",
            args
          );
          return { packedArray, numSplats: numSplats2, extra };
        });
      }
      case "spz": {
        return await withWorker(async (worker) => {
          const { packedArray, numSplats, extra } = await worker.call(
            "decodeSpz",
            {
              fileBytes
            }
          );
          return { packedArray, numSplats, extra };
        });
      }
      case "splat": {
        return await withWorker(async (worker) => {
          const { packedArray, numSplats } = await worker.call(
            "decodeAntiSplat",
            {
              fileBytes
            }
          );
          return { packedArray, numSplats };
        });
      }
      case "ksplat":
        return await withWorker(async (worker) => {
          const { packedArray, numSplats, extra } = await worker.call(
            "decodeKsplat",
            { fileBytes }
          );
          return { packedArray, numSplats, extra };
        });
      default: {
        throw new Error(\`Unknown splat file type: \${splatFileType}\`);
      }
    }
  }
  class SplatData {
    constructor({ maxSplats = 1 } = {}) {
      this.numSplats = 0;
      this.maxSplats = getTextureSize(maxSplats).maxSplats;
      this.centers = new Float32Array(this.maxSplats * 3);
      this.scales = new Float32Array(this.maxSplats * 3);
      this.quaternions = new Float32Array(this.maxSplats * 4);
      this.opacities = new Float32Array(this.maxSplats);
      this.colors = new Float32Array(this.maxSplats * 3);
    }
    pushSplat() {
      const index = this.numSplats;
      this.ensureIndex(index);
      this.numSplats += 1;
      return index;
    }
    unpushSplat(index) {
      if (index === this.numSplats - 1) {
        this.numSplats -= 1;
      } else {
        throw new Error("Cannot unpush splat from non-last position");
      }
    }
    ensureCapacity(numSplats) {
      if (numSplats > this.maxSplats) {
        const targetSplats = Math.max(numSplats, this.maxSplats * 2);
        const newCenters = new Float32Array(targetSplats * 3);
        const newScales = new Float32Array(targetSplats * 3);
        const newQuaternions = new Float32Array(targetSplats * 4);
        const newOpacities = new Float32Array(targetSplats);
        const newColors = new Float32Array(targetSplats * 3);
        newCenters.set(this.centers);
        newScales.set(this.scales);
        newQuaternions.set(this.quaternions);
        newOpacities.set(this.opacities);
        newColors.set(this.colors);
        this.centers = newCenters;
        this.scales = newScales;
        this.quaternions = newQuaternions;
        this.opacities = newOpacities;
        this.colors = newColors;
        if (this.sh1) {
          const newSh1 = new Float32Array(targetSplats * 9);
          newSh1.set(this.sh1);
          this.sh1 = newSh1;
        }
        if (this.sh2) {
          const newSh2 = new Float32Array(targetSplats * 15);
          newSh2.set(this.sh2);
          this.sh2 = newSh2;
        }
        if (this.sh3) {
          const newSh3 = new Float32Array(targetSplats * 21);
          newSh3.set(this.sh3);
          this.sh3 = newSh3;
        }
        this.maxSplats = targetSplats;
      }
    }
    ensureIndex(index) {
      this.ensureCapacity(index + 1);
    }
    setCenter(index, x2, y, z) {
      this.centers[index * 3] = x2;
      this.centers[index * 3 + 1] = y;
      this.centers[index * 3 + 2] = z;
    }
    setScale(index, scaleX, scaleY, scaleZ) {
      this.scales[index * 3] = scaleX;
      this.scales[index * 3 + 1] = scaleY;
      this.scales[index * 3 + 2] = scaleZ;
    }
    setQuaternion(index, x2, y, z, w) {
      this.quaternions[index * 4] = x2;
      this.quaternions[index * 4 + 1] = y;
      this.quaternions[index * 4 + 2] = z;
      this.quaternions[index * 4 + 3] = w;
    }
    setOpacity(index, opacity) {
      this.opacities[index] = opacity;
    }
    setColor(index, r, g, b) {
      this.colors[index * 3] = r;
      this.colors[index * 3 + 1] = g;
      this.colors[index * 3 + 2] = b;
    }
    setSh1(index, sh1) {
      if (!this.sh1) {
        this.sh1 = new Float32Array(this.maxSplats * 9);
      }
      for (let j = 0; j < 9; ++j) {
        this.sh1[index * 9 + j] = sh1[j];
      }
    }
    setSh2(index, sh2) {
      if (!this.sh2) {
        this.sh2 = new Float32Array(this.maxSplats * 15);
      }
      for (let j = 0; j < 15; ++j) {
        this.sh2[index * 15 + j] = sh2[j];
      }
    }
    setSh3(index, sh3) {
      if (!this.sh3) {
        this.sh3 = new Float32Array(this.maxSplats * 21);
      }
      for (let j = 0; j < 21; ++j) {
        this.sh3[index * 21 + j] = sh3[j];
      }
    }
  }
  class SpzReader {
    constructor({ fileBytes }) {
      this.fileBytes = fileBytes instanceof ArrayBuffer ? new Uint8Array(fileBytes) : fileBytes;
      this.reader = new GunzipReader({ fileBytes: this.fileBytes });
      const header = new DataView(this.reader.read(16).buffer);
      if (header.getUint32(0, true) !== 1347635022) {
        throw new Error("Invalid SPZ file");
      }
      this.version = header.getUint32(4, true);
      if (this.version < 1 || this.version > 2) {
        throw new Error(\`Unsupported SPZ version: \${this.version}\`);
      }
      this.numSplats = header.getUint32(8, true);
      this.shDegree = header.getUint8(12);
      this.fractionalBits = header.getUint8(13);
      this.flags = header.getUint8(14);
      this.flagAntiAlias = (this.flags & 1) !== 0;
      this.reserved = header.getUint8(15);
      this.parsed = false;
    }
    parseSplats(centerCallback, alphaCallback, rgbCallback, scalesCallback, quatCallback, shCallback) {
      if (this.parsed) {
        throw new Error("SPZ file already parsed");
      }
      this.parsed = true;
      if (this.version === 1) {
        const centerBytes = this.reader.read(this.numSplats * 3 * 2);
        const centerUint16 = new Uint16Array(centerBytes.buffer);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const x2 = fromHalf(centerUint16[i3]);
          const y = fromHalf(centerUint16[i3 + 1]);
          const z = fromHalf(centerUint16[i3 + 2]);
          centerCallback == null ? void 0 : centerCallback(i2, x2, y, z);
        }
      } else if (this.version === 2) {
        const fixed = 1 << this.fractionalBits;
        const centerBytes = this.reader.read(this.numSplats * 3 * 3);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i9 = i2 * 9;
          const x2 = ((centerBytes[i9 + 2] << 24 | centerBytes[i9 + 1] << 16 | centerBytes[i9] << 8) >> 8) / fixed;
          const y = ((centerBytes[i9 + 5] << 24 | centerBytes[i9 + 4] << 16 | centerBytes[i9 + 3] << 8) >> 8) / fixed;
          const z = ((centerBytes[i9 + 8] << 24 | centerBytes[i9 + 7] << 16 | centerBytes[i9 + 6] << 8) >> 8) / fixed;
          centerCallback == null ? void 0 : centerCallback(i2, x2, y, z);
        }
      } else {
        throw new Error("Unreachable");
      }
      {
        const bytes = this.reader.read(this.numSplats);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          alphaCallback == null ? void 0 : alphaCallback(i2, bytes[i2] / 255);
        }
      }
      {
        const rgbBytes = this.reader.read(this.numSplats * 3);
        const scale = SH_C0 / 0.15;
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const r = (rgbBytes[i3] / 255 - 0.5) * scale + 0.5;
          const g = (rgbBytes[i3 + 1] / 255 - 0.5) * scale + 0.5;
          const b = (rgbBytes[i3 + 2] / 255 - 0.5) * scale + 0.5;
          rgbCallback == null ? void 0 : rgbCallback(i2, r, g, b);
        }
      }
      {
        const scalesBytes = this.reader.read(this.numSplats * 3);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const scaleX = Math.exp(scalesBytes[i3] / 16 - 10);
          const scaleY = Math.exp(scalesBytes[i3 + 1] / 16 - 10);
          const scaleZ = Math.exp(scalesBytes[i3 + 2] / 16 - 10);
          scalesCallback == null ? void 0 : scalesCallback(i2, scaleX, scaleY, scaleZ);
        }
      }
      {
        const quatBytes = this.reader.read(this.numSplats * 3);
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          const i3 = i2 * 3;
          const quatX = quatBytes[i3] / 127.5 - 1;
          const quatY = quatBytes[i3 + 1] / 127.5 - 1;
          const quatZ = quatBytes[i3 + 2] / 127.5 - 1;
          const quatW = Math.sqrt(
            Math.max(0, 1 - quatX * quatX - quatY * quatY - quatZ * quatZ)
          );
          quatCallback == null ? void 0 : quatCallback(i2, quatX, quatY, quatZ, quatW);
        }
      }
      if (shCallback && this.shDegree >= 1) {
        const sh1 = new Float32Array(3 * 3);
        const sh2 = this.shDegree >= 2 ? new Float32Array(5 * 3) : void 0;
        const sh3 = this.shDegree >= 3 ? new Float32Array(7 * 3) : void 0;
        const shBytes = this.reader.read(
          this.numSplats * SH_DEGREE_TO_VECS[this.shDegree] * 3
        );
        let offset = 0;
        for (let i2 = 0; i2 < this.numSplats; i2++) {
          for (let j = 0; j < 9; ++j) {
            sh1[j] = (shBytes[offset + j] - 128) / 128;
          }
          offset += 9;
          if (sh2) {
            for (let j = 0; j < 15; ++j) {
              sh2[j] = (shBytes[offset + j] - 128) / 128;
            }
            offset += 15;
          }
          if (sh3) {
            for (let j = 0; j < 21; ++j) {
              sh3[j] = (shBytes[offset + j] - 128) / 128;
            }
            offset += 21;
          }
          shCallback == null ? void 0 : shCallback(i2, sh1, sh2, sh3);
        }
      }
    }
  }
  const SH_DEGREE_TO_VECS = { 1: 3, 2: 8, 3: 15 };
  const SH_C0 = 0.28209479177387814;
  const SPZ_MAGIC = 1347635022;
  const SPZ_VERSION = 2;
  const FLAG_ANTIALIASED = 1;
  class SpzWriter {
    constructor({
      numSplats,
      shDegree,
      fractionalBits = 12,
      flagAntiAlias = true
    }) {
      this.clippedCount = 0;
      const splatSize = 9 + 1 + 3 + 3 + 3 + (shDegree >= 1 ? 9 : 0) + (shDegree >= 2 ? 15 : 0) + (shDegree >= 3 ? 21 : 0);
      const bufferSize = 16 + numSplats * splatSize;
      this.buffer = new ArrayBuffer(bufferSize);
      this.view = new DataView(this.buffer);
      this.view.setUint32(0, SPZ_MAGIC, true);
      this.view.setUint32(4, SPZ_VERSION, true);
      this.view.setUint32(8, numSplats, true);
      this.view.setUint8(12, shDegree);
      this.view.setUint8(13, fractionalBits);
      this.view.setUint8(14, flagAntiAlias ? FLAG_ANTIALIASED : 0);
      this.view.setUint8(15, 0);
      this.numSplats = numSplats;
      this.shDegree = shDegree;
      this.fractionalBits = fractionalBits;
      this.fraction = 1 << fractionalBits;
      this.flagAntiAlias = flagAntiAlias;
    }
    setCenter(index, x2, y, z) {
      const xRounded = Math.round(x2 * this.fraction);
      const xInt = Math.max(-8388607, Math.min(8388607, xRounded));
      const yRounded = Math.round(y * this.fraction);
      const yInt = Math.max(-8388607, Math.min(8388607, yRounded));
      const zRounded = Math.round(z * this.fraction);
      const zInt = Math.max(-8388607, Math.min(8388607, zRounded));
      const clipped = xRounded !== xInt || yRounded !== yInt || zRounded !== zInt;
      if (clipped) {
        this.clippedCount += 1;
      }
      const i9 = index * 9;
      const base = 16 + i9;
      this.view.setUint8(base, xInt & 255);
      this.view.setUint8(base + 1, xInt >> 8 & 255);
      this.view.setUint8(base + 2, xInt >> 16 & 255);
      this.view.setUint8(base + 3, yInt & 255);
      this.view.setUint8(base + 4, yInt >> 8 & 255);
      this.view.setUint8(base + 5, yInt >> 16 & 255);
      this.view.setUint8(base + 6, zInt & 255);
      this.view.setUint8(base + 7, zInt >> 8 & 255);
      this.view.setUint8(base + 8, zInt >> 16 & 255);
    }
    setAlpha(index, alpha) {
      const base = 16 + this.numSplats * 9 + index;
      this.view.setUint8(
        base,
        Math.max(0, Math.min(255, Math.round(alpha * 255)))
      );
    }
    static scaleRgb(r) {
      const v = ((r - 0.5) / (SH_C0 / 0.15) + 0.5) * 255;
      return Math.max(0, Math.min(255, Math.round(v)));
    }
    setRgb(index, r, g, b) {
      const base = 16 + this.numSplats * 10 + index * 3;
      this.view.setUint8(base, SpzWriter.scaleRgb(r));
      this.view.setUint8(base + 1, SpzWriter.scaleRgb(g));
      this.view.setUint8(base + 2, SpzWriter.scaleRgb(b));
    }
    setScale(index, scaleX, scaleY, scaleZ) {
      const base = 16 + this.numSplats * 13 + index * 3;
      this.view.setUint8(
        base,
        Math.max(0, Math.min(255, Math.round((Math.log(scaleX) + 10) * 16)))
      );
      this.view.setUint8(
        base + 1,
        Math.max(0, Math.min(255, Math.round((Math.log(scaleY) + 10) * 16)))
      );
      this.view.setUint8(
        base + 2,
        Math.max(0, Math.min(255, Math.round((Math.log(scaleZ) + 10) * 16)))
      );
    }
    setQuat(index, quatX, quatY, quatZ, quatW) {
      const base = 16 + this.numSplats * 16 + index * 3;
      const quatNeg = quatW < 0;
      this.view.setUint8(
        base,
        Math.max(
          0,
          Math.min(255, Math.round(((quatNeg ? -quatX : quatX) + 1) * 127.5))
        )
      );
      this.view.setUint8(
        base + 1,
        Math.max(
          0,
          Math.min(255, Math.round(((quatNeg ? -quatY : quatY) + 1) * 127.5))
        )
      );
      this.view.setUint8(
        base + 2,
        Math.max(
          0,
          Math.min(255, Math.round(((quatNeg ? -quatZ : quatZ) + 1) * 127.5))
        )
      );
    }
    static quantizeSh(sh, bits2) {
      const value = Math.round(sh * 128) + 128;
      const bucketSize = 1 << 8 - bits2;
      const quantized = Math.floor((value + bucketSize / 2) / bucketSize) * bucketSize;
      return Math.max(0, Math.min(255, quantized));
    }
    setSh(index, sh1, sh2, sh3) {
      const shVecs = SH_DEGREE_TO_VECS[this.shDegree] || 0;
      const base1 = 16 + this.numSplats * 19 + index * shVecs * 3;
      for (let j = 0; j < 9; ++j) {
        this.view.setUint8(base1 + j, SpzWriter.quantizeSh(sh1[j], 5));
      }
      if (sh2) {
        const base2 = base1 + 9;
        for (let j = 0; j < 15; ++j) {
          this.view.setUint8(base2 + j, SpzWriter.quantizeSh(sh2[j], 4));
        }
        if (sh3) {
          const base3 = base2 + 15;
          for (let j = 0; j < 21; ++j) {
            this.view.setUint8(base3 + j, SpzWriter.quantizeSh(sh3[j], 4));
          }
        }
      }
    }
    async finalize() {
      const input = new Uint8Array(this.buffer);
      const stream = new ReadableStream({
        async start(controller) {
          controller.enqueue(input);
          controller.close();
        }
      });
      const compressed = stream.pipeThrough(new CompressionStream("gzip"));
      const response = new Response(compressed);
      const buffer = await response.arrayBuffer();
      console.log(
        "Compressed",
        input.length,
        "bytes to",
        buffer.byteLength,
        "bytes"
      );
      return new Uint8Array(buffer);
    }
  }
  async function transcodeSpz(input) {
    var _a2, _b2, _c;
    const splats = new SplatData();
    const {
      inputs,
      clipXyz,
      maxSh,
      fractionalBits = 12,
      opacityThreshold
    } = input;
    for (const input2 of inputs) {
      let transformPos2 = function(pos) {
        pos.multiplyScalar(scale);
        pos.applyQuaternion(quaternion);
        pos.add(translate);
        return pos;
      }, transformScales = function(scales) {
        scales.multiplyScalar(scale);
        return scales;
      }, transformQuaternion = function(quat) {
        quat.premultiply(quaternion);
        return quat;
      }, withinClip = function(p) {
        return !clip || clip.containsPoint(p);
      }, withinOpacity = function(opacity) {
        return opacityThreshold !== void 0 ? opacity >= opacityThreshold : true;
      };
      const scale = ((_a2 = input2.transform) == null ? void 0 : _a2.scale) ?? 1;
      const quaternion = new Quaternion().fromArray(
        ((_b2 = input2.transform) == null ? void 0 : _b2.quaternion) ?? [0, 0, 0, 1]
      );
      const translate = new Vector3().fromArray(
        ((_c = input2.transform) == null ? void 0 : _c.translate) ?? [0, 0, 0]
      );
      const clip = clipXyz ? new Box3(
        new Vector3().fromArray(clipXyz.min),
        new Vector3().fromArray(clipXyz.max)
      ) : void 0;
      let fileType = input2.fileType;
      if (!fileType) {
        fileType = getSplatFileType(input2.fileBytes);
        if (!fileType && input2.pathOrUrl) {
          fileType = getSplatFileTypeFromPath(input2.pathOrUrl);
        }
      }
      switch (fileType) {
        case SplatFileType.PLY: {
          const ply = new PlyReader({ fileBytes: input2.fileBytes });
          await ply.parseHeader();
          let lastIndex = null;
          ply.parseSplats(
            (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
              const center = transformPos2(new Vector3(x2, y, z));
              if (withinClip(center) && withinOpacity(opacity)) {
                lastIndex = splats.pushSplat();
                splats.setCenter(lastIndex, center.x, center.y, center.z);
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(lastIndex, scales.x, scales.y, scales.z);
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  lastIndex,
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
                splats.setOpacity(lastIndex, opacity);
                splats.setColor(lastIndex, r, g, b);
              } else {
                lastIndex = null;
              }
            },
            (index, sh1, sh2, sh3) => {
              if (sh1 && lastIndex !== null) {
                splats.setSh1(lastIndex, sh1);
              }
              if (sh2 && lastIndex !== null) {
                splats.setSh2(lastIndex, sh2);
              }
              if (sh3 && lastIndex !== null) {
                splats.setSh3(lastIndex, sh3);
              }
            }
          );
          break;
        }
        case SplatFileType.SPZ: {
          const spz2 = new SpzReader({ fileBytes: input2.fileBytes });
          const mapping = new Int32Array(spz2.numSplats);
          mapping.fill(-1);
          const centers = new Float32Array(spz2.numSplats * 3);
          const center = new Vector3();
          spz2.parseSplats(
            (index, x2, y, z) => {
              const center2 = transformPos2(new Vector3(x2, y, z));
              centers[index * 3] = center2.x;
              centers[index * 3 + 1] = center2.y;
              centers[index * 3 + 2] = center2.z;
            },
            (index, alpha) => {
              center.fromArray(centers, index * 3);
              if (withinClip(center) && withinOpacity(alpha)) {
                mapping[index] = splats.pushSplat();
                splats.setCenter(mapping[index], center.x, center.y, center.z);
                splats.setOpacity(mapping[index], alpha);
              }
            },
            (index, r, g, b) => {
              if (mapping[index] >= 0) {
                splats.setColor(mapping[index], r, g, b);
              }
            },
            (index, scaleX, scaleY, scaleZ) => {
              if (mapping[index] >= 0) {
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(mapping[index], scales.x, scales.y, scales.z);
              }
            },
            (index, quatX, quatY, quatZ, quatW) => {
              if (mapping[index] >= 0) {
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  mapping[index],
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
              }
            },
            (index, sh1, sh2, sh3) => {
              if (mapping[index] >= 0) {
                splats.setSh1(mapping[index], sh1);
                if (sh2) {
                  splats.setSh2(mapping[index], sh2);
                }
                if (sh3) {
                  splats.setSh3(mapping[index], sh3);
                }
              }
            }
          );
          break;
        }
        case SplatFileType.SPLAT:
          decodeAntiSplat(
            input2.fileBytes,
            (numSplats) => {
            },
            (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
              const center = transformPos2(new Vector3(x2, y, z));
              if (withinClip(center) && withinOpacity(opacity)) {
                const index2 = splats.pushSplat();
                splats.setCenter(index2, center.x, center.y, center.z);
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(index2, scales.x, scales.y, scales.z);
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  index2,
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
                splats.setOpacity(index2, opacity);
                splats.setColor(index2, r, g, b);
              }
            }
          );
          break;
        case SplatFileType.KSPLAT: {
          let lastIndex = null;
          decodeKsplat(
            input2.fileBytes,
            (numSplats) => {
            },
            (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
              const center = transformPos2(new Vector3(x2, y, z));
              if (withinClip(center) && withinOpacity(opacity)) {
                lastIndex = splats.pushSplat();
                splats.setCenter(lastIndex, center.x, center.y, center.z);
                const scales = transformScales(
                  new Vector3(scaleX, scaleY, scaleZ)
                );
                splats.setScale(lastIndex, scales.x, scales.y, scales.z);
                const quaternion2 = transformQuaternion(
                  new Quaternion(quatX, quatY, quatZ, quatW)
                );
                splats.setQuaternion(
                  lastIndex,
                  quaternion2.x,
                  quaternion2.y,
                  quaternion2.z,
                  quaternion2.w
                );
                splats.setOpacity(lastIndex, opacity);
                splats.setColor(lastIndex, r, g, b);
              } else {
                lastIndex = null;
              }
            },
            (index, sh1, sh2, sh3) => {
              if (lastIndex !== null) {
                splats.setSh1(lastIndex, sh1);
                if (sh2) {
                  splats.setSh2(lastIndex, sh2);
                }
                if (sh3) {
                  splats.setSh3(lastIndex, sh3);
                }
              }
            }
          );
          break;
        }
        default:
          throw new Error(\`transcodeSpz not implemented for \${fileType}\`);
      }
    }
    const shDegree = Math.min(
      maxSh ?? 3,
      splats.sh3 ? 3 : splats.sh2 ? 2 : splats.sh1 ? 1 : 0
    );
    const spz = new SpzWriter({
      numSplats: splats.numSplats,
      shDegree,
      fractionalBits,
      flagAntiAlias: true
    });
    for (let i2 = 0; i2 < splats.numSplats; ++i2) {
      const i3 = i2 * 3;
      const i4 = i2 * 4;
      spz.setCenter(
        i2,
        splats.centers[i3],
        splats.centers[i3 + 1],
        splats.centers[i3 + 2]
      );
      spz.setScale(
        i2,
        splats.scales[i3],
        splats.scales[i3 + 1],
        splats.scales[i3 + 2]
      );
      spz.setQuat(
        i2,
        splats.quaternions[i4],
        splats.quaternions[i4 + 1],
        splats.quaternions[i4 + 2],
        splats.quaternions[i4 + 3]
      );
      spz.setAlpha(i2, splats.opacities[i2]);
      spz.setRgb(
        i2,
        splats.colors[i3],
        splats.colors[i3 + 1],
        splats.colors[i3 + 2]
      );
      if (splats.sh1 && shDegree >= 1) {
        spz.setSh(
          i2,
          splats.sh1.slice(i2 * 9, (i2 + 1) * 9),
          shDegree >= 2 && splats.sh2 ? splats.sh2.slice(i2 * 15, (i2 + 1) * 15) : void 0,
          shDegree >= 3 && splats.sh3 ? splats.sh3.slice(i2 * 21, (i2 + 1) * 21) : void 0
        );
      }
    }
    const spzBytes = await spz.finalize();
    return { fileBytes: spzBytes, clippedCount: spz.clippedCount };
  }
  async function onMessage(event) {
    const { name, args, id } = event.data;
    let result = void 0;
    let error = void 0;
    try {
      switch (name) {
        case "unpackPly": {
          const { packedArray, fileBytes } = args;
          const decoded = await unpackPly({ packedArray, fileBytes });
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "decodeSpz": {
          const { fileBytes } = args;
          const decoded = unpackSpz(fileBytes);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "decodeAntiSplat": {
          const { fileBytes } = args;
          const decoded = unpackAntiSplat(fileBytes);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray
          };
          break;
        }
        case "decodeKsplat": {
          const { fileBytes } = args;
          const decoded = unpackKsplat(fileBytes);
          result = {
            id,
            numSplats: decoded.numSplats,
            packedArray: decoded.packedArray,
            extra: decoded.extra
          };
          break;
        }
        case "sortSplats": {
          const { maxSplats, totalSplats, readback, ordering } = args;
          result = {
            id,
            readback,
            ...sortSplats({ totalSplats, readback, ordering })
          };
          break;
        }
        case "sortDoubleSplats": {
          const { numSplats, readback, ordering } = args;
          result = {
            id,
            readback,
            ordering
          };
          if (WASM_SPLAT_SORT) {
            result = {
              id,
              readback,
              ordering,
              activeSplats: sort_splats(numSplats, readback, ordering)
            };
          }
          break;
        }
        case "transcodeSpz": {
          const input = args;
          const spzBytes = await transcodeSpz(input);
          result = {
            id,
            fileBytes: spzBytes,
            input
          };
          break;
        }
        default: {
          throw new Error(\`Unknown name: \${name}\`);
        }
      }
    } catch (e) {
      error = e;
    }
    self.postMessage(
      { id, result, error },
      { transfer: getArrayBuffers(result) }
    );
  }
  async function unpackPly({
    packedArray,
    fileBytes
  }) {
    const ply = new PlyReader({ fileBytes });
    await ply.parseHeader();
    const numSplats = ply.numSplats;
    const extra = {};
    const ZERO_CUTOFF = Math.exp(-20);
    ply.parseSplats(
      (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {
        setPackedSplat(
          packedArray,
          index,
          x2,
          y,
          z,
          scaleX < ZERO_CUTOFF ? 0 : Math.max(SCALE_MIN, scaleX),
          scaleY < ZERO_CUTOFF ? 0 : Math.max(SCALE_MIN, scaleY),
          scaleZ < ZERO_CUTOFF ? 0 : Math.max(SCALE_MIN, scaleZ),
          quatX,
          quatY,
          quatZ,
          quatW,
          opacity,
          r,
          g,
          b
        );
      },
      (index, sh1, sh2, sh3) => {
        if (sh1) {
          if (!extra.sh1) {
            extra.sh1 = new Uint32Array(numSplats * 2);
          }
          encodeSh1Rgb(extra.sh1, index, sh1);
        }
        if (sh2) {
          if (!extra.sh2) {
            extra.sh2 = new Uint32Array(numSplats * 4);
          }
          encodeSh2Rgb(extra.sh2, index, sh2);
        }
        if (sh3) {
          if (!extra.sh3) {
            extra.sh3 = new Uint32Array(numSplats * 4);
          }
          encodeSh3Rgb(extra.sh3, index, sh3);
        }
      }
    );
    return { packedArray, numSplats, extra };
  }
  function unpackSpz(fileBytes) {
    const spz = new SpzReader({ fileBytes });
    const numSplats = spz.numSplats;
    const maxSplats = computeMaxSplats(numSplats);
    const packedArray = new Uint32Array(maxSplats * 4);
    const extra = {};
    spz.parseSplats(
      (index, x2, y, z) => {
        setPackedSplatCenter(packedArray, index, x2, y, z);
      },
      (index, alpha) => {
        setPackedSplatOpacity(packedArray, index, alpha);
      },
      (index, r, g, b) => {
        setPackedSplatRgb(packedArray, index, r, g, b);
      },
      (index, scaleX, scaleY, scaleZ) => {
        setPackedSplatScales(packedArray, index, scaleX, scaleY, scaleZ);
      },
      (index, quatX, quatY, quatZ, quatW) => {
        setPackedSplatQuat(packedArray, index, quatX, quatY, quatZ, quatW);
      },
      (index, sh1, sh2, sh3) => {
        if (sh1) {
          if (!extra.sh1) {
            extra.sh1 = new Uint32Array(numSplats * 2);
          }
          encodeSh1Rgb(extra.sh1, index, sh1);
        }
        if (sh2) {
          if (!extra.sh2) {
            extra.sh2 = new Uint32Array(numSplats * 4);
          }
          encodeSh2Rgb(extra.sh2, index, sh2);
        }
        if (sh3) {
          if (!extra.sh3) {
            extra.sh3 = new Uint32Array(numSplats * 4);
          }
          encodeSh3Rgb(extra.sh3, index, sh3);
        }
      }
    );
    return { packedArray, numSplats, extra };
  }
  const DEPTH_INFINITY = 31744;
  const DEPTH_SIZE = DEPTH_INFINITY + 1;
  let depthArray = null;
  function sortSplats({
    totalSplats,
    readback,
    ordering
  }) {
    if (!depthArray) {
      depthArray = new Uint32Array(DEPTH_SIZE);
    }
    depthArray.fill(0);
    const readbackUint32 = readback.map((layer) => new Uint32Array(layer.buffer));
    const layerSize = readbackUint32[0].length;
    const numLayers = Math.ceil(totalSplats / layerSize);
    let layerBase = 0;
    for (let layer = 0; layer < numLayers; ++layer) {
      const readbackLayer = readbackUint32[layer];
      const layerSplats = Math.min(readbackLayer.length, totalSplats - layerBase);
      for (let i2 = 0; i2 < layerSplats; ++i2) {
        const pri = readbackLayer[i2] & 32767;
        if (pri < DEPTH_INFINITY) {
          depthArray[pri] += 1;
        }
      }
      layerBase += layerSplats;
    }
    let activeSplats = 0;
    for (let j = 0; j < DEPTH_SIZE; ++j) {
      const nextIndex = activeSplats + depthArray[j];
      depthArray[j] = activeSplats;
      activeSplats = nextIndex;
    }
    layerBase = 0;
    for (let layer = 0; layer < numLayers; ++layer) {
      const readbackLayer = readbackUint32[layer];
      const layerSplats = Math.min(readbackLayer.length, totalSplats - layerBase);
      for (let i2 = 0; i2 < layerSplats; ++i2) {
        const pri = readbackLayer[i2] & 32767;
        if (pri < DEPTH_INFINITY) {
          ordering[depthArray[pri]] = layerBase + i2;
          depthArray[pri] += 1;
        }
      }
      layerBase += layerSplats;
    }
    if (depthArray[DEPTH_SIZE - 1] !== activeSplats) {
      throw new Error(
        \`Expected \${activeSplats} active splats but got \${depthArray[DEPTH_SIZE - 1]}\`
      );
    }
    return { activeSplats, ordering };
  }
  function sortDoubleSplats({
    numSplats,
    readback,
    ordering
  }) {
    if (!depthArray) {
      depthArray = new Uint32Array(DEPTH_SIZE);
    }
    depthArray.fill(0);
    for (let i2 = 0; i2 < numSplats; ++i2) {
      const pri = readback[i2];
      if (pri < DEPTH_INFINITY) {
        depthArray[pri] += 1;
      }
    }
    let activeSplats = 0;
    for (let j = DEPTH_INFINITY - 1; j >= 0; --j) {
      const nextIndex = activeSplats + depthArray[j];
      depthArray[j] = activeSplats;
      activeSplats = nextIndex;
    }
    for (let i2 = 0; i2 < numSplats; ++i2) {
      const pri = readback[i2];
      if (pri < DEPTH_INFINITY) {
        ordering[depthArray[pri]] = i2;
        depthArray[pri] += 1;
      }
    }
    if (depthArray[0] !== activeSplats) {
      throw new Error(
        \`Expected \${activeSplats} active splats but got \${depthArray[0]}\`
      );
    }
    return { activeSplats, ordering };
  }
  const messageBuffer = [];
  function bufferMessage(event) {
    messageBuffer.push(event);
  }
  async function initialize() {
    self.addEventListener("message", bufferMessage);
    await __wbg_init();
    self.removeEventListener("message", bufferMessage);
    self.addEventListener("message", onMessage);
    for (const event of messageBuffer) {
      onMessage(event);
    }
    messageBuffer.length = 0;
  }
  initialize().catch(console.error);
})();
//# sourceMappingURL=worker-Do1mGyaZ.js.map
`,blob=typeof self<"u"&&self.Blob&&new Blob([jsContent],{type:"text/javascript;charset=utf-8"});function WorkerWrapper(r){let t;try{if(t=blob&&(self.URL||self.webkitURL).createObjectURL(blob),!t)throw"";const e=new Worker(t,{name:r==null?void 0:r.name});return e.addEventListener("error",()=>{(self.URL||self.webkitURL).revokeObjectURL(t)}),e}catch{return new Worker("data:text/javascript;charset=utf-8,"+encodeURIComponent(jsContent),{name:r==null?void 0:r.name})}finally{t&&(self.URL||self.webkitURL).revokeObjectURL(t)}}class SplatWorker{constructor(){this.messages={},this.messageIdNext=0,this.worker=new WorkerWrapper,this.worker.onmessage=t=>this.onMessage(t)}makeMessageId(){return++this.messageIdNext}makeMessagePromiseId(){const t=this.makeMessageId(),e=new Promise((A,a)=>{this.messages[t]={resolve:A,reject:a}});return{id:t,promise:e}}onMessage(t){const{id:e,result:A,error:a}=t.data,s=this.messages[e];s&&(delete this.messages[e],a?s.reject(a):s.resolve(A))}async call(t,e){const{id:A,promise:a}=this.makeMessagePromiseId();return this.worker.postMessage({name:t,args:e,id:A},{transfer:getArrayBuffers(e)}),a}}let maxWorkers=4,numWorkers=0;const freeWorkers=[],workerQueue=[];async function allocWorker(){const r=freeWorkers.shift();if(r)return r;if(numWorkers<maxWorkers){const t=new SplatWorker;return numWorkers+=1,t}return new Promise(t=>{workerQueue.push(t)})}function freeWorker(r){if(numWorkers>maxWorkers){numWorkers-=1;return}const t=workerQueue.shift();if(t){t(r);return}freeWorkers.push(r)}async function withWorker(r){const t=await allocWorker();try{return await r(t)}finally{freeWorker(t)}}function getSplatFileType(r){const t=new DataView(r.buffer);if((t.getUint32(0,!0)&16777215)===7957616)return"ply";if((t.getUint32(0,!0)&16777215)===559903){const e=decompressPartialGzip(r,4);return new DataView(e.buffer).getUint32(0,!0)===1347635022?"spz":void 0}}function getFileExtension(r){const t=r.split(/[?#]/,1)[0],e=Math.max(t.lastIndexOf("/"),t.lastIndexOf("\\")),A=t.slice(e+1),a=A.lastIndexOf(".");return a<=0||a===A.length-1?"":A.slice(a+1).toLowerCase()}function getSplatFileTypeFromPath(r){const t=getFileExtension(r);if(t==="ply")return"ply";if(t==="spz")return"spz";if(t==="splat")return"splat";if(t==="ksplat")return"ksplat"}async function unpackSplats({input:r,fileType:t,pathOrUrl:e}){const A=r instanceof ArrayBuffer?new Uint8Array(r):r;let a=t;switch(t||(a=getSplatFileType(A),!a&&e&&(a=getSplatFileTypeFromPath(e))),a){case"ply":{const s=new PlyReader({fileBytes:A});await s.parseHeader();const n=s.numSplats,l=getTextureSize(n).maxSplats,d={fileBytes:A,packedArray:new Uint32Array(l*4)};return await withWorker(async f=>{const{packedArray:E,numSplats:I,extra:B}=await f.call("unpackPly",d);return{packedArray:E,numSplats:I,extra:B}})}case"spz":return await withWorker(async s=>{const{packedArray:n,numSplats:l,extra:d}=await s.call("decodeSpz",{fileBytes:A});return{packedArray:n,numSplats:l,extra:d}});case"splat":return await withWorker(async s=>{const{packedArray:n,numSplats:l}=await s.call("decodeAntiSplat",{fileBytes:A});return{packedArray:n,numSplats:l}});case"ksplat":return await withWorker(async s=>{const{packedArray:n,numSplats:l,extra:d}=await s.call("decodeKsplat",{fileBytes:A});return{packedArray:n,numSplats:l,extra:d}});default:throw new Error(`Unknown splat file type: ${a}`)}}var computeUvec4_default=`precision highp float;
precision highp int;
precision highp sampler2D;
precision highp usampler2D;
precision highp isampler2D;
precision highp sampler2DArray;
precision highp usampler2DArray;
precision highp isampler2DArray;
precision highp sampler3D;
precision highp usampler3D;
precision highp isampler3D;

#include <splatDefines>

uniform uint targetLayer;
uniform int targetBase;
uniform int targetCount;

out uvec4 target;

{{ GLOBALS }}

void produceSplat(int index) {
    {{ STATEMENTS }}
}

void main() {
    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);
    int index = targetIndex - targetBase;

    if ((index >= 0) && (index < targetCount)) {
        produceSplat(index);
    } else {
        target = uvec4(0u, 0u, 0u, 0u);
    }
}`;const _PackedSplats=class Cn{constructor(t={}){this.maxSplats=0,this.numSplats=0,this.packedArray=null,this.isInitialized=!1,this.target=null,this.source=null,this.needsUpdate=!0,this.extra={},this.dyno=new DynoPackedSplats({packedSplats:this}),this.initialized=Promise.resolve(this),this.reinitialize(t)}reinitialize(t){this.isInitialized=!1,t.url||t.fileBytes||t.construct?this.initialized=this.asyncInitialize(t).then(()=>(this.isInitialized=!0,this)):(this.initialize(t),this.isInitialized=!0,this.initialized=Promise.resolve(this))}initialize(t){t.packedArray?(this.packedArray=t.packedArray,this.maxSplats=Math.floor(this.packedArray.length/4),this.maxSplats=Math.floor(this.maxSplats/SPLAT_TEX_WIDTH)*SPLAT_TEX_WIDTH,this.numSplats=Math.min(this.maxSplats,t.numSplats??Number.POSITIVE_INFINITY)):(this.maxSplats=t.maxSplats??0,this.numSplats=0),this.extra=t.extra??{}}async asyncInitialize(t){let{url:e,fileBytes:A,construct:a}=t;if(e&&(A=await fetch(e).then(async s=>{if(!s.ok)throw new Error(`${s.status} "${s.statusText}" fetching URL: ${e}`);return await s.arrayBuffer()})),A){const s=await unpackSplats({input:A,fileType:t.fileType,pathOrUrl:t.fileName??e});this.initialize(s)}if(a){const s=a(this);s instanceof Promise&&await s}}dispose(){this.target&&(this.target.dispose(),this.target=null),this.source&&(this.source.dispose(),this.source=null)}ensureSplats(t){const e=t<=this.maxSplats?this.maxSplats:Math.max(t,2*this.maxSplats),A=this.packedArray?this.packedArray.length/4:0;if(!this.packedArray||e>A){this.maxSplats=getTextureSize(e).maxSplats;const a=new Uint32Array(this.maxSplats*4);this.packedArray&&a.set(this.packedArray),this.packedArray=a}return this.packedArray}ensureSplatsSh(t,e){let A,a;if(t===0)return this.ensureSplats(e);if(t===1)A=2,a="sh1";else if(t===2)A=4,a="sh2";else if(t===3)A=4,a="sh3";else throw new Error(`Invalid level: ${t}`);let s=this.extra[a]?this.extra[a].length/A:0;const n=e<=s?s:Math.max(e,2*s);if(!this.extra[a]||n>s){s=getTextureSize(n).maxSplats;const l=new Uint32Array(s*A);this.extra[a]&&l.set(this.extra[a]),this.extra[a]=l}return this.extra[a]}getSplat(t){if(!this.packedArray||t>=this.numSplats)throw new Error("Invalid index");return unpackSplat(this.packedArray,t)}setSplat(t,e,A,a,s,n){const l=this.ensureSplats(t+1);setPackedSplat(l,t,e.x,e.y,e.z,A.x,A.y,A.z,a.x,a.y,a.z,a.w,s,n.r,n.g,n.b),this.numSplats=Math.max(this.numSplats,t+1)}pushSplat(t,e,A,a,s){const n=this.ensureSplats(this.numSplats+1);setPackedSplat(n,this.numSplats,t.x,t.y,t.z,e.x,e.y,e.z,A.x,A.y,A.z,A.w,a,s.r,s.g,s.b),++this.numSplats}forEachSplat(t){if(!(!this.packedArray||!this.numSplats))for(let e=0;e<this.numSplats;++e){const A=unpackSplat(this.packedArray,e);t(e,A.center,A.scales,A.quaternion,A.opacity,A.color)}}ensureGenerate(t){if(this.target&&(t??1)<=this.maxSplats)return!1;this.dispose();const e=getTextureSize(t??1),{width:A,height:a,depth:s}=e;return this.maxSplats=e.maxSplats,this.target=new WebGLArrayRenderTarget(A,a,s,{depthBuffer:!1,stencilBuffer:!1,generateMipmaps:!1,magFilter:NearestFilter,minFilter:NearestFilter}),this.target.texture.format=RGBAIntegerFormat,this.target.texture.type=UnsignedIntType,this.target.texture.internalFormat="RGBA32UI",!0}generateMapping(t){let e=0;const A=t.map(a=>{const s=e,n=Math.ceil(a/SPLAT_TEX_WIDTH)*SPLAT_TEX_WIDTH;return e+=n,{base:s,count:a}});return{maxSplats:e,mapping:A}}getTexture(){return this.target?this.target.texture:this.source||this.packedArray?this.maybeUpdateSource():Cn.getEmpty()}maybeUpdateSource(){if(!this.packedArray)throw new Error("No packed splats");if(this.needsUpdate||!this.source){if(this.needsUpdate=!1,this.source){const{width:t,height:e,depth:A}=this.source.image;this.maxSplats!==t*e*A&&(this.source.dispose(),this.source=null)}if(this.source)this.packedArray.buffer!==this.source.image.data.buffer&&(this.source.image.data=new Uint8Array(this.packedArray.buffer));else{const{width:t,height:e,depth:A}=getTextureSize(this.maxSplats);this.source=new DataArrayTexture(this.packedArray,t,e,A),this.source.format=RGBAIntegerFormat,this.source.type=UnsignedIntType,this.source.internalFormat="RGBA32UI",this.source.needsUpdate=!0}this.source.needsUpdate=!0}return this.source}static getEmpty(){if(!Cn.emptySource){const{width:t,height:e,depth:A,maxSplats:a}=getTextureSize(1),s=new Uint32Array(a*4);Cn.emptySource=new DataArrayTexture(s,t,e,A),Cn.emptySource.format=RGBAIntegerFormat,Cn.emptySource.type=UnsignedIntType,Cn.emptySource.internalFormat="RGBA32UI",Cn.emptySource.needsUpdate=!0}return Cn.emptySource}prepareProgramMaterial(t){let e=Cn.generatorProgram.get(t);if(!e){const a=dynoBlock({index:"int"},{output:"uvec4"},({index:s})=>{t.inputs.index=s;const n=t.outputs.gsplat;return{output:outputPackedSplat(n)}});Cn.programTemplate||(Cn.programTemplate=new DynoProgramTemplate(computeUvec4_default)),e=new DynoProgram({graph:a,inputs:{index:"index"},outputs:{output:"target"},template:Cn.programTemplate}),Object.assign(e.uniforms,{targetLayer:{value:0},targetBase:{value:0},targetCount:{value:0}}),Cn.generatorProgram.set(t,e)}const A=e.prepareMaterial();return Cn.mesh.material=A,{program:e,material:A}}saveRenderState(t){return{xrPresenting:t.xr.isPresenting,autoClear:t.autoClear,scissorTest:t.getScissorTest(),pixelRatio:t.getPixelRatio()}}resetRenderState(t,e){t.setRenderTarget(null),t.setPixelRatio(e.pixelRatio),t.xr.isPresenting=e.xrPresenting,t.autoClear=e.autoClear,t.setScissorTest(e.scissorTest)}generate({generator:t,base:e,count:A,renderer:a}){if(!this.target)throw new Error("Target must be initialized with ensureSplats");if(e+A>this.maxSplats)throw new Error("Base + count exceeds maxSplats");const{program:s,material:n}=this.prepareProgramMaterial(t);s.update();const l=this.saveRenderState(a),d=Math.ceil((e+A)/SPLAT_TEX_WIDTH)*SPLAT_TEX_WIDTH,f=SPLAT_TEX_WIDTH*SPLAT_TEX_HEIGHT;for(n.uniforms.targetBase.value=e,n.uniforms.targetCount.value=A;e<d;){const E=Math.floor(e/f);n.uniforms.targetLayer.value=E;const I=E*f,B=Math.floor((e-I)/SPLAT_TEX_WIDTH),y=Math.min(SPLAT_TEX_HEIGHT,Math.ceil((d-I)/SPLAT_TEX_WIDTH));a.setPixelRatio(1),a.setRenderTarget(this.target,E),a.xr.isPresenting=!1,a.autoClear=!1,a.setScissorTest(!0),a.setScissor(0,B,SPLAT_TEX_WIDTH,y-B),a.render(Cn.scene,Cn.camera),e+=SPLAT_TEX_WIDTH*(y-B)}return this.resetRenderState(a,l),{nextBase:d}}};_PackedSplats.emptySource=null;_PackedSplats.programTemplate=null;_PackedSplats.generatorProgram=new Map;_PackedSplats.geometry=new PlaneGeometry(2,2);_PackedSplats.mesh=new Mesh(_PackedSplats.geometry,new RawShaderMaterial({visible:!1}));_PackedSplats.scene=new Scene().add(_PackedSplats.mesh);_PackedSplats.camera=new Camera;let PackedSplats=_PackedSplats;class DynoPackedSplats extends DynoUniform{constructor({packedSplats:t}={}){super({key:"packedSplats",type:TPackedSplats,globals:()=>[definePackedSplats],value:{texture:PackedSplats.getEmpty(),numSplats:0},update:e=>{var A,a;return e.texture=((A=this.packedSplats)==null?void 0:A.getTexture())??PackedSplats.getEmpty(),e.numSplats=((a=this.packedSplats)==null?void 0:a.numSplats)??0,e}}),this.packedSplats=t}}class SplatGeometry extends InstancedBufferGeometry{constructor(t,e){super(),this.ordering=t,this.setAttribute("position",new BufferAttribute(QUAD_VERTICES,3)),this.setIndex(new BufferAttribute(QUAD_INDICES,1)),this._maxInstanceCount=t.length,this.instanceCount=e,this.attribute=new InstancedBufferAttribute(t,1,!1,1),this.attribute.setUsage(DynamicDrawUsage),this.setAttribute("splatIndex",this.attribute)}update(t,e){this.ordering=t,this.attribute.array=t,this.instanceCount=e,this.attribute.addUpdateRange(0,e),this.attribute.needsUpdate=!0}}const QUAD_VERTICES=new Float32Array([-1,-1,0,1,-1,0,1,1,0,-1,1,0]),QUAD_INDICES=new Uint16Array([0,1,2,0,2,3]),_SparkViewpoint=class pA{constructor(t){if(this.lastTime=null,this.encodeLinear=!1,this.superXY=1,this.display=null,this.sorting=null,this.pending=null,this.sortingCheck=!1,this.readback=new Uint16Array(0),this.spark=t.spark,this.camera=t.camera,this.viewToWorld=t.viewToWorld??new Matrix4,t.target){const{width:e,height:A,doubleBuffer:a}=t.target,s=Math.max(1,Math.min(4,t.target.superXY??1));if(this.superXY=s,e*s>8192||A*s>8192)throw new Error("Target size too large");this.target=new WebGLRenderTarget(e*s,A*s,{format:RGBAFormat,type:UnsignedByteType,colorSpace:SRGBColorSpace}),a&&(this.back=new WebGLRenderTarget(e*s,A*s,{format:RGBAFormat,type:UnsignedByteType,colorSpace:SRGBColorSpace})),this.encodeLinear=!0}this.onTextureUpdated=t.onTextureUpdated,this.sortRadial=t.sortRadial??!0,this.sortDistance=t.sortDistance,this.sortCoorient=t.sortCoorient,this.depthBias=t.depthBias,this.sort360=t.sort360,this.orderingFreelist=new FreeList({allocate:e=>new Uint32Array(e),valid:(e,A)=>e.length===A}),this.autoUpdate=!1,this.setAutoUpdate(t.autoUpdate??!1)}dispose(){var t;this.setAutoUpdate(!1),this.target&&(this.target.dispose(),this.target=void 0),this.back&&(this.back.dispose(),this.back=void 0),this.display&&(this.spark.releaseAccumulator(this.display.accumulator),this.display.geometry.dispose(),this.display=null),(t=this.pending)!=null&&t.accumulator&&(this.spark.releaseAccumulator(this.pending.accumulator),this.pending=null)}setAutoUpdate(t){!this.autoUpdate&&t?this.spark.autoViewpoints.push(this):this.autoUpdate&&!t&&(this.spark.autoViewpoints=this.spark.autoViewpoints.filter(e=>e!==this)),this.autoUpdate=t}async prepare({scene:t,camera:e,viewToWorld:A,update:a,forceOrigin:s}){var n;for(A?this.viewToWorld=A:(this.camera=e??this.camera,this.camera&&(this.camera.updateMatrixWorld(),this.viewToWorld=this.camera.matrixWorld.clone()));a??!0;){const d=s?this.viewToWorld:void 0;if(this.spark.updateInternal({scene:t,originToWorld:d}))break;await new Promise(E=>setTimeout(E,10))}const l=this.spark.active;l!==((n=this.display)==null?void 0:n.accumulator)&&(this.spark.active.refCount+=1),await this.sortUpdate({accumulator:l,viewToWorld:this.viewToWorld})}renderTarget({scene:t,camera:e}){var A;const a=this.back??this.target;if(!a)throw new Error("Must initialize SparkViewpoint with target");if(e=e??this.camera,!e)throw new Error("Must provide camera");if(e instanceof PerspectiveCamera){const s=new PerspectiveCamera().copy(e,!1);s.aspect=a.width/a.height,s.updateProjectionMatrix(),e=s}this.viewToWorld=e.matrixWorld.clone();try{this.spark.renderer.setRenderTarget(a),this.spark.prepareViewpoint(this),this.spark.renderer.render(t,e)}finally{this.spark.prepareViewpoint(this.spark.defaultView),this.spark.renderer.setRenderTarget(null)}a!==this.target&&([this.target,this.back]=[this.back,this.target]),(A=this.onTextureUpdated)==null||A.call(this,a.texture)}async readTarget(){if(!this.target)throw new Error("Must initialize SparkViewpoint with target");const{width:t,height:e}=this.target,A=t*e*4;(!this.superPixels||this.superPixels.length<A)&&(this.superPixels=new Uint8Array(A)),await this.spark.renderer.readRenderTargetPixelsAsync(this.target,0,0,t,e,this.superPixels);const{superXY:a}=this;if(a===1)return this.superPixels;const s=t/a,n=e/a,l=s*n*4;(!this.pixels||this.pixels.length<l)&&(this.pixels=new Uint8Array(l));const{superPixels:d,pixels:f}=this,E=a*a;for(let I=0;I<n;I++){const B=I*s;for(let y=0;y<s;y++){const v=y*a;let S=0,_=0,Q=0,D=0;for(let T=0;T<a;T++){const P=(I*a+T)*this.target.width;for(let R=0;R<a;R++){const F=(P+v+R)*4;S+=d[F],_+=d[F+1],Q+=d[F+2],D+=d[F+3]}}const b=(B+y)*4;f[b]=S/E,f[b+1]=_/E,f[b+2]=Q/E,f[b+3]=D/E}}return f}async prepareRenderPixels({scene:t,camera:e,viewToWorld:A,update:a,forceOrigin:s}){return await this.prepare({scene:t,camera:e,viewToWorld:A,update:a,forceOrigin:s}),this.renderTarget({scene:t,camera:e}),this.readTarget()}autoPoll({accumulator:t}){var e,A,a,s;this.camera&&(this.camera.updateMatrixWorld(),this.viewToWorld=this.camera.matrixWorld.clone());let n=!1,l=!1;if(!this.display)n=!0;else if(t){n=!0;const{mappingVersion:f}=this.display.accumulator;t.mappingVersion===f&&(this.spark.releaseAccumulator(this.display.accumulator),this.display.accumulator=t,l=!0)}const d=((e=this.sorting)==null?void 0:e.viewToWorld)??((A=this.display)==null?void 0:A.viewToWorld);d&&!withinCoorientDist({matrix1:this.viewToWorld,matrix2:d,maxDistance:this.sortDistance??.01,minCoorient:this.sortCoorient??this.sortRadial?.99:.999})&&(n=!0),n&&(t&&(t.refCount+=1),t&&((a=this.pending)!=null&&a.accumulator)&&this.pending.accumulator!==((s=this.display)==null?void 0:s.accumulator)&&this.spark.releaseAccumulator(this.pending.accumulator),this.pending={accumulator:t,viewToWorld:this.viewToWorld,displayed:l},this.driveSort())}async driveSort(){for(var t;;){if(this.sorting||!this.pending)return;const{viewToWorld:e,displayed:A}=this.pending;let a=this.pending.accumulator??((t=this.display)==null?void 0:t.accumulator);if(a||(a=this.spark.active,a.refCount+=1),this.pending=null,!a)throw new Error("No accumulator to sort");this.sorting={viewToWorld:e},await this.sortUpdate({accumulator:a,viewToWorld:e,displayed:A}),this.sorting=null}}async sortUpdate({accumulator:t,viewToWorld:e,displayed:A=!1}){if(this.sortingCheck)throw new Error("Only one sort at a time");this.sortingCheck=!0,t=t??this.spark.active;const{numSplats:a,maxSplats:s}=t.splats;let n=0,l=this.orderingFreelist.alloc(s);if(a>0){const{reader:d,doubleSortReader:f,dynoSortRadial:E,dynoOrigin:I,dynoDirection:B,dynoDepthBias:y,dynoSort360:v,dynoSplats:S}=pA.makeSorter(),_=Math.ceil(s/2);this.readback=d.ensureBuffer(_,this.readback);const Q=t.toWorld.clone().invert(),D=e.clone().premultiply(Q);E.value=this.sort360?!0:this.sortRadial,I.value.set(0,0,0).applyMatrix4(D),B.value.set(0,0,-1).applyMatrix4(D).sub(I.value).normalize(),y.value=this.depthBias??1,v.value=this.sort360??!1,S.packedSplats=t.splats,await d.renderReadback({renderer:this.spark.renderer,reader:f,count:Math.ceil(a/2),readback:this.readback});const b=await withWorker(async T=>T.call("sortDoubleSplats",{numSplats:a,readback:this.readback,ordering:l}));this.readback=b.readback,l=b.ordering,n=b.activeSplats}this.updateDisplay({accumulator:t,viewToWorld:e,ordering:l,activeSplats:n,displayed:A}),this.sortingCheck=!1}updateDisplay({accumulator:t,viewToWorld:e,ordering:A,activeSplats:a,displayed:s=!1}){if(!this.display)this.display={accumulator:t,viewToWorld:e,geometry:new SplatGeometry(A,a)};else{!s&&t!==this.display.accumulator&&(this.spark.releaseAccumulator(this.display.accumulator),this.display.accumulator=t),this.display.viewToWorld=e;const n=this.display.geometry.ordering;n.length===A.length?this.display.geometry.update(A,a):(this.display.geometry.dispose(),this.display.geometry=new SplatGeometry(A,a)),this.orderingFreelist.free(n)}this.spark.viewpoint===this&&this.spark.prepareViewpoint(this)}static makeSorter(){if(!pA.dynos){const t=new DynoBool({value:!0}),e=new DynoVec3({value:new Vector3}),A=new DynoVec3({value:new Vector3}),a=new DynoFloat({value:1}),s=new DynoBool({value:!1}),n=new DynoPackedSplats,l=new Readback,d=dynoBlock({index:"int"},{rgba8:"vec4"},({index:f})=>{if(!f)throw new Error("No index");const E={sortRadial:t,sortOrigin:e,sortDirection:A,sortDepthBias:a,sort360:s},I=mul(f,dynoConst("int",2)),B=readPackedSplat(n,I),y=computeSortMetric({gsplat:B,...E}),v=readPackedSplat(n,add(I,dynoConst("int",1))),S=computeSortMetric({gsplat:v,...E}),_=combine({vectorType:"vec2",x:y,y:S});return{rgba8:uintToRgba8(packHalf2x16(_))}});pA.dynos={dynoSortRadial:t,dynoOrigin:e,dynoDirection:A,dynoDepthBias:a,dynoSort360:s,dynoSplats:n,reader:l,doubleSortReader:d}}return pA.dynos}};_SparkViewpoint.EMPTY_TEXTURE=new Texture;_SparkViewpoint.dynos=null;let SparkViewpoint=_SparkViewpoint;const defineComputeSortMetric=unindent(`
  float computeSort(Gsplat gsplat, bool sortRadial, vec3 sortOrigin, vec3 sortDirection, float sortDepthBias, bool sort360) {
    if (!isGsplatActive(gsplat.flags)) {
      return INFINITY;
    }

    vec3 center = gsplat.center - sortOrigin;
    float biasedDepth = dot(center, sortDirection) + sortDepthBias;
    if (!sort360 && (biasedDepth <= 0.0)) {
      return INFINITY;
    }

    return sortRadial ? length(center) : biasedDepth;
  }
`);function computeSortMetric({gsplat:r,sortRadial:t,sortOrigin:e,sortDirection:A,sortDepthBias:a,sort360:s}){return dyno$1({inTypes:{gsplat:Gsplat,sortRadial:"bool",sortOrigin:"vec3",sortDirection:"vec3",sortDepthBias:"float",sort360:"bool"},outTypes:{metric:"float"},globals:()=>[defineGsplat,defineComputeSortMetric],inputs:{gsplat:r,sortRadial:t,sortOrigin:e,sortDirection:A,sortDepthBias:a,sort360:s},statements:({inputs:n,outputs:l})=>{const{gsplat:d,sortRadial:f,sortOrigin:E,sortDirection:I,sortDepthBias:B,sort360:y}=n;return unindentLines(`
        ${l.metric} = computeSort(${d}, ${f}, ${E}, ${I}, ${B}, ${y});
      `)}}).outputs.metric}class SplatAccumulator{constructor(){this.splats=new PackedSplats,this.toWorld=new Matrix4,this.mapping=[],this.refCount=0,this.splatsVersion=-1,this.mappingVersion=-1}ensureGenerate(t){this.splats.ensureGenerate(t)&&(this.mapping=[])}generateSplats({renderer:t,modifier:e,generators:A,forceUpdate:a,originToWorld:s}){const n=this.mapping.reduce((f,E)=>(f.set(E.node,E),f),new Map);let l=0,d=0;for(const{node:f,generator:E,version:I,base:B,count:y}of A){const v=n.get(f);if((a||E!==(v==null?void 0:v.generator)||I!==(v==null?void 0:v.version)||B!==(v==null?void 0:v.base)||y!==(v==null?void 0:v.count))&&E&&y>0){const S=e.apply(E);try{this.splats.generate({generator:S,base:B,count:y,renderer:t})}catch(_){f.generator=void 0,f.generatorError=_}l+=1}d=Math.max(d,B+y)}return this.splats.numSplats=d,this.toWorld=s,this.mapping=A,l!==0}hasCorrespondence(t){return this.mapping.length!==t.mapping.length?!1:this.mapping.every(({node:e,base:A,count:a},s)=>{const{node:n,base:l,count:d}=t.mapping[s];return e===n&&A===l&&a===d})}}var splatDefines_default=`const float LN_SCALE_MIN = -9.0;
const float LN_SCALE_MAX = 9.0;
const float LN_RESCALE = (LN_SCALE_MAX - LN_SCALE_MIN) / 254.0; 

const uint SPLAT_TEX_WIDTH_BITS = 11u;
const uint SPLAT_TEX_HEIGHT_BITS = 11u;
const uint SPLAT_TEX_DEPTH_BITS = 11u;
const uint SPLAT_TEX_LAYER_BITS = SPLAT_TEX_WIDTH_BITS + SPLAT_TEX_HEIGHT_BITS;

const uint SPLAT_TEX_WIDTH = 1u << SPLAT_TEX_WIDTH_BITS;
const uint SPLAT_TEX_HEIGHT = 1u << SPLAT_TEX_HEIGHT_BITS;
const uint SPLAT_TEX_DEPTH = 1u << SPLAT_TEX_DEPTH_BITS;

const uint SPLAT_TEX_WIDTH_MASK = SPLAT_TEX_WIDTH - 1u;
const uint SPLAT_TEX_HEIGHT_MASK = SPLAT_TEX_HEIGHT - 1u;
const uint SPLAT_TEX_DEPTH_MASK = SPLAT_TEX_DEPTH - 1u;

const uint F16_INF = 0x7c00u;
const float PI = 3.1415926535897932384626433832795;

const float INFINITY = 1.0 / 0.0;
const float NEG_INFINITY = -INFINITY;

const float MAX_PIXEL_RADIUS = 512.0;
const float MIN_ALPHA = 0.5 * (1.0 / 255.0); 
const float MAX_STDDEV = sqrt(8.0);

float sqr(float x) {
    return x * x;
}

float pow4(float x) {
    float x2 = x * x;
    return x2 * x2;
}

float pow8(float x) {
    float x4 = pow4(x);
    return x4 * x4;
}

vec3 srgbToLinear(vec3 rgb) {
    return pow(rgb, vec3(2.2));
}

vec3 linearToSrgb(vec3 rgb) {
    return pow(rgb, vec3(1.0 / 2.2));
}

uint encodeQuatOctXy88R8(vec4 q) {
    
    if (q.w < 0.0) {
        q = -q;
    }
    
    float theta = 2.0 * acos(q.w);
    float halfTheta = theta * 0.5;
    float s = sin(halfTheta);
    
    vec3 axis = (abs(s) < 1e-6) ? vec3(1.0, 0.0, 0.0) : q.xyz / s;
    
    
    
    float sum = abs(axis.x) + abs(axis.y) + abs(axis.z);
    vec2 p = vec2(axis.x, axis.y) / sum;
    
    if (axis.z < 0.0) {
        float oldPx = p.x;
        p.x = (1.0 - abs(p.y)) * (p.x >= 0.0 ? 1.0 : -1.0);
        p.y = (1.0 - abs(oldPx)) * (p.y >= 0.0 ? 1.0 : -1.0);
    }
    
    float u_f = p.x * 0.5 + 0.5;
    float v_f = p.y * 0.5 + 0.5;
    
    uint quantU = uint(clamp(round(u_f * 255.0), 0.0, 255.0));
    uint quantV = uint(clamp(round(v_f * 255.0), 0.0, 255.0));
    
    
    
    uint angleInt = uint(clamp(round((theta / 3.14159265359) * 255.0), 0.0, 255.0));
    
    
    return (angleInt << 16u) | (quantV << 8u) | quantU;
}

vec4 decodeQuatOctXy88R8(uint encoded) {
    
    uint quantU = encoded & uint(0xFFu);               
    uint quantV = (encoded >> 8u) & uint(0xFFu);         
    uint angleInt = encoded >> 16u;                      

    
    float u_f = float(quantU) / 255.0;
    float v_f = float(quantV) / 255.0;
    vec2 f = vec2(u_f * 2.0 - 1.0, v_f * 2.0 - 1.0);

    vec3 axis = vec3(f.xy, 1.0 - abs(f.x) - abs(f.y));
    float t = max(-axis.z, 0.0);
    axis.x += (axis.x >= 0.0) ? -t : t;
    axis.y += (axis.y >= 0.0) ? -t : t;
    axis = normalize(axis);
    
    
    float theta = (float(angleInt) / 255.0) * 3.14159265359;
    float halfTheta = theta * 0.5;
    float s = sin(halfTheta);
    float w = cos(halfTheta);
    
    return vec4(axis * s, w);
}

    

    

    

    

    

    

    

    

    

    

uvec4 packSplat(vec3 center, vec3 scales, vec4 quaternion, vec4 rgba) {
    uvec4 uRgba = uvec4(round(clamp(rgba * 255.0, 0.0, 255.0)));

    uint uQuat = encodeQuatOctXy88R8(quaternion);
    
    
    uvec3 uQuat3 = uvec3(uQuat & 0xffu, (uQuat >> 8u) & 0xffu, (uQuat >> 16u) & 0xffu);

    
    uvec3 uScales = uvec3(
        (scales.x == 0.0) ? 0u : uint(round(clamp((log(scales.x) - LN_SCALE_MIN) / LN_RESCALE, 0.0, 254.0))) + 1u,
        (scales.y == 0.0) ? 0u : uint(round(clamp((log(scales.y) - LN_SCALE_MIN) / LN_RESCALE, 0.0, 254.0))) + 1u,
        (scales.z == 0.0) ? 0u : uint(round(clamp((log(scales.z) - LN_SCALE_MIN) / LN_RESCALE, 0.0, 254.0))) + 1u
    );

    
    uint word0 = uRgba.r | (uRgba.g << 8u) | (uRgba.b << 16u) | (uRgba.a << 24u);
    uint word1 = packHalf2x16(center.xy);
    uint word2 = packHalf2x16(vec2(center.z, 0.0)) | (uQuat3.x << 16u) | (uQuat3.y << 24u);
    uint word3 = uScales.x | (uScales.y << 8u) | (uScales.z << 16u) | (uQuat3.z << 24u);
    return uvec4(word0, word1, word2, word3);
}

void unpackSplat(uvec4 packed, out vec3 center, out vec3 scales, out vec4 quaternion, out vec4 rgba) {
    uint word0 = packed.x, word1 = packed.y, word2 = packed.z, word3 = packed.w;

    uvec4 uRgba = uvec4(word0 & 0xffu, (word0 >> 8u) & 0xffu, (word0 >> 16u) & 0xffu, (word0 >> 24u) & 0xffu);
    rgba = vec4(uRgba) / 255.0;

    center = vec4(
        unpackHalf2x16(word1),
        unpackHalf2x16(word2 & 0xffffu)
    ).xyz;

    uvec3 uScales = uvec3(word3 & 0xffu, (word3 >> 8u) & 0xffu, (word3 >> 16u) & 0xffu);
    scales = vec3(
        (uScales.x == 0u) ? 0.0 : exp(LN_SCALE_MIN + float(uScales.x - 1u) * LN_RESCALE),
        (uScales.y == 0u) ? 0.0 : exp(LN_SCALE_MIN + float(uScales.y - 1u) * LN_RESCALE),
        (uScales.z == 0u) ? 0.0 : exp(LN_SCALE_MIN + float(uScales.z - 1u) * LN_RESCALE)
    );

    uint uQuat = ((word2 >> 16u) & 0xFFFFu) | ((word3 >> 8u) & 0xFF0000u);
    quaternion = decodeQuatOctXy88R8(uQuat);
    
    
}

vec3 quatVec(vec4 q, vec3 v) {
    
    vec3 t = 2.0 * cross(q.xyz, v);
    return v + q.w * t + cross(q.xyz, t);
}

vec4 quatQuat(vec4 q1, vec4 q2) {
    return vec4(
        q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
        q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,
        q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w,
        q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z
    );
}

mat3 scaleQuaternionToMatrix(vec3 s, vec4 q) {
    
    return mat3(
        s.x * (1.0 - 2.0 * (q.y * q.y + q.z * q.z)),
        s.x * (2.0 * (q.x * q.y + q.w * q.z)),
        s.x * (2.0 * (q.x * q.z - q.w * q.y)),
        s.y * (2.0 * (q.x * q.y - q.w * q.z)),
        s.y * (1.0 - 2.0 * (q.x * q.x + q.z * q.z)),
        s.y * (2.0 * (q.y * q.z + q.w * q.x)),
        s.z * (2.0 * (q.x * q.z + q.w * q.y)),
        s.z * (2.0 * (q.y * q.z - q.w * q.x)),
        s.z * (1.0 - 2.0 * (q.x * q.x + q.y * q.y))
    );
}

vec4 slerp(vec4 q1, vec4 q2, float t) {
    
    float cosHalfTheta = dot(q1, q2);

    
    if (abs(cosHalfTheta) >= 0.999) {
        return q1;
    }
    
    
    
    if (cosHalfTheta < 0.0) {
        q2 = -q2;
        cosHalfTheta = -cosHalfTheta;
    }

    
    float halfTheta = acos(cosHalfTheta);
    float sinHalfTheta = sqrt(1.0 - cosHalfTheta * cosHalfTheta);

    
    float ratioA = sin((1.0 - t) * halfTheta) / sinHalfTheta;
    float ratioB = sin(t * halfTheta) / sinHalfTheta;

    
    return q1 * ratioA + q2 * ratioB;
}

ivec3 splatTexCoord(int index) {
    uint x = uint(index) & SPLAT_TEX_WIDTH_MASK;
    uint y = (uint(index) >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK;
    uint z = uint(index) >> SPLAT_TEX_LAYER_BITS;
    return ivec3(x, y, z);
}`,splatFragment_default=`precision highp float;
precision highp int;

#include <splatDefines>

uniform bool encodeLinear;
uniform float maxStdDev;
uniform bool disableFalloff;
uniform float falloff;

out vec4 fragColor;

in vec4 vRgba;
in vec2 vSplatUv;
in vec3 vNdc;

void main() {
    float z = dot(vSplatUv, vSplatUv);
    if (z > (maxStdDev * maxStdDev)) {
        discard;
    }

    float alpha = vRgba.a;
    alpha *= mix(1.0, exp(-0.5 * z), falloff);
    if (alpha < MIN_ALPHA) {
        discard;
    }

    vec3 rgb = vRgba.rgb;
    if (encodeLinear) {
        rgb = srgbToLinear(rgb);
    }
    fragColor = vec4(rgb, alpha);
}`,splatVertex_default=`precision highp float;
precision highp int;
precision highp usampler2DArray;

#include <splatDefines>

attribute uint splatIndex;

out vec4 vRgba;
out vec2 vSplatUv;
out vec3 vNdc;

uniform vec2 renderSize;
uniform uint numSplats;
uniform vec4 renderToViewQuat;
uniform vec3 renderToViewPos;
uniform float maxStdDev;
uniform float time;
uniform float deltaTime;
uniform bool debugFlag;
uniform bool enable2DGS;
uniform float blurAmount;
uniform float preBlurAmount;
uniform float clipXY;

uniform usampler2DArray packedSplats;

void main() {
    
    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);

    if (uint(gl_InstanceID) >= numSplats) {
        return;
    }
    if (splatIndex == 0xffffffffu) {
        
        return;
    }

    ivec3 texCoord = ivec3(
        splatIndex & SPLAT_TEX_WIDTH_MASK,
        (splatIndex >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK,
        splatIndex >> SPLAT_TEX_LAYER_BITS
    );
    uvec4 packed = texelFetch(packedSplats, texCoord, 0);

    vec3 center, scales;
    vec4 quaternion, rgba;
    unpackSplat(packed, center, scales, quaternion, rgba);

    if (rgba.a < MIN_ALPHA) {
        return;
    }
    bvec3 zeroScales = equal(scales, vec3(0.0));
    if (all(zeroScales)) {
        return;
    }

    
    vec3 viewCenter = quatVec(renderToViewQuat, center) + renderToViewPos;

    
    if (viewCenter.z >= 0.0) {
        return;
    }

    
    vec4 clipCenter = projectionMatrix * vec4(viewCenter, 1.0);

    
    if (abs(clipCenter.z) >= clipCenter.w) {
        return;
    }

    
    float clip = clipXY * clipCenter.w;
    if (abs(clipCenter.x) > clip || abs(clipCenter.y) > clip) {
        return;
    }

    
    vec4 viewQuaternion = quatQuat(renderToViewQuat, quaternion);

    if (enable2DGS && any(zeroScales)) {
        vRgba = rgba;
        vSplatUv = position.xy * maxStdDev;

        vec3 offset;
        if (zeroScales.z) {
            offset = vec3(vSplatUv.xy * scales.xy, 0.0);
        } else if (zeroScales.y) {
            offset = vec3(vSplatUv.x * scales.x, 0.0, vSplatUv.y * scales.z);
        } else {
            offset = vec3(0.0, vSplatUv.xy * scales.yz);
        }

        vec3 viewPos = viewCenter + quatVec(viewQuaternion, offset);
        gl_Position = projectionMatrix * vec4(viewPos, 1.0);
        vNdc = gl_Position.xyz / gl_Position.w;
        return;
    }

    
    vec3 ndcCenter = clipCenter.xyz / clipCenter.w;

    
    mat3 RS = scaleQuaternionToMatrix(scales, viewQuaternion);
    mat3 cov3D = RS * transpose(RS);

    
    vec2 focal = 0.5 * renderSize * vec2(projectionMatrix[0][0], projectionMatrix[1][1]);
    float invZ = 1.0 / viewCenter.z;
    vec2 J1 = focal * invZ;
    vec2 J2 = -(J1 * viewCenter.xy) * invZ;
    mat3 J = mat3(
        J1.x, 0.0, J2.x,
        0.0, J1.y, J2.y,
        0.0, 0.0, 0.0
    );

    
    
    
    
    
    
    
    mat3 cov2D = transpose(J) * cov3D * J;
    float a = cov2D[0][0];
    float d = cov2D[1][1];
    float b = cov2D[0][1];

    
    a += preBlurAmount;
    d += preBlurAmount;

    
    float detOrig = a * d - b * b;
    a += blurAmount;
    d += blurAmount;
    float det = a * d - b * b;

    
    float blurAdjust = sqrt(max(0.0, detOrig / det));
    rgba.a *= blurAdjust;
    if (rgba.a < MIN_ALPHA) {
        return;
    }

    
    float eigenAvg = 0.5 * (a + d);
    float eigenDelta = sqrt(max(0.0, eigenAvg * eigenAvg - det));
    float eigen1 = eigenAvg + eigenDelta;
    float eigen2 = eigenAvg - eigenDelta;

    vec2 eigenVec1 = normalize(vec2((abs(b) < 0.001) ? 1.0 : b, eigen1 - a));
    vec2 eigenVec2 = vec2(eigenVec1.y, -eigenVec1.x);

    float scale1 = position.x * min(MAX_PIXEL_RADIUS, maxStdDev * sqrt(eigen1));
    float scale2 = position.y * min(MAX_PIXEL_RADIUS, maxStdDev * sqrt(eigen2));

    
    vec2 pixelOffset = eigenVec1 * scale1 + eigenVec2 * scale2;
    vec2 ndcOffset = (2.0 / renderSize) * pixelOffset;
    vec3 ndc = vec3(ndcCenter.xy + ndcOffset, ndcCenter.z);

    vRgba = rgba;
    vSplatUv = position.xy * maxStdDev;
    vNdc = ndc;
    gl_Position = vec4(ndc.xy * clipCenter.w, clipCenter.zw);
}`;let shaders=null;function getShaders(){return shaders||(ShaderChunk.splatDefines=splatDefines_default,shaders={splatVertex:splatVertex_default,splatFragment:splatFragment_default}),shaders}const MAX_ACCUMULATORS=5;let hasSplatMesh=!1,hasSparkRenderer=!1,sparkRendererInstance;function containsSplatMesh(r){let t=!1;return r instanceof SplatMesh?!0:(r.traverse(e=>{t=t||e instanceof SplatMesh}),t)}const sceneAdd=Scene.prototype.add;Scene.prototype.add=function(r){return hasSplatMesh=hasSplatMesh||containsSplatMesh(r),hasSparkRenderer=hasSparkRenderer||r instanceof SparkRenderer,sceneAdd.call(this,r),this};const sceneOnBeforeRender=Scene.prototype.onBeforeRender;Scene.prototype.onBeforeRender=function(r){if(hasSplatMesh){if(!hasSparkRenderer){const t=sparkRendererInstance||new SparkRenderer({renderer:r});this.add(t)}Scene.prototype.onBeforeRender=sceneOnBeforeRender,Scene.prototype.add=sceneAdd}};const _SparkRenderer=class Fn extends Mesh{constructor(t){const e=Fn.makeUniforms(),A=getShaders(),a=new ShaderMaterial({glslVersion:GLSL3,vertexShader:A.splatVertex,fragmentShader:A.splatFragment,uniforms:e,transparent:!0,blending:NormalBlending,depthTest:!0,depthWrite:!1,side:DoubleSide});super(EMPTY_GEOMETRY,a),this.autoViewpoints=[],this.rotateToAccumulator=new DynoVec4({value:new Quaternion}),this.translateToAccumulator=new DynoVec3({value:new Vector3}),this.lastFrame=-1,this.lastUpdateTime=null,this.defaultCameras=[],this.pendingUpdate=null,this.envViewpoint=null,this.frustumCulled=!1,this.renderer=t.renderer,this.material=a,this.uniforms=e;const s=dynoBlock({gsplat:Gsplat},{gsplat:Gsplat},({gsplat:n})=>{if(!n)throw new Error("gsplat not defined");return n=transformGsplat(n,{rotate:this.rotateToAccumulator,translate:this.translateToAccumulator}),{gsplat:n}});this.modifier=new SplatModifier(s),this.autoUpdate=t.autoUpdate??!0,this.preUpdate=t.preUpdate??!1,this.originDistance=t.originDistance??1,this.maxStdDev=t.maxStdDev??Math.sqrt(8),this.enable2DGS=t.enable2DGS??!0,this.preBlurAmount=t.preBlurAmount??0,this.blurAmount=t.blurAmount??.3,this.falloff=t.falloff??1,this.clipXY=t.clipXY??1.4,this.active=new SplatAccumulator,this.accumulatorCount=1,this.freeAccumulators=[];for(let n=0;n<1;++n)this.freeAccumulators.push(new SplatAccumulator),this.accumulatorCount+=1;this.defaultView=new SparkViewpoint({...t.view,autoUpdate:!0,spark:this}),this.viewpoint=this.defaultView,this.prepareViewpoint(this.viewpoint),this.clock=t.clock?cloneClock(t.clock):new Clock,sparkRendererInstance=this}static makeUniforms(){return{renderSize:{value:new Vector2},numSplats:{value:0},renderToViewQuat:{value:new Quaternion},renderToViewPos:{value:new Vector3},maxStdDev:{value:1},enable2DGS:{value:!1},preBlurAmount:{value:0},blurAmount:{value:.3},falloff:{value:1},clipXY:{value:1.4},packedSplats:{type:"t",value:PackedSplats.getEmpty()},time:{value:0},deltaTime:{value:0},encodeLinear:{value:!1},debugFlag:{value:!1}}}canAllocAccumulator(){return this.freeAccumulators.length>0||this.accumulatorCount<MAX_ACCUMULATORS}maybeAllocAccumulator(){let t=this.freeAccumulators.pop();if(t===void 0){if(this.accumulatorCount>=MAX_ACCUMULATORS)return null;t=new SplatAccumulator,this.accumulatorCount+=1}return t.refCount=1,t}releaseAccumulator(t){t.refCount-=1,t.refCount===0&&this.freeAccumulators.push(t)}newViewpoint(t){return new SparkViewpoint({...t,spark:this})}onBeforeRender(t,e,A){var a,s;const n=this.time??this.clock.getElapsedTime(),l=n-(this.viewpoint.lastTime??n);this.viewpoint.lastTime=n;const d=t.info.render.frame,f=d!==this.lastFrame;this.lastFrame=d;const E=this.viewpoint;if(E===this.defaultView){if(f)if(!t.xr.isPresenting)this.defaultView.viewToWorld=A.matrixWorld.clone(),this.defaultCameras=[this.defaultView.viewToWorld];else{const v=t.xr.getCamera().cameras;this.defaultCameras=[v[0].matrixWorld,v[1].matrixWorld],this.defaultView.viewToWorld=averageOriginToWorlds(this.defaultCameras)??new Matrix4}this.autoUpdate&&this.update({scene:e,viewToWorld:this.defaultView.viewToWorld})}if(f&&(this.uniforms.time.value=n,this.uniforms.deltaTime.value=l,this.uniforms.debugFlag.value=performance.now()/1e3%2<1),E.target)this.uniforms.renderSize.value.set(E.target.width,E.target.height);else{const v=t.getSize(this.uniforms.renderSize.value);if(v.x===1&&v.y===1){const S=(a=t.xr.getSession())==null?void 0:a.renderState.baseLayer;S&&(v.x=S.framebufferWidth,v.y=S.framebufferHeight)}}this.uniforms.encodeLinear.value=E.encodeLinear,this.uniforms.maxStdDev.value=this.maxStdDev,this.uniforms.enable2DGS.value=this.enable2DGS,this.uniforms.preBlurAmount.value=this.preBlurAmount,this.uniforms.blurAmount.value=this.blurAmount,this.uniforms.falloff.value=this.falloff,this.uniforms.clipXY.value=this.clipXY;const I=((s=E.display)==null?void 0:s.accumulator.toWorld)??new Matrix4,B=A.matrixWorld.clone().invert();I.clone().premultiply(B).decompose(this.uniforms.renderToViewPos.value,this.uniforms.renderToViewQuat.value,new Vector3)}prepareViewpoint(t){if(this.viewpoint=t??this.viewpoint,this.viewpoint.display){const{accumulator:e,geometry:A}=this.viewpoint.display;this.uniforms.numSplats.value=e.splats.numSplats,this.uniforms.packedSplats.value=e.splats.getTexture(),this.geometry=A}else this.uniforms.numSplats.value=0,this.uniforms.packedSplats.value=PackedSplats.getEmpty(),this.geometry=EMPTY_GEOMETRY}update({scene:t,viewToWorld:e}){const A=this.matrixWorld.clone();this.preUpdate?this.updateInternal({scene:t,originToWorld:A,viewToWorld:e}):(this.pendingUpdate={scene:t,originToWorld:A},setTimeout(()=>{if(this.pendingUpdate){const{scene:a,originToWorld:s}=this.pendingUpdate;this.pendingUpdate=null,this.updateInternal({scene:a,originToWorld:s,viewToWorld:e})}},1))}updateInternal({scene:t,originToWorld:e,viewToWorld:A}){var a;if(!this.canAllocAccumulator())return!1;e||(e=this.active.toWorld),A=A??e.clone();const s=this.time??this.clock.getElapsedTime(),n=s-(this.lastUpdateTime??s);this.lastUpdateTime=s;const l=this.active.mapping.reduce((y,v)=>(y.set(v.node,v),y),new Map),{generators:d,globalEdits:f}=this.compileScene(t);for(const y of d)(a=y.frameUpdate)==null||a.call(y,{object:y,time:s,deltaTime:n,viewToWorld:A,globalEdits:f});for(const y of d){const v=l.get(y),S=y.generator?y.numSplats:0;(y.generator!==(v==null?void 0:v.generator)||S!==(v==null?void 0:v.count))&&y.updateVersion()}const I=!withinCoorientDist({matrix1:e,matrix2:this.active.toWorld,maxDistance:this.originDistance})||d.length!==l.size||d.some(y=>{var v;return y.version!==((v=l.get(y))==null?void 0:v.version)});let B=null;if(I){if(B=this.maybeAllocAccumulator(),!B)throw new Error("Unreachable");const y=!withinCoorientDist({matrix1:e,matrix2:this.active.toWorld,maxDistance:1e-5,minCoorient:.99999}),S=d.map((P,R)=>{const F=l.get(P);return F?[P.version-F.version,F.base,P]:[Number.POSITIVE_INFINITY,P.version,P]}).sort((P,R)=>P[0]!==R[0]?P[0]-R[0]:P[1]-R[1]).map(([P,R,F])=>F),_=S.map(P=>P.numSplats),{maxSplats:Q,mapping:D}=B.splats.generateMapping(_),b=S.map((P,R)=>{const{base:F,count:O}=D[R];return{node:P,generator:P.generator,version:P.version,base:F,count:O}});e.clone().invert().decompose(this.translateToAccumulator.value,this.rotateToAccumulator.value,new Vector3),B.ensureGenerate(Q),B.generateSplats({renderer:this.renderer,modifier:this.modifier,generators:b,forceUpdate:y,originToWorld:e}),B.splatsVersion=this.active.splatsVersion+1;const T=B.hasCorrespondence(this.active);B.mappingVersion=this.active.mappingVersion+(T?0:1),this.releaseAccumulator(this.active),this.active=B,this.prepareViewpoint()}return setTimeout(()=>{for(const y of this.autoViewpoints)y.autoPoll({accumulator:B??void 0})},1),!0}compileScene(t){const e=[];t.traverse(a=>{a instanceof SplatGenerator&&e.push(a)});const A=new Set;return t.traverseVisible(a=>{if(a instanceof SplatEdit){let s=a.parent;for(;s!=null&&!(s instanceof SplatMesh);)s=s.parent;s==null&&A.add(a)}}),{generators:e,globalEdits:Array.from(A)}}async renderEnvMap({renderer:t,scene:e,worldCenter:A,size:a=256,near:s=.1,far:n=1e3,hideObjects:l=[],update:d=!1}){var f,E;if(this.envViewpoint||(this.envViewpoint=this.newViewpoint({sort360:!0})),!Fn.cubeRender||Fn.cubeRender.target.width!==a||Fn.cubeRender.near!==s||Fn.cubeRender.far!==n){Fn.cubeRender&&Fn.cubeRender.target.dispose();const S=new WebGLCubeRenderTarget(a,{format:RGBAFormat,generateMipmaps:!0,minFilter:LinearMipMapLinearFilter}),_=new CubeCamera(s,n,S);Fn.cubeRender={target:S,camera:_,near:s,far:n}}Fn.pmrem||(Fn.pmrem=new PMREMGenerator(t??this.renderer));const I=new Matrix4().setPosition(A);await((f=this.envViewpoint)==null?void 0:f.prepare({scene:e,viewToWorld:I,update:d}));const{target:B,camera:y}=Fn.cubeRender;y.position.copy(A);const v=new Map;for(const S of l)v.set(S,S.visible),S.visible=!1;this.prepareViewpoint(this.envViewpoint),y.update(t??this.renderer,e),this.prepareViewpoint(this.defaultView);for(const[S,_]of v.entries())S.visible=_;return(E=Fn.pmrem)==null?void 0:E.fromCubemap(B.texture).texture}recurseSetEnvMap(t,e){t.traverse(A=>{if(A instanceof Mesh)if(Array.isArray(A.material))for(const a of A.material)a instanceof MeshStandardMaterial&&(a.envMap=e);else A.material instanceof MeshStandardMaterial&&(A.material.envMap=e)})}getRgba({generator:t,rgba:e}){const A=this.active.mapping.find(({node:a})=>a===t);if(!A)throw new Error("Generator not found");return e=e??new RgbaArray,e.fromPackedSplats({packedSplats:this.active.splats,base:A.base,count:A.count,renderer:this.renderer}),e}async readRgba({generator:t,rgba:e}){return e=this.getRgba({generator:t,rgba:e}),e.read()}};_SparkRenderer.cubeRender=null;_SparkRenderer.pmrem=null;let SparkRenderer=_SparkRenderer;const EMPTY_GEOMETRY=new SplatGeometry(new Uint32Array(1),0);dynoBlock({packedSplats:TPackedSplats,index:"int"},{gsplat:Gsplat},({packedSplats:r,index:t})=>{if(!r||!t)throw new Error("Invalid input");return{gsplat:readPackedSplat(r,t)}});function averageOriginToWorlds(r){if(r.length===0)return null;const t=new Vector3,e=new Quaternion,A=new Vector3,a=[],s=[];for(const n of r)n.decompose(t,e,A),a.push(t),s.push(e);return new Matrix4().compose(averagePositions(a),averageQuaternions(s),new Vector3(1,1,1))}unindent(`
  struct GsplatSkinning {
    int numSplats;
    int numBones;
    usampler2DArray skinTexture;
    sampler2D boneTexture;
  };
`);unindent(`
  void applyGsplatSkinning(
    int numSplats, int numBones,
    usampler2DArray skinTexture, sampler2D boneTexture,
    int splatIndex, inout vec3 center, inout vec4 quaternion
  ) {
    if ((splatIndex < 0) || (splatIndex >= numSplats)) {
      return;
    }

    uvec4 skinData = texelFetch(skinTexture, splatTexCoord(splatIndex), 0);

    float weights[4];
    weights[0] = float(skinData.x & 0xffu) / 255.0;
    weights[1] = float(skinData.y & 0xffu) / 255.0;
    weights[2] = float(skinData.z & 0xffu) / 255.0;
    weights[3] = float(skinData.w & 0xffu) / 255.0;

    uint boneIndices[4];
    boneIndices[0] = (skinData.x >> 8u) & 0xffu;
    boneIndices[1] = (skinData.y >> 8u) & 0xffu;
    boneIndices[2] = (skinData.z >> 8u) & 0xffu;
    boneIndices[3] = (skinData.w >> 8u) & 0xffu;

    vec4 quat = vec4(0.0);
    vec4 dual = vec4(0.0);
    for (int i = 0; i < 4; i++) {
      if (weights[i] > 0.0) {
        int boneIndex = int(boneIndices[i]);
        vec4 boneQuat = vec4(0.0, 0.0, 0.0, 1.0);
        vec4 boneDual = vec4(0.0);
        if (boneIndex < numBones) {
          boneQuat = texelFetch(boneTexture, ivec2(2, boneIndex), 0);
          boneDual = texelFetch(boneTexture, ivec2(3, boneIndex), 0);
        }

        if ((i > 0) && (dot(quat, boneQuat) < 0.0)) {
          // Flip sign if next blend is pointing in the opposite direction
          boneQuat = -boneQuat;
          boneDual = -boneDual;
        }
        quat += weights[i] * boneQuat;
        dual += weights[i] * boneDual;
      }
    }

    // Normalize dual quaternion
    float norm = length(quat);
    quat /= norm;
    dual /= norm;
    vec3 translate = vec3(
      2.0 * (-dual.w * quat.x + dual.x * quat.w - dual.y * quat.z + dual.z * quat.y),
      2.0 * (-dual.w * quat.y + dual.x * quat.z + dual.y * quat.w - dual.z * quat.x),
      2.0 * (-dual.w * quat.z - dual.x * quat.y + dual.y * quat.x + dual.z * quat.w)
    );

    center = quatVec(quat, center) + translate;
    quaternion = quatQuat(quat, quaternion);
  }
`);new Box3(new Vector3(-1,-1,-1),new Vector3(1,1,1)),new Vector3(-1,-3,1).normalize(),new Color(1,1,1),new Color(.5,.5,1),new Vector3(1,1,1);new Box3(new Vector3(-2,-1,-2),new Vector3(2,5,2)),new Vector3(0,-1,0),new Color(1,1,1),new Color(.25,.25,.5),new Vector3(.1,1,.1);const _VRButton=class XA{static createButton(t,e={}){const A=navigator.xr;if(!A)return null;const a=A,s=document.createElement("button");t.xr.enabled=!0,t.xr.setReferenceSpaceType("local");function n(){let I=null;async function B(S){console.log("onSessionStarted"),S.addEventListener("end",y),await t.xr.setSession(S),s.textContent="EXIT VR",I=S}function y(){console.log("onSessionEnded"),I==null||I.removeEventListener("end",y),s.textContent="ENTER VR",I=null}s.style.display="",s.style.cursor="pointer",s.style.left="calc(50% - 100px)",s.style.width="200px",s.style.height="100px",s.textContent="ENTER VR";const v={...e,optionalFeatures:[...e.optionalFeatures||[]]};s.onmouseenter=()=>{s.style.opacity="1.0"},s.onmouseleave=()=>{s.style.opacity="0.5"},s.onclick=()=>{I===null?(console.log("requesting session"),a.requestSession("immersive-vr",v).then(B)):(console.log("ending session"),I.end())}}function l(){s.style.display="none",s.style.cursor="auto",s.style.left="calc(50% - 75px)",s.style.width="150px",s.onmouseenter=null,s.onmouseleave=null,s.onclick=null}function d(){l(),s.textContent="VR NOT SUPPORTED"}function f(I){l(),console.warn("Exception when trying to call xr.isSessionSupported",I),s.textContent="VR NOT ALLOWED"}function E(I){I.style.position="absolute",I.style.bottom="20px",I.style.padding="12px 6px",I.style.border="1px solid #fff",I.style.borderRadius="4px",I.style.background="rgba(0,0,0,0.1)",I.style.color="#fff",I.style.font="normal 13px sans-serif",I.style.textAlign="center",I.style.opacity="0.5",I.style.outline="none",I.style.zIndex="999"}return s.id="VRButton",s.style.display="none",E(s),a.isSessionSupported("immersive-vr").then(I=>{I?n():d(),I&&XA.xrSessionIsGranted&&s.click()}).catch(f),s}static registerSessionGrantedListener(){const t=navigator.xr;if(!t)return null;const e=t;/WebXRViewer\//i.test(navigator.userAgent)||e.addEventListener("sessiongranted",()=>{XA.xrSessionIsGranted=!0})}};_VRButton.xrSessionIsGranted=!1;let VRButton=_VRButton;VRButton.registerSessionGrantedListener();var JointEnum=(r=>(r.w="wrist",r.t0="thumb-metacarpal",r.t1="thumb-phalanx-proximal",r.t2="thumb-phalanx-distal",r.t3="thumb-tip",r.i0="index-finger-metacarpal",r.i1="index-finger-phalanx-proximal",r.i2="index-finger-phalanx-intermediate",r.i3="index-finger-phalanx-distal",r.i4="index-finger-tip",r.m0="middle-finger-metacarpal",r.m1="middle-finger-phalanx-proximal",r.m2="middle-finger-phalanx-intermediate",r.m3="middle-finger-phalanx-distal",r.m4="middle-finger-tip",r.r0="ring-finger-metacarpal",r.r1="ring-finger-phalanx-proximal",r.r2="ring-finger-phalanx-intermediate",r.r3="ring-finger-phalanx-distal",r.r4="ring-finger-tip",r.p0="pinky-finger-metacarpal",r.p1="pinky-finger-phalanx-proximal",r.p2="pinky-finger-phalanx-intermediate",r.p3="pinky-finger-phalanx-distal",r.p4="pinky-finger-tip",r))(JointEnum||{});const JOINT_IDS=Object.keys(JointEnum);JOINT_IDS.length;new Vector3(0,0,-1),new Vector3(0,0,1),new Vector3(-1,0,0),new Vector3(1,0,0),new Vector3(0,1,0),new Vector3(0,-1,0);new Vector3(0,0,-1),new Vector3(0,0,1),new Vector3(-1,0,0),new Vector3(1,0,0),new Vector3(0,1,0),new Vector3(0,-1,0);new Vector3(0,0,1),new Vector3(0,0,-1);new Vector3(0,-1,0),new Vector3(0,1,0),new Vector3(-1,0,0),new Vector3(1,0,0);var commonjsGlobal=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function getDefaultExportFromCjs(r){return r&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r}var vconsole_min$1={exports:{}};/*!
 * vConsole v3.15.1 (https://github.com/Tencent/vConsole)
 *
 * Tencent is pleased to support the open source community by making vConsole available.
 * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */var vconsole_min=vconsole_min$1.exports,hasRequiredVconsole_min;function requireVconsole_min(){return hasRequiredVconsole_min||(hasRequiredVconsole_min=1,function(module,exports){(function(r,t){module.exports=t()})(vconsole_min||self,function(){return function(){var __webpack_modules__={4264:function(r,t,e){r.exports=e(7588)},5036:function(r,t,e){e(1719),e(5677),e(6394),e(5334),e(6969),e(2021),e(8328),e(2129);var A=e(1287);r.exports=A.Promise},2582:function(r,t,e){e(1646),e(6394),e(2004),e(462),e(8407),e(2429),e(1172),e(8288),e(1274),e(8201),e(6626),e(3211),e(9952),e(15),e(9831),e(7521),e(2972),e(6956),e(5222),e(2257);var A=e(1287);r.exports=A.Symbol},8257:function(r,t,e){var A=e(7583),a=e(9212),s=e(5637),n=A.TypeError;r.exports=function(l){if(a(l))return l;throw n(s(l)+" is not a function")}},1186:function(r,t,e){var A=e(7583),a=e(2097),s=e(5637),n=A.TypeError;r.exports=function(l){if(a(l))return l;throw n(s(l)+" is not a constructor")}},9882:function(r,t,e){var A=e(7583),a=e(9212),s=A.String,n=A.TypeError;r.exports=function(l){if(typeof l=="object"||a(l))return l;throw n("Can't set "+s(l)+" as a prototype")}},6288:function(r,t,e){var A=e(3649),a=e(3590),s=e(4615),n=A("unscopables"),l=Array.prototype;l[n]==null&&s.f(l,n,{configurable:!0,value:a(null)}),r.exports=function(d){l[n][d]=!0}},4761:function(r,t,e){var A=e(7583),a=e(2447),s=A.TypeError;r.exports=function(n,l){if(a(l,n))return n;throw s("Incorrect invocation")}},2569:function(r,t,e){var A=e(7583),a=e(794),s=A.String,n=A.TypeError;r.exports=function(l){if(a(l))return l;throw n(s(l)+" is not an object")}},5766:function(r,t,e){var A=e(2977),a=e(6782),s=e(1825),n=function(l){return function(d,f,E){var I,B=A(d),y=s(B),v=a(E,y);if(l&&f!=f){for(;y>v;)if((I=B[v++])!=I)return!0}else for(;y>v;v++)if((l||v in B)&&B[v]===f)return l||v||0;return!l&&-1}};r.exports={includes:n(!0),indexOf:n(!1)}},4805:function(r,t,e){var A=e(2938),a=e(7386),s=e(5044),n=e(1324),l=e(1825),d=e(4822),f=a([].push),E=function(I){var B=I==1,y=I==2,v=I==3,S=I==4,_=I==6,Q=I==7,D=I==5||_;return function(b,T,P,R){for(var F,O,N=n(b),L=s(N),Y=A(T,P),rt=l(L),tt=0,at=R||d,pt=B?at(b,rt):y||Q?at(b,0):void 0;rt>tt;tt++)if((D||tt in L)&&(O=Y(F=L[tt],tt,N),I))if(B)pt[tt]=O;else if(O)switch(I){case 3:return!0;case 5:return F;case 6:return tt;case 2:f(pt,F)}else switch(I){case 4:return!1;case 7:f(pt,F)}return _?-1:v||S?S:pt}};r.exports={forEach:E(0),map:E(1),filter:E(2),some:E(3),every:E(4),find:E(5),findIndex:E(6),filterReject:E(7)}},9269:function(r,t,e){var A=e(6544),a=e(3649),s=e(4061),n=a("species");r.exports=function(l){return s>=51||!A(function(){var d=[];return(d.constructor={})[n]=function(){return{foo:1}},d[l](Boolean).foo!==1})}},4546:function(r,t,e){var A=e(7583),a=e(6782),s=e(1825),n=e(5999),l=A.Array,d=Math.max;r.exports=function(f,E,I){for(var B=s(f),y=a(E,B),v=a(I===void 0?B:I,B),S=l(d(v-y,0)),_=0;y<v;y++,_++)n(S,_,f[y]);return S.length=_,S}},6917:function(r,t,e){var A=e(7386);r.exports=A([].slice)},5289:function(r,t,e){var A=e(7583),a=e(4521),s=e(2097),n=e(794),l=e(3649)("species"),d=A.Array;r.exports=function(f){var E;return a(f)&&(E=f.constructor,(s(E)&&(E===d||a(E.prototype))||n(E)&&(E=E[l])===null)&&(E=void 0)),E===void 0?d:E}},4822:function(r,t,e){var A=e(5289);r.exports=function(a,s){return new(A(a))(s===0?0:s)}},3616:function(r,t,e){var A=e(3649)("iterator"),a=!1;try{var s=0,n={next:function(){return{done:!!s++}},return:function(){a=!0}};n[A]=function(){return this},Array.from(n,function(){throw 2})}catch{}r.exports=function(l,d){if(!d&&!a)return!1;var f=!1;try{var E={};E[A]=function(){return{next:function(){return{done:f=!0}}}},l(E)}catch{}return f}},9624:function(r,t,e){var A=e(7386),a=A({}.toString),s=A("".slice);r.exports=function(n){return s(a(n),8,-1)}},3058:function(r,t,e){var A=e(7583),a=e(8191),s=e(9212),n=e(9624),l=e(3649)("toStringTag"),d=A.Object,f=n(function(){return arguments}())=="Arguments";r.exports=a?n:function(E){var I,B,y;return E===void 0?"Undefined":E===null?"Null":typeof(B=function(v,S){try{return v[S]}catch{}}(I=d(E),l))=="string"?B:f?n(I):(y=n(I))=="Object"&&s(I.callee)?"Arguments":y}},1509:function(r,t,e){var A=e(7386)("".replace),a=String(Error("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,n=s.test(a);r.exports=function(l,d){if(n&&typeof l=="string")for(;d--;)l=A(l,s,"");return l}},3478:function(r,t,e){var A=e(2870),a=e(929),s=e(6683),n=e(4615);r.exports=function(l,d,f){for(var E=a(d),I=n.f,B=s.f,y=0;y<E.length;y++){var v=E[y];A(l,v)||f&&A(f,v)||I(l,v,B(d,v))}}},926:function(r,t,e){var A=e(6544);r.exports=!A(function(){function a(){}return a.prototype.constructor=null,Object.getPrototypeOf(new a)!==a.prototype})},4683:function(r,t,e){var A=e(2365).IteratorPrototype,a=e(3590),s=e(4677),n=e(8821),l=e(339),d=function(){return this};r.exports=function(f,E,I,B){var y=E+" Iterator";return f.prototype=a(A,{next:s(+!B,I)}),n(f,y,!1,!0),l[y]=d,f}},57:function(r,t,e){var A=e(8494),a=e(4615),s=e(4677);r.exports=A?function(n,l,d){return a.f(n,l,s(1,d))}:function(n,l,d){return n[l]=d,n}},4677:function(r){r.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},5999:function(r,t,e){var A=e(8734),a=e(4615),s=e(4677);r.exports=function(n,l,d){var f=A(l);f in n?a.f(n,f,s(0,d)):n[f]=d}},9012:function(r,t,e){var A=e(7263),a=e(8262),s=e(6268),n=e(4340),l=e(9212),d=e(4683),f=e(729),E=e(7496),I=e(8821),B=e(57),y=e(1270),v=e(3649),S=e(339),_=e(2365),Q=n.PROPER,D=n.CONFIGURABLE,b=_.IteratorPrototype,T=_.BUGGY_SAFARI_ITERATORS,P=v("iterator"),R="keys",F="values",O="entries",N=function(){return this};r.exports=function(L,Y,rt,tt,at,pt,ct){d(rt,Y,tt);var $,q,Ct,wt=function(mt){if(mt===at&&At)return At;if(!T&&mt in K)return K[mt];switch(mt){case R:case F:case O:return function(){return new rt(this,mt)}}return function(){return new rt(this)}},Bt=Y+" Iterator",ut=!1,K=L.prototype,J=K[P]||K["@@iterator"]||at&&K[at],At=!T&&J||wt(at),xt=Y=="Array"&&K.entries||J;if(xt&&($=f(xt.call(new L)))!==Object.prototype&&$.next&&(s||f($)===b||(E?E($,b):l($[P])||y($,P,N)),I($,Bt,!0,!0),s&&(S[Bt]=N)),Q&&at==F&&J&&J.name!==F&&(!s&&D?B(K,"name",F):(ut=!0,At=function(){return a(J,this)})),at)if(q={values:wt(F),keys:pt?At:wt(R),entries:wt(O)},ct)for(Ct in q)(T||ut||!(Ct in K))&&y(K,Ct,q[Ct]);else A({target:Y,proto:!0,forced:T||ut},q);return s&&!ct||K[P]===At||y(K,P,At,{name:at}),S[Y]=At,q}},2219:function(r,t,e){var A=e(1287),a=e(2870),s=e(491),n=e(4615).f;r.exports=function(l){var d=A.Symbol||(A.Symbol={});a(d,l)||n(d,l,{value:s.f(l)})}},8494:function(r,t,e){var A=e(6544);r.exports=!A(function(){return Object.defineProperty({},1,{get:function(){return 7}})[1]!=7})},6668:function(r,t,e){var A=e(7583),a=e(794),s=A.document,n=a(s)&&a(s.createElement);r.exports=function(l){return n?s.createElement(l):{}}},6778:function(r){r.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},9307:function(r,t,e){var A=e(6668)("span").classList,a=A&&A.constructor&&A.constructor.prototype;r.exports=a===Object.prototype?void 0:a},2274:function(r){r.exports=typeof window=="object"},3256:function(r,t,e){var A=e(6918),a=e(7583);r.exports=/ipad|iphone|ipod/i.test(A)&&a.Pebble!==void 0},7020:function(r,t,e){var A=e(6918);r.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(A)},5354:function(r,t,e){var A=e(9624),a=e(7583);r.exports=A(a.process)=="process"},6846:function(r,t,e){var A=e(6918);r.exports=/web0s(?!.*chrome)/i.test(A)},6918:function(r,t,e){var A=e(5897);r.exports=A("navigator","userAgent")||""},4061:function(r,t,e){var A,a,s=e(7583),n=e(6918),l=s.process,d=s.Deno,f=l&&l.versions||d&&d.version,E=f&&f.v8;E&&(a=(A=E.split("."))[0]>0&&A[0]<4?1:+(A[0]+A[1])),!a&&n&&(!(A=n.match(/Edge\/(\d+)/))||A[1]>=74)&&(A=n.match(/Chrome\/(\d+)/))&&(a=+A[1]),r.exports=a},5690:function(r){r.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},1178:function(r,t,e){var A=e(6544),a=e(4677);r.exports=!A(function(){var s=Error("a");return!("stack"in s)||(Object.defineProperty(s,"stack",a(1,7)),s.stack!==7)})},7263:function(r,t,e){var A=e(7583),a=e(6683).f,s=e(57),n=e(1270),l=e(460),d=e(3478),f=e(4451);r.exports=function(E,I){var B,y,v,S,_,Q=E.target,D=E.global,b=E.stat;if(B=D?A:b?A[Q]||l(Q,{}):(A[Q]||{}).prototype)for(y in I){if(S=I[y],v=E.noTargetGet?(_=a(B,y))&&_.value:B[y],!f(D?y:Q+(b?".":"#")+y,E.forced)&&v!==void 0){if(typeof S==typeof v)continue;d(S,v)}(E.sham||v&&v.sham)&&s(S,"sham",!0),n(B,y,S,E)}}},6544:function(r){r.exports=function(t){try{return!!t()}catch{return!0}}},1611:function(r,t,e){var A=e(8987),a=Function.prototype,s=a.apply,n=a.call;r.exports=typeof Reflect=="object"&&Reflect.apply||(A?n.bind(s):function(){return n.apply(s,arguments)})},2938:function(r,t,e){var A=e(7386),a=e(8257),s=e(8987),n=A(A.bind);r.exports=function(l,d){return a(l),d===void 0?l:s?n(l,d):function(){return l.apply(d,arguments)}}},8987:function(r,t,e){var A=e(6544);r.exports=!A(function(){var a=(function(){}).bind();return typeof a!="function"||a.hasOwnProperty("prototype")})},8262:function(r,t,e){var A=e(8987),a=Function.prototype.call;r.exports=A?a.bind(a):function(){return a.apply(a,arguments)}},4340:function(r,t,e){var A=e(8494),a=e(2870),s=Function.prototype,n=A&&Object.getOwnPropertyDescriptor,l=a(s,"name"),d=l&&(function(){}).name==="something",f=l&&(!A||A&&n(s,"name").configurable);r.exports={EXISTS:l,PROPER:d,CONFIGURABLE:f}},7386:function(r,t,e){var A=e(8987),a=Function.prototype,s=a.bind,n=a.call,l=A&&s.bind(n,n);r.exports=A?function(d){return d&&l(d)}:function(d){return d&&function(){return n.apply(d,arguments)}}},5897:function(r,t,e){var A=e(7583),a=e(9212),s=function(n){return a(n)?n:void 0};r.exports=function(n,l){return arguments.length<2?s(A[n]):A[n]&&A[n][l]}},8272:function(r,t,e){var A=e(3058),a=e(911),s=e(339),n=e(3649)("iterator");r.exports=function(l){if(l!=null)return a(l,n)||a(l,"@@iterator")||s[A(l)]}},6307:function(r,t,e){var A=e(7583),a=e(8262),s=e(8257),n=e(2569),l=e(5637),d=e(8272),f=A.TypeError;r.exports=function(E,I){var B=arguments.length<2?d(E):I;if(s(B))return n(a(B,E));throw f(l(E)+" is not iterable")}},911:function(r,t,e){var A=e(8257);r.exports=function(a,s){var n=a[s];return n==null?void 0:A(n)}},7583:function(r,t,e){var A=function(a){return a&&a.Math==Math&&a};r.exports=A(typeof globalThis=="object"&&globalThis)||A(typeof window=="object"&&window)||A(typeof self=="object"&&self)||A(typeof e.g=="object"&&e.g)||function(){return this}()||Function("return this")()},2870:function(r,t,e){var A=e(7386),a=e(1324),s=A({}.hasOwnProperty);r.exports=Object.hasOwn||function(n,l){return s(a(n),l)}},4639:function(r){r.exports={}},2716:function(r,t,e){var A=e(7583);r.exports=function(a,s){var n=A.console;n&&n.error&&(arguments.length==1?n.error(a):n.error(a,s))}},482:function(r,t,e){var A=e(5897);r.exports=A("document","documentElement")},275:function(r,t,e){var A=e(8494),a=e(6544),s=e(6668);r.exports=!A&&!a(function(){return Object.defineProperty(s("div"),"a",{get:function(){return 7}}).a!=7})},5044:function(r,t,e){var A=e(7583),a=e(7386),s=e(6544),n=e(9624),l=A.Object,d=a("".split);r.exports=s(function(){return!l("z").propertyIsEnumerable(0)})?function(f){return n(f)=="String"?d(f,""):l(f)}:l},9734:function(r,t,e){var A=e(7386),a=e(9212),s=e(1314),n=A(Function.toString);a(s.inspectSource)||(s.inspectSource=function(l){return n(l)}),r.exports=s.inspectSource},4402:function(r,t,e){var A=e(794),a=e(57);r.exports=function(s,n){A(n)&&"cause"in n&&a(s,"cause",n.cause)}},2743:function(r,t,e){var A,a,s,n=e(9491),l=e(7583),d=e(7386),f=e(794),E=e(57),I=e(2870),B=e(1314),y=e(9137),v=e(4639),S="Object already initialized",_=l.TypeError,Q=l.WeakMap;if(n||B.state){var D=B.state||(B.state=new Q),b=d(D.get),T=d(D.has),P=d(D.set);A=function(F,O){if(T(D,F))throw new _(S);return O.facade=F,P(D,F,O),O},a=function(F){return b(D,F)||{}},s=function(F){return T(D,F)}}else{var R=y("state");v[R]=!0,A=function(F,O){if(I(F,R))throw new _(S);return O.facade=F,E(F,R,O),O},a=function(F){return I(F,R)?F[R]:{}},s=function(F){return I(F,R)}}r.exports={set:A,get:a,has:s,enforce:function(F){return s(F)?a(F):A(F,{})},getterFor:function(F){return function(O){var N;if(!f(O)||(N=a(O)).type!==F)throw _("Incompatible receiver, "+F+" required");return N}}}},114:function(r,t,e){var A=e(3649),a=e(339),s=A("iterator"),n=Array.prototype;r.exports=function(l){return l!==void 0&&(a.Array===l||n[s]===l)}},4521:function(r,t,e){var A=e(9624);r.exports=Array.isArray||function(a){return A(a)=="Array"}},9212:function(r){r.exports=function(t){return typeof t=="function"}},2097:function(r,t,e){var A=e(7386),a=e(6544),s=e(9212),n=e(3058),l=e(5897),d=e(9734),f=function(){},E=[],I=l("Reflect","construct"),B=/^\s*(?:class|function)\b/,y=A(B.exec),v=!B.exec(f),S=function(Q){if(!s(Q))return!1;try{return I(f,E,Q),!0}catch{return!1}},_=function(Q){if(!s(Q))return!1;switch(n(Q)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return v||!!y(B,d(Q))}catch{return!0}};_.sham=!0,r.exports=!I||a(function(){var Q;return S(S.call)||!S(Object)||!S(function(){Q=!0})||Q})?_:S},4451:function(r,t,e){var A=e(6544),a=e(9212),s=/#|\.prototype\./,n=function(I,B){var y=d[l(I)];return y==E||y!=f&&(a(B)?A(B):!!B)},l=n.normalize=function(I){return String(I).replace(s,".").toLowerCase()},d=n.data={},f=n.NATIVE="N",E=n.POLYFILL="P";r.exports=n},794:function(r,t,e){var A=e(9212);r.exports=function(a){return typeof a=="object"?a!==null:A(a)}},6268:function(r){r.exports=!1},5871:function(r,t,e){var A=e(7583),a=e(5897),s=e(9212),n=e(2447),l=e(7786),d=A.Object;r.exports=l?function(f){return typeof f=="symbol"}:function(f){var E=a("Symbol");return s(E)&&n(E.prototype,d(f))}},4026:function(r,t,e){var A=e(7583),a=e(2938),s=e(8262),n=e(2569),l=e(5637),d=e(114),f=e(1825),E=e(2447),I=e(6307),B=e(8272),y=e(7093),v=A.TypeError,S=function(Q,D){this.stopped=Q,this.result=D},_=S.prototype;r.exports=function(Q,D,b){var T,P,R,F,O,N,L,Y=b&&b.that,rt=!(!b||!b.AS_ENTRIES),tt=!(!b||!b.IS_ITERATOR),at=!(!b||!b.INTERRUPTED),pt=a(D,Y),ct=function(q){return T&&y(T,"normal",q),new S(!0,q)},$=function(q){return rt?(n(q),at?pt(q[0],q[1],ct):pt(q[0],q[1])):at?pt(q,ct):pt(q)};if(tt)T=Q;else{if(!(P=B(Q)))throw v(l(Q)+" is not iterable");if(d(P)){for(R=0,F=f(Q);F>R;R++)if((O=$(Q[R]))&&E(_,O))return O;return new S(!1)}T=I(Q,P)}for(N=T.next;!(L=s(N,T)).done;){try{O=$(L.value)}catch(q){y(T,"throw",q)}if(typeof O=="object"&&O&&E(_,O))return O}return new S(!1)}},7093:function(r,t,e){var A=e(8262),a=e(2569),s=e(911);r.exports=function(n,l,d){var f,E;a(n);try{if(!(f=s(n,"return"))){if(l==="throw")throw d;return d}f=A(f,n)}catch(I){E=!0,f=I}if(l==="throw")throw d;if(E)throw f;return a(f),d}},2365:function(r,t,e){var A,a,s,n=e(6544),l=e(9212),d=e(3590),f=e(729),E=e(1270),I=e(3649),B=e(6268),y=I("iterator"),v=!1;[].keys&&("next"in(s=[].keys())?(a=f(f(s)))!==Object.prototype&&(A=a):v=!0),A==null||n(function(){var S={};return A[y].call(S)!==S})?A={}:B&&(A=d(A)),l(A[y])||E(A,y,function(){return this}),r.exports={IteratorPrototype:A,BUGGY_SAFARI_ITERATORS:v}},339:function(r){r.exports={}},1825:function(r,t,e){var A=e(97);r.exports=function(a){return A(a.length)}},2095:function(r,t,e){var A,a,s,n,l,d,f,E,I=e(7583),B=e(2938),y=e(6683).f,v=e(8117).set,S=e(7020),_=e(3256),Q=e(6846),D=e(5354),b=I.MutationObserver||I.WebKitMutationObserver,T=I.document,P=I.process,R=I.Promise,F=y(I,"queueMicrotask"),O=F&&F.value;O||(A=function(){var N,L;for(D&&(N=P.domain)&&N.exit();a;){L=a.fn,a=a.next;try{L()}catch(Y){throw a?n():s=void 0,Y}}s=void 0,N&&N.enter()},S||D||Q||!b||!T?!_&&R&&R.resolve?((f=R.resolve(void 0)).constructor=R,E=B(f.then,f),n=function(){E(A)}):D?n=function(){P.nextTick(A)}:(v=B(v,I),n=function(){v(A)}):(l=!0,d=T.createTextNode(""),new b(A).observe(d,{characterData:!0}),n=function(){d.data=l=!l})),r.exports=O||function(N){var L={fn:N,next:void 0};s&&(s.next=L),a||(a=L,n()),s=L}},783:function(r,t,e){var A=e(7583);r.exports=A.Promise},8640:function(r,t,e){var A=e(4061),a=e(6544);r.exports=!!Object.getOwnPropertySymbols&&!a(function(){var s=Symbol();return!String(s)||!(Object(s)instanceof Symbol)||!Symbol.sham&&A&&A<41})},9491:function(r,t,e){var A=e(7583),a=e(9212),s=e(9734),n=A.WeakMap;r.exports=a(n)&&/native code/.test(s(n))},5084:function(r,t,e){var A=e(8257),a=function(s){var n,l;this.promise=new s(function(d,f){if(n!==void 0||l!==void 0)throw TypeError("Bad Promise constructor");n=d,l=f}),this.resolve=A(n),this.reject=A(l)};r.exports.f=function(s){return new a(s)}},2764:function(r,t,e){var A=e(8320);r.exports=function(a,s){return a===void 0?arguments.length<2?"":s:A(a)}},3590:function(r,t,e){var A,a=e(2569),s=e(8728),n=e(5690),l=e(4639),d=e(482),f=e(6668),E=e(9137),I=E("IE_PROTO"),B=function(){},y=function(_){return"<script>"+_+"<\/script>"},v=function(_){_.write(y("")),_.close();var Q=_.parentWindow.Object;return _=null,Q},S=function(){try{A=new ActiveXObject("htmlfile")}catch{}var _,Q;S=typeof document<"u"?document.domain&&A?v(A):((Q=f("iframe")).style.display="none",d.appendChild(Q),Q.src="javascript:",(_=Q.contentWindow.document).open(),_.write(y("document.F=Object")),_.close(),_.F):v(A);for(var D=n.length;D--;)delete S.prototype[n[D]];return S()};l[I]=!0,r.exports=Object.create||function(_,Q){var D;return _!==null?(B.prototype=a(_),D=new B,B.prototype=null,D[I]=_):D=S(),Q===void 0?D:s.f(D,Q)}},8728:function(r,t,e){var A=e(8494),a=e(7670),s=e(4615),n=e(2569),l=e(2977),d=e(5432);t.f=A&&!a?Object.defineProperties:function(f,E){n(f);for(var I,B=l(E),y=d(E),v=y.length,S=0;v>S;)s.f(f,I=y[S++],B[I]);return f}},4615:function(r,t,e){var A=e(7583),a=e(8494),s=e(275),n=e(7670),l=e(2569),d=e(8734),f=A.TypeError,E=Object.defineProperty,I=Object.getOwnPropertyDescriptor,B="enumerable",y="configurable",v="writable";t.f=a?n?function(S,_,Q){if(l(S),_=d(_),l(Q),typeof S=="function"&&_==="prototype"&&"value"in Q&&v in Q&&!Q.writable){var D=I(S,_);D&&D.writable&&(S[_]=Q.value,Q={configurable:y in Q?Q.configurable:D.configurable,enumerable:B in Q?Q.enumerable:D.enumerable,writable:!1})}return E(S,_,Q)}:E:function(S,_,Q){if(l(S),_=d(_),l(Q),s)try{return E(S,_,Q)}catch{}if("get"in Q||"set"in Q)throw f("Accessors not supported");return"value"in Q&&(S[_]=Q.value),S}},6683:function(r,t,e){var A=e(8494),a=e(8262),s=e(112),n=e(4677),l=e(2977),d=e(8734),f=e(2870),E=e(275),I=Object.getOwnPropertyDescriptor;t.f=A?I:function(B,y){if(B=l(B),y=d(y),E)try{return I(B,y)}catch{}if(f(B,y))return n(!a(s.f,B,y),B[y])}},3130:function(r,t,e){var A=e(9624),a=e(2977),s=e(9275).f,n=e(4546),l=typeof window=="object"&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];r.exports.f=function(d){return l&&A(d)=="Window"?function(f){try{return s(f)}catch{return n(l)}}(d):s(a(d))}},9275:function(r,t,e){var A=e(8356),a=e(5690).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(s){return A(s,a)}},4012:function(r,t){t.f=Object.getOwnPropertySymbols},729:function(r,t,e){var A=e(7583),a=e(2870),s=e(9212),n=e(1324),l=e(9137),d=e(926),f=l("IE_PROTO"),E=A.Object,I=E.prototype;r.exports=d?E.getPrototypeOf:function(B){var y=n(B);if(a(y,f))return y[f];var v=y.constructor;return s(v)&&y instanceof v?v.prototype:y instanceof E?I:null}},2447:function(r,t,e){var A=e(7386);r.exports=A({}.isPrototypeOf)},8356:function(r,t,e){var A=e(7386),a=e(2870),s=e(2977),n=e(5766).indexOf,l=e(4639),d=A([].push);r.exports=function(f,E){var I,B=s(f),y=0,v=[];for(I in B)!a(l,I)&&a(B,I)&&d(v,I);for(;E.length>y;)a(B,I=E[y++])&&(~n(v,I)||d(v,I));return v}},5432:function(r,t,e){var A=e(8356),a=e(5690);r.exports=Object.keys||function(s){return A(s,a)}},112:function(r,t){var e={}.propertyIsEnumerable,A=Object.getOwnPropertyDescriptor,a=A&&!e.call({1:2},1);t.f=a?function(s){var n=A(this,s);return!!n&&n.enumerable}:e},7496:function(r,t,e){var A=e(7386),a=e(2569),s=e(9882);r.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,l=!1,d={};try{(n=A(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(d,[]),l=d instanceof Array}catch{}return function(f,E){return a(f),s(E),l?n(f,E):f.__proto__=E,f}}():void 0)},3060:function(r,t,e){var A=e(8191),a=e(3058);r.exports=A?{}.toString:function(){return"[object "+a(this)+"]"}},6252:function(r,t,e){var A=e(7583),a=e(8262),s=e(9212),n=e(794),l=A.TypeError;r.exports=function(d,f){var E,I;if(f==="string"&&s(E=d.toString)&&!n(I=a(E,d))||s(E=d.valueOf)&&!n(I=a(E,d))||f!=="string"&&s(E=d.toString)&&!n(I=a(E,d)))return I;throw l("Can't convert object to primitive value")}},929:function(r,t,e){var A=e(5897),a=e(7386),s=e(9275),n=e(4012),l=e(2569),d=a([].concat);r.exports=A("Reflect","ownKeys")||function(f){var E=s.f(l(f)),I=n.f;return I?d(E,I(f)):E}},1287:function(r,t,e){var A=e(7583);r.exports=A},544:function(r){r.exports=function(t){try{return{error:!1,value:t()}}catch(e){return{error:!0,value:e}}}},5732:function(r,t,e){var A=e(2569),a=e(794),s=e(5084);r.exports=function(n,l){if(A(n),a(l)&&l.constructor===n)return l;var d=s.f(n);return(0,d.resolve)(l),d.promise}},2723:function(r){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(e){var A={item:e,next:null};this.head?this.tail.next=A:this.head=A,this.tail=A},get:function(){var e=this.head;if(e)return this.head=e.next,this.tail===e&&(this.tail=null),e.item}},r.exports=t},6893:function(r,t,e){var A=e(1270);r.exports=function(a,s,n){for(var l in s)A(a,l,s[l],n);return a}},1270:function(r,t,e){var A=e(7583),a=e(9212),s=e(2870),n=e(57),l=e(460),d=e(9734),f=e(2743),E=e(4340).CONFIGURABLE,I=f.get,B=f.enforce,y=String(String).split("String");(r.exports=function(v,S,_,Q){var D,b=!!Q&&!!Q.unsafe,T=!!Q&&!!Q.enumerable,P=!!Q&&!!Q.noTargetGet,R=Q&&Q.name!==void 0?Q.name:S;a(_)&&(String(R).slice(0,7)==="Symbol("&&(R="["+String(R).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!s(_,"name")||E&&_.name!==R)&&n(_,"name",R),(D=B(_)).source||(D.source=y.join(typeof R=="string"?R:""))),v!==A?(b?!P&&v[S]&&(T=!0):delete v[S],T?v[S]=_:n(v,S,_)):T?v[S]=_:l(S,_)})(Function.prototype,"toString",function(){return a(this)&&I(this).source||d(this)})},3955:function(r,t,e){var A=e(7583).TypeError;r.exports=function(a){if(a==null)throw A("Can't call method on "+a);return a}},460:function(r,t,e){var A=e(7583),a=Object.defineProperty;r.exports=function(s,n){try{a(A,s,{value:n,configurable:!0,writable:!0})}catch{A[s]=n}return n}},7730:function(r,t,e){var A=e(5897),a=e(4615),s=e(3649),n=e(8494),l=s("species");r.exports=function(d){var f=A(d),E=a.f;n&&f&&!f[l]&&E(f,l,{configurable:!0,get:function(){return this}})}},8821:function(r,t,e){var A=e(4615).f,a=e(2870),s=e(3649)("toStringTag");r.exports=function(n,l,d){n&&!d&&(n=n.prototype),n&&!a(n,s)&&A(n,s,{configurable:!0,value:l})}},9137:function(r,t,e){var A=e(7836),a=e(8284),s=A("keys");r.exports=function(n){return s[n]||(s[n]=a(n))}},1314:function(r,t,e){var A=e(7583),a=e(460),s="__core-js_shared__",n=A[s]||a(s,{});r.exports=n},7836:function(r,t,e){var A=e(6268),a=e(1314);(r.exports=function(s,n){return a[s]||(a[s]=n!==void 0?n:{})})("versions",[]).push({version:"3.21.1",mode:A?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"})},564:function(r,t,e){var A=e(2569),a=e(1186),s=e(3649)("species");r.exports=function(n,l){var d,f=A(n).constructor;return f===void 0||(d=A(f)[s])==null?l:a(d)}},6389:function(r,t,e){var A=e(7386),a=e(7486),s=e(8320),n=e(3955),l=A("".charAt),d=A("".charCodeAt),f=A("".slice),E=function(I){return function(B,y){var v,S,_=s(n(B)),Q=a(y),D=_.length;return Q<0||Q>=D?I?"":void 0:(v=d(_,Q))<55296||v>56319||Q+1===D||(S=d(_,Q+1))<56320||S>57343?I?l(_,Q):v:I?f(_,Q,Q+2):S-56320+(v-55296<<10)+65536}};r.exports={codeAt:E(!1),charAt:E(!0)}},8117:function(r,t,e){var A,a,s,n,l=e(7583),d=e(1611),f=e(2938),E=e(9212),I=e(2870),B=e(6544),y=e(482),v=e(6917),S=e(6668),_=e(7520),Q=e(7020),D=e(5354),b=l.setImmediate,T=l.clearImmediate,P=l.process,R=l.Dispatch,F=l.Function,O=l.MessageChannel,N=l.String,L=0,Y={},rt="onreadystatechange";try{A=l.location}catch{}var tt=function($){if(I(Y,$)){var q=Y[$];delete Y[$],q()}},at=function($){return function(){tt($)}},pt=function($){tt($.data)},ct=function($){l.postMessage(N($),A.protocol+"//"+A.host)};b&&T||(b=function($){_(arguments.length,1);var q=E($)?$:F($),Ct=v(arguments,1);return Y[++L]=function(){d(q,void 0,Ct)},a(L),L},T=function($){delete Y[$]},D?a=function($){P.nextTick(at($))}:R&&R.now?a=function($){R.now(at($))}:O&&!Q?(n=(s=new O).port2,s.port1.onmessage=pt,a=f(n.postMessage,n)):l.addEventListener&&E(l.postMessage)&&!l.importScripts&&A&&A.protocol!=="file:"&&!B(ct)?(a=ct,l.addEventListener("message",pt,!1)):a=rt in S("script")?function($){y.appendChild(S("script")).onreadystatechange=function(){y.removeChild(this),tt($)}}:function($){setTimeout(at($),0)}),r.exports={set:b,clear:T}},6782:function(r,t,e){var A=e(7486),a=Math.max,s=Math.min;r.exports=function(n,l){var d=A(n);return d<0?a(d+l,0):s(d,l)}},2977:function(r,t,e){var A=e(5044),a=e(3955);r.exports=function(s){return A(a(s))}},7486:function(r){var t=Math.ceil,e=Math.floor;r.exports=function(A){var a=+A;return a!=a||a===0?0:(a>0?e:t)(a)}},97:function(r,t,e){var A=e(7486),a=Math.min;r.exports=function(s){return s>0?a(A(s),9007199254740991):0}},1324:function(r,t,e){var A=e(7583),a=e(3955),s=A.Object;r.exports=function(n){return s(a(n))}},2670:function(r,t,e){var A=e(7583),a=e(8262),s=e(794),n=e(5871),l=e(911),d=e(6252),f=e(3649),E=A.TypeError,I=f("toPrimitive");r.exports=function(B,y){if(!s(B)||n(B))return B;var v,S=l(B,I);if(S){if(y===void 0&&(y="default"),v=a(S,B,y),!s(v)||n(v))return v;throw E("Can't convert object to primitive value")}return y===void 0&&(y="number"),d(B,y)}},8734:function(r,t,e){var A=e(2670),a=e(5871);r.exports=function(s){var n=A(s,"string");return a(n)?n:n+""}},8191:function(r,t,e){var A={};A[e(3649)("toStringTag")]="z",r.exports=String(A)==="[object z]"},8320:function(r,t,e){var A=e(7583),a=e(3058),s=A.String;r.exports=function(n){if(a(n)==="Symbol")throw TypeError("Cannot convert a Symbol value to a string");return s(n)}},5637:function(r,t,e){var A=e(7583).String;r.exports=function(a){try{return A(a)}catch{return"Object"}}},8284:function(r,t,e){var A=e(7386),a=0,s=Math.random(),n=A(1 .toString);r.exports=function(l){return"Symbol("+(l===void 0?"":l)+")_"+n(++a+s,36)}},7786:function(r,t,e){var A=e(8640);r.exports=A&&!Symbol.sham&&typeof Symbol.iterator=="symbol"},7670:function(r,t,e){var A=e(8494),a=e(6544);r.exports=A&&a(function(){return Object.defineProperty(function(){},"prototype",{value:42,writable:!1}).prototype!=42})},7520:function(r,t,e){var A=e(7583).TypeError;r.exports=function(a,s){if(a<s)throw A("Not enough arguments");return a}},491:function(r,t,e){var A=e(3649);t.f=A},3649:function(r,t,e){var A=e(7583),a=e(7836),s=e(2870),n=e(8284),l=e(8640),d=e(7786),f=a("wks"),E=A.Symbol,I=E&&E.for,B=d?E:E&&E.withoutSetter||n;r.exports=function(y){if(!s(f,y)||!l&&typeof f[y]!="string"){var v="Symbol."+y;l&&s(E,y)?f[y]=E[y]:f[y]=d&&I?I(v):B(v)}return f[y]}},1719:function(r,t,e){var A=e(7263),a=e(7583),s=e(2447),n=e(729),l=e(7496),d=e(3478),f=e(3590),E=e(57),I=e(4677),B=e(1509),y=e(4402),v=e(4026),S=e(2764),_=e(3649),Q=e(1178),D=_("toStringTag"),b=a.Error,T=[].push,P=function(F,O){var N,L=arguments.length>2?arguments[2]:void 0,Y=s(R,this);l?N=l(new b,Y?n(this):R):(N=Y?this:f(R),E(N,D,"Error")),O!==void 0&&E(N,"message",S(O)),Q&&E(N,"stack",B(N.stack,1)),y(N,L);var rt=[];return v(F,T,{that:rt}),E(N,"errors",rt),N};l?l(P,b):d(P,b,{name:!0});var R=P.prototype=f(b.prototype,{constructor:I(1,P),message:I(1,""),name:I(1,"AggregateError")});A({global:!0},{AggregateError:P})},1646:function(r,t,e){var A=e(7263),a=e(7583),s=e(6544),n=e(4521),l=e(794),d=e(1324),f=e(1825),E=e(5999),I=e(4822),B=e(9269),y=e(3649),v=e(4061),S=y("isConcatSpreadable"),_=9007199254740991,Q="Maximum allowed index exceeded",D=a.TypeError,b=v>=51||!s(function(){var R=[];return R[S]=!1,R.concat()[0]!==R}),T=B("concat"),P=function(R){if(!l(R))return!1;var F=R[S];return F!==void 0?!!F:n(R)};A({target:"Array",proto:!0,forced:!b||!T},{concat:function(R){var F,O,N,L,Y,rt=d(this),tt=I(rt,0),at=0;for(F=-1,N=arguments.length;F<N;F++)if(P(Y=F===-1?rt:arguments[F])){if(at+(L=f(Y))>_)throw D(Q);for(O=0;O<L;O++,at++)O in Y&&E(tt,at,Y[O])}else{if(at>=_)throw D(Q);E(tt,at++,Y)}return tt.length=at,tt}})},5677:function(r,t,e){var A=e(2977),a=e(6288),s=e(339),n=e(2743),l=e(4615).f,d=e(9012),f=e(6268),E=e(8494),I="Array Iterator",B=n.set,y=n.getterFor(I);r.exports=d(Array,"Array",function(S,_){B(this,{type:I,target:A(S),index:0,kind:_})},function(){var S=y(this),_=S.target,Q=S.kind,D=S.index++;return!_||D>=_.length?(S.target=void 0,{value:void 0,done:!0}):Q=="keys"?{value:D,done:!1}:Q=="values"?{value:_[D],done:!1}:{value:[D,_[D]],done:!1}},"values");var v=s.Arguments=s.Array;if(a("keys"),a("values"),a("entries"),!f&&E&&v.name!=="values")try{l(v,"name",{value:"values"})}catch{}},6956:function(r,t,e){var A=e(7583);e(8821)(A.JSON,"JSON",!0)},5222:function(r,t,e){e(8821)(Math,"Math",!0)},6394:function(r,t,e){var A=e(8191),a=e(1270),s=e(3060);A||a(Object.prototype,"toString",s,{unsafe:!0})},6969:function(r,t,e){var A=e(7263),a=e(8262),s=e(8257),n=e(5084),l=e(544),d=e(4026);A({target:"Promise",stat:!0},{allSettled:function(f){var E=this,I=n.f(E),B=I.resolve,y=I.reject,v=l(function(){var S=s(E.resolve),_=[],Q=0,D=1;d(f,function(b){var T=Q++,P=!1;D++,a(S,E,b).then(function(R){P||(P=!0,_[T]={status:"fulfilled",value:R},--D||B(_))},function(R){P||(P=!0,_[T]={status:"rejected",reason:R},--D||B(_))})}),--D||B(_)});return v.error&&y(v.value),I.promise}})},2021:function(r,t,e){var A=e(7263),a=e(8257),s=e(5897),n=e(8262),l=e(5084),d=e(544),f=e(4026),E="No one promise resolved";A({target:"Promise",stat:!0},{any:function(I){var B=this,y=s("AggregateError"),v=l.f(B),S=v.resolve,_=v.reject,Q=d(function(){var D=a(B.resolve),b=[],T=0,P=1,R=!1;f(I,function(F){var O=T++,N=!1;P++,n(D,B,F).then(function(L){N||R||(R=!0,S(L))},function(L){N||R||(N=!0,b[O]=L,--P||_(new y(b,E)))})}),--P||_(new y(b,E))});return Q.error&&_(Q.value),v.promise}})},8328:function(r,t,e){var A=e(7263),a=e(6268),s=e(783),n=e(6544),l=e(5897),d=e(9212),f=e(564),E=e(5732),I=e(1270);if(A({target:"Promise",proto:!0,real:!0,forced:!!s&&n(function(){s.prototype.finally.call({then:function(){}},function(){})})},{finally:function(y){var v=f(this,l("Promise")),S=d(y);return this.then(S?function(_){return E(v,y()).then(function(){return _})}:y,S?function(_){return E(v,y()).then(function(){throw _})}:y)}}),!a&&d(s)){var B=l("Promise").prototype.finally;s.prototype.finally!==B&&I(s.prototype,"finally",B,{unsafe:!0})}},5334:function(r,t,e){var A,a,s,n,l=e(7263),d=e(6268),f=e(7583),E=e(5897),I=e(8262),B=e(783),y=e(1270),v=e(6893),S=e(7496),_=e(8821),Q=e(7730),D=e(8257),b=e(9212),T=e(794),P=e(4761),R=e(9734),F=e(4026),O=e(3616),N=e(564),L=e(8117).set,Y=e(2095),rt=e(5732),tt=e(2716),at=e(5084),pt=e(544),ct=e(2723),$=e(2743),q=e(4451),Ct=e(3649),wt=e(2274),Bt=e(5354),ut=e(4061),K=Ct("species"),J="Promise",At=$.getterFor(J),xt=$.set,mt=$.getterFor(J),Tt=B&&B.prototype,Vt=B,Nt=Tt,$t=f.TypeError,ne=f.document,Ae=f.process,Z=at.f,ue=Z,qt=!!(ne&&ne.createEvent&&f.dispatchEvent),Xt=b(f.PromiseRejectionEvent),Ht="unhandledrejection",oe=!1,Kt=q(J,function(){var yt=R(Vt),dt=yt!==String(Vt);if(!dt&&ut===66||d&&!Nt.finally)return!0;if(ut>=51&&/native code/.test(yt))return!1;var bt=new Vt(function(Jt){Jt(1)}),Ft=function(Jt){Jt(function(){},function(){})};return(bt.constructor={})[K]=Ft,!(oe=bt.then(function(){})instanceof Ft)||!dt&&wt&&!Xt}),Ee=Kt||!O(function(yt){Vt.all(yt).catch(function(){})}),be=function(yt){var dt;return!(!T(yt)||!b(dt=yt.then))&&dt},W=function(yt,dt){var bt,Ft,Jt,Ut=dt.value,de=dt.state==1,G=de?yt.ok:yt.fail,it=yt.resolve,j=yt.reject,lt=yt.domain;try{G?(de||(dt.rejection===2&&Dt(dt),dt.rejection=1),G===!0?bt=Ut:(lt&&lt.enter(),bt=G(Ut),lt&&(lt.exit(),Jt=!0)),bt===yt.promise?j($t("Promise-chain cycle")):(Ft=be(bt))?I(Ft,bt,it,j):it(bt)):j(Ut)}catch(gt){lt&&!Jt&&lt.exit(),j(gt)}},U=function(yt,dt){yt.notified||(yt.notified=!0,Y(function(){for(var bt,Ft=yt.reactions;bt=Ft.get();)W(bt,yt);yt.notified=!1,dt&&!yt.rejection&&St(yt)}))},It=function(yt,dt,bt){var Ft,Jt;qt?((Ft=ne.createEvent("Event")).promise=dt,Ft.reason=bt,Ft.initEvent(yt,!1,!0),f.dispatchEvent(Ft)):Ft={promise:dt,reason:bt},!Xt&&(Jt=f["on"+yt])?Jt(Ft):yt===Ht&&tt("Unhandled promise rejection",bt)},St=function(yt){I(L,f,function(){var dt,bt=yt.facade,Ft=yt.value;if(Mt(yt)&&(dt=pt(function(){Bt?Ae.emit("unhandledRejection",Ft,bt):It(Ht,bt,Ft)}),yt.rejection=Bt||Mt(yt)?2:1,dt.error))throw dt.value})},Mt=function(yt){return yt.rejection!==1&&!yt.parent},Dt=function(yt){I(L,f,function(){var dt=yt.facade;Bt?Ae.emit("rejectionHandled",dt):It("rejectionhandled",dt,yt.value)})},te=function(yt,dt,bt){return function(Ft){yt(dt,Ft,bt)}},Gt=function(yt,dt,bt){yt.done||(yt.done=!0,bt&&(yt=bt),yt.value=dt,yt.state=2,U(yt,!0))},ee=function yt(dt,bt,Ft){if(!dt.done){dt.done=!0,Ft&&(dt=Ft);try{if(dt.facade===bt)throw $t("Promise can't be resolved itself");var Jt=be(bt);Jt?Y(function(){var Ut={done:!1};try{I(Jt,bt,te(yt,Ut,dt),te(Gt,Ut,dt))}catch(de){Gt(Ut,de,dt)}}):(dt.value=bt,dt.state=1,U(dt,!1))}catch(Ut){Gt({done:!1},Ut,dt)}}};if(Kt&&(Nt=(Vt=function(yt){P(this,Nt),D(yt),I(A,this);var dt=At(this);try{yt(te(ee,dt),te(Gt,dt))}catch(bt){Gt(dt,bt)}}).prototype,(A=function(yt){xt(this,{type:J,done:!1,notified:!1,parent:!1,reactions:new ct,rejection:!1,state:0,value:void 0})}).prototype=v(Nt,{then:function(yt,dt){var bt=mt(this),Ft=Z(N(this,Vt));return bt.parent=!0,Ft.ok=!b(yt)||yt,Ft.fail=b(dt)&&dt,Ft.domain=Bt?Ae.domain:void 0,bt.state==0?bt.reactions.add(Ft):Y(function(){W(Ft,bt)}),Ft.promise},catch:function(yt){return this.then(void 0,yt)}}),a=function(){var yt=new A,dt=At(yt);this.promise=yt,this.resolve=te(ee,dt),this.reject=te(Gt,dt)},at.f=Z=function(yt){return yt===Vt||yt===s?new a(yt):ue(yt)},!d&&b(B)&&Tt!==Object.prototype)){n=Tt.then,oe||(y(Tt,"then",function(yt,dt){var bt=this;return new Vt(function(Ft,Jt){I(n,bt,Ft,Jt)}).then(yt,dt)},{unsafe:!0}),y(Tt,"catch",Nt.catch,{unsafe:!0}));try{delete Tt.constructor}catch{}S&&S(Tt,Nt)}l({global:!0,wrap:!0,forced:Kt},{Promise:Vt}),_(Vt,J,!1,!0),Q(J),s=E(J),l({target:J,stat:!0,forced:Kt},{reject:function(yt){var dt=Z(this);return I(dt.reject,void 0,yt),dt.promise}}),l({target:J,stat:!0,forced:d||Kt},{resolve:function(yt){return rt(d&&this===s?Vt:this,yt)}}),l({target:J,stat:!0,forced:Ee},{all:function(yt){var dt=this,bt=Z(dt),Ft=bt.resolve,Jt=bt.reject,Ut=pt(function(){var de=D(dt.resolve),G=[],it=0,j=1;F(yt,function(lt){var gt=it++,ft=!1;j++,I(de,dt,lt).then(function(Lt){ft||(ft=!0,G[gt]=Lt,--j||Ft(G))},Jt)}),--j||Ft(G)});return Ut.error&&Jt(Ut.value),bt.promise},race:function(yt){var dt=this,bt=Z(dt),Ft=bt.reject,Jt=pt(function(){var Ut=D(dt.resolve);F(yt,function(de){I(Ut,dt,de).then(bt.resolve,Ft)})});return Jt.error&&Ft(Jt.value),bt.promise}})},2257:function(r,t,e){var A=e(7263),a=e(7583),s=e(8821);A({global:!0},{Reflect:{}}),s(a.Reflect,"Reflect",!0)},2129:function(r,t,e){var A=e(6389).charAt,a=e(8320),s=e(2743),n=e(9012),l="String Iterator",d=s.set,f=s.getterFor(l);n(String,"String",function(E){d(this,{type:l,string:a(E),index:0})},function(){var E,I=f(this),B=I.string,y=I.index;return y>=B.length?{value:void 0,done:!0}:(E=A(B,y),I.index+=E.length,{value:E,done:!1})})},462:function(r,t,e){e(2219)("asyncIterator")},8407:function(r,t,e){var A=e(7263),a=e(8494),s=e(7583),n=e(7386),l=e(2870),d=e(9212),f=e(2447),E=e(8320),I=e(4615).f,B=e(3478),y=s.Symbol,v=y&&y.prototype;if(a&&d(y)&&(!("description"in v)||y().description!==void 0)){var S={},_=function(){var F=arguments.length<1||arguments[0]===void 0?void 0:E(arguments[0]),O=f(v,this)?new y(F):F===void 0?y():y(F);return F===""&&(S[O]=!0),O};B(_,y),_.prototype=v,v.constructor=_;var Q=String(y("test"))=="Symbol(test)",D=n(v.toString),b=n(v.valueOf),T=/^Symbol\((.*)\)[^)]+$/,P=n("".replace),R=n("".slice);I(v,"description",{configurable:!0,get:function(){var F=b(this),O=D(F);if(l(S,F))return"";var N=Q?R(O,7,-1):P(O,T,"$1");return N===""?void 0:N}}),A({global:!0,forced:!0},{Symbol:_})}},2429:function(r,t,e){e(2219)("hasInstance")},1172:function(r,t,e){e(2219)("isConcatSpreadable")},8288:function(r,t,e){e(2219)("iterator")},2004:function(r,t,e){var A=e(7263),a=e(7583),s=e(5897),n=e(1611),l=e(8262),d=e(7386),f=e(6268),E=e(8494),I=e(8640),B=e(6544),y=e(2870),v=e(4521),S=e(9212),_=e(794),Q=e(2447),D=e(5871),b=e(2569),T=e(1324),P=e(2977),R=e(8734),F=e(8320),O=e(4677),N=e(3590),L=e(5432),Y=e(9275),rt=e(3130),tt=e(4012),at=e(6683),pt=e(4615),ct=e(8728),$=e(112),q=e(6917),Ct=e(1270),wt=e(7836),Bt=e(9137),ut=e(4639),K=e(8284),J=e(3649),At=e(491),xt=e(2219),mt=e(8821),Tt=e(2743),Vt=e(4805).forEach,Nt=Bt("hidden"),$t="Symbol",ne=J("toPrimitive"),Ae=Tt.set,Z=Tt.getterFor($t),ue=Object.prototype,qt=a.Symbol,Xt=qt&&qt.prototype,Ht=a.TypeError,oe=a.QObject,Kt=s("JSON","stringify"),Ee=at.f,be=pt.f,W=rt.f,U=$.f,It=d([].push),St=wt("symbols"),Mt=wt("op-symbols"),Dt=wt("string-to-symbol-registry"),te=wt("symbol-to-string-registry"),Gt=wt("wks"),ee=!oe||!oe.prototype||!oe.prototype.findChild,yt=E&&B(function(){return N(be({},"a",{get:function(){return be(this,"a",{value:7}).a}})).a!=7})?function(j,lt,gt){var ft=Ee(ue,lt);ft&&delete ue[lt],be(j,lt,gt),ft&&j!==ue&&be(ue,lt,ft)}:be,dt=function(j,lt){var gt=St[j]=N(Xt);return Ae(gt,{type:$t,tag:j,description:lt}),E||(gt.description=lt),gt},bt=function(j,lt,gt){j===ue&&bt(Mt,lt,gt),b(j);var ft=R(lt);return b(gt),y(St,ft)?(gt.enumerable?(y(j,Nt)&&j[Nt][ft]&&(j[Nt][ft]=!1),gt=N(gt,{enumerable:O(0,!1)})):(y(j,Nt)||be(j,Nt,O(1,{})),j[Nt][ft]=!0),yt(j,ft,gt)):be(j,ft,gt)},Ft=function(j,lt){b(j);var gt=P(lt),ft=L(gt).concat(G(gt));return Vt(ft,function(Lt){E&&!l(Jt,gt,Lt)||bt(j,Lt,gt[Lt])}),j},Jt=function(j){var lt=R(j),gt=l(U,this,lt);return!(this===ue&&y(St,lt)&&!y(Mt,lt))&&(!(gt||!y(this,lt)||!y(St,lt)||y(this,Nt)&&this[Nt][lt])||gt)},Ut=function(j,lt){var gt=P(j),ft=R(lt);if(gt!==ue||!y(St,ft)||y(Mt,ft)){var Lt=Ee(gt,ft);return!Lt||!y(St,ft)||y(gt,Nt)&&gt[Nt][ft]||(Lt.enumerable=!0),Lt}},de=function(j){var lt=W(P(j)),gt=[];return Vt(lt,function(ft){y(St,ft)||y(ut,ft)||It(gt,ft)}),gt},G=function(j){var lt=j===ue,gt=W(lt?Mt:P(j)),ft=[];return Vt(gt,function(Lt){!y(St,Lt)||lt&&!y(ue,Lt)||It(ft,St[Lt])}),ft};if(I||(qt=function(){if(Q(Xt,this))throw Ht("Symbol is not a constructor");var j=arguments.length&&arguments[0]!==void 0?F(arguments[0]):void 0,lt=K(j),gt=function ft(Lt){this===ue&&l(ft,Mt,Lt),y(this,Nt)&&y(this[Nt],lt)&&(this[Nt][lt]=!1),yt(this,lt,O(1,Lt))};return E&&ee&&yt(ue,lt,{configurable:!0,set:gt}),dt(lt,j)},Ct(Xt=qt.prototype,"toString",function(){return Z(this).tag}),Ct(qt,"withoutSetter",function(j){return dt(K(j),j)}),$.f=Jt,pt.f=bt,ct.f=Ft,at.f=Ut,Y.f=rt.f=de,tt.f=G,At.f=function(j){return dt(J(j),j)},E&&(be(Xt,"description",{configurable:!0,get:function(){return Z(this).description}}),f||Ct(ue,"propertyIsEnumerable",Jt,{unsafe:!0}))),A({global:!0,wrap:!0,forced:!I,sham:!I},{Symbol:qt}),Vt(L(Gt),function(j){xt(j)}),A({target:$t,stat:!0,forced:!I},{for:function(j){var lt=F(j);if(y(Dt,lt))return Dt[lt];var gt=qt(lt);return Dt[lt]=gt,te[gt]=lt,gt},keyFor:function(j){if(!D(j))throw Ht(j+" is not a symbol");if(y(te,j))return te[j]},useSetter:function(){ee=!0},useSimple:function(){ee=!1}}),A({target:"Object",stat:!0,forced:!I,sham:!E},{create:function(j,lt){return lt===void 0?N(j):Ft(N(j),lt)},defineProperty:bt,defineProperties:Ft,getOwnPropertyDescriptor:Ut}),A({target:"Object",stat:!0,forced:!I},{getOwnPropertyNames:de,getOwnPropertySymbols:G}),A({target:"Object",stat:!0,forced:B(function(){tt.f(1)})},{getOwnPropertySymbols:function(j){return tt.f(T(j))}}),Kt&&A({target:"JSON",stat:!0,forced:!I||B(function(){var j=qt();return Kt([j])!="[null]"||Kt({a:j})!="{}"||Kt(Object(j))!="{}"})},{stringify:function(j,lt,gt){var ft=q(arguments),Lt=lt;if((_(lt)||j!==void 0)&&!D(j))return v(lt)||(lt=function(ie,Qe){if(S(Lt)&&(Qe=l(Lt,this,ie,Qe)),!D(Qe))return Qe}),ft[1]=lt,n(Kt,null,ft)}}),!Xt[ne]){var it=Xt.valueOf;Ct(Xt,ne,function(j){return l(it,this)})}mt(qt,$t),ut[Nt]=!0},8201:function(r,t,e){e(2219)("matchAll")},1274:function(r,t,e){e(2219)("match")},6626:function(r,t,e){e(2219)("replace")},3211:function(r,t,e){e(2219)("search")},9952:function(r,t,e){e(2219)("species")},15:function(r,t,e){e(2219)("split")},9831:function(r,t,e){e(2219)("toPrimitive")},7521:function(r,t,e){e(2219)("toStringTag")},2972:function(r,t,e){e(2219)("unscopables")},4655:function(r,t,e){var A=e(7583),a=e(6778),s=e(9307),n=e(5677),l=e(57),d=e(3649),f=d("iterator"),E=d("toStringTag"),I=n.values,B=function(v,S){if(v){if(v[f]!==I)try{l(v,f,I)}catch{v[f]=I}if(v[E]||l(v,E,S),a[S]){for(var _ in n)if(v[_]!==n[_])try{l(v,_,n[_])}catch{v[_]=n[_]}}}};for(var y in a)B(A[y]&&A[y].prototype,y);B(s,"DOMTokenList")},8765:function(r,t,e){var A=e(5036);e(4655),r.exports=A},5441:function(r,t,e){var A=e(2582);e(4655),r.exports=A},7705:function(r){r.exports=function(t){var e=[];return e.toString=function(){return this.map(function(A){var a="",s=A[5]!==void 0;return A[4]&&(a+="@supports (".concat(A[4],") {")),A[2]&&(a+="@media ".concat(A[2]," {")),s&&(a+="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {")),a+=t(A),s&&(a+="}"),A[2]&&(a+="}"),A[4]&&(a+="}"),a}).join("")},e.i=function(A,a,s,n,l){typeof A=="string"&&(A=[[null,A,void 0]]);var d={};if(s)for(var f=0;f<this.length;f++){var E=this[f][0];E!=null&&(d[E]=!0)}for(var I=0;I<A.length;I++){var B=[].concat(A[I]);s&&d[B[0]]||(l!==void 0&&(B[5]===void 0||(B[1]="@layer".concat(B[5].length>0?" ".concat(B[5]):""," {").concat(B[1],"}")),B[5]=l),a&&(B[2]&&(B[1]="@media ".concat(B[2]," {").concat(B[1],"}")),B[2]=a),n&&(B[4]?(B[1]="@supports (".concat(B[4],") {").concat(B[1],"}"),B[4]=n):B[4]="".concat(n)),e.push(B))}},e}},6738:function(r){r.exports=function(t){return t[1]}},8679:function(r){var t=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver,e=window.WeakMap;if(e===void 0){var A=Object.defineProperty,a=Date.now()%1e9;(e=function(){this.name="__st"+(1e9*Math.random()>>>0)+a+++"__"}).prototype={set:function(R,F){var O=R[this.name];return O&&O[0]===R?O[1]=F:A(R,this.name,{value:[R,F],writable:!0}),this},get:function(R){var F;return(F=R[this.name])&&F[0]===R?F[1]:void 0},delete:function(R){var F=R[this.name];if(!F)return!1;var O=F[0]===R;return F[0]=F[1]=void 0,O},has:function(R){var F=R[this.name];return!!F&&F[0]===R}}}var s=new e,n=window.msSetImmediate;if(!n){var l=[],d=String(Math.random());window.addEventListener("message",function(R){if(R.data===d){var F=l;l=[],F.forEach(function(O){O()})}}),n=function(R){l.push(R),window.postMessage(d,"*")}}var f=!1,E=[];function I(){f=!1;var R=E;E=[],R.sort(function(O,N){return O.uid_-N.uid_});var F=!1;R.forEach(function(O){var N=O.takeRecords();(function(L){L.nodes_.forEach(function(Y){var rt=s.get(Y);rt&&rt.forEach(function(tt){tt.observer===L&&tt.removeTransientObservers()})})})(O),N.length&&(O.callback_(N,O),F=!0)}),F&&I()}function B(R,F){for(var O=R;O;O=O.parentNode){var N=s.get(O);if(N)for(var L=0;L<N.length;L++){var Y=N[L],rt=Y.options;if(O===R||rt.subtree){var tt=F(rt);tt&&Y.enqueue(tt)}}}}var y,v,S=0;function _(R){this.callback_=R,this.nodes_=[],this.records_=[],this.uid_=++S}function Q(R,F){this.type=R,this.target=F,this.addedNodes=[],this.removedNodes=[],this.previousSibling=null,this.nextSibling=null,this.attributeName=null,this.attributeNamespace=null,this.oldValue=null}function D(R,F){return y=new Q(R,F)}function b(R){return v||((O=new Q((F=y).type,F.target)).addedNodes=F.addedNodes.slice(),O.removedNodes=F.removedNodes.slice(),O.previousSibling=F.previousSibling,O.nextSibling=F.nextSibling,O.attributeName=F.attributeName,O.attributeNamespace=F.attributeNamespace,O.oldValue=F.oldValue,(v=O).oldValue=R,v);var F,O}function T(R,F){return R===F?R:v&&((O=R)===v||O===y)?v:null;var O}function P(R,F,O){this.observer=R,this.target=F,this.options=O,this.transientObservedNodes=[]}_.prototype={observe:function(R,F){var O;if(O=R,R=window.ShadowDOMPolyfill&&window.ShadowDOMPolyfill.wrapIfNeeded(O)||O,!F.childList&&!F.attributes&&!F.characterData||F.attributeOldValue&&!F.attributes||F.attributeFilter&&F.attributeFilter.length&&!F.attributes||F.characterDataOldValue&&!F.characterData)throw new SyntaxError;var N,L=s.get(R);L||s.set(R,L=[]);for(var Y=0;Y<L.length;Y++)if(L[Y].observer===this){(N=L[Y]).removeListeners(),N.options=F;break}N||(N=new P(this,R,F),L.push(N),this.nodes_.push(R)),N.addListeners()},disconnect:function(){this.nodes_.forEach(function(R){for(var F=s.get(R),O=0;O<F.length;O++){var N=F[O];if(N.observer===this){N.removeListeners(),F.splice(O,1);break}}},this),this.records_=[]},takeRecords:function(){var R=this.records_;return this.records_=[],R}},P.prototype={enqueue:function(R){var F,O=this.observer.records_,N=O.length;if(O.length>0){var L=T(O[N-1],R);if(L)return void(O[N-1]=L)}else F=this.observer,E.push(F),f||(f=!0,n(I));O[N]=R},addListeners:function(){this.addListeners_(this.target)},addListeners_:function(R){var F=this.options;F.attributes&&R.addEventListener("DOMAttrModified",this,!0),F.characterData&&R.addEventListener("DOMCharacterDataModified",this,!0),F.childList&&R.addEventListener("DOMNodeInserted",this,!0),(F.childList||F.subtree)&&R.addEventListener("DOMNodeRemoved",this,!0)},removeListeners:function(){this.removeListeners_(this.target)},removeListeners_:function(R){var F=this.options;F.attributes&&R.removeEventListener("DOMAttrModified",this,!0),F.characterData&&R.removeEventListener("DOMCharacterDataModified",this,!0),F.childList&&R.removeEventListener("DOMNodeInserted",this,!0),(F.childList||F.subtree)&&R.removeEventListener("DOMNodeRemoved",this,!0)},addTransientObserver:function(R){if(R!==this.target){this.addListeners_(R),this.transientObservedNodes.push(R);var F=s.get(R);F||s.set(R,F=[]),F.push(this)}},removeTransientObservers:function(){var R=this.transientObservedNodes;this.transientObservedNodes=[],R.forEach(function(F){this.removeListeners_(F);for(var O=s.get(F),N=0;N<O.length;N++)if(O[N]===this){O.splice(N,1);break}},this)},handleEvent:function(R){switch(R.stopImmediatePropagation(),R.type){case"DOMAttrModified":var F=R.attrName,O=R.relatedNode.namespaceURI,N=R.target;(Y=new D("attributes",N)).attributeName=F,Y.attributeNamespace=O;var L=null;typeof MutationEvent<"u"&&R.attrChange===MutationEvent.ADDITION||(L=R.prevValue),B(N,function($){if($.attributes&&(!$.attributeFilter||!$.attributeFilter.length||$.attributeFilter.indexOf(F)!==-1||$.attributeFilter.indexOf(O)!==-1))return $.attributeOldValue?b(L):Y});break;case"DOMCharacterDataModified":var Y=D("characterData",N=R.target);L=R.prevValue,B(N,function($){if($.characterData)return $.characterDataOldValue?b(L):Y});break;case"DOMNodeRemoved":this.addTransientObserver(R.target);case"DOMNodeInserted":N=R.relatedNode;var rt,tt,at=R.target;R.type==="DOMNodeInserted"?(rt=[at],tt=[]):(rt=[],tt=[at]);var pt=at.previousSibling,ct=at.nextSibling;(Y=D("childList",N)).addedNodes=rt,Y.removedNodes=tt,Y.previousSibling=pt,Y.nextSibling=ct,B(N,function($){if($.childList)return Y})}y=v=void 0}},t||(t=_),r.exports=t},7588:function(r){var t=function(e){var A,a=Object.prototype,s=a.hasOwnProperty,n=typeof Symbol=="function"?Symbol:{},l=n.iterator||"@@iterator",d=n.asyncIterator||"@@asyncIterator",f=n.toStringTag||"@@toStringTag";function E($,q,Ct){return Object.defineProperty($,q,{value:Ct,enumerable:!0,configurable:!0,writable:!0}),$[q]}try{E({},"")}catch{E=function(q,Ct,wt){return q[Ct]=wt}}function I($,q,Ct,wt){var Bt=q&&q.prototype instanceof D?q:D,ut=Object.create(Bt.prototype),K=new at(wt||[]);return ut._invoke=function(J,At,xt){var mt=y;return function(Tt,Vt){if(mt===S)throw new Error("Generator is already running");if(mt===_){if(Tt==="throw")throw Vt;return ct()}for(xt.method=Tt,xt.arg=Vt;;){var Nt=xt.delegate;if(Nt){var $t=Y(Nt,xt);if($t){if($t===Q)continue;return $t}}if(xt.method==="next")xt.sent=xt._sent=xt.arg;else if(xt.method==="throw"){if(mt===y)throw mt=_,xt.arg;xt.dispatchException(xt.arg)}else xt.method==="return"&&xt.abrupt("return",xt.arg);mt=S;var ne=B(J,At,xt);if(ne.type==="normal"){if(mt=xt.done?_:v,ne.arg===Q)continue;return{value:ne.arg,done:xt.done}}ne.type==="throw"&&(mt=_,xt.method="throw",xt.arg=ne.arg)}}}($,Ct,K),ut}function B($,q,Ct){try{return{type:"normal",arg:$.call(q,Ct)}}catch(wt){return{type:"throw",arg:wt}}}e.wrap=I;var y="suspendedStart",v="suspendedYield",S="executing",_="completed",Q={};function D(){}function b(){}function T(){}var P={};E(P,l,function(){return this});var R=Object.getPrototypeOf,F=R&&R(R(pt([])));F&&F!==a&&s.call(F,l)&&(P=F);var O=T.prototype=D.prototype=Object.create(P);function N($){["next","throw","return"].forEach(function(q){E($,q,function(Ct){return this._invoke(q,Ct)})})}function L($,q){function Ct(Bt,ut,K,J){var At=B($[Bt],$,ut);if(At.type!=="throw"){var xt=At.arg,mt=xt.value;return mt&&typeof mt=="object"&&s.call(mt,"__await")?q.resolve(mt.__await).then(function(Tt){Ct("next",Tt,K,J)},function(Tt){Ct("throw",Tt,K,J)}):q.resolve(mt).then(function(Tt){xt.value=Tt,K(xt)},function(Tt){return Ct("throw",Tt,K,J)})}J(At.arg)}var wt;this._invoke=function(Bt,ut){function K(){return new q(function(J,At){Ct(Bt,ut,J,At)})}return wt=wt?wt.then(K,K):K()}}function Y($,q){var Ct=$.iterator[q.method];if(Ct===A){if(q.delegate=null,q.method==="throw"){if($.iterator.return&&(q.method="return",q.arg=A,Y($,q),q.method==="throw"))return Q;q.method="throw",q.arg=new TypeError("The iterator does not provide a 'throw' method")}return Q}var wt=B(Ct,$.iterator,q.arg);if(wt.type==="throw")return q.method="throw",q.arg=wt.arg,q.delegate=null,Q;var Bt=wt.arg;return Bt?Bt.done?(q[$.resultName]=Bt.value,q.next=$.nextLoc,q.method!=="return"&&(q.method="next",q.arg=A),q.delegate=null,Q):Bt:(q.method="throw",q.arg=new TypeError("iterator result is not an object"),q.delegate=null,Q)}function rt($){var q={tryLoc:$[0]};1 in $&&(q.catchLoc=$[1]),2 in $&&(q.finallyLoc=$[2],q.afterLoc=$[3]),this.tryEntries.push(q)}function tt($){var q=$.completion||{};q.type="normal",delete q.arg,$.completion=q}function at($){this.tryEntries=[{tryLoc:"root"}],$.forEach(rt,this),this.reset(!0)}function pt($){if($){var q=$[l];if(q)return q.call($);if(typeof $.next=="function")return $;if(!isNaN($.length)){var Ct=-1,wt=function Bt(){for(;++Ct<$.length;)if(s.call($,Ct))return Bt.value=$[Ct],Bt.done=!1,Bt;return Bt.value=A,Bt.done=!0,Bt};return wt.next=wt}}return{next:ct}}function ct(){return{value:A,done:!0}}return b.prototype=T,E(O,"constructor",T),E(T,"constructor",b),b.displayName=E(T,f,"GeneratorFunction"),e.isGeneratorFunction=function($){var q=typeof $=="function"&&$.constructor;return!!q&&(q===b||(q.displayName||q.name)==="GeneratorFunction")},e.mark=function($){return Object.setPrototypeOf?Object.setPrototypeOf($,T):($.__proto__=T,E($,f,"GeneratorFunction")),$.prototype=Object.create(O),$},e.awrap=function($){return{__await:$}},N(L.prototype),E(L.prototype,d,function(){return this}),e.AsyncIterator=L,e.async=function($,q,Ct,wt,Bt){Bt===void 0&&(Bt=Promise);var ut=new L(I($,q,Ct,wt),Bt);return e.isGeneratorFunction(q)?ut:ut.next().then(function(K){return K.done?K.value:ut.next()})},N(O),E(O,f,"Generator"),E(O,l,function(){return this}),E(O,"toString",function(){return"[object Generator]"}),e.keys=function($){var q=[];for(var Ct in $)q.push(Ct);return q.reverse(),function wt(){for(;q.length;){var Bt=q.pop();if(Bt in $)return wt.value=Bt,wt.done=!1,wt}return wt.done=!0,wt}},e.values=pt,at.prototype={constructor:at,reset:function($){if(this.prev=0,this.next=0,this.sent=this._sent=A,this.done=!1,this.delegate=null,this.method="next",this.arg=A,this.tryEntries.forEach(tt),!$)for(var q in this)q.charAt(0)==="t"&&s.call(this,q)&&!isNaN(+q.slice(1))&&(this[q]=A)},stop:function(){this.done=!0;var $=this.tryEntries[0].completion;if($.type==="throw")throw $.arg;return this.rval},dispatchException:function($){if(this.done)throw $;var q=this;function Ct(At,xt){return ut.type="throw",ut.arg=$,q.next=At,xt&&(q.method="next",q.arg=A),!!xt}for(var wt=this.tryEntries.length-1;wt>=0;--wt){var Bt=this.tryEntries[wt],ut=Bt.completion;if(Bt.tryLoc==="root")return Ct("end");if(Bt.tryLoc<=this.prev){var K=s.call(Bt,"catchLoc"),J=s.call(Bt,"finallyLoc");if(K&&J){if(this.prev<Bt.catchLoc)return Ct(Bt.catchLoc,!0);if(this.prev<Bt.finallyLoc)return Ct(Bt.finallyLoc)}else if(K){if(this.prev<Bt.catchLoc)return Ct(Bt.catchLoc,!0)}else{if(!J)throw new Error("try statement without catch or finally");if(this.prev<Bt.finallyLoc)return Ct(Bt.finallyLoc)}}}},abrupt:function($,q){for(var Ct=this.tryEntries.length-1;Ct>=0;--Ct){var wt=this.tryEntries[Ct];if(wt.tryLoc<=this.prev&&s.call(wt,"finallyLoc")&&this.prev<wt.finallyLoc){var Bt=wt;break}}Bt&&($==="break"||$==="continue")&&Bt.tryLoc<=q&&q<=Bt.finallyLoc&&(Bt=null);var ut=Bt?Bt.completion:{};return ut.type=$,ut.arg=q,Bt?(this.method="next",this.next=Bt.finallyLoc,Q):this.complete(ut)},complete:function($,q){if($.type==="throw")throw $.arg;return $.type==="break"||$.type==="continue"?this.next=$.arg:$.type==="return"?(this.rval=this.arg=$.arg,this.method="return",this.next="end"):$.type==="normal"&&q&&(this.next=q),Q},finish:function($){for(var q=this.tryEntries.length-1;q>=0;--q){var Ct=this.tryEntries[q];if(Ct.finallyLoc===$)return this.complete(Ct.completion,Ct.afterLoc),tt(Ct),Q}},catch:function($){for(var q=this.tryEntries.length-1;q>=0;--q){var Ct=this.tryEntries[q];if(Ct.tryLoc===$){var wt=Ct.completion;if(wt.type==="throw"){var Bt=wt.arg;tt(Ct)}return Bt}}throw new Error("illegal catch attempt")},delegateYield:function($,q,Ct){return this.delegate={iterator:pt($),resultName:q,nextLoc:Ct},this.method==="next"&&(this.arg=A),Q}},e}(r.exports);try{regeneratorRuntime=t}catch{typeof globalThis=="object"?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},8702:function(r,t,e){e.d(t,{Z:function(){return wt}});var A=e(4296),a=e(6464),s=e(6881),n=e(2942),l=e(7003),d=e(3379),f=e.n(d),E=e(7795),I=e.n(E),B=e(569),y=e.n(B),v=e(3565),S=e.n(v),_=e(9216),Q=e.n(_),D=e(4589),b=e.n(D),T=e(5313),P={};T.Z&&T.Z.locals&&(P.locals=T.Z.locals);var R,F=0,O={};O.styleTagTransform=b(),O.setAttributes=S(),O.insert=y().bind(null,"head"),O.domAPI=I(),O.insertStyleElement=Q(),P.use=function(Bt){return O.options=Bt||{},F++||(R=f()(T.Z,O)),P},P.unuse=function(){F>0&&!--F&&(R(),R=null)};var N=P;function L(Bt){var ut,K;return{c:function(){ut=(0,n.bi5)("svg"),K=(0,n.bi5)("path"),(0,n.Ljt)(K,"d","M599.99999 832.000004h47.999999a24 24 0 0 0 23.999999-24V376.000013a24 24 0 0 0-23.999999-24h-47.999999a24 24 0 0 0-24 24v431.999991a24 24 0 0 0 24 24zM927.999983 160.000017h-164.819997l-67.999998-113.399998A95.999998 95.999998 0 0 0 612.819989 0.00002H411.179993a95.999998 95.999998 0 0 0-82.319998 46.599999L260.819996 160.000017H95.999999A31.999999 31.999999 0 0 0 64 192.000016v32a31.999999 31.999999 0 0 0 31.999999 31.999999h32v671.999987a95.999998 95.999998 0 0 0 95.999998 95.999998h575.999989a95.999998 95.999998 0 0 0 95.999998-95.999998V256.000015h31.999999a31.999999 31.999999 0 0 0 32-31.999999V192.000016a31.999999 31.999999 0 0 0-32-31.999999zM407.679993 101.820018A12 12 0 0 1 417.999993 96.000018h187.999996a12 12 0 0 1 10.3 5.82L651.219989 160.000017H372.779994zM799.999986 928.000002H223.999997V256.000015h575.999989z m-423.999992-95.999998h47.999999a24 24 0 0 0 24-24V376.000013a24 24 0 0 0-24-24h-47.999999a24 24 0 0 0-24 24v431.999991a24 24 0 0 0 24 24z"),(0,n.Ljt)(ut,"class","vc-icon-delete"),(0,n.Ljt)(ut,"viewBox","0 0 1024 1024"),(0,n.Ljt)(ut,"width","200"),(0,n.Ljt)(ut,"height","200")},m:function(J,At){(0,n.$Tr)(J,ut,At),(0,n.R3I)(ut,K)},d:function(J){J&&(0,n.ogt)(ut)}}}function Y(Bt){var ut,K,J;return{c:function(){ut=(0,n.bi5)("svg"),K=(0,n.bi5)("path"),J=(0,n.bi5)("path"),(0,n.Ljt)(K,"d","M874.154197 150.116875A511.970373 511.970373 0 1 0 1023.993986 511.991687a511.927744 511.927744 0 0 0-149.839789-361.874812z m-75.324866 648.382129A405.398688 405.398688 0 1 1 917.422301 511.991687a405.313431 405.313431 0 0 1-118.59297 286.507317z"),(0,n.Ljt)(J,"d","M725.039096 299.274605a54.351559 54.351559 0 0 0-76.731613 0l-135.431297 135.431297L377.274375 299.274605a54.436817 54.436817 0 0 0-76.944756 76.987385l135.388668 135.431297-135.388668 135.473925a54.436817 54.436817 0 0 0 76.944756 76.987385l135.388668-135.431297 135.431297 135.473926a54.436817 54.436817 0 0 0 76.731613-76.987385l-135.388668-135.473926 135.388668-135.431296a54.479445 54.479445 0 0 0 0.213143-77.030014z"),(0,n.Ljt)(ut,"viewBox","0 0 1024 1024"),(0,n.Ljt)(ut,"width","200"),(0,n.Ljt)(ut,"height","200")},m:function(At,xt){(0,n.$Tr)(At,ut,xt),(0,n.R3I)(ut,K),(0,n.R3I)(ut,J)},d:function(At){At&&(0,n.ogt)(ut)}}}function rt(Bt){var ut,K;return{c:function(){ut=(0,n.bi5)("svg"),K=(0,n.bi5)("path"),(0,n.Ljt)(K,"fill-rule","evenodd"),(0,n.Ljt)(K,"d","M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"),(0,n.Ljt)(ut,"class","vc-icon-copy"),(0,n.Ljt)(ut,"viewBox","0 0 16 16")},m:function(J,At){(0,n.$Tr)(J,ut,At),(0,n.R3I)(ut,K)},d:function(J){J&&(0,n.ogt)(ut)}}}function tt(Bt){var ut,K;return{c:function(){ut=(0,n.bi5)("svg"),K=(0,n.bi5)("path"),(0,n.Ljt)(K,"fill-rule","evenodd"),(0,n.Ljt)(K,"d","M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z"),(0,n.Ljt)(ut,"class","vc-icon-suc"),(0,n.Ljt)(ut,"viewBox","0 0 16 16")},m:function(J,At){(0,n.$Tr)(J,ut,At),(0,n.R3I)(ut,K)},d:function(J){J&&(0,n.ogt)(ut)}}}function at(Bt){var ut,K,J;return{c:function(){ut=(0,n.bi5)("svg"),K=(0,n.bi5)("path"),J=(0,n.bi5)("path"),(0,n.Ljt)(K,"d","M776.533333 1024 162.133333 1024C72.533333 1024 0 951.466667 0 861.866667L0 247.466667C0 157.866667 72.533333 85.333333 162.133333 85.333333L469.333333 85.333333c25.6 0 42.666667 17.066667 42.666667 42.666667s-17.066667 42.666667-42.666667 42.666667L162.133333 170.666667C119.466667 170.666667 85.333333 204.8 85.333333 247.466667l0 610.133333c0 42.666667 34.133333 76.8 76.8 76.8l610.133333 0c42.666667 0 76.8-34.133333 76.8-76.8L849.066667 554.666667c0-25.6 17.066667-42.666667 42.666667-42.666667s42.666667 17.066667 42.666667 42.666667l0 307.2C938.666667 951.466667 866.133333 1024 776.533333 1024z"),(0,n.Ljt)(J,"d","M256 810.666667c-12.8 0-21.333333-4.266667-29.866667-12.8C217.6 789.333333 213.333333 772.266667 213.333333 759.466667l42.666667-213.333333c0-8.533333 4.266667-17.066667 12.8-21.333333l512-512c17.066667-17.066667 42.666667-17.066667 59.733333 0l170.666667 170.666667c17.066667 17.066667 17.066667 42.666667 0 59.733333l-512 512c-4.266667 4.266667-12.8 8.533333-21.333333 12.8l-213.333333 42.666667C260.266667 810.666667 260.266667 810.666667 256 810.666667zM337.066667 576l-25.6 136.533333 136.533333-25.6L921.6 213.333333 810.666667 102.4 337.066667 576z"),(0,n.Ljt)(ut,"class","vc-icon-edit"),(0,n.Ljt)(ut,"viewBox","0 0 1024 1024"),(0,n.Ljt)(ut,"width","200"),(0,n.Ljt)(ut,"height","200")},m:function(At,xt){(0,n.$Tr)(At,ut,xt),(0,n.R3I)(ut,K),(0,n.R3I)(ut,J)},d:function(At){At&&(0,n.ogt)(ut)}}}function pt(Bt){var ut,K;return{c:function(){ut=(0,n.bi5)("svg"),K=(0,n.bi5)("path"),(0,n.Ljt)(K,"d","M581.338005 987.646578c-2.867097 4.095853-4.573702 8.669555-8.191705 12.287558a83.214071 83.214071 0 0 1-60.959939 24.029001 83.214071 83.214071 0 0 1-61.028203-24.029001c-3.618003-3.618003-5.324608-8.191705-8.123441-12.15103L24.370323 569.050448a83.418864 83.418864 0 0 1 117.892289-117.89229l369.923749 369.92375L1308.829682 24.438587A83.418864 83.418864 0 0 1 1426.721971 142.194348L581.338005 987.646578z"),(0,n.Ljt)(ut,"class","vc-icon-don"),(0,n.Ljt)(ut,"viewBox","0 0 1501 1024"),(0,n.Ljt)(ut,"width","200"),(0,n.Ljt)(ut,"height","200")},m:function(J,At){(0,n.$Tr)(J,ut,At),(0,n.R3I)(ut,K)},d:function(J){J&&(0,n.ogt)(ut)}}}function ct(Bt){var ut,K;return{c:function(){ut=(0,n.bi5)("svg"),K=(0,n.bi5)("path"),(0,n.Ljt)(K,"d","M894.976 574.464q0 78.848-29.696 148.48t-81.408 123.392-121.856 88.064-151.04 41.472q-5.12 1.024-9.216 1.536t-9.216 0.512l-177.152 0q-17.408 0-34.304-6.144t-30.208-16.896-22.016-25.088-8.704-29.696 8.192-29.696 21.504-24.576 29.696-16.384 33.792-6.144l158.72 1.024q54.272 0 102.4-19.968t83.968-53.76 56.32-79.36 20.48-97.792q0-49.152-18.432-92.16t-50.688-76.8-75.264-54.784-93.184-26.112q-2.048 0-2.56 0.512t-2.56 0.512l-162.816 0 0 80.896q0 17.408-13.824 25.6t-44.544-10.24q-8.192-5.12-26.112-17.92t-41.984-30.208-50.688-36.864l-51.2-38.912q-15.36-12.288-26.624-22.016t-11.264-24.064q0-12.288 12.8-25.6t29.184-26.624q18.432-15.36 44.032-35.84t50.688-39.936 45.056-35.328 28.16-22.016q24.576-17.408 39.936-7.168t16.384 30.72l0 81.92 162.816 0q5.12 0 10.752 1.024t10.752 2.048q79.872 8.192 149.504 41.984t121.344 87.552 80.896 123.392 29.184 147.456z"),(0,n.Ljt)(ut,"class","vc-icon-cancel"),(0,n.Ljt)(ut,"viewBox","0 0 1024 1024"),(0,n.Ljt)(ut,"width","200"),(0,n.Ljt)(ut,"height","200")},m:function(J,At){(0,n.$Tr)(J,ut,At),(0,n.R3I)(ut,K)},d:function(J){J&&(0,n.ogt)(ut)}}}function $(Bt){var ut,K,J,At,xt,mt,Tt,Vt,Nt,$t=Bt[0]==="delete"&&L(),ne=Bt[0]==="clear"&&Y(),Ae=Bt[0]==="copy"&&rt(),Z=Bt[0]==="success"&&tt(),ue=Bt[0]==="edit"&&at(),qt=Bt[0]==="done"&&pt(),Xt=Bt[0]==="cancel"&&ct();return{c:function(){ut=(0,n.bGB)("i"),$t&&$t.c(),K=(0,n.DhX)(),ne&&ne.c(),J=(0,n.DhX)(),Ae&&Ae.c(),At=(0,n.DhX)(),Z&&Z.c(),xt=(0,n.DhX)(),ue&&ue.c(),mt=(0,n.DhX)(),qt&&qt.c(),Tt=(0,n.DhX)(),Xt&&Xt.c(),(0,n.Ljt)(ut,"class","vc-icon")},m:function(Ht,oe){(0,n.$Tr)(Ht,ut,oe),$t&&$t.m(ut,null),(0,n.R3I)(ut,K),ne&&ne.m(ut,null),(0,n.R3I)(ut,J),Ae&&Ae.m(ut,null),(0,n.R3I)(ut,At),Z&&Z.m(ut,null),(0,n.R3I)(ut,xt),ue&&ue.m(ut,null),(0,n.R3I)(ut,mt),qt&&qt.m(ut,null),(0,n.R3I)(ut,Tt),Xt&&Xt.m(ut,null),Vt||(Nt=(0,n.oLt)(ut,"click",Bt[1]),Vt=!0)},p:function(Ht,oe){oe[0],Ht[0]==="delete"?$t||(($t=L()).c(),$t.m(ut,K)):$t&&($t.d(1),$t=null),Ht[0]==="clear"?ne||((ne=Y()).c(),ne.m(ut,J)):ne&&(ne.d(1),ne=null),Ht[0]==="copy"?Ae||((Ae=rt()).c(),Ae.m(ut,At)):Ae&&(Ae.d(1),Ae=null),Ht[0]==="success"?Z||((Z=tt()).c(),Z.m(ut,xt)):Z&&(Z.d(1),Z=null),Ht[0]==="edit"?ue||((ue=at()).c(),ue.m(ut,mt)):ue&&(ue.d(1),ue=null),Ht[0]==="done"?qt||((qt=pt()).c(),qt.m(ut,Tt)):qt&&(qt.d(1),qt=null),Ht[0]==="cancel"?Xt||((Xt=ct()).c(),Xt.m(ut,null)):Xt&&(Xt.d(1),Xt=null)},i:n.ZTd,o:n.ZTd,d:function(Ht){Ht&&(0,n.ogt)(ut),$t&&$t.d(),ne&&ne.d(),Ae&&Ae.d(),Z&&Z.d(),ue&&ue.d(),qt&&qt.d(),Xt&&Xt.d(),Vt=!1,Nt()}}}function q(Bt,ut,K){var J=ut.name;return(0,l.H3)(function(){N.use()}),(0,l.ev)(function(){N.unuse()}),Bt.$$set=function(At){"name"in At&&K(0,J=At.name)},[J,function(At){n.cKT.call(this,Bt,At)}]}var Ct=function(Bt){function ut(K){var J;return J=Bt.call(this)||this,(0,n.S1n)((0,a.Z)(J),K,q,$,n.N8,{name:0}),J}return(0,s.Z)(ut,Bt),(0,A.Z)(ut,[{key:"name",get:function(){return this.$$.ctx[0]},set:function(K){this.$$set({name:K}),(0,n.yl1)()}}]),ut}(n.f_C),wt=Ct},3903:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(6464),_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(6881),svelte_internal__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(2942),svelte__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(7003),_component_icon_icon_svelte__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(8702),_logTool__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(8665),_log_model__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(5629),_logCommand_less__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(3411);function get_each_context(r,t,e){var A=r.slice();return A[28]=t[e],A}function create_if_block_2(r){var t,e,A;return{c:function(){(t=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("li")).textContent="Close",(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(t,"class","vc-cmd-prompted-hide")},m:function(a,s){(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.$Tr)(a,t,s),e||(A=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.oLt)(t,"click",r[5]),e=!0)},p:svelte_internal__WEBPACK_IMPORTED_MODULE_0__.ZTd,d:function(a){a&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.ogt)(t),e=!1,A()}}}function create_else_block(r){var t;return{c:function(){(t=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("li")).textContent="No Prompted"},m:function(e,A){(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.$Tr)(e,t,A)},p:svelte_internal__WEBPACK_IMPORTED_MODULE_0__.ZTd,d:function(e){e&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.ogt)(t)}}}function create_each_block(r){var t,e,A,a,s=r[28].text+"";function n(){return r[14](r[28])}return{c:function(){t=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("li"),e=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.fLW)(s)},m:function(l,d){(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.$Tr)(l,t,d),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(t,e),A||(a=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.oLt)(t,"click",n),A=!0)},p:function(l,d){r=l,8&d&&s!==(s=r[28].text+"")&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.rTO)(e,s)},d:function(l){l&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.ogt)(t),A=!1,a()}}}function create_if_block_1(r){var t,e,A,a,s;return e=new _component_icon_icon_svelte__WEBPACK_IMPORTED_MODULE_2__.Z({props:{name:"clear"}}),{c:function(){t=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("div"),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.YCL)(e.$$.fragment),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(t,"class","vc-cmd-clear-btn")},m:function(n,l){(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.$Tr)(n,t,l),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.yef)(e,t,null),A=!0,a||(s=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.oLt)(t,"click",(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.AT7)(r[17])),a=!0)},p:svelte_internal__WEBPACK_IMPORTED_MODULE_0__.ZTd,i:function(n){A||((0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ui)(e.$$.fragment,n),A=!0)},o:function(n){(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.etI)(e.$$.fragment,n),A=!1},d:function(n){n&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.ogt)(t),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.vpE)(e),a=!1,s()}}}function create_if_block(r){var t,e,A,a,s;return e=new _component_icon_icon_svelte__WEBPACK_IMPORTED_MODULE_2__.Z({props:{name:"clear"}}),{c:function(){t=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("div"),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.YCL)(e.$$.fragment),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(t,"class","vc-cmd-clear-btn")},m:function(n,l){(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.$Tr)(n,t,l),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.yef)(e,t,null),A=!0,a||(s=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.oLt)(t,"click",(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.AT7)(r[19])),a=!0)},p:svelte_internal__WEBPACK_IMPORTED_MODULE_0__.ZTd,i:function(n){A||((0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ui)(e.$$.fragment,n),A=!0)},o:function(n){(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.etI)(e.$$.fragment,n),A=!1},d:function(n){n&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.ogt)(t),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.vpE)(e),a=!1,s()}}}function create_fragment(r){for(var t,e,A,a,s,n,l,d,f,E,I,B,y,v,S,_,Q,D,b,T,P,R=r[3].length>0&&create_if_block_2(r),F=r[3],O=[],N=0;N<F.length;N+=1)O[N]=create_each_block(get_each_context(r,F,N));var L=null;F.length||(L=create_else_block());var Y=r[1].length>0&&create_if_block_1(r),rt=r[4].length>0&&create_if_block(r);return{c:function(){t=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("form"),e=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("ul"),R&&R.c(),A=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.DhX)();for(var tt=0;tt<O.length;tt+=1)O[tt].c();L&&L.c(),a=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.DhX)(),s=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("div"),n=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("textarea"),l=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.DhX)(),Y&&Y.c(),d=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.DhX)(),(f=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("button")).textContent="OK",E=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.DhX)(),I=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("form"),B=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("ul"),y=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.DhX)(),v=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("div"),S=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("textarea"),_=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.DhX)(),rt&&rt.c(),Q=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.DhX)(),(D=(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.bGB)("button")).textContent="Filter",(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(e,"class","vc-cmd-prompted"),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(e,"style",r[2]),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(n,"class","vc-cmd-input"),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(n,"placeholder","command..."),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(s,"class","vc-cmd-input-wrap"),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(f,"class","vc-cmd-btn"),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(f,"type","submit"),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(t,"class","vc-cmd"),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(B,"class","vc-cmd-prompted"),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(S,"class","vc-cmd-input"),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(S,"placeholder","filter..."),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(v,"class","vc-cmd-input-wrap"),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(D,"class","vc-cmd-btn"),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(D,"type","submit"),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(I,"class","vc-cmd vc-filter")},m:function(tt,at){(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.$Tr)(tt,t,at),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(t,e),R&&R.m(e,null),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(e,A);for(var pt=0;pt<O.length;pt+=1)O[pt].m(e,null);L&&L.m(e,null),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(t,a),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(t,s),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(s,n),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.BmG)(n,r[1]),r[16](n),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(s,l),Y&&Y.m(s,null),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(t,d),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(t,f),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.$Tr)(tt,E,at),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.$Tr)(tt,I,at),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(I,B),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(I,y),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(I,v),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(v,S),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.BmG)(S,r[4]),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(v,_),rt&&rt.m(v,null),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(I,Q),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.R3I)(I,D),b=!0,T||(P=[(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.oLt)(n,"input",r[15]),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.oLt)(n,"keydown",r[10]),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.oLt)(n,"keyup",r[11]),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.oLt)(n,"focus",r[8]),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.oLt)(n,"blur",r[9]),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.oLt)(t,"submit",(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.AT7)(r[12])),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.oLt)(S,"input",r[18]),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.oLt)(I,"submit",(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.AT7)(r[13]))],T=!0)},p:function(tt,at){var pt=at[0];if(tt[3].length>0?R?R.p(tt,pt):((R=create_if_block_2(tt)).c(),R.m(e,A)):R&&(R.d(1),R=null),136&pt){var ct;for(F=tt[3],ct=0;ct<F.length;ct+=1){var $=get_each_context(tt,F,ct);O[ct]?O[ct].p($,pt):(O[ct]=create_each_block($),O[ct].c(),O[ct].m(e,null))}for(;ct<O.length;ct+=1)O[ct].d(1);O.length=F.length,!F.length&&L?L.p(tt,pt):F.length?L&&(L.d(1),L=null):((L=create_else_block()).c(),L.m(e,null))}(!b||4&pt)&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ljt)(e,"style",tt[2]),2&pt&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.BmG)(n,tt[1]),tt[1].length>0?Y?(Y.p(tt,pt),2&pt&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ui)(Y,1)):((Y=create_if_block_1(tt)).c(),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ui)(Y,1),Y.m(s,null)):Y&&((0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.dvw)(),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.etI)(Y,1,1,function(){Y=null}),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.gbL)()),16&pt&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.BmG)(S,tt[4]),tt[4].length>0?rt?(rt.p(tt,pt),16&pt&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ui)(rt,1)):((rt=create_if_block(tt)).c(),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ui)(rt,1),rt.m(v,null)):rt&&((0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.dvw)(),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.etI)(rt,1,1,function(){rt=null}),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.gbL)())},i:function(tt){b||((0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ui)(Y),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.Ui)(rt),b=!0)},o:function(tt){(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.etI)(Y),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.etI)(rt),b=!1},d:function(tt){tt&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.ogt)(t),R&&R.d(),(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.RMB)(O,tt),L&&L.d(),r[16](null),Y&&Y.d(),tt&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.ogt)(E),tt&&(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.ogt)(I),rt&&rt.d(),T=!1,(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.j7q)(P)}}}function instance($$self,$$props,$$invalidate){var module=_log_model__WEBPACK_IMPORTED_MODULE_3__.W.getSingleton(_log_model__WEBPACK_IMPORTED_MODULE_3__.W,"VConsoleLogModel"),cachedObjKeys={},dispatch=(0,svelte__WEBPACK_IMPORTED_MODULE_1__.x)(),cmdElement,cmdValue="",promptedStyle="",promptedList=[],filterValue="";(0,svelte__WEBPACK_IMPORTED_MODULE_1__.H3)(function(){_logCommand_less__WEBPACK_IMPORTED_MODULE_4__.Z.use()}),(0,svelte__WEBPACK_IMPORTED_MODULE_1__.ev)(function(){_logCommand_less__WEBPACK_IMPORTED_MODULE_4__.Z.unuse()});var evalCommand=function(r){module.evalCommand(r)},moveCursorToPos=function(r,t){r.setSelectionRange&&setTimeout(function(){r.setSelectionRange(t,t)},1)},clearPromptedList=function(){$$invalidate(2,promptedStyle="display: none;"),$$invalidate(3,promptedList=[])},updatePromptedList=function updatePromptedList(identifier){if(cmdValue!==""){identifier||(identifier=(0,_logTool__WEBPACK_IMPORTED_MODULE_5__.oj)(cmdValue));var objName="window",keyName=cmdValue;if(identifier.front.text!=="."&&identifier.front.text!=="["||(objName=identifier.front.before,keyName=identifier.back.text!==""?identifier.back.before:identifier.front.after),keyName=keyName.replace(/(^['"]+)|(['"']+$)/g,""),!cachedObjKeys[objName])try{cachedObjKeys[objName]=Object.getOwnPropertyNames(eval("("+objName+")")).sort()}catch(r){}try{if(cachedObjKeys[objName])for(var i=0;i<cachedObjKeys[objName].length&&!(promptedList.length>=100);i++){var key=String(cachedObjKeys[objName][i]),keyPattern=new RegExp("^"+keyName,"i");if(keyPattern.test(key)){var completeCmd=objName;identifier.front.text==="."||identifier.front.text===""?completeCmd+="."+key:identifier.front.text==="["&&(completeCmd+="['"+key+"']"),promptedList.push({text:key,value:completeCmd})}}}catch(r){}if(promptedList.length>0){var m=Math.min(200,31*(promptedList.length+1));$$invalidate(2,promptedStyle="display: block; height: "+m+"px; margin-top: "+(-m-2)+"px;"),$$invalidate(3,promptedList)}else clearPromptedList()}else clearPromptedList()},autoCompleteBrackets=function(r,t){if(!(t===8||t===46)&&r.front.after==="")switch(r.front.text){case"[":return $$invalidate(1,cmdValue+="]"),void moveCursorToPos(cmdElement,cmdValue.length-1);case"(":return $$invalidate(1,cmdValue+=")"),void moveCursorToPos(cmdElement,cmdValue.length-1);case"{":return $$invalidate(1,cmdValue+="}"),void moveCursorToPos(cmdElement,cmdValue.length-1)}},dispatchFilterEvent=function(){dispatch("filterText",{filterText:filterValue})},onTapClearText=function(r){r==="cmd"?($$invalidate(1,cmdValue=""),clearPromptedList()):r==="filter"&&($$invalidate(4,filterValue=""),dispatchFilterEvent())},onTapPromptedItem=function onTapPromptedItem(item){var type="";try{type=eval("typeof "+item.value)}catch(r){}$$invalidate(1,cmdValue=item.value+(type==="function"?"()":"")),clearPromptedList()},onCmdFocus=function(){updatePromptedList()},onCmdBlur=function(){},onCmdKeyDown=function(r){r.keyCode===13&&(r.preventDefault(),onCmdSubmit())},onCmdKeyUp=function(r){$$invalidate(3,promptedList=[]);var t=(0,_logTool__WEBPACK_IMPORTED_MODULE_5__.oj)(r.target.value);autoCompleteBrackets(t,r.keyCode),updatePromptedList(t)},onCmdSubmit=function(){cmdValue!==""&&evalCommand(cmdValue),clearPromptedList()},onFilterSubmit=function(r){dispatchFilterEvent()},click_handler=function(r){return onTapPromptedItem(r)};function textarea0_input_handler(){cmdValue=this.value,$$invalidate(1,cmdValue)}function textarea0_binding(r){svelte_internal__WEBPACK_IMPORTED_MODULE_0__.VnY[r?"unshift":"push"](function(){$$invalidate(0,cmdElement=r)})}var click_handler_1=function(){return onTapClearText("cmd")};function textarea1_input_handler(){filterValue=this.value,$$invalidate(4,filterValue)}var click_handler_2=function(){return onTapClearText("filter")};return[cmdElement,cmdValue,promptedStyle,promptedList,filterValue,clearPromptedList,onTapClearText,onTapPromptedItem,onCmdFocus,onCmdBlur,onCmdKeyDown,onCmdKeyUp,onCmdSubmit,onFilterSubmit,click_handler,textarea0_input_handler,textarea0_binding,click_handler_1,textarea1_input_handler,click_handler_2]}var LogCommand=function(r){function t(e){var A;return A=r.call(this)||this,(0,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.S1n)((0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_7__.Z)(A),e,instance,create_fragment,svelte_internal__WEBPACK_IMPORTED_MODULE_0__.N8,{}),A}return(0,_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_6__.Z)(t,r),t}(svelte_internal__WEBPACK_IMPORTED_MODULE_0__.f_C);__webpack_exports__.Z=LogCommand},4687:function(r,t,e){e.d(t,{x:function(){return a}});var A=e(3313),a=function(){var s=(0,A.fZ)({updateTime:0}),n=s.subscribe,l=s.set,d=s.update;return{subscribe:n,set:l,update:d,updateTime:function(){d(function(f){return f.updateTime=Date.now(),f})}}}()},643:function(r,t,e){e.d(t,{N:function(){return A}});var A=function(){function a(){this._onDataUpdateCallbacks=[]}return a.getSingleton=function(s,n){return n||(n=s.toString()),a.singleton[n]||(a.singleton[n]=new s),a.singleton[n]},a}();A.singleton={}},5103:function(r,t,e){function A(K){var J=K>0?new Date(K):new Date,At=J.getDate()<10?"0"+J.getDate():J.getDate(),xt=J.getMonth()<9?"0"+(J.getMonth()+1):J.getMonth()+1,mt=J.getFullYear(),Tt=J.getHours()<10?"0"+J.getHours():J.getHours(),Vt=J.getMinutes()<10?"0"+J.getMinutes():J.getMinutes(),Nt=J.getSeconds()<10?"0"+J.getSeconds():J.getSeconds(),$t=J.getMilliseconds()<10?"0"+J.getMilliseconds():J.getMilliseconds();return $t<100&&($t="0"+$t),{time:+J,year:mt,month:xt,day:At,hour:Tt,minute:Vt,second:Nt,millisecond:$t}}function a(K){return Object.prototype.toString.call(K)==="[object Number]"}function s(K){return typeof K=="bigint"}function n(K){return typeof K=="string"}function l(K){return Object.prototype.toString.call(K)==="[object Array]"}function d(K){return typeof K=="boolean"}function f(K){return K===void 0}function E(K){return K===null}function I(K){return typeof K=="symbol"}function B(K){return!(Object.prototype.toString.call(K)!=="[object Object]"&&(a(K)||s(K)||n(K)||d(K)||l(K)||E(K)||y(K)||f(K)||I(K)))}function y(K){return typeof K=="function"}function v(K){return typeof HTMLElement=="object"?K instanceof HTMLElement:K&&typeof K=="object"&&K!==null&&K.nodeType===1&&typeof K.nodeName=="string"}function S(K){var J=Object.prototype.toString.call(K);return J==="[object Window]"||J==="[object DOMWindow]"||J==="[object global]"}function _(K){return K!=null&&typeof K!="string"&&typeof K!="boolean"&&typeof K!="number"&&typeof K!="function"&&typeof K!="symbol"&&typeof K!="bigint"&&typeof Symbol<"u"&&typeof K[Symbol.iterator]=="function"}function Q(K){return Object.prototype.toString.call(K).replace(/\[object (.*)\]/,"$1")}e.d(t,{C4:function(){return s},DV:function(){return b},FJ:function(){return S},Ft:function(){return E},HD:function(){return n},H_:function(){return Bt},KL:function(){return Y},Kn:function(){return B},MH:function(){return pt},PO:function(){return T},QI:function(){return wt},QK:function(){return ct},TW:function(){return _},_3:function(){return A},_D:function(){return $},cF:function(){return Ct},hZ:function(){return L},hj:function(){return a},id:function(){return rt},jn:function(){return d},kJ:function(){return l},kK:function(){return v},mf:function(){return y},o8:function(){return f},po:function(){return q},qr:function(){return at},qt:function(){return ut},rE:function(){return F},yk:function(){return I},zl:function(){return Q}});var D=/(function|class) ([^ \{\()}]{1,})[\(| ]/;function b(K){var J;if(K==null)return"";var At=D.exec((K==null||(J=K.constructor)==null?void 0:J.toString())||"");return At&&At.length>1?At[2]:""}function T(K){var J,At=Object.prototype.hasOwnProperty;if(!K||typeof K!="object"||K.nodeType||S(K))return!1;try{if(K.constructor&&!At.call(K,"constructor")&&!At.call(K.constructor.prototype,"isPrototypeOf"))return!1}catch{return!1}for(J in K);return J===void 0||At.call(K,J)}var P=/[\n\t]/g,R=function(K){return{"\n":"\\n","	":"\\t"}[K]};function F(K){return typeof K!="string"?K:String(K).replace(P,R)}var O=function(K,J){J===void 0&&(J=0);var At="";return n(K)?(J>0&&(K=rt(K,J)),At+='"'+F(K)+'"'):I(K)?At+=String(K).replace(/^Symbol\((.*)\)$/i,'Symbol("$1")'):y(K)?At+=(K.name||"function")+"()":s(K)?At+=String(K)+"n":At+=String(K),At},N=function K(J,At,xt){if(xt===void 0&&(xt=0),B(J)||l(J))if(At.circularFinder(J)){var mt="";if(l(J))mt="(Circular Array)";else if(B(J)){var Tt;mt="(Circular "+(((Tt=J.constructor)==null?void 0:Tt.name)||"Object")+")"}At.ret+=At.standardJSON?'"'+mt+'"':mt}else{var Vt="",Nt="";if(At.pretty){for(var $t=0;$t<=xt;$t++)Vt+="  ";Nt=`
`}var ne="{",Ae="}";l(J)&&(ne="[",Ae="]"),At.ret+=ne+Nt;for(var Z=pt(J),ue=0;ue<Z.length;ue++){var qt=Z[ue];At.ret+=Vt;try{l(J)||(B(qt)||l(qt)||I(qt)?At.ret+=Object.prototype.toString.call(qt):n(qt)&&At.standardJSON?At.ret+='"'+qt+'"':At.ret+=qt,At.ret+=": ")}catch{continue}try{var Xt=J[qt];if(l(Xt))At.maxDepth>-1&&xt>=At.maxDepth?At.ret+="Array("+Xt.length+")":K(Xt,At,xt+1);else if(B(Xt)){var Ht;At.maxDepth>-1&&xt>=At.maxDepth?At.ret+=(((Ht=Xt.constructor)==null?void 0:Ht.name)||"Object")+" {}":K(Xt,At,xt+1)}else At.ret+=O(Xt,At.keyMaxLen)}catch{At.ret+=At.standardJSON?'"(PARSE_ERROR)"':"(PARSE_ERROR)"}if(At.keyMaxLen>0&&At.ret.length>=10*At.keyMaxLen){At.ret+=", (...)";break}ue<Z.length-1&&(At.ret+=", "),At.ret+=Nt}At.ret+=Vt.substring(0,Vt.length-2)+Ae}else At.ret+=O(J,At.keyMaxLen)};function L(K,J){J===void 0&&(J={maxDepth:-1,keyMaxLen:-1,pretty:!1,standardJSON:!1});var At,xt=Object.assign({ret:"",maxDepth:-1,keyMaxLen:-1,pretty:!1,standardJSON:!1,circularFinder:(At=new WeakSet,function(mt){if(typeof mt=="object"&&mt!==null){if(At.has(mt))return!0;At.add(mt)}return!1})},J);return N(K,xt),xt.ret}function Y(K){return K<=0?"":K>=1e6?(K/1e3/1e3).toFixed(1)+" MB":K>=1e3?(K/1e3).toFixed(1)+" KB":K+" B"}function rt(K,J){return K.length>J&&(K=K.substring(0,J)+"...("+Y(function(At){try{return encodeURI(At).split(/%(?:u[0-9A-F]{2})?[0-9A-F]{2}|./).length-1}catch{return 0}}(K))+")"),K}var tt=function(K,J){return String(K).localeCompare(String(J),void 0,{numeric:!0,sensitivity:"base"})};function at(K){return K.sort(tt)}function pt(K){return B(K)||l(K)?Object.keys(K):[]}function ct(K){var J=pt(K),At=function(xt){return B(xt)||l(xt)?Object.getOwnPropertyNames(xt):[]}(K);return At.filter(function(xt){return J.indexOf(xt)===-1})}function $(K){return B(K)||l(K)?Object.getOwnPropertySymbols(K):[]}function q(K,J){window.localStorage&&(K="vConsole_"+K,localStorage.setItem(K,J))}function Ct(K){if(window.localStorage)return K="vConsole_"+K,localStorage.getItem(K)}function wt(K){return K===void 0&&(K=""),"__vc_"+K+Math.random().toString(36).substring(2,8)}function Bt(){return typeof window<"u"&&!!window.__wxConfig&&!!window.wx&&!!window.__virtualDOM__}function ut(K){if(Bt()&&typeof window.wx[K]=="function")try{for(var J,At=arguments.length,xt=new Array(At>1?At-1:0),mt=1;mt<At;mt++)xt[mt-1]=arguments[mt];var Tt=(J=window.wx[K]).call.apply(J,[window.wx].concat(xt));return Tt}catch(Vt){return void console.debug("[vConsole] Fail to call wx."+K+"():",Vt)}}},5629:function(r,t,e){e.d(t,{W:function(){return v}});var A=e(8270),a=e(6881),s=e(5103),n=e(643),l=e(4687),d=e(8665),f=e(9923);function E(S,_){var Q=Object.keys(S);if(Object.getOwnPropertySymbols){var D=Object.getOwnPropertySymbols(S);_&&(D=D.filter(function(b){return Object.getOwnPropertyDescriptor(S,b).enumerable})),Q.push.apply(Q,D)}return Q}function I(S){for(var _=1;_<arguments.length;_++){var Q=arguments[_]!=null?arguments[_]:{};_%2?E(Object(Q),!0).forEach(function(D){(0,A.Z)(S,D,Q[D])}):Object.getOwnPropertyDescriptors?Object.defineProperties(S,Object.getOwnPropertyDescriptors(Q)):E(Object(Q)).forEach(function(D){Object.defineProperty(S,D,Object.getOwnPropertyDescriptor(Q,D))})}return S}function B(S,_){var Q=typeof Symbol<"u"&&S[Symbol.iterator]||S["@@iterator"];if(Q)return(Q=Q.call(S)).next.bind(Q);if(Array.isArray(S)||(Q=function(b,T){if(b){if(typeof b=="string")return y(b,T);var P=Object.prototype.toString.call(b).slice(8,-1);if(P==="Object"&&b.constructor&&(P=b.constructor.name),P==="Map"||P==="Set")return Array.from(b);if(P==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(P))return y(b,T)}}(S))||_){Q&&(S=Q);var D=0;return function(){return D>=S.length?{done:!0}:{done:!1,value:S[D++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function y(S,_){(_==null||_>S.length)&&(_=S.length);for(var Q=0,D=new Array(_);Q<_;Q++)D[Q]=S[Q];return D}var v=function(S){function _(){for(var D,b=arguments.length,T=new Array(b),P=0;P<b;P++)T[P]=arguments[P];return(D=S.call.apply(S,[this].concat(T))||this).LOG_METHODS=["log","info","warn","debug","error"],D.ADDED_LOG_PLUGIN_ID=[],D.maxLogNumber=1e3,D.logCounter=0,D.groupLevel=0,D.groupLabelCollapsedStack=[],D.pluginPattern=void 0,D.logQueue=[],D.flushLogScheduled=!1,D.origConsole={},D}(0,a.Z)(_,S);var Q=_.prototype;return Q.bindPlugin=function(D){return!(this.ADDED_LOG_PLUGIN_ID.indexOf(D)>-1)&&(this.ADDED_LOG_PLUGIN_ID.length===0&&this.mockConsole(),f.O.create(D),this.ADDED_LOG_PLUGIN_ID.push(D),this.pluginPattern=new RegExp("^\\[("+this.ADDED_LOG_PLUGIN_ID.join("|")+")\\]$","i"),!0)},Q.unbindPlugin=function(D){var b=this.ADDED_LOG_PLUGIN_ID.indexOf(D);return b!==-1&&(this.ADDED_LOG_PLUGIN_ID.splice(b,1),f.O.delete(D),this.ADDED_LOG_PLUGIN_ID.length===0&&this.unmockConsole(),!0)},Q.mockConsole=function(){var D=this;typeof this.origConsole.log!="function"&&(window.console?(this.LOG_METHODS.map(function(b){D.origConsole[b]=window.console[b]}),this.origConsole.time=window.console.time,this.origConsole.timeEnd=window.console.timeEnd,this.origConsole.clear=window.console.clear,this.origConsole.group=window.console.group,this.origConsole.groupCollapsed=window.console.groupCollapsed,this.origConsole.groupEnd=window.console.groupEnd):window.console={},this._mockConsoleLog(),this._mockConsoleTime(),this._mockConsoleGroup(),this._mockConsoleClear(),window._vcOrigConsole=this.origConsole)},Q._mockConsoleLog=function(){var D=this;this.LOG_METHODS.map(function(b){window.console[b]=(function(){for(var T=arguments.length,P=new Array(T),R=0;R<T;R++)P[R]=arguments[R];D.addLog({type:b,origData:P||[]})}).bind(window.console)})},Q._mockConsoleTime=function(){var D=this,b={};window.console.time=(function(T){T===void 0&&(T=""),b[T]=Date.now()}).bind(window.console),window.console.timeEnd=(function(T){T===void 0&&(T="");var P=b[T],R=0;P&&(R=Date.now()-P,delete b[T]),D.addLog({type:"log",origData:[T+": "+R+"ms"]})}).bind(window.console)},Q._mockConsoleGroup=function(){var D=this,b=function(T){return(function(P){P===void 0&&(P="console.group");var R=Symbol(P);D.groupLabelCollapsedStack.push({label:R,collapsed:T}),D.addLog({type:"log",origData:[P],isGroupHeader:T?2:1,isGroupCollapsed:!1},{noOrig:!0}),D.groupLevel++,T?D.origConsole.groupCollapsed(P):D.origConsole.group(P)}).bind(window.console)};window.console.group=b(!1),window.console.groupCollapsed=b(!0),window.console.groupEnd=(function(){D.groupLabelCollapsedStack.pop(),D.groupLevel=Math.max(0,D.groupLevel-1),D.origConsole.groupEnd()}).bind(window.console)},Q._mockConsoleClear=function(){var D=this;window.console.clear=(function(){D.resetGroup(),D.clearLog();for(var b=arguments.length,T=new Array(b),P=0;P<b;P++)T[P]=arguments[P];D.callOriginalConsole.apply(D,["clear"].concat(T))}).bind(window.console)},Q.unmockConsole=function(){for(var D in this.origConsole)window.console[D]=this.origConsole[D],delete this.origConsole[D];window._vcOrigConsole&&delete window._vcOrigConsole},Q.callOriginalConsole=function(D){if(typeof this.origConsole[D]=="function"){for(var b=arguments.length,T=new Array(b>1?b-1:0),P=1;P<b;P++)T[P-1]=arguments[P];this.origConsole[D].apply(window.console,T)}},Q.resetGroup=function(){for(;this.groupLevel>0;)console.groupEnd()},Q.clearLog=function(){var D=f.O.getAll();for(var b in D)this.clearPluginLog(b)},Q.clearPluginLog=function(D){var b=this.logQueue;this.logQueue=[];for(var T,P=B(b);!(T=P()).done;){var R=T.value;this._extractPluginIdByLog(R)!==D&&this.logQueue.push(R)}f.O.get(D).update(function(F){return F.logList.length=0,F}),l.x.updateTime()},Q.addLog=function(D,b){D===void 0&&(D={type:"log",origData:[],isGroupHeader:0,isGroupCollapsed:!1});var T=this.groupLabelCollapsedStack[this.groupLabelCollapsedStack.length-2],P=this.groupLabelCollapsedStack[this.groupLabelCollapsedStack.length-1],R={_id:s.QI(),type:D.type,cmdType:b==null?void 0:b.cmdType,toggle:{},date:Date.now(),data:(0,d.b1)(D.origData||[]),repeated:0,groupLabel:P==null?void 0:P.label,groupLevel:this.groupLevel,groupHeader:D.isGroupHeader,groupCollapsed:D.isGroupHeader?!(T==null||!T.collapsed):!(P==null||!P.collapsed)};this._signalLog(R),b!=null&&b.noOrig||this.callOriginalConsole.apply(this,[D.type].concat(D.origData))},Q.evalCommand=function(D){this.addLog({type:"log",origData:[D]},{cmdType:"input"});var b=void 0;try{b=eval.call(window,"("+D+")")}catch{try{b=eval.call(window,D)}catch{}}this.addLog({type:"log",origData:[b]},{cmdType:"output"})},Q._signalLog=function(D){var b=this;this.flushLogScheduled||(this.flushLogScheduled=!0,window.requestAnimationFrame(function(){b.flushLogScheduled=!1,b._flushLogs()})),this.logQueue.push(D)},Q._flushLogs=function(){var D=this,b=this.logQueue;this.logQueue=[];for(var T,P={},R=B(b);!(T=R()).done;){var F=T.value,O=this._extractPluginIdByLog(F);(P[O]=P[O]||[]).push(F)}for(var N=function(rt){var tt=P[rt];f.O.get(rt).update(function(at){for(var pt,ct=[].concat(at.logList),$=B(tt);!(pt=$()).done;){var q=pt.value;D._isRepeatedLog(ct,q)?D._updateLastLogRepeated(ct):ct.push(q)}return{logList:ct=D._limitLogListLength(ct)}})},L=0,Y=Object.keys(P);L<Y.length;L++)N(Y[L]);l.x.updateTime()},Q._extractPluginIdByLog=function(D){var b,T="default",P=(b=D.data[0])==null?void 0:b.origData;if(s.HD(P)){var R=P.match(this.pluginPattern);if(R!==null&&R.length>1){var F=R[1].toLowerCase();this.ADDED_LOG_PLUGIN_ID.indexOf(F)>-1&&(T=F,D.data.shift())}}return T},Q._isRepeatedLog=function(D,b){var T=D[D.length-1];if(!T)return!1;var P=!1;if(b.type===T.type&&b.cmdType===T.cmdType&&b.data.length===T.data.length){P=!0;for(var R=0;R<b.data.length;R++)if(b.data[R].origData!==T.data[R].origData){P=!1;break}}return P},Q._updateLastLogRepeated=function(D){var b=D[D.length-1],T=b.repeated?b.repeated+1:2;return D[D.length-1]=I(I({},b),{},{repeated:T}),D},Q._limitLogListLength=function(D){var b=D.length,T=this.maxLogNumber;return b>T?D.slice(b-T,b):D},_}(n.N)},9923:function(r,t,e){e.d(t,{O:function(){return a}});var A=e(3313),a=function(){function s(){}return s.create=function(n){return this.storeMap[n]||(this.storeMap[n]=(0,A.fZ)({logList:[]})),this.storeMap[n]},s.delete=function(n){this.storeMap[n]&&delete this.storeMap[n]},s.get=function(n){return this.storeMap[n]},s.getRaw=function(n){return(0,A.U2)(this.storeMap[n])},s.getAll=function(){return this.storeMap},s}();a.storeMap={}},8665:function(r,t,e){e.d(t,{HX:function(){return E},LH:function(){return s},Tg:function(){return y},b1:function(){return B},oj:function(){return f}});var A=e(5103),a=function(v){var S=A.hZ(v,{maxDepth:0}),_=S.substring(0,36),Q=A.DV(v);return S.length>36&&(_+="..."),Q=A.rE(Q+" "+_)},s=function(v,S){S===void 0&&(S=!0);var _="undefined",Q=v;return v instanceof y?(_="uninvocatable",Q="(...)"):A.kJ(v)?(_="array",Q=a(v)):A.Kn(v)?(_="object",Q=a(v)):A.HD(v)?(_="string",Q=A.rE(v),S&&(Q='"'+Q+'"')):A.hj(v)?(_="number",Q=String(v)):A.C4(v)?(_="bigint",Q=String(v)+"n"):A.jn(v)?(_="boolean",Q=String(v)):A.Ft(v)?(_="null",Q="null"):A.o8(v)?(_="undefined",Q="undefined"):A.mf(v)?(_="function",Q=(v.name||"function")+"()"):A.yk(v)&&(_="symbol",Q=String(v)),{text:Q,valueType:_}},n=[".","[","(","{","}"],l=["]",")","}"],d=function(v,S,_){_===void 0&&(_=0);for(var Q={text:"",pos:-1,before:"",after:""},D=v.length-1;D>=_;D--){var b=S.indexOf(v[D]);if(b>-1){Q.text=S[b],Q.pos=D,Q.before=v.substring(_,D),Q.after=v.substring(D+1,v.length);break}}return Q},f=function(v){var S=d(v,n,0);return{front:S,back:d(v,l,S.pos+1)}},E=function(v,S){if(S==="")return!0;for(var _=0;_<v.data.length;_++)if(typeof v.data[_].origData=="string"&&v.data[_].origData.indexOf(S)>-1)return!0;return!1},I=/(\%[csdo] )|( \%[csdo])/g,B=function(v){if(I.lastIndex=0,A.HD(v[0])&&I.test(v[0])){for(var S,_=[].concat(v),Q=_.shift().split(I).filter(function(Y){return Y!==void 0&&Y!==""}),D=_,b=[],T=!1,P="";Q.length>0;){var R=Q.shift();if(/ ?\%c ?/.test(R)?D.length>0?typeof(P=D.shift())!="string"&&(P=""):(S=R,P="",T=!0):/ ?\%[sd] ?/.test(R)?(S=D.length>0?A.Kn(D[0])?A.DV(D.shift()):String(D.shift()):R,T=!0):/ ?\%o ?/.test(R)?(S=D.length>0?D.shift():R,T=!0):(S=R,T=!0),T){var F={origData:S};P&&(F.style=P),b.push(F),T=!1,S=void 0,P=""}}for(var O=0;O<D.length;O++)b.push({origData:D[O]});return b}for(var N=[],L=0;L<v.length;L++)N.push({origData:v[L]});return N},y=function(){}},5313:function(r,t,e){var A=e(6738),a=e.n(A),s=e(7705),n=e.n(s)()(a());n.push([r.id,`.vc-icon {
  word-break: normal;
  white-space: normal;
  overflow: visible;
}
.vc-icon svg {
  fill: var(--VC-FG-2);
  height: 1em;
  width: 1em;
  vertical-align: -0.11em;
}
.vc-icon .vc-icon-delete {
  vertical-align: -0.11em;
}
.vc-icon .vc-icon-copy {
  height: 1.1em;
  width: 1.1em;
  vertical-align: -0.16em;
}
.vc-icon .vc-icon-suc {
  fill: var(--VC-TEXTGREEN);
  height: 1.1em;
  width: 1.1em;
  vertical-align: -0.16em;
}
`,""]),t.Z=n},1142:function(r,t,e){var A=e(6738),a=e.n(A),s=e(7705),n=e.n(s)()(a());n.push([r.id,`.vc-scroller-viewport {
  position: relative;
  overflow: hidden;
  height: 100%;
}
.vc-scroller-contents {
  min-height: 100%;
  will-change: transform;
}
.vc-scroller-items {
  will-change: height;
  position: relative;
}
.vc-scroller-item {
  display: none;
  position: absolute;
  left: 0;
  right: 0;
}
.vc-scroller-viewport.static .vc-scroller-item {
  display: block;
  position: static;
}
.vc-scroller-scrollbar-track {
  width: 4px;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  padding: 1px;
}
.vc-scroller-scrollbar-thumb {
  position: relative;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  border-radius: 999px;
}
`,""]),t.Z=n},3283:function(r,t,e){var A=e(6738),a=e.n(A),s=e(7705),n=e.n(s)()(a());n.push([r.id,`#__vconsole {
  --VC-BG-0: #ededed;
  --VC-BG-1: #f7f7f7;
  --VC-BG-2: #fff;
  --VC-BG-3: #f7f7f7;
  --VC-BG-4: #4c4c4c;
  --VC-BG-5: #fff;
  --VC-BG-6: rgba(0, 0, 0, 0.1);
  --VC-FG-0: rgba(0, 0, 0, 0.9);
  --VC-FG-HALF: rgba(0, 0, 0, 0.9);
  --VC-FG-1: rgba(0, 0, 0, 0.5);
  --VC-FG-2: rgba(0, 0, 0, 0.3);
  --VC-FG-3: rgba(0, 0, 0, 0.1);
  --VC-RED: #fa5151;
  --VC-ORANGE: #fa9d3b;
  --VC-YELLOW: #ffc300;
  --VC-GREEN: #91d300;
  --VC-LIGHTGREEN: #95ec69;
  --VC-BRAND: #07c160;
  --VC-BLUE: #10aeff;
  --VC-INDIGO: #1485ee;
  --VC-PURPLE: #6467f0;
  --VC-LINK: #576b95;
  --VC-TEXTGREEN: #06ae56;
  --VC-FG: black;
  --VC-BG: white;
  --VC-BG-COLOR-ACTIVE: #ececec;
  --VC-WARN-BG: #fff3cc;
  --VC-WARN-BORDER: #ffe799;
  --VC-ERROR-BG: #fedcdc;
  --VC-ERROR-BORDER: #fdb9b9;
  --VC-DOM-TAG-NAME-COLOR: #881280;
  --VC-DOM-ATTRIBUTE-NAME-COLOR: #994500;
  --VC-DOM-ATTRIBUTE-VALUE-COLOR: #1a1aa6;
  --VC-CODE-KEY-FG: #881391;
  --VC-CODE-PRIVATE-KEY-FG: #cfa1d3;
  --VC-CODE-FUNC-FG: #0d22aa;
  --VC-CODE-NUMBER-FG: #1c00cf;
  --VC-CODE-STR-FG: #c41a16;
  --VC-CODE-NULL-FG: #808080;
  color: var(--VC-FG-0);
  font-size: 13px;
  font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
  -webkit-user-select: auto;
  /* global */
}
#__vconsole .vc-max-height {
  max-height: 19.23076923em;
}
#__vconsole .vc-max-height-line {
  max-height: 6.30769231em;
}
#__vconsole .vc-min-height {
  min-height: 3.07692308em;
}
#__vconsole dd,
#__vconsole dl,
#__vconsole pre {
  margin: 0;
}
#__vconsole pre {
  white-space: pre-wrap;
}
#__vconsole i {
  font-style: normal;
}
.vc-table {
  height: 100%;
}
.vc-table .vc-table-row {
  line-height: 1.5;
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-direction: row;
  -moz-box-orient: horizontal;
  -moz-box-direction: normal;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  overflow: hidden;
  border-bottom: 1px solid var(--VC-FG-3);
}
.vc-table .vc-table-row.vc-left-border {
  border-left: 1px solid var(--VC-FG-3);
}
.vc-table .vc-table-row-icon {
  margin-left: 4px;
}
.vc-table .vc-table-col {
  -webkit-box-flex: 1;
  -webkit-flex: 1;
  -moz-box-flex: 1;
  -ms-flex: 1;
  flex: 1;
  padding: 0.23076923em 0.30769231em;
  border-left: 1px solid var(--VC-FG-3);
  overflow: auto;
}
.vc-table .vc-table-col:first-child {
  border: none;
}
.vc-table .vc-table-col-value {
  white-space: pre-wrap;
  word-break: break-word;
  /*white-space: nowrap;
    text-overflow: ellipsis;*/
  -webkit-overflow-scrolling: touch;
}
.vc-table .vc-small .vc-table-col {
  padding: 0 0.30769231em;
  font-size: 0.92307692em;
}
.vc-table .vc-table-col-2 {
  -webkit-box-flex: 2;
  -webkit-flex: 2;
  -moz-box-flex: 2;
  -ms-flex: 2;
  flex: 2;
}
.vc-table .vc-table-col-3 {
  -webkit-box-flex: 3;
  -webkit-flex: 3;
  -moz-box-flex: 3;
  -ms-flex: 3;
  flex: 3;
}
.vc-table .vc-table-col-4 {
  -webkit-box-flex: 4;
  -webkit-flex: 4;
  -moz-box-flex: 4;
  -ms-flex: 4;
  flex: 4;
}
.vc-table .vc-table-col-5 {
  -webkit-box-flex: 5;
  -webkit-flex: 5;
  -moz-box-flex: 5;
  -ms-flex: 5;
  flex: 5;
}
.vc-table .vc-table-col-6 {
  -webkit-box-flex: 6;
  -webkit-flex: 6;
  -moz-box-flex: 6;
  -ms-flex: 6;
  flex: 6;
}
.vc-table .vc-table-row-error {
  border-color: var(--VC-ERROR-BORDER);
  background-color: var(--VC-ERROR-BG);
}
.vc-table .vc-table-row-error .vc-table-col {
  color: var(--VC-RED);
  border-color: var(--VC-ERROR-BORDER);
}
.vc-table .vc-table-col-title {
  font-weight: bold;
}
.vc-table .vc-table-action {
  display: flex;
  justify-content: space-evenly;
}
.vc-table .vc-table-action .vc-icon {
  flex: 1;
  text-align: center;
  display: block;
}
.vc-table .vc-table-action .vc-icon:hover {
  background: var(--VC-BG-3);
}
.vc-table .vc-table-action .vc-icon:active {
  background: var(--VC-BG-1);
}
.vc-table .vc-table-input {
  width: 100%;
  border: none;
  color: var(--VC-FG-0);
  background-color: var(--VC-BG-6);
  height: 3.53846154em;
}
.vc-table .vc-table-input:focus {
  background-color: var(--VC-FG-2);
}
@media (prefers-color-scheme: dark) {
  #__vconsole:not([data-theme="light"]) {
    --VC-BG-0: #191919;
    --VC-BG-1: #1f1f1f;
    --VC-BG-2: #232323;
    --VC-BG-3: #2f2f2f;
    --VC-BG-4: #606060;
    --VC-BG-5: #2c2c2c;
    --VC-BG-6: rgba(255, 255, 255, 0.2);
    --VC-FG-0: rgba(255, 255, 255, 0.8);
    --VC-FG-HALF: rgba(255, 255, 255, 0.6);
    --VC-FG-1: rgba(255, 255, 255, 0.5);
    --VC-FG-2: rgba(255, 255, 255, 0.3);
    --VC-FG-3: rgba(255, 255, 255, 0.05);
    --VC-RED: #fa5151;
    --VC-ORANGE: #c87d2f;
    --VC-YELLOW: #cc9c00;
    --VC-GREEN: #74a800;
    --VC-LIGHTGREEN: #28b561;
    --VC-BRAND: #07c160;
    --VC-BLUE: #10aeff;
    --VC-INDIGO: #1196ff;
    --VC-PURPLE: #8183ff;
    --VC-LINK: #7d90a9;
    --VC-TEXTGREEN: #259c5c;
    --VC-FG: white;
    --VC-BG: black;
    --VC-BG-COLOR-ACTIVE: #282828;
    --VC-WARN-BG: #332700;
    --VC-WARN-BORDER: #664e00;
    --VC-ERROR-BG: #321010;
    --VC-ERROR-BORDER: #642020;
    --VC-DOM-TAG-NAME-COLOR: #5DB0D7;
    --VC-DOM-ATTRIBUTE-NAME-COLOR: #9BBBDC;
    --VC-DOM-ATTRIBUTE-VALUE-COLOR: #f29766;
    --VC-CODE-KEY-FG: #e36eec;
    --VC-CODE-PRIVATE-KEY-FG: #f4c5f7;
    --VC-CODE-FUNC-FG: #556af2;
    --VC-CODE-NUMBER-FG: #9980ff;
    --VC-CODE-STR-FG: #e93f3b;
    --VC-CODE-NULL-FG: #808080;
  }
}
#__vconsole[data-theme="dark"] {
  --VC-BG-0: #191919;
  --VC-BG-1: #1f1f1f;
  --VC-BG-2: #232323;
  --VC-BG-3: #2f2f2f;
  --VC-BG-4: #606060;
  --VC-BG-5: #2c2c2c;
  --VC-BG-6: rgba(255, 255, 255, 0.2);
  --VC-FG-0: rgba(255, 255, 255, 0.8);
  --VC-FG-HALF: rgba(255, 255, 255, 0.6);
  --VC-FG-1: rgba(255, 255, 255, 0.5);
  --VC-FG-2: rgba(255, 255, 255, 0.3);
  --VC-FG-3: rgba(255, 255, 255, 0.05);
  --VC-RED: #fa5151;
  --VC-ORANGE: #c87d2f;
  --VC-YELLOW: #cc9c00;
  --VC-GREEN: #74a800;
  --VC-LIGHTGREEN: #28b561;
  --VC-BRAND: #07c160;
  --VC-BLUE: #10aeff;
  --VC-INDIGO: #1196ff;
  --VC-PURPLE: #8183ff;
  --VC-LINK: #7d90a9;
  --VC-TEXTGREEN: #259c5c;
  --VC-FG: white;
  --VC-BG: black;
  --VC-BG-COLOR-ACTIVE: #282828;
  --VC-WARN-BG: #332700;
  --VC-WARN-BORDER: #664e00;
  --VC-ERROR-BG: #321010;
  --VC-ERROR-BORDER: #642020;
  --VC-DOM-TAG-NAME-COLOR: #5DB0D7;
  --VC-DOM-ATTRIBUTE-NAME-COLOR: #9BBBDC;
  --VC-DOM-ATTRIBUTE-VALUE-COLOR: #f29766;
  --VC-CODE-KEY-FG: #e36eec;
  --VC-CODE-PRIVATE-KEY-FG: #f4c5f7;
  --VC-CODE-FUNC-FG: #556af2;
  --VC-CODE-NUMBER-FG: #9980ff;
  --VC-CODE-STR-FG: #e93f3b;
  --VC-CODE-NULL-FG: #808080;
}
.vc-tabbar {
  border-bottom: 1px solid var(--VC-FG-3);
  overflow-x: auto;
  height: 3em;
  width: auto;
  white-space: nowrap;
}
.vc-tabbar .vc-tab {
  display: inline-block;
  line-height: 3em;
  padding: 0 1.15384615em;
  border-right: 1px solid var(--VC-FG-3);
  text-decoration: none;
  color: var(--VC-FG-0);
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
}
.vc-tabbar .vc-tab:active {
  background-color: rgba(0, 0, 0, 0.15);
}
.vc-tabbar .vc-tab.vc-actived {
  background-color: var(--VC-BG-1);
}
.vc-toolbar {
  border-top: 1px solid var(--VC-FG-3);
  line-height: 3em;
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-direction: row;
  -moz-box-orient: horizontal;
  -moz-box-direction: normal;
  -ms-flex-direction: row;
  flex-direction: row;
}
.vc-toolbar .vc-tool {
  display: none;
  font-style: normal;
  text-decoration: none;
  color: var(--VC-FG-0);
  width: 50%;
  -webkit-box-flex: 1;
  -webkit-flex: 1;
  -moz-box-flex: 1;
  -ms-flex: 1;
  flex: 1;
  text-align: center;
  position: relative;
  -webkit-touch-callout: none;
}
.vc-toolbar .vc-tool.vc-toggle,
.vc-toolbar .vc-tool.vc-global-tool {
  display: block;
}
.vc-toolbar .vc-tool:active {
  background-color: rgba(0, 0, 0, 0.15);
}
.vc-toolbar .vc-tool:after {
  content: " ";
  position: absolute;
  top: 0.53846154em;
  bottom: 0.53846154em;
  right: 0;
  border-left: 1px solid var(--VC-FG-3);
}
.vc-toolbar .vc-tool-last:after {
  border: none;
}
.vc-topbar {
  background-color: var(--VC-BG-1);
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-direction: row;
  -moz-box-orient: horizontal;
  -moz-box-direction: normal;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  width: 100%;
}
.vc-topbar .vc-toptab {
  display: none;
  -webkit-box-flex: 1;
  -webkit-flex: 1;
  -moz-box-flex: 1;
  -ms-flex: 1;
  flex: 1;
  line-height: 2.30769231em;
  padding: 0 1.15384615em;
  border-bottom: 1px solid var(--VC-FG-3);
  text-decoration: none;
  text-align: center;
  color: var(--VC-FG-0);
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
}
.vc-topbar .vc-toptab.vc-toggle {
  display: block;
}
.vc-topbar .vc-toptab:active {
  background-color: rgba(0, 0, 0, 0.15);
}
.vc-topbar .vc-toptab.vc-actived {
  border-bottom: 1px solid var(--VC-INDIGO);
}
.vc-mask {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0);
  z-index: 10001;
  -webkit-transition: background 0.3s;
  transition: background 0.3s;
  -webkit-tap-highlight-color: transparent;
  overflow-y: scroll;
}
.vc-panel {
  display: none;
  position: fixed;
  min-height: 85%;
  left: 0;
  right: 0;
  bottom: -100%;
  z-index: 10002;
  background-color: var(--VC-BG-0);
  transition: bottom 0.3s;
}
.vc-toggle .vc-switch {
  display: none;
}
.vc-toggle .vc-mask {
  background: rgba(0, 0, 0, 0.6);
  display: block;
}
.vc-toggle .vc-panel {
  bottom: 0;
}
.vc-content {
  background-color: var(--VC-BG-2);
  overflow-x: hidden;
  overflow-y: auto;
  position: absolute;
  top: 3.07692308em;
  left: 0;
  right: 0;
  bottom: 3.07692308em;
  -webkit-overflow-scrolling: touch;
  margin-bottom: constant(safe-area-inset-bottom);
  margin-bottom: env(safe-area-inset-bottom);
}
.vc-content.vc-has-topbar {
  top: 5.46153846em;
}
.vc-plugin-box {
  display: none;
  position: relative;
  min-height: 100%;
}
.vc-plugin-box.vc-fixed-height {
  height: 100%;
}
.vc-plugin-box.vc-actived {
  display: block;
}
.vc-plugin-content {
  display: flex;
  width: 100%;
  height: 100%;
  overflow-y: auto;
  flex-direction: column;
  -webkit-tap-highlight-color: transparent;
}
.vc-plugin-content:empty:before {
  content: "Empty";
  color: var(--VC-FG-1);
  position: absolute;
  top: 45%;
  left: 0;
  right: 0;
  bottom: 0;
  font-size: 1.15384615em;
  text-align: center;
}
.vc-plugin-empty {
  color: var(--VC-FG-1);
  font-size: 1.15384615em;
  height: 100%;
  width: 100%;
  padding: 1.15384615em 0;
  text-align: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
}
@supports (bottom: constant(safe-area-inset-bottom)) or (bottom: env(safe-area-inset-bottom)) {
  .vc-toolbar,
  .vc-switch {
    bottom: constant(safe-area-inset-bottom);
    bottom: env(safe-area-inset-bottom);
  }
}
`,""]),t.Z=n},7558:function(r,t,e){var A=e(6738),a=e.n(A),s=e(7705),n=e.n(s)()(a());n.push([r.id,`.vc-switch {
  display: block;
  position: fixed;
  right: 0.76923077em;
  bottom: 0.76923077em;
  color: #FFF;
  background-color: var(--VC-BRAND);
  line-height: 1;
  font-size: 1.07692308em;
  padding: 0.61538462em 1.23076923em;
  z-index: 10000;
  border-radius: 0.30769231em;
  box-shadow: 0 0 0.61538462em rgba(0, 0, 0, 0.4);
}
`,""]),t.Z=n},5670:function(r,t,e){var A=e(6738),a=e.n(A),s=e(7705),n=e.n(s)()(a());n.push([r.id,`/* color */
.vcelm-node {
  color: var(--VC-DOM-TAG-NAME-COLOR);
}
.vcelm-k {
  color: var(--VC-DOM-ATTRIBUTE-NAME-COLOR);
}
.vcelm-v {
  color: var(--VC-DOM-ATTRIBUTE-VALUE-COLOR);
}
.vcelm-l.vc-actived > .vcelm-node {
  background-color: var(--VC-FG-3);
}
/* layout */
.vcelm-l {
  padding-left: 8px;
  position: relative;
  word-wrap: break-word;
  line-height: 1.2;
}
/*.vcelm-l.vcelm-noc {
  padding-left: 0;
}*/
.vcelm-l .vcelm-node:active {
  background-color: var(--VC-BG-COLOR-ACTIVE);
}
.vcelm-l.vcelm-noc .vcelm-node:active {
  background-color: transparent;
}
.vcelm-t {
  white-space: pre-wrap;
  word-wrap: break-word;
}
/* level */
/* arrow */
.vcelm-l:before {
  content: "";
  display: block;
  position: absolute;
  top: 6px;
  left: 3px;
  width: 0;
  height: 0;
  border: transparent solid 3px;
  border-left-color: var(--VC-FG-1);
}
.vcelm-l.vc-toggle:before {
  display: block;
  top: 6px;
  left: 0;
  border-top-color: var(--VC-FG-1);
  border-left-color: transparent;
}
.vcelm-l.vcelm-noc:before {
  display: none;
}
`,""]),t.Z=n},3327:function(r,t,e){var A=e(6738),a=e.n(A),s=e(7705),n=e.n(s)()(a());n.push([r.id,"",""]),t.Z=n},1130:function(r,t,e){var A=e(6738),a=e.n(A),s=e(7705),n=e.n(s)()(a());n.push([r.id,`.vc-cmd {
  height: 3.07692308em;
  border-top: 1px solid var(--VC-FG-3);
  display: flex;
  flex-direction: row;
}
.vc-cmd.vc-filter {
  bottom: 0;
}
.vc-cmd-input-wrap {
  display: flex;
  align-items: center;
  flex: 1;
  position: relative;
  height: 2.15384615em;
  padding: 0.46153846em 0.61538462em;
}
.vc-cmd-input {
  width: 100%;
  border: none;
  resize: none;
  outline: none;
  padding: 0;
  font-size: 0.92307692em;
  background-color: transparent;
  color: var(--VC-FG-0);
}
.vc-cmd-input::-webkit-input-placeholder {
  line-height: 2.15384615em;
}
.vc-cmd-btn {
  width: 3.07692308em;
  border: none;
  background-color: var(--VC-BG-0);
  color: var(--VC-FG-0);
  outline: none;
  -webkit-touch-callout: none;
  font-size: 1em;
}
.vc-cmd-clear-btn {
  flex: 1 3.07692308em;
  text-align: center;
  line-height: 3.07692308em;
}
.vc-cmd-btn:active,
.vc-cmd-clear-btn:active {
  background-color: var(--VC-BG-COLOR-ACTIVE);
}
.vc-cmd-prompted {
  position: absolute;
  left: 0.46153846em;
  right: 0.46153846em;
  background-color: var(--VC-BG-3);
  border: 1px solid var(--VC-FG-3);
  overflow-x: scroll;
  display: none;
}
.vc-cmd-prompted li {
  list-style: none;
  line-height: 30px;
  padding: 0 0.46153846em;
  border-bottom: 1px solid var(--VC-FG-3);
}
.vc-cmd-prompted li:active {
  background-color: var(--VC-BG-COLOR-ACTIVE);
}
.vc-cmd-prompted-hide {
  text-align: center;
}
`,""]),t.Z=n},7147:function(r,t,e){var A=e(6738),a=e.n(A),s=e(7705),n=e.n(s)()(a());n.push([r.id,`.vc-log-row {
  margin: 0;
  padding: 0.46153846em 0.61538462em;
  overflow: hidden;
  line-height: 1.3;
  border-bottom: 1px solid var(--VC-FG-3);
  word-break: break-word;
  position: relative;
  display: flex;
}
.vc-log-info {
  color: var(--VC-PURPLE);
}
.vc-log-debug {
  color: var(--VC-YELLOW);
}
.vc-log-warn {
  color: var(--VC-ORANGE);
  border-color: var(--VC-WARN-BORDER);
  background-color: var(--VC-WARN-BG);
}
.vc-log-error {
  color: var(--VC-RED);
  border-color: var(--VC-ERROR-BORDER);
  background-color: var(--VC-ERROR-BG);
}
.vc-logrow-icon {
  margin-left: auto;
}
.vc-log-padding {
  width: 1.53846154em;
  border-left: 1px solid var(--VC-FG-3);
}
.vc-log-group .vc-log-content {
  font-weight: bold;
}
.vc-log-group-toggle {
  padding-left: 0.76923077em;
}
.vc-log-group-toggle {
  display: block;
  font-style: italic;
  padding-left: 0.76923077em;
  position: relative;
}
.vc-log-group-toggle:active {
  background-color: var(--VC-BG-COLOR-ACTIVE);
}
.vc-log-group > .vc-log-group-toggle::before {
  content: "";
  position: absolute;
  top: 0.30769231em;
  left: 0.15384615em;
  width: 0;
  height: 0;
  border: transparent solid 0.30769231em;
  border-left-color: var(--VC-FG-1);
}
.vc-log-group.vc-toggle > .vc-log-group-toggle::before {
  top: 0.46153846em;
  left: 0;
  border-top-color: var(--VC-FG-1);
  border-left-color: transparent;
}
.vc-log-time {
  width: 6.15384615em;
  color: #777;
}
.vc-log-repeat i {
  margin-right: 0.30769231em;
  padding: 0 6.5px;
  color: #D7E0EF;
  background-color: #42597F;
  border-radius: 8.66666667px;
}
.vc-log-error .vc-log-repeat i {
  color: #901818;
  background-color: var(--VC-RED);
}
.vc-log-warn .vc-log-repeat i {
  color: #987D20;
  background-color: #F4BD02;
}
.vc-log-content {
  flex: 1;
}
.vc-log-input,
.vc-log-output {
  padding-left: 0.92307692em;
}
.vc-log-input:before,
.vc-log-output:before {
  content: "›";
  position: absolute;
  top: 0.15384615em;
  left: 0;
  font-size: 1.23076923em;
  color: #6A5ACD;
}
.vc-log-output:before {
  content: "‹";
}
`,""]),t.Z=n},1237:function(r,t,e){var A=e(6738),a=e.n(A),s=e(7705),n=e.n(s)()(a());n.push([r.id,`.vc-log-tree {
  display: block;
  overflow: auto;
  position: relative;
  -webkit-overflow-scrolling: touch;
}
.vc-log-tree-node {
  display: block;
  font-style: italic;
  padding-left: 0.76923077em;
  position: relative;
}
.vc-log-tree.vc-is-tree > .vc-log-tree-node:active {
  background-color: var(--VC-BG-COLOR-ACTIVE);
}
.vc-log-tree.vc-is-tree > .vc-log-tree-node::before {
  content: "";
  position: absolute;
  top: 0.30769231em;
  left: 0.15384615em;
  width: 0;
  height: 0;
  border: transparent solid 0.30769231em;
  border-left-color: var(--VC-FG-1);
}
.vc-log-tree.vc-is-tree.vc-toggle > .vc-log-tree-node::before {
  top: 0.46153846em;
  left: 0;
  border-top-color: var(--VC-FG-1);
  border-left-color: transparent;
}
.vc-log-tree-child {
  margin-left: 0.76923077em;
}
.vc-log-tree-loadmore {
  text-decoration: underline;
  padding-left: 1.84615385em;
  position: relative;
  color: var(--VC-CODE-FUNC-FG);
}
.vc-log-tree-loadmore::before {
  content: "››";
  position: absolute;
  top: -0.15384615em;
  left: 0.76923077em;
  font-size: 1.23076923em;
  color: var(--VC-CODE-FUNC-FG);
}
.vc-log-tree-loadmore:active {
  background-color: var(--VC-BG-COLOR-ACTIVE);
}
`,""]),t.Z=n},845:function(r,t,e){var A=e(6738),a=e.n(A),s=e(7705),n=e.n(s)()(a());n.push([r.id,`.vc-log-key {
  color: var(--VC-CODE-KEY-FG);
}
.vc-log-key-private {
  color: var(--VC-CODE-PRIVATE-KEY-FG);
}
.vc-log-val {
  white-space: pre-line;
}
.vc-log-val-function {
  color: var(--VC-CODE-FUNC-FG);
  font-style: italic !important;
}
.vc-log-val-bigint {
  color: var(--VC-CODE-FUNC-FG);
}
.vc-log-val-number,
.vc-log-val-boolean {
  color: var(--VC-CODE-NUMBER-FG);
}
.vc-log-val-string {
  white-space: pre-wrap;
}
.vc-log-val-string.vc-log-val-haskey {
  color: var(--VC-CODE-STR-FG);
  white-space: normal;
}
.vc-log-val-null,
.vc-log-val-undefined,
.vc-log-val-uninvocatable {
  color: var(--VC-CODE-NULL-FG);
}
.vc-log-val-symbol {
  color: var(--VC-CODE-STR-FG);
}
`,""]),t.Z=n},8747:function(r,t,e){var A=e(6738),a=e.n(A),s=e(7705),n=e.n(s)()(a());n.push([r.id,`.vc-group .vc-group-preview {
  -webkit-touch-callout: none;
}
.vc-group .vc-group-preview:active {
  background-color: var(--VC-BG-COLOR-ACTIVE);
}
.vc-group .vc-group-detail {
  display: none;
  padding: 0 0 0.76923077em 1.53846154em;
  border-bottom: 1px solid var(--VC-FG-3);
}
.vc-group.vc-actived .vc-group-detail {
  display: block;
  background-color: var(--VC-BG-1);
}
.vc-group.vc-actived .vc-table-row {
  background-color: var(--VC-BG-2);
}
.vc-group.vc-actived .vc-group-preview {
  background-color: var(--VC-BG-1);
}
`,""]),t.Z=n},3411:function(r,t,e){var A=e(3379),a=e.n(A),s=e(7795),n=e.n(s),l=e(569),d=e.n(l),f=e(3565),E=e.n(f),I=e(9216),B=e.n(I),y=e(4589),v=e.n(y),S=e(1130),_={};S.Z&&S.Z.locals&&(_.locals=S.Z.locals);var Q,D=0,b={};b.styleTagTransform=v(),b.setAttributes=E(),b.insert=d().bind(null,"head"),b.domAPI=n(),b.insertStyleElement=B(),_.use=function(T){return b.options=T||{},D++||(Q=a()(S.Z,b)),_},_.unuse=function(){D>0&&!--D&&(Q(),Q=null)},t.Z=_},3379:function(r){var t=[];function e(s){for(var n=-1,l=0;l<t.length;l++)if(t[l].identifier===s){n=l;break}return n}function A(s,n){for(var l={},d=[],f=0;f<s.length;f++){var E=s[f],I=n.base?E[0]+n.base:E[0],B=l[I]||0,y="".concat(I," ").concat(B);l[I]=B+1;var v=e(y),S={css:E[1],media:E[2],sourceMap:E[3],supports:E[4],layer:E[5]};if(v!==-1)t[v].references++,t[v].updater(S);else{var _=a(S,n);n.byIndex=f,t.splice(f,0,{identifier:y,updater:_,references:1})}d.push(y)}return d}function a(s,n){var l=n.domAPI(n);return l.update(s),function(d){if(d){if(d.css===s.css&&d.media===s.media&&d.sourceMap===s.sourceMap&&d.supports===s.supports&&d.layer===s.layer)return;l.update(s=d)}else l.remove()}}r.exports=function(s,n){var l=A(s=s||[],n=n||{});return function(d){d=d||[];for(var f=0;f<l.length;f++){var E=e(l[f]);t[E].references--}for(var I=A(d,n),B=0;B<l.length;B++){var y=e(l[B]);t[y].references===0&&(t[y].updater(),t.splice(y,1))}l=I}}},569:function(r){var t={};r.exports=function(e,A){var a=function(s){if(t[s]===void 0){var n=document.querySelector(s);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch{n=null}t[s]=n}return t[s]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(A)}},9216:function(r){r.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:function(r,t,e){r.exports=function(A){var a=e.nc;a&&A.setAttribute("nonce",a)}},7795:function(r){r.exports=function(t){var e=t.insertStyleElement(t);return{update:function(A){(function(a,s,n){var l="";n.supports&&(l+="@supports (".concat(n.supports,") {")),n.media&&(l+="@media ".concat(n.media," {"));var d=n.layer!==void 0;d&&(l+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),l+=n.css,d&&(l+="}"),n.media&&(l+="}"),n.supports&&(l+="}");var f=n.sourceMap;f&&typeof btoa<"u"&&(l+=`
/*# sourceMappingURL=data:application/json;base64,`.concat(btoa(unescape(encodeURIComponent(JSON.stringify(f))))," */")),s.styleTagTransform(l,a,s.options)})(e,t,A)},remove:function(){(function(A){if(A.parentNode===null)return!1;A.parentNode.removeChild(A)})(e)}}}},4589:function(r){r.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},6464:function(r,t,e){function A(a){if(a===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}e.d(t,{Z:function(){return A}})},4296:function(r,t,e){function A(s,n){for(var l=0;l<n.length;l++){var d=n[l];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(s,d.key,d)}}function a(s,n,l){return n&&A(s.prototype,n),l&&A(s,l),Object.defineProperty(s,"prototype",{writable:!1}),s}e.d(t,{Z:function(){return a}})},8270:function(r,t,e){function A(a,s,n){return s in a?Object.defineProperty(a,s,{value:n,enumerable:!0,configurable:!0,writable:!0}):a[s]=n,a}e.d(t,{Z:function(){return A}})},6881:function(r,t,e){e.d(t,{Z:function(){return a}});var A=e(2717);function a(s,n){s.prototype=Object.create(n.prototype),s.prototype.constructor=s,(0,A.Z)(s,n)}},2717:function(r,t,e){function A(a,s){return A=Object.setPrototypeOf||function(n,l){return n.__proto__=l,n},A(a,s)}e.d(t,{Z:function(){return A}})},7003:function(r,t,e){e.d(t,{H3:function(){return A.H3E},ev:function(){return A.evW},x:function(){return A.xa3}});var A=e(2942)},2942:function(r,t,e){e.d(t,{f_C:function(){return de},hjT:function(){return Ht},R3I:function(){return P},Ljt:function(){return $},akz:function(){return yt},VnY:function(){return $t},cKT:function(){return Vt},gbL:function(){return St},FIv:function(){return y},XGm:function(){return b},xa3:function(){return Tt},YCL:function(){return dt},nuO:function(){return v},vpE:function(){return Ft},RMB:function(){return O},ogt:function(){return F},bGB:function(){return N},cSb:function(){return tt},yl1:function(){return Ee},VOJ:function(){return D},u2N:function(){return _},$XI:function(){return B},lig:function(){return te},dvw:function(){return It},S1n:function(){return Ut},$Tr:function(){return R},sBU:function(){return l},oLt:function(){return at},yef:function(){return bt},ZTd:function(){return A},AqN:function(){return f},evW:function(){return mt},H3E:function(){return xt},cly:function(){return Gt},AT7:function(){return pt},j7q:function(){return n},N8:function(){return d},rTO:function(){return q},BmG:function(){return Ct},fxP:function(){return T},czc:function(){return wt},DhX:function(){return rt},XET:function(){return ct},LdU:function(){return I},bi5:function(){return L},fLW:function(){return Y},VHj:function(){return Bt},Ui:function(){return Mt},etI:function(){return Dt},GQg:function(){return ee},kmG:function(){return Q}}),e(2717),e(6881);function A(){}function a(G){return G()}function s(){return Object.create(null)}function n(G){G.forEach(a)}function l(G){return typeof G=="function"}function d(G,it){return G!=G?it==it:G!==it||G&&typeof G=="object"||typeof G=="function"}function f(G,it){return G!=G?it==it:G!==it}function E(G){return Object.keys(G).length===0}function I(G){if(G==null)return A;for(var it=arguments.length,j=new Array(it>1?it-1:0),lt=1;lt<it;lt++)j[lt-1]=arguments[lt];var gt=G.subscribe.apply(G,j);return gt.unsubscribe?function(){return gt.unsubscribe()}:gt}function B(G){var it;return I(G,function(j){return it=j})(),it}function y(G,it,j){G.$$.on_destroy.push(I(it,j))}function v(G,it,j,lt){if(G){var gt=S(G,it,j,lt);return G[0](gt)}}function S(G,it,j,lt){return G[1]&&lt?function(gt,ft){for(var Lt in ft)gt[Lt]=ft[Lt];return gt}(j.ctx.slice(),G[1](lt(it))):j.ctx}function _(G,it,j,lt){if(G[2]&&lt){var gt=G[2](lt(j));if(it.dirty===void 0)return gt;if(typeof gt=="object"){for(var ft=[],Lt=Math.max(it.dirty.length,gt.length),ie=0;ie<Lt;ie+=1)ft[ie]=it.dirty[ie]|gt[ie];return ft}return it.dirty|gt}return it.dirty}function Q(G,it,j,lt,gt,ft){if(gt){var Lt=S(it,j,lt,ft);G.p(Lt,gt)}}function D(G){if(G.ctx.length>32){for(var it=[],j=G.ctx.length/32,lt=0;lt<j;lt++)it[lt]=-1;return it}return-1}function b(G){var it={};for(var j in G)it[j]=!0;return it}function T(G,it,j){return G.set(j),it}function P(G,it){G.appendChild(it)}function R(G,it,j){G.insertBefore(it,j||null)}function F(G){G.parentNode.removeChild(G)}function O(G,it){for(var j=0;j<G.length;j+=1)G[j]&&G[j].d(it)}function N(G){return document.createElement(G)}function L(G){return document.createElementNS("http://www.w3.org/2000/svg",G)}function Y(G){return document.createTextNode(G)}function rt(){return Y(" ")}function tt(){return Y("")}function at(G,it,j,lt){return G.addEventListener(it,j,lt),function(){return G.removeEventListener(it,j,lt)}}function pt(G){return function(it){return it.preventDefault(),G.call(this,it)}}function ct(G){return function(it){return it.stopPropagation(),G.call(this,it)}}function $(G,it,j){j==null?G.removeAttribute(it):G.getAttribute(it)!==j&&G.setAttribute(it,j)}function q(G,it){it=""+it,G.wholeText!==it&&(G.data=it)}function Ct(G,it){G.value=it??""}function wt(G,it,j,lt){j===null?G.style.removeProperty(it):G.style.setProperty(it,j,lt?"important":"")}function Bt(G,it,j){G.classList[j?"add":"remove"](it)}function ut(G,it,j){j===void 0&&(j=!1);var lt=document.createEvent("CustomEvent");return lt.initCustomEvent(G,j,!1,it),lt}var K;function J(G){K=G}function At(){if(!K)throw new Error("Function called outside component initialization");return K}function xt(G){At().$$.on_mount.push(G)}function mt(G){At().$$.on_destroy.push(G)}function Tt(){var G=At();return function(it,j){var lt=G.$$.callbacks[it];if(lt){var gt=ut(it,j);lt.slice().forEach(function(ft){ft.call(G,gt)})}}}function Vt(G,it){var j=this,lt=G.$$.callbacks[it.type];lt&&lt.slice().forEach(function(gt){return gt.call(j,it)})}var Nt=[],$t=[],ne=[],Ae=[],Z=Promise.resolve(),ue=!1;function qt(){ue||(ue=!0,Z.then(Ee))}function Xt(G){ne.push(G)}function Ht(G){Ae.push(G)}var oe=new Set,Kt=0;function Ee(){var G=K;do{for(;Kt<Nt.length;){var it=Nt[Kt];Kt++,J(it),be(it.$$)}for(J(null),Nt.length=0,Kt=0;$t.length;)$t.pop()();for(var j=0;j<ne.length;j+=1){var lt=ne[j];oe.has(lt)||(oe.add(lt),lt())}ne.length=0}while(Nt.length);for(;Ae.length;)Ae.pop()();ue=!1,oe.clear(),J(G)}function be(G){if(G.fragment!==null){G.update(),n(G.before_update);var it=G.dirty;G.dirty=[-1],G.fragment&&G.fragment.p(G.ctx,it),G.after_update.forEach(Xt)}}var W,U=new Set;function It(){W={r:0,c:[],p:W}}function St(){W.r||n(W.c),W=W.p}function Mt(G,it){G&&G.i&&(U.delete(G),G.i(it))}function Dt(G,it,j,lt){if(G&&G.o){if(U.has(G))return;U.add(G),W.c.push(function(){U.delete(G),lt&&(j&&G.d(1),lt())}),G.o(it)}}var te=typeof window<"u"?window:typeof globalThis<"u"?globalThis:commonjsGlobal;function Gt(G,it){Dt(G,1,1,function(){it.delete(G.key)})}function ee(G,it,j,lt,gt,ft,Lt,ie,Qe,Ie,Ze,gn){for(var ln=G.length,an=ft.length,je=ln,Mn={};je--;)Mn[G[je].key]=je;var Pn=[],Jn=new Map,kn=new Map;for(je=an;je--;){var qn=gn(gt,ft,je),vn=j(qn),Wn=Lt.get(vn);Wn?lt&&Wn.p(qn,it):(Wn=Ie(vn,qn)).c(),Jn.set(vn,Pn[je]=Wn),vn in Mn&&kn.set(vn,Math.abs(je-Mn[vn]))}var eA=new Set,On=new Set;function nA(st){Mt(st,1),st.m(ie,Ze),Lt.set(st.key,st),Ze=st.first,an--}for(;ln&&an;){var Nn=Pn[an-1],Un=G[ln-1],Hn=Nn.key,zn=Un.key;Nn===Un?(Ze=Nn.first,ln--,an--):Jn.has(zn)?!Lt.has(Hn)||eA.has(Hn)?nA(Nn):On.has(zn)?ln--:kn.get(Hn)>kn.get(zn)?(On.add(Hn),nA(Nn)):(eA.add(zn),ln--):(Qe(Un,Lt),ln--)}for(;ln--;){var H=G[ln];Jn.has(H.key)||Qe(H,Lt)}for(;an;)nA(Pn[an-1]);return Pn}function yt(G,it,j){var lt=G.$$.props[it];lt!==void 0&&(G.$$.bound[lt]=j,j(G.$$.ctx[lt]))}function dt(G){G&&G.c()}function bt(G,it,j,lt){var gt=G.$$,ft=gt.fragment,Lt=gt.on_mount,ie=gt.on_destroy,Qe=gt.after_update;ft&&ft.m(it,j),lt||Xt(function(){var Ie=Lt.map(a).filter(l);ie?ie.push.apply(ie,Ie):n(Ie),G.$$.on_mount=[]}),Qe.forEach(Xt)}function Ft(G,it){var j=G.$$;j.fragment!==null&&(n(j.on_destroy),j.fragment&&j.fragment.d(it),j.on_destroy=j.fragment=null,j.ctx=[])}function Jt(G,it){G.$$.dirty[0]===-1&&(Nt.push(G),qt(),G.$$.dirty.fill(0)),G.$$.dirty[it/31|0]|=1<<it%31}function Ut(G,it,j,lt,gt,ft,Lt,ie){ie===void 0&&(ie=[-1]);var Qe=K;J(G);var Ie=G.$$={fragment:null,ctx:null,props:ft,update:A,not_equal:gt,bound:s(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(it.context||(Qe?Qe.$$.context:[])),callbacks:s(),dirty:ie,skip_bound:!1,root:it.target||Qe.$$.root};Lt&&Lt(Ie.root);var Ze,gn=!1;if(Ie.ctx=j?j(G,it.props||{},function(an,je){var Mn=!(arguments.length<=2)&&arguments.length-2?arguments.length<=2?void 0:arguments[2]:je;return Ie.ctx&&gt(Ie.ctx[an],Ie.ctx[an]=Mn)&&(!Ie.skip_bound&&Ie.bound[an]&&Ie.bound[an](Mn),gn&&Jt(G,an)),je}):[],Ie.update(),gn=!0,n(Ie.before_update),Ie.fragment=!!lt&&lt(Ie.ctx),it.target){if(it.hydrate){var ln=(Ze=it.target,Array.from(Ze.childNodes));Ie.fragment&&Ie.fragment.l(ln),ln.forEach(F)}else Ie.fragment&&Ie.fragment.c();it.intro&&Mt(G.$$.fragment),bt(G,it.target,it.anchor,it.customElement),Ee()}J(Qe)}var de=function(){function G(){}var it=G.prototype;return it.$destroy=function(){Ft(this,1),this.$destroy=A},it.$on=function(j,lt){var gt=this.$$.callbacks[j]||(this.$$.callbacks[j]=[]);return gt.push(lt),function(){var ft=gt.indexOf(lt);ft!==-1&&gt.splice(ft,1)}},it.$set=function(j){this.$$set&&!E(j)&&(this.$$.skip_bound=!0,this.$$set(j),this.$$.skip_bound=!1)},G}()},3313:function(r,t,e){e.d(t,{U2:function(){return A.$XI},fZ:function(){return l}});var A=e(2942);function a(d,f){var E=typeof Symbol<"u"&&d[Symbol.iterator]||d["@@iterator"];if(E)return(E=E.call(d)).next.bind(E);if(Array.isArray(d)||(E=function(B,y){if(B){if(typeof B=="string")return s(B,y);var v=Object.prototype.toString.call(B).slice(8,-1);if(v==="Object"&&B.constructor&&(v=B.constructor.name),v==="Map"||v==="Set")return Array.from(B);if(v==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(v))return s(B,y)}}(d))||f){E&&(d=E);var I=0;return function(){return I>=d.length?{done:!0}:{done:!1,value:d[I++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function s(d,f){(f==null||f>d.length)&&(f=d.length);for(var E=0,I=new Array(f);E<f;E++)I[E]=d[E];return I}var n=[];function l(d,f){var E;f===void 0&&(f=A.ZTd);var I=new Set;function B(y){if((0,A.N8)(d,y)&&(d=y,E)){for(var v,S=!n.length,_=a(I);!(v=_()).done;){var Q=v.value;Q[1](),n.push(Q,d)}if(S){for(var D=0;D<n.length;D+=2)n[D][0](n[D+1]);n.length=0}}}return{set:B,update:function(y){B(y(d))},subscribe:function(y,v){v===void 0&&(v=A.ZTd);var S=[y,v];return I.add(S),I.size===1&&(E=f(B)||A.ZTd),y(d),function(){I.delete(S),I.size===0&&(E(),E=null)}}}}}},__webpack_module_cache__={};function __webpack_require__(r){var t=__webpack_module_cache__[r];if(t!==void 0)return t.exports;var e=__webpack_module_cache__[r]={id:r,exports:{}};return __webpack_modules__[r](e,e.exports,__webpack_require__),e.exports}__webpack_require__.n=function(r){var t=r&&r.__esModule?function(){return r.default}:function(){return r};return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=function(r,t){for(var e in t)__webpack_require__.o(t,e)&&!__webpack_require__.o(r,e)&&Object.defineProperty(r,e,{enumerable:!0,get:t[e]})},__webpack_require__.g=function(){if(typeof globalThis=="object")return globalThis;try{return this||new Function("return this")()}catch{if(typeof window=="object")return window}}(),__webpack_require__.o=function(r,t){return Object.prototype.hasOwnProperty.call(r,t)};var __webpack_exports__={};return function(){__webpack_require__.d(__webpack_exports__,{default:function(){return ba}}),__webpack_require__(5441),__webpack_require__(8765);var r=__webpack_require__(4296),t=__webpack_require__(5103),e={one:function(h,u){u===void 0&&(u=document);try{return u.querySelector(h)||void 0}catch{return}},all:function(h,u){u===void 0&&(u=document);try{var o=u.querySelectorAll(h);return[].slice.call(o)}catch{return[]}},addClass:function(h,u){if(h)for(var o=(0,t.kJ)(h)?h:[h],c=0;c<o.length;c++){var g=(o[c].className||"").split(" ");g.indexOf(u)>-1||(g.push(u),o[c].className=g.join(" "))}},removeClass:function(h,u){if(h)for(var o=(0,t.kJ)(h)?h:[h],c=0;c<o.length;c++){for(var g=o[c].className.split(" "),p=0;p<g.length;p++)g[p]==u&&(g[p]="");o[c].className=g.join(" ").trim()}},hasClass:function(h,u){return!(!h||!h.classList)&&h.classList.contains(u)},bind:function(h,u,o,c){c===void 0&&(c=!1),h&&((0,t.kJ)(h)?h:[h]).forEach(function(g){g.addEventListener(u,o,!!c)})},delegate:function(h,u,o,c){h&&h.addEventListener(u,function(g){var p=e.all(o,h);if(p)t:for(var C=0;C<p.length;C++)for(var w=g.target;w;){if(w==p[C]){c.call(w,g,w);break t}if((w=w.parentNode)==h)break}},!1)},removeChildren:function(h){for(;h.firstChild;)h.removeChild(h.lastChild);return h}},A=e,a=__webpack_require__(6464),s=__webpack_require__(6881),n=__webpack_require__(2942),l=__webpack_require__(7003),d=__webpack_require__(3379),f=__webpack_require__.n(d),E=__webpack_require__(7795),I=__webpack_require__.n(E),B=__webpack_require__(569),y=__webpack_require__.n(B),v=__webpack_require__(3565),S=__webpack_require__.n(v),_=__webpack_require__(9216),Q=__webpack_require__.n(_),D=__webpack_require__(4589),b=__webpack_require__.n(D),T=__webpack_require__(7558),P={};T.Z&&T.Z.locals&&(P.locals=T.Z.locals);var R,F=0,O={};O.styleTagTransform=b(),O.setAttributes=S(),O.insert=y().bind(null,"head"),O.domAPI=I(),O.insertStyleElement=Q(),P.use=function(h){return O.options=h||{},F++||(R=f()(T.Z,O)),P},P.unuse=function(){F>0&&!--F&&(R(),R=null)};var N=P;function L(h){var u,o,c,g;return{c:function(){u=(0,n.bGB)("div"),o=(0,n.fLW)("vConsole"),(0,n.Ljt)(u,"class","vc-switch"),(0,n.czc)(u,"right",h[2].x+"px"),(0,n.czc)(u,"bottom",h[2].y+"px"),(0,n.czc)(u,"display",h[0]?"block":"none")},m:function(p,C){(0,n.$Tr)(p,u,C),(0,n.R3I)(u,o),h[8](u),c||(g=[(0,n.oLt)(u,"touchstart",h[3],{passive:!1}),(0,n.oLt)(u,"touchend",h[4],{passive:!1}),(0,n.oLt)(u,"touchmove",h[5],{passive:!1}),(0,n.oLt)(u,"click",h[7])],c=!0)},p:function(p,C){var w=C[0];4&w&&(0,n.czc)(u,"right",p[2].x+"px"),4&w&&(0,n.czc)(u,"bottom",p[2].y+"px"),1&w&&(0,n.czc)(u,"display",p[0]?"block":"none")},i:n.ZTd,o:n.ZTd,d:function(p){p&&(0,n.ogt)(u),h[8](null),c=!1,(0,n.j7q)(g)}}}function Y(h,u,o){var c,g=u.show,p=g===void 0||g,C=u.position,w=C===void 0?{x:0,y:0}:C,M={hasMoved:!1,x:0,y:0,startX:0,startY:0,endX:0,endY:0},k={x:0,y:0};(0,l.H3)(function(){N.use()}),(0,l.ev)(function(){N.unuse()});var z=function(V,ot){var nt=X(V,ot);V=nt[0],ot=nt[1],M.x=V,M.y=ot,o(2,k.x=V,k),o(2,k.y=ot,k),t.po("switch_x",V+""),t.po("switch_y",ot+"")},X=function(V,ot){var nt=Math.max(document.documentElement.offsetWidth,window.innerWidth),Et=Math.max(document.documentElement.offsetHeight,window.innerHeight);return V+c.offsetWidth>nt&&(V=nt-c.offsetWidth),ot+c.offsetHeight>Et&&(ot=Et-c.offsetHeight),V<0&&(V=0),ot<20&&(ot=20),[V,ot]};return h.$$set=function(V){"show"in V&&o(0,p=V.show),"position"in V&&o(6,w=V.position)},h.$$.update=function(){66&h.$$.dirty&&c&&z(w.x,w.y)},[p,c,k,function(V){M.startX=V.touches[0].pageX,M.startY=V.touches[0].pageY,M.hasMoved=!1},function(V){M.hasMoved&&(M.startX=0,M.startY=0,M.hasMoved=!1,z(M.endX,M.endY))},function(V){if(!(V.touches.length<=0)){var ot=V.touches[0].pageX-M.startX,nt=V.touches[0].pageY-M.startY,Et=Math.floor(M.x-ot),Qt=Math.floor(M.y-nt),Rt=X(Et,Qt);Et=Rt[0],Qt=Rt[1],o(2,k.x=Et,k),o(2,k.y=Qt,k),M.endX=Et,M.endY=Qt,M.hasMoved=!0,V.preventDefault()}},w,function(V){n.cKT.call(this,h,V)},function(V){n.VnY[V?"unshift":"push"](function(){o(1,c=V)})}]}var rt=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,Y,L,n.N8,{show:0,position:6}),c}return(0,s.Z)(u,h),(0,r.Z)(u,[{key:"show",get:function(){return this.$$.ctx[0]},set:function(o){this.$$set({show:o}),(0,n.yl1)()}},{key:"position",get:function(){return this.$$.ctx[6]},set:function(o){this.$$set({position:o}),(0,n.yl1)()}}]),u}(n.f_C),tt=rt;function at(h){var u,o;return{c:function(){u=(0,n.bGB)("div"),(0,n.Ljt)(u,"id",o="__vc_plug_"+h[0]),(0,n.Ljt)(u,"class","vc-plugin-box"),(0,n.VHj)(u,"vc-fixed-height",h[1]),(0,n.VHj)(u,"vc-actived",h[2])},m:function(c,g){(0,n.$Tr)(c,u,g),h[6](u)},p:function(c,g){var p=g[0];1&p&&o!==(o="__vc_plug_"+c[0])&&(0,n.Ljt)(u,"id",o),2&p&&(0,n.VHj)(u,"vc-fixed-height",c[1]),4&p&&(0,n.VHj)(u,"vc-actived",c[2])},i:n.ZTd,o:n.ZTd,d:function(c){c&&(0,n.ogt)(u),h[6](null)}}}function pt(h,u,o){var c=u.pluginId,g=c===void 0?"":c,p=u.fixedHeight,C=p!==void 0&&p,w=u.actived,M=w!==void 0&&w,k=u.content,z=k===void 0?void 0:k,X=void 0,V=void 0;return h.$$set=function(ot){"pluginId"in ot&&o(0,g=ot.pluginId),"fixedHeight"in ot&&o(1,C=ot.fixedHeight),"actived"in ot&&o(2,M=ot.actived),"content"in ot&&o(4,z=ot.content)},h.$$.update=function(){57&h.$$.dirty&&V!==g&&z&&X&&(o(5,V=g),o(3,X.innerHTML="",X),(0,t.HD)(z)?o(3,X.innerHTML=z,X):(0,t.kK)(z)&&X.appendChild(z))},[g,C,M,X,z,V,function(ot){n.VnY[ot?"unshift":"push"](function(){o(3,X=ot),o(5,V),o(0,g),o(4,z)})}]}var ct=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,pt,at,n.N8,{pluginId:0,fixedHeight:1,actived:2,content:4}),c}return(0,s.Z)(u,h),(0,r.Z)(u,[{key:"pluginId",get:function(){return this.$$.ctx[0]},set:function(o){this.$$set({pluginId:o}),(0,n.yl1)()}},{key:"fixedHeight",get:function(){return this.$$.ctx[1]},set:function(o){this.$$set({fixedHeight:o}),(0,n.yl1)()}},{key:"actived",get:function(){return this.$$.ctx[2]},set:function(o){this.$$set({actived:o}),(0,n.yl1)()}},{key:"content",get:function(){return this.$$.ctx[4]},set:function(o){this.$$set({content:o}),(0,n.yl1)()}}]),u}(n.f_C),$=ct,q=__webpack_require__(4687),Ct=__webpack_require__(3283),wt={};Ct.Z&&Ct.Z.locals&&(wt.locals=Ct.Z.locals);var Bt,ut=0,K={};K.styleTagTransform=b(),K.setAttributes=S(),K.insert=y().bind(null,"head"),K.domAPI=I(),K.insertStyleElement=Q(),wt.use=function(h){return K.options=h||{},ut++||(Bt=f()(Ct.Z,K)),wt},wt.unuse=function(){ut>0&&!--ut&&(Bt(),Bt=null)};var J=wt;function At(h,u,o){var c=h.slice();return c[39]=u[o][0],c[40]=u[o][1],c}function xt(h,u,o){var c=h.slice();return c[43]=u[o],c[45]=o,c}function mt(h,u,o){var c=h.slice();return c[39]=u[o][0],c[40]=u[o][1],c}function Tt(h,u,o){var c=h.slice();return c[39]=u[o][0],c[40]=u[o][1],c}function Vt(h,u,o){var c=h.slice();return c[43]=u[o],c[45]=o,c}function Nt(h,u,o){var c=h.slice();return c[39]=u[o][0],c[40]=u[o][1],c}function $t(h){var u,o,c,g,p,C=h[40].name+"";function w(){return h[25](h[40])}return{c:function(){u=(0,n.bGB)("a"),o=(0,n.fLW)(C),(0,n.Ljt)(u,"class","vc-tab"),(0,n.Ljt)(u,"id",c="__vc_tab_"+h[40].id),(0,n.VHj)(u,"vc-actived",h[40].id===h[2])},m:function(M,k){(0,n.$Tr)(M,u,k),(0,n.R3I)(u,o),g||(p=(0,n.oLt)(u,"click",w),g=!0)},p:function(M,k){h=M,8&k[0]&&C!==(C=h[40].name+"")&&(0,n.rTO)(o,C),8&k[0]&&c!==(c="__vc_tab_"+h[40].id)&&(0,n.Ljt)(u,"id",c),12&k[0]&&(0,n.VHj)(u,"vc-actived",h[40].id===h[2])},d:function(M){M&&(0,n.ogt)(u),g=!1,p()}}}function ne(h){var u,o=h[40].hasTabPanel&&$t(h);return{c:function(){o&&o.c(),u=(0,n.cSb)()},m:function(c,g){o&&o.m(c,g),(0,n.$Tr)(c,u,g)},p:function(c,g){c[40].hasTabPanel?o?o.p(c,g):((o=$t(c)).c(),o.m(u.parentNode,u)):o&&(o.d(1),o=null)},d:function(c){o&&o.d(c),c&&(0,n.ogt)(u)}}}function Ae(h){var u,o,c,g,p,C=h[43].name+"";function w(){for(var M,k=arguments.length,z=new Array(k),X=0;X<k;X++)z[X]=arguments[X];return(M=h)[26].apply(M,[h[40],h[45]].concat(z))}return{c:function(){u=(0,n.bGB)("i"),o=(0,n.fLW)(C),(0,n.Ljt)(u,"class",c="vc-toptab vc-topbar-"+h[40].id+" "+h[43].className),(0,n.VHj)(u,"vc-toggle",h[40].id===h[2]),(0,n.VHj)(u,"vc-actived",h[43].actived)},m:function(M,k){(0,n.$Tr)(M,u,k),(0,n.R3I)(u,o),g||(p=(0,n.oLt)(u,"click",w),g=!0)},p:function(M,k){h=M,8&k[0]&&C!==(C=h[43].name+"")&&(0,n.rTO)(o,C),8&k[0]&&c!==(c="vc-toptab vc-topbar-"+h[40].id+" "+h[43].className)&&(0,n.Ljt)(u,"class",c),12&k[0]&&(0,n.VHj)(u,"vc-toggle",h[40].id===h[2]),8&k[0]&&(0,n.VHj)(u,"vc-actived",h[43].actived)},d:function(M){M&&(0,n.ogt)(u),g=!1,p()}}}function Z(h){for(var u,o=h[40].topbarList,c=[],g=0;g<o.length;g+=1)c[g]=Ae(Vt(h,o,g));return{c:function(){for(var p=0;p<c.length;p+=1)c[p].c();u=(0,n.cSb)()},m:function(p,C){for(var w=0;w<c.length;w+=1)c[w].m(p,C);(0,n.$Tr)(p,u,C)},p:function(p,C){if(8204&C[0]){var w;for(o=p[40].topbarList,w=0;w<o.length;w+=1){var M=Vt(p,o,w);c[w]?c[w].p(M,C):(c[w]=Ae(M),c[w].c(),c[w].m(u.parentNode,u))}for(;w<c.length;w+=1)c[w].d(1);c.length=o.length}},d:function(p){(0,n.RMB)(c,p),p&&(0,n.ogt)(u)}}}function ue(h){var u,o,c,g=$;function p(C){var w;return{props:{pluginId:C[40].id,fixedHeight:(w=C[40].tabOptions)==null?void 0:w.fixedHeight,actived:C[40].id===C[2],content:C[40].content}}}return g&&(u=new g(p(h))),{c:function(){u&&(0,n.YCL)(u.$$.fragment),o=(0,n.cSb)()},m:function(C,w){u&&(0,n.yef)(u,C,w),(0,n.$Tr)(C,o,w),c=!0},p:function(C,w){var M,k={};if(8&w[0]&&(k.pluginId=C[40].id),8&w[0]&&(k.fixedHeight=(M=C[40].tabOptions)==null?void 0:M.fixedHeight),12&w[0]&&(k.actived=C[40].id===C[2]),8&w[0]&&(k.content=C[40].content),g!==(g=$)){if(u){(0,n.dvw)();var z=u;(0,n.etI)(z.$$.fragment,1,0,function(){(0,n.vpE)(z,1)}),(0,n.gbL)()}g?(u=new g(p(C)),(0,n.YCL)(u.$$.fragment),(0,n.Ui)(u.$$.fragment,1),(0,n.yef)(u,o.parentNode,o)):u=null}else g&&u.$set(k)},i:function(C){c||(u&&(0,n.Ui)(u.$$.fragment,C),c=!0)},o:function(C){u&&(0,n.etI)(u.$$.fragment,C),c=!1},d:function(C){C&&(0,n.ogt)(o),u&&(0,n.vpE)(u,C)}}}function qt(h){var u,o,c,g,p,C=h[43].name+"";function w(){for(var M,k=arguments.length,z=new Array(k),X=0;X<k;X++)z[X]=arguments[X];return(M=h)[28].apply(M,[h[40],h[45]].concat(z))}return{c:function(){u=(0,n.bGB)("i"),o=(0,n.fLW)(C),(0,n.Ljt)(u,"class",c="vc-tool vc-tool-"+h[40].id),(0,n.VHj)(u,"vc-global-tool",h[43].global),(0,n.VHj)(u,"vc-toggle",h[40].id===h[2])},m:function(M,k){(0,n.$Tr)(M,u,k),(0,n.R3I)(u,o),g||(p=(0,n.oLt)(u,"click",w),g=!0)},p:function(M,k){h=M,8&k[0]&&C!==(C=h[43].name+"")&&(0,n.rTO)(o,C),8&k[0]&&c!==(c="vc-tool vc-tool-"+h[40].id)&&(0,n.Ljt)(u,"class",c),8&k[0]&&(0,n.VHj)(u,"vc-global-tool",h[43].global),12&k[0]&&(0,n.VHj)(u,"vc-toggle",h[40].id===h[2])},d:function(M){M&&(0,n.ogt)(u),g=!1,p()}}}function Xt(h){for(var u,o=h[40].toolbarList,c=[],g=0;g<o.length;g+=1)c[g]=qt(xt(h,o,g));return{c:function(){for(var p=0;p<c.length;p+=1)c[p].c();u=(0,n.cSb)()},m:function(p,C){for(var w=0;w<c.length;w+=1)c[w].m(p,C);(0,n.$Tr)(p,u,C)},p:function(p,C){if(16396&C[0]){var w;for(o=p[40].toolbarList,w=0;w<o.length;w+=1){var M=xt(p,o,w);c[w]?c[w].p(M,C):(c[w]=qt(M),c[w].c(),c[w].m(u.parentNode,u))}for(;w<c.length;w+=1)c[w].d(1);c.length=o.length}},d:function(p){(0,n.RMB)(c,p),p&&(0,n.ogt)(u)}}}function Ht(h){var u,o,c,g,p,C,w,M,k,z,X,V,ot,nt,Et,Qt,Rt,kt,zt,pe,se;function Re(ae){h[23](ae)}function Te(ae){h[24](ae)}var Ne={};h[0]!==void 0&&(Ne.show=h[0]),h[1]!==void 0&&(Ne.position=h[1]),o=new tt({props:Ne}),n.VnY.push(function(){return(0,n.akz)(o,"show",Re)}),n.VnY.push(function(){return(0,n.akz)(o,"position",Te)}),o.$on("click",h[10]);for(var le=Object.entries(h[3]),he=[],ke=0;ke<le.length;ke+=1)he[ke]=ne(Nt(h,le,ke));for(var An=Object.entries(h[3]),Ge=[],Le=0;Le<An.length;Le+=1)Ge[Le]=Z(Tt(h,An,Le));for(var ye=Object.entries(h[3]),Yt=[],Zt=0;Zt<ye.length;Zt+=1)Yt[Zt]=ue(mt(h,ye,Zt));for(var He=function(ae){return(0,n.etI)(Yt[ae],1,1,function(){Yt[ae]=null})},Pt=Object.entries(h[3]),ce=[],we=0;we<Pt.length;we+=1)ce[we]=Xt(At(h,Pt,we));return{c:function(){var ae,Se;u=(0,n.bGB)("div"),(0,n.YCL)(o.$$.fragment),p=(0,n.DhX)(),C=(0,n.bGB)("div"),w=(0,n.DhX)(),M=(0,n.bGB)("div"),k=(0,n.bGB)("div");for(var We=0;We<he.length;We+=1)he[We].c();z=(0,n.DhX)(),X=(0,n.bGB)("div");for(var en=0;en<Ge.length;en+=1)Ge[en].c();V=(0,n.DhX)(),ot=(0,n.bGB)("div");for(var on=0;on<Yt.length;on+=1)Yt[on].c();nt=(0,n.DhX)(),Et=(0,n.bGB)("div");for(var ze=0;ze<ce.length;ze+=1)ce[ze].c();Qt=(0,n.DhX)(),(Rt=(0,n.bGB)("i")).textContent="Hide",(0,n.Ljt)(C,"class","vc-mask"),(0,n.czc)(C,"display",h[8]?"block":"none"),(0,n.Ljt)(k,"class","vc-tabbar"),(0,n.Ljt)(X,"class","vc-topbar"),(0,n.Ljt)(ot,"class","vc-content"),(0,n.VHj)(ot,"vc-has-topbar",((ae=h[3][h[2]])==null||(Se=ae.topbarList)==null?void 0:Se.length)>0),(0,n.Ljt)(Rt,"class","vc-tool vc-global-tool vc-tool-last vc-hide"),(0,n.Ljt)(Et,"class","vc-toolbar"),(0,n.Ljt)(M,"class","vc-panel"),(0,n.czc)(M,"display",h[7]?"block":"none"),(0,n.Ljt)(u,"id","__vconsole"),(0,n.Ljt)(u,"style",kt=h[5]?"font-size:"+h[5]+";":""),(0,n.Ljt)(u,"data-theme",h[4]),(0,n.VHj)(u,"vc-toggle",h[6])},m:function(ae,Se){(0,n.$Tr)(ae,u,Se),(0,n.yef)(o,u,null),(0,n.R3I)(u,p),(0,n.R3I)(u,C),(0,n.R3I)(u,w),(0,n.R3I)(u,M),(0,n.R3I)(M,k);for(var We=0;We<he.length;We+=1)he[We].m(k,null);(0,n.R3I)(M,z),(0,n.R3I)(M,X);for(var en=0;en<Ge.length;en+=1)Ge[en].m(X,null);(0,n.R3I)(M,V),(0,n.R3I)(M,ot);for(var on=0;on<Yt.length;on+=1)Yt[on].m(ot,null);h[27](ot),(0,n.R3I)(M,nt),(0,n.R3I)(M,Et);for(var ze=0;ze<ce.length;ze+=1)ce[ze].m(Et,null);(0,n.R3I)(Et,Qt),(0,n.R3I)(Et,Rt),zt=!0,pe||(se=[(0,n.oLt)(C,"click",h[11]),(0,n.oLt)(ot,"touchstart",h[15]),(0,n.oLt)(ot,"touchmove",h[16]),(0,n.oLt)(ot,"touchend",h[17]),(0,n.oLt)(ot,"scroll",h[18]),(0,n.oLt)(Rt,"click",h[11]),(0,n.oLt)(u,"touchstart",h[19].touchStart,{passive:!1,capture:!0}),(0,n.oLt)(u,"touchmove",h[19].touchMove,{passive:!1,capture:!0}),(0,n.oLt)(u,"touchend",h[19].touchEnd,{passive:!1,capture:!0})],pe=!0)},p:function(ae,Se){var We,en,on={};if(!c&&1&Se[0]&&(c=!0,on.show=ae[0],(0,n.hjT)(function(){return c=!1})),!g&&2&Se[0]&&(g=!0,on.position=ae[1],(0,n.hjT)(function(){return g=!1})),o.$set(on),(!zt||256&Se[0])&&(0,n.czc)(C,"display",ae[8]?"block":"none"),4108&Se[0]){var ze;for(le=Object.entries(ae[3]),ze=0;ze<le.length;ze+=1){var wn=Nt(ae,le,ze);he[ze]?he[ze].p(wn,Se):(he[ze]=ne(wn),he[ze].c(),he[ze].m(k,null))}for(;ze<he.length;ze+=1)he[ze].d(1);he.length=le.length}if(8204&Se[0]){var cn;for(An=Object.entries(ae[3]),cn=0;cn<An.length;cn+=1){var Sn=Tt(ae,An,cn);Ge[cn]?Ge[cn].p(Sn,Se):(Ge[cn]=Z(Sn),Ge[cn].c(),Ge[cn].m(X,null))}for(;cn<Ge.length;cn+=1)Ge[cn].d(1);Ge.length=An.length}if(12&Se[0]){var $e;for(ye=Object.entries(ae[3]),$e=0;$e<ye.length;$e+=1){var Rn=mt(ae,ye,$e);Yt[$e]?(Yt[$e].p(Rn,Se),(0,n.Ui)(Yt[$e],1)):(Yt[$e]=ue(Rn),Yt[$e].c(),(0,n.Ui)(Yt[$e],1),Yt[$e].m(ot,null))}for((0,n.dvw)(),$e=ye.length;$e<Yt.length;$e+=1)He($e);(0,n.gbL)()}if(12&Se[0]&&(0,n.VHj)(ot,"vc-has-topbar",((We=ae[3][ae[2]])==null||(en=We.topbarList)==null?void 0:en.length)>0),16396&Se[0]){var rn;for(Pt=Object.entries(ae[3]),rn=0;rn<Pt.length;rn+=1){var Vn=At(ae,Pt,rn);ce[rn]?ce[rn].p(Vn,Se):(ce[rn]=Xt(Vn),ce[rn].c(),ce[rn].m(Et,Qt))}for(;rn<ce.length;rn+=1)ce[rn].d(1);ce.length=Pt.length}(!zt||128&Se[0])&&(0,n.czc)(M,"display",ae[7]?"block":"none"),(!zt||32&Se[0]&&kt!==(kt=ae[5]?"font-size:"+ae[5]+";":""))&&(0,n.Ljt)(u,"style",kt),(!zt||16&Se[0])&&(0,n.Ljt)(u,"data-theme",ae[4]),64&Se[0]&&(0,n.VHj)(u,"vc-toggle",ae[6])},i:function(ae){if(!zt){(0,n.Ui)(o.$$.fragment,ae);for(var Se=0;Se<ye.length;Se+=1)(0,n.Ui)(Yt[Se]);zt=!0}},o:function(ae){(0,n.etI)(o.$$.fragment,ae),Yt=Yt.filter(Boolean);for(var Se=0;Se<Yt.length;Se+=1)(0,n.etI)(Yt[Se]);zt=!1},d:function(ae){ae&&(0,n.ogt)(u),(0,n.vpE)(o),(0,n.RMB)(he,ae),(0,n.RMB)(Ge,ae),(0,n.RMB)(Yt,ae),h[27](null),(0,n.RMB)(ce,ae),pe=!1,(0,n.j7q)(se)}}}function oe(h,u,o){var c,g,p=u.theme,C=p===void 0?"":p,w=u.disableScrolling,M=w!==void 0&&w,k=u.show,z=k!==void 0&&k,X=u.showSwitchButton,V=X===void 0||X,ot=u.switchButtonPosition,nt=ot===void 0?{x:0,y:0}:ot,Et=u.activedPluginId,Qt=Et===void 0?"":Et,Rt=u.pluginList,kt=Rt===void 0?{}:Rt,zt=(0,l.x)(),pe=!1,se="",Re=!1,Te=!1,Ne=!1,le=!0,he=0,ke=null,An={};(0,l.H3)(function(){var Pt=document.querySelectorAll('[name="viewport"]');if(Pt&&Pt[0]){var ce=(Pt[Pt.length-1].getAttribute("content")||"").match(/initial\-scale\=\d+(\.\d+)?/),we=ce?parseFloat(ce[0].split("=")[1]):1;we!==1&&o(5,se=Math.floor(1/we*13)+"px")}J.use&&J.use(),c=q.x.subscribe(function(ae){z&&he!==ae.updateTime&&(he=ae.updateTime,Ge())})}),(0,l.ev)(function(){J.unuse&&J.unuse(),c&&c()});var Ge=function(){!M&&le&&g&&o(9,g.scrollTop=g.scrollHeight-g.offsetHeight,g)},Le=function(Pt){Pt!==Qt&&(o(2,Qt=Pt),zt("changePanel",{pluginId:Pt}),setTimeout(function(){g&&o(9,g.scrollTop=An[Qt]||0,g)},0))},ye=function(Pt,ce,we){var ae=kt[ce].topbarList[we],Se=!0;if(t.mf(ae.onClick)&&(Se=ae.onClick.call(Pt.target,Pt,ae.data)),Se!==!1){for(var We=0;We<kt[ce].topbarList.length;We++)o(3,kt[ce].topbarList[We].actived=we===We,kt);o(3,kt)}},Yt=function(Pt,ce,we){var ae=kt[ce].toolbarList[we];t.mf(ae.onClick)&&ae.onClick.call(Pt.target,Pt,ae.data)},Zt={tapTime:700,tapBoundary:10,lastTouchStartTime:0,touchstartX:0,touchstartY:0,touchHasMoved:!1,targetElem:null},He={touchStart:function(Pt){if(Zt.lastTouchStartTime===0){var ce=Pt.targetTouches[0];Zt.touchstartX=ce.pageX,Zt.touchstartY=ce.pageY,Zt.lastTouchStartTime=Pt.timeStamp,Zt.targetElem=Pt.target.nodeType===Node.TEXT_NODE?Pt.target.parentNode:Pt.target}},touchMove:function(Pt){var ce=Pt.changedTouches[0];(Math.abs(ce.pageX-Zt.touchstartX)>Zt.tapBoundary||Math.abs(ce.pageY-Zt.touchstartY)>Zt.tapBoundary)&&(Zt.touchHasMoved=!0)},touchEnd:function(Pt){if(Zt.touchHasMoved===!1&&Pt.timeStamp-Zt.lastTouchStartTime<Zt.tapTime&&Zt.targetElem!=null){var ce=!1;switch(Zt.targetElem.tagName.toLowerCase()){case"textarea":ce=!0;break;case"select":ce=!Zt.targetElem.disabled&&!Zt.targetElem.readOnly;break;case"input":switch(Zt.targetElem.type){case"button":case"checkbox":case"file":case"image":case"radio":case"submit":ce=!1;break;default:ce=!Zt.targetElem.disabled&&!Zt.targetElem.readOnly}}ce?Zt.targetElem.focus():Pt.preventDefault();var we=Pt.changedTouches[0],ae=new MouseEvent("click",{bubbles:!0,cancelable:!0,view:window,screenX:we.screenX,screenY:we.screenY,clientX:we.clientX,clientY:we.clientY});Zt.targetElem.dispatchEvent(ae)}Zt.lastTouchStartTime=0,Zt.touchHasMoved=!1,Zt.targetElem=null}};return h.$$set=function(Pt){"theme"in Pt&&o(4,C=Pt.theme),"disableScrolling"in Pt&&o(20,M=Pt.disableScrolling),"show"in Pt&&o(21,z=Pt.show),"showSwitchButton"in Pt&&o(0,V=Pt.showSwitchButton),"switchButtonPosition"in Pt&&o(1,nt=Pt.switchButtonPosition),"activedPluginId"in Pt&&o(2,Qt=Pt.activedPluginId),"pluginList"in Pt&&o(3,kt=Pt.pluginList)},h.$$.update=function(){6291456&h.$$.dirty[0]&&(z===!0?(o(7,Te=!0),o(8,Ne=!0),ke&&clearTimeout(ke),o(22,ke=setTimeout(function(){o(6,Re=!0),Ge()},10))):(o(6,Re=!1),ke&&clearTimeout(ke),o(22,ke=setTimeout(function(){o(7,Te=!1),o(8,Ne=!1)},330))))},[V,nt,Qt,kt,C,se,Re,Te,Ne,g,function(Pt){zt("show",{show:!0})},function(Pt){zt("show",{show:!1})},Le,ye,Yt,function(Pt){if(!(Pt.target.tagName==="INPUT"||Pt.target.tagName==="TEXTAREA")){var ce=!1;if(typeof window.getComputedStyle=="function"){var we=window.getComputedStyle(Pt.target);we.overflow!=="auto"&&we.overflow!=="initial"&&we.overflow!=="scroll"||(ce=!0)}if(!ce){var ae=g.scrollTop,Se=g.scrollHeight,We=ae+g.offsetHeight;ae===0?(o(9,g.scrollTop=1,g),g.scrollTop===0&&(pe=!0)):We===Se&&(o(9,g.scrollTop=ae-1,g),g.scrollTop===ae&&(pe=!0))}}},function(Pt){pe&&Pt.preventDefault()},function(Pt){pe=!1},function(Pt){z&&(le=g.scrollTop+g.offsetHeight>=g.scrollHeight-50,An[Qt]=g.scrollTop)},He,M,z,ke,function(Pt){o(0,V=Pt)},function(Pt){o(1,nt=Pt)},function(Pt){return Le(Pt.id)},function(Pt,ce,we){return ye(we,Pt.id,ce)},function(Pt){n.VnY[Pt?"unshift":"push"](function(){o(9,g=Pt)})},function(Pt,ce,we){return Yt(we,Pt.id,ce)}]}var Kt=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,oe,Ht,n.N8,{theme:4,disableScrolling:20,show:21,showSwitchButton:0,switchButtonPosition:1,activedPluginId:2,pluginList:3},null,[-1,-1]),c}return(0,s.Z)(u,h),(0,r.Z)(u,[{key:"theme",get:function(){return this.$$.ctx[4]},set:function(o){this.$$set({theme:o}),(0,n.yl1)()}},{key:"disableScrolling",get:function(){return this.$$.ctx[20]},set:function(o){this.$$set({disableScrolling:o}),(0,n.yl1)()}},{key:"show",get:function(){return this.$$.ctx[21]},set:function(o){this.$$set({show:o}),(0,n.yl1)()}},{key:"showSwitchButton",get:function(){return this.$$.ctx[0]},set:function(o){this.$$set({showSwitchButton:o}),(0,n.yl1)()}},{key:"switchButtonPosition",get:function(){return this.$$.ctx[1]},set:function(o){this.$$set({switchButtonPosition:o}),(0,n.yl1)()}},{key:"activedPluginId",get:function(){return this.$$.ctx[2]},set:function(o){this.$$set({activedPluginId:o}),(0,n.yl1)()}},{key:"pluginList",get:function(){return this.$$.ctx[3]},set:function(o){this.$$set({pluginList:o}),(0,n.yl1)()}}]),u}(n.f_C),Ee=Kt,be=function(){function h(o,c){c===void 0&&(c="newPlugin"),this.isReady=!1,this.eventMap=new Map,this.exporter=void 0,this._id=void 0,this._name=void 0,this._vConsole=void 0,this.id=o,this.name=c,this.isReady=!1}var u=h.prototype;return u.on=function(o,c){return this.eventMap.set(o,c),this},u.onRemove=function(){this.unbindExporter()},u.trigger=function(o,c){var g=this.eventMap.get(o);if(typeof g=="function")g.call(this,c);else{var p="on"+o.charAt(0).toUpperCase()+o.slice(1);typeof this[p]=="function"&&this[p].call(this,c)}return this},u.bindExporter=function(){if(this._vConsole&&this.exporter){var o=this.id==="default"?"log":this.id;this._vConsole[o]=this.exporter}},u.unbindExporter=function(){var o=this.id==="default"?"log":this.id;this._vConsole&&this._vConsole[o]&&(this._vConsole[o]=void 0)},u.getUniqueID=function(o){return o===void 0&&(o=""),(0,t.QI)(o)},(0,r.Z)(h,[{key:"id",get:function(){return this._id},set:function(o){if(typeof o!="string")throw"[vConsole] Plugin ID must be a string.";if(!o)throw"[vConsole] Plugin ID cannot be empty.";this._id=o.toLowerCase()}},{key:"name",get:function(){return this._name},set:function(o){if(typeof o!="string")throw"[vConsole] Plugin name must be a string.";if(!o)throw"[vConsole] Plugin name cannot be empty.";this._name=o}},{key:"vConsole",get:function(){return this._vConsole||void 0},set:function(o){if(!o)throw"[vConsole] vConsole cannot be empty";this._vConsole=o,this.bindExporter()}}]),h}(),W=function(h){function u(c,g,p,C){var w;return(w=h.call(this,c,g)||this).CompClass=void 0,w.compInstance=void 0,w.initialProps=void 0,w.CompClass=p,w.initialProps=C,w}(0,s.Z)(u,h);var o=u.prototype;return o.onReady=function(){this.isReady=!0},o.onRenderTab=function(c){var g=document.createElement("div"),p=this.compInstance=new this.CompClass({target:g,props:this.initialProps});c(g.firstElementChild,p.options)},o.onRemove=function(){h.prototype.onRemove&&h.prototype.onRemove.call(this),this.compInstance&&this.compInstance.$destroy()},u}(be),U=__webpack_require__(8665),It=__webpack_require__(9923),St=__webpack_require__(8702);function Mt(h){var u,o;return(u=new St.Z({props:{name:h[0]?"success":"copy"}})).$on("click",h[1]),{c:function(){(0,n.YCL)(u.$$.fragment)},m:function(c,g){(0,n.yef)(u,c,g),o=!0},p:function(c,g){var p={};1&g[0]&&(p.name=c[0]?"success":"copy"),u.$set(p)},i:function(c){o||((0,n.Ui)(u.$$.fragment,c),o=!0)},o:function(c){(0,n.etI)(u.$$.fragment,c),o=!1},d:function(c){(0,n.vpE)(u,c)}}}function Dt(h,u,o){var c=u.content,g=c===void 0?"":c,p=u.handler,C=p===void 0?void 0:p,w={target:document.documentElement},M=!1;return h.$$set=function(k){"content"in k&&o(2,g=k.content),"handler"in k&&o(3,C=k.handler)},[M,function(k){(function(z,X){var V=(X===void 0?{}:X).target,ot=V===void 0?document.body:V,nt=document.createElement("textarea"),Et=document.activeElement;nt.value=z,nt.setAttribute("readonly",""),nt.style.contain="strict",nt.style.position="absolute",nt.style.left="-9999px",nt.style.fontSize="12pt";var Qt=document.getSelection(),Rt=!1;Qt.rangeCount>0&&(Rt=Qt.getRangeAt(0)),ot.append(nt),nt.select(),nt.selectionStart=0,nt.selectionEnd=z.length;var kt=!1;try{kt=document.execCommand("copy")}catch{}nt.remove(),Rt&&(Qt.removeAllRanges(),Qt.addRange(Rt)),Et&&Et.focus()})(t.mf(C)?C(g)||"":t.Kn(g)||t.kJ(g)?t.hZ(g,{maxDepth:10,keyMaxLen:1e4,pretty:!1,standardJSON:!0}):g,w),o(0,M=!0),setTimeout(function(){o(0,M=!1)},600)},g,C]}var te=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,Dt,Mt,n.N8,{content:2,handler:3}),c}return(0,s.Z)(u,h),(0,r.Z)(u,[{key:"content",get:function(){return this.$$.ctx[2]},set:function(o){this.$$set({content:o}),(0,n.yl1)()}},{key:"handler",get:function(){return this.$$.ctx[3]},set:function(o){this.$$set({handler:o}),(0,n.yl1)()}}]),u}(n.f_C),Gt=te,ee=__webpack_require__(845),yt={};ee.Z&&ee.Z.locals&&(yt.locals=ee.Z.locals);var dt,bt=0,Ft={};Ft.styleTagTransform=b(),Ft.setAttributes=S(),Ft.insert=y().bind(null,"head"),Ft.domAPI=I(),Ft.insertStyleElement=Q(),yt.use=function(h){return Ft.options=h||{},bt++||(dt=f()(ee.Z,Ft)),yt},yt.unuse=function(){bt>0&&!--bt&&(dt(),dt=null)};var Jt=yt;function Ut(h){var u,o,c,g=t.rE(h[1])+"";return{c:function(){u=(0,n.bGB)("i"),o=(0,n.fLW)(g),c=(0,n.fLW)(":"),(0,n.Ljt)(u,"class","vc-log-key"),(0,n.VHj)(u,"vc-log-key-symbol",h[2]==="symbol"),(0,n.VHj)(u,"vc-log-key-private",h[2]==="private")},m:function(p,C){(0,n.$Tr)(p,u,C),(0,n.R3I)(u,o),(0,n.$Tr)(p,c,C)},p:function(p,C){2&C&&g!==(g=t.rE(p[1])+"")&&(0,n.rTO)(o,g),4&C&&(0,n.VHj)(u,"vc-log-key-symbol",p[2]==="symbol"),4&C&&(0,n.VHj)(u,"vc-log-key-private",p[2]==="private")},d:function(p){p&&(0,n.ogt)(u),p&&(0,n.ogt)(c)}}}function de(h){var u,o,c,g,p=h[1]!==void 0&&Ut(h);return{c:function(){p&&p.c(),u=(0,n.DhX)(),o=(0,n.bGB)("i"),c=(0,n.fLW)(h[3]),(0,n.Ljt)(o,"class",g="vc-log-val vc-log-val-"+h[4]),(0,n.Ljt)(o,"style",h[0]),(0,n.VHj)(o,"vc-log-val-haskey",h[1]!==void 0)},m:function(C,w){p&&p.m(C,w),(0,n.$Tr)(C,u,w),(0,n.$Tr)(C,o,w),(0,n.R3I)(o,c)},p:function(C,w){var M=w[0];C[1]!==void 0?p?p.p(C,M):((p=Ut(C)).c(),p.m(u.parentNode,u)):p&&(p.d(1),p=null),8&M&&(0,n.rTO)(c,C[3]),16&M&&g!==(g="vc-log-val vc-log-val-"+C[4])&&(0,n.Ljt)(o,"class",g),1&M&&(0,n.Ljt)(o,"style",C[0]),18&M&&(0,n.VHj)(o,"vc-log-val-haskey",C[1]!==void 0)},i:n.ZTd,o:n.ZTd,d:function(C){p&&p.d(C),C&&(0,n.ogt)(u),C&&(0,n.ogt)(o)}}}function G(h,u,o){var c=u.origData,g=u.style,p=g===void 0?"":g,C=u.dataKey,w=C===void 0?void 0:C,M=u.keyType,k=M===void 0?"":M,z="",X="",V=!1;return(0,l.H3)(function(){Jt.use()}),(0,l.ev)(function(){Jt.unuse()}),h.$$set=function(ot){"origData"in ot&&o(5,c=ot.origData),"style"in ot&&o(0,p=ot.style),"dataKey"in ot&&o(1,w=ot.dataKey),"keyType"in ot&&o(2,k=ot.keyType)},h.$$.update=function(){if(122&h.$$.dirty){o(6,V=w!==void 0);var ot=(0,U.LH)(c,V);o(4,X=ot.valueType),o(3,z=ot.text),V||X!=="string"||o(3,z=z.replace(/\\n/g,`
`).replace(/\\t/g,"    "))}},[p,w,k,z,X,c,V]}var it=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,G,de,n.AqN,{origData:5,style:0,dataKey:1,keyType:2}),c}return(0,s.Z)(u,h),(0,r.Z)(u,[{key:"origData",get:function(){return this.$$.ctx[5]},set:function(o){this.$$set({origData:o}),(0,n.yl1)()}},{key:"style",get:function(){return this.$$.ctx[0]},set:function(o){this.$$set({style:o}),(0,n.yl1)()}},{key:"dataKey",get:function(){return this.$$.ctx[1]},set:function(o){this.$$set({dataKey:o}),(0,n.yl1)()}},{key:"keyType",get:function(){return this.$$.ctx[2]},set:function(o){this.$$set({keyType:o}),(0,n.yl1)()}}]),u}(n.f_C),j=it,lt=__webpack_require__(1237),gt={};lt.Z&&lt.Z.locals&&(gt.locals=lt.Z.locals);var ft,Lt=0,ie={};ie.styleTagTransform=b(),ie.setAttributes=S(),ie.insert=y().bind(null,"head"),ie.domAPI=I(),ie.insertStyleElement=Q(),gt.use=function(h){return ie.options=h||{},Lt++||(ft=f()(lt.Z,ie)),gt},gt.unuse=function(){Lt>0&&!--Lt&&(ft(),ft=null)};var Qe=gt;function Ie(h,u,o){var c=h.slice();return c[19]=u[o],c[21]=o,c}function Ze(h,u,o){var c=h.slice();return c[19]=u[o],c}function gn(h,u,o){var c=h.slice();return c[19]=u[o],c[21]=o,c}function ln(h){for(var u,o,c,g,p,C,w,M=[],k=new Map,z=[],X=new Map,V=[],ot=new Map,nt=h[7],Et=function(Yt){return Yt[19]},Qt=0;Qt<nt.length;Qt+=1){var Rt=gn(h,nt,Qt),kt=Et(Rt);k.set(kt,M[Qt]=je(kt,Rt))}for(var zt=h[11]<h[7].length&&Mn(h),pe=h[9],se=function(Yt){return Yt[19]},Re=0;Re<pe.length;Re+=1){var Te=Ze(h,pe,Re),Ne=se(Te);X.set(Ne,z[Re]=Pn(Ne,Te))}for(var le=h[8],he=function(Yt){return Yt[19]},ke=0;ke<le.length;ke+=1){var An=Ie(h,le,ke),Ge=he(An);ot.set(Ge,V[ke]=kn(Ge,An))}var Le=h[12]<h[8].length&&qn(h),ye=h[10]&&vn(h);return{c:function(){u=(0,n.bGB)("div");for(var Yt=0;Yt<M.length;Yt+=1)M[Yt].c();o=(0,n.DhX)(),zt&&zt.c(),c=(0,n.DhX)();for(var Zt=0;Zt<z.length;Zt+=1)z[Zt].c();g=(0,n.DhX)();for(var He=0;He<V.length;He+=1)V[He].c();p=(0,n.DhX)(),Le&&Le.c(),C=(0,n.DhX)(),ye&&ye.c(),(0,n.Ljt)(u,"class","vc-log-tree-child")},m:function(Yt,Zt){(0,n.$Tr)(Yt,u,Zt);for(var He=0;He<M.length;He+=1)M[He].m(u,null);(0,n.R3I)(u,o),zt&&zt.m(u,null),(0,n.R3I)(u,c);for(var Pt=0;Pt<z.length;Pt+=1)z[Pt].m(u,null);(0,n.R3I)(u,g);for(var ce=0;ce<V.length;ce+=1)V[ce].m(u,null);(0,n.R3I)(u,p),Le&&Le.m(u,null),(0,n.R3I)(u,C),ye&&ye.m(u,null),w=!0},p:function(Yt,Zt){67721&Zt&&(nt=Yt[7],(0,n.dvw)(),M=(0,n.GQg)(M,Zt,Et,1,Yt,nt,k,u,n.cly,je,o,gn),(0,n.gbL)()),Yt[11]<Yt[7].length?zt?zt.p(Yt,Zt):((zt=Mn(Yt)).c(),zt.m(u,c)):zt&&(zt.d(1),zt=null),66057&Zt&&(pe=Yt[9],(0,n.dvw)(),z=(0,n.GQg)(z,Zt,se,1,Yt,pe,X,u,n.cly,Pn,g,Ze),(0,n.gbL)()),69897&Zt&&(le=Yt[8],(0,n.dvw)(),V=(0,n.GQg)(V,Zt,he,1,Yt,le,ot,u,n.cly,kn,p,Ie),(0,n.gbL)()),Yt[12]<Yt[8].length?Le?Le.p(Yt,Zt):((Le=qn(Yt)).c(),Le.m(u,C)):Le&&(Le.d(1),Le=null),Yt[10]?ye?(ye.p(Yt,Zt),1024&Zt&&(0,n.Ui)(ye,1)):((ye=vn(Yt)).c(),(0,n.Ui)(ye,1),ye.m(u,null)):ye&&((0,n.dvw)(),(0,n.etI)(ye,1,1,function(){ye=null}),(0,n.gbL)())},i:function(Yt){if(!w){for(var Zt=0;Zt<nt.length;Zt+=1)(0,n.Ui)(M[Zt]);for(var He=0;He<pe.length;He+=1)(0,n.Ui)(z[He]);for(var Pt=0;Pt<le.length;Pt+=1)(0,n.Ui)(V[Pt]);(0,n.Ui)(ye),w=!0}},o:function(Yt){for(var Zt=0;Zt<M.length;Zt+=1)(0,n.etI)(M[Zt]);for(var He=0;He<z.length;He+=1)(0,n.etI)(z[He]);for(var Pt=0;Pt<V.length;Pt+=1)(0,n.etI)(V[Pt]);(0,n.etI)(ye),w=!1},d:function(Yt){Yt&&(0,n.ogt)(u);for(var Zt=0;Zt<M.length;Zt+=1)M[Zt].d();zt&&zt.d();for(var He=0;He<z.length;He+=1)z[He].d();for(var Pt=0;Pt<V.length;Pt+=1)V[Pt].d();Le&&Le.d(),ye&&ye.d()}}}function an(h){var u,o;return u=new On({props:{origData:h[16](h[19]),dataKey:h[19],keyPath:h[3]+"."+h[19],toggle:h[0]}}),{c:function(){(0,n.YCL)(u.$$.fragment)},m:function(c,g){(0,n.yef)(u,c,g),o=!0},p:function(c,g){var p={};128&g&&(p.origData=c[16](c[19])),128&g&&(p.dataKey=c[19]),136&g&&(p.keyPath=c[3]+"."+c[19]),1&g&&(p.toggle=c[0]),u.$set(p)},i:function(c){o||((0,n.Ui)(u.$$.fragment,c),o=!0)},o:function(c){(0,n.etI)(u.$$.fragment,c),o=!1},d:function(c){(0,n.vpE)(u,c)}}}function je(h,u){var o,c,g,p=u[21]<u[11]&&an(u);return{key:h,first:null,c:function(){o=(0,n.cSb)(),p&&p.c(),c=(0,n.cSb)(),this.first=o},m:function(C,w){(0,n.$Tr)(C,o,w),p&&p.m(C,w),(0,n.$Tr)(C,c,w),g=!0},p:function(C,w){(u=C)[21]<u[11]?p?(p.p(u,w),2176&w&&(0,n.Ui)(p,1)):((p=an(u)).c(),(0,n.Ui)(p,1),p.m(c.parentNode,c)):p&&((0,n.dvw)(),(0,n.etI)(p,1,1,function(){p=null}),(0,n.gbL)())},i:function(C){g||((0,n.Ui)(p),g=!0)},o:function(C){(0,n.etI)(p),g=!1},d:function(C){C&&(0,n.ogt)(o),p&&p.d(C),C&&(0,n.ogt)(c)}}}function Mn(h){var u,o,c,g,p=h[14](h[7].length-h[11])+"";return{c:function(){u=(0,n.bGB)("div"),o=(0,n.fLW)(p),(0,n.Ljt)(u,"class","vc-log-tree-loadmore")},m:function(C,w){(0,n.$Tr)(C,u,w),(0,n.R3I)(u,o),c||(g=(0,n.oLt)(u,"click",h[17]),c=!0)},p:function(C,w){2176&w&&p!==(p=C[14](C[7].length-C[11])+"")&&(0,n.rTO)(o,p)},d:function(C){C&&(0,n.ogt)(u),c=!1,g()}}}function Pn(h,u){var o,c,g;return c=new On({props:{origData:u[16](u[19]),dataKey:String(u[19]),keyType:"symbol",keyPath:u[3]+"["+String(u[19])+"]",toggle:u[0]}}),{key:h,first:null,c:function(){o=(0,n.cSb)(),(0,n.YCL)(c.$$.fragment),this.first=o},m:function(p,C){(0,n.$Tr)(p,o,C),(0,n.yef)(c,p,C),g=!0},p:function(p,C){u=p;var w={};512&C&&(w.origData=u[16](u[19])),512&C&&(w.dataKey=String(u[19])),520&C&&(w.keyPath=u[3]+"["+String(u[19])+"]"),1&C&&(w.toggle=u[0]),c.$set(w)},i:function(p){g||((0,n.Ui)(c.$$.fragment,p),g=!0)},o:function(p){(0,n.etI)(c.$$.fragment,p),g=!1},d:function(p){p&&(0,n.ogt)(o),(0,n.vpE)(c,p)}}}function Jn(h){var u,o;return u=new On({props:{origData:h[16](h[19]),dataKey:h[19],keyType:"private",keyPath:h[3]+"."+h[19],toggle:h[0]}}),{c:function(){(0,n.YCL)(u.$$.fragment)},m:function(c,g){(0,n.yef)(u,c,g),o=!0},p:function(c,g){var p={};256&g&&(p.origData=c[16](c[19])),256&g&&(p.dataKey=c[19]),264&g&&(p.keyPath=c[3]+"."+c[19]),1&g&&(p.toggle=c[0]),u.$set(p)},i:function(c){o||((0,n.Ui)(u.$$.fragment,c),o=!0)},o:function(c){(0,n.etI)(u.$$.fragment,c),o=!1},d:function(c){(0,n.vpE)(u,c)}}}function kn(h,u){var o,c,g,p=u[21]<u[12]&&Jn(u);return{key:h,first:null,c:function(){o=(0,n.cSb)(),p&&p.c(),c=(0,n.cSb)(),this.first=o},m:function(C,w){(0,n.$Tr)(C,o,w),p&&p.m(C,w),(0,n.$Tr)(C,c,w),g=!0},p:function(C,w){(u=C)[21]<u[12]?p?(p.p(u,w),4352&w&&(0,n.Ui)(p,1)):((p=Jn(u)).c(),(0,n.Ui)(p,1),p.m(c.parentNode,c)):p&&((0,n.dvw)(),(0,n.etI)(p,1,1,function(){p=null}),(0,n.gbL)())},i:function(C){g||((0,n.Ui)(p),g=!0)},o:function(C){(0,n.etI)(p),g=!1},d:function(C){C&&(0,n.ogt)(o),p&&p.d(C),C&&(0,n.ogt)(c)}}}function qn(h){var u,o,c,g,p=h[14](h[8].length-h[12])+"";return{c:function(){u=(0,n.bGB)("div"),o=(0,n.fLW)(p),(0,n.Ljt)(u,"class","vc-log-tree-loadmore")},m:function(C,w){(0,n.$Tr)(C,u,w),(0,n.R3I)(u,o),c||(g=(0,n.oLt)(u,"click",h[18]),c=!0)},p:function(C,w){4352&w&&p!==(p=C[14](C[8].length-C[12])+"")&&(0,n.rTO)(o,p)},d:function(C){C&&(0,n.ogt)(u),c=!1,g()}}}function vn(h){var u,o;return u=new On({props:{origData:h[16]("__proto__"),dataKey:"__proto__",keyType:"private",keyPath:h[3]+".__proto__",toggle:h[0]}}),{c:function(){(0,n.YCL)(u.$$.fragment)},m:function(c,g){(0,n.yef)(u,c,g),o=!0},p:function(c,g){var p={};8&g&&(p.keyPath=c[3]+".__proto__"),1&g&&(p.toggle=c[0]),u.$set(p)},i:function(c){o||((0,n.Ui)(u.$$.fragment,c),o=!0)},o:function(c){(0,n.etI)(u.$$.fragment,c),o=!1},d:function(c){(0,n.vpE)(u,c)}}}function Wn(h){var u,o,c,g,p,C,w;c=new j({props:{origData:h[1],dataKey:h[2],keyType:h[4]}});var M=h[6]&&h[5]&&ln(h);return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("div"),(0,n.YCL)(c.$$.fragment),g=(0,n.DhX)(),M&&M.c(),(0,n.Ljt)(o,"class","vc-log-tree-node"),(0,n.Ljt)(u,"class","vc-log-tree"),(0,n.Ljt)(u,"data-keypath",h[3]),(0,n.VHj)(u,"vc-toggle",h[5]),(0,n.VHj)(u,"vc-is-tree",h[6])},m:function(k,z){(0,n.$Tr)(k,u,z),(0,n.R3I)(u,o),(0,n.yef)(c,o,null),(0,n.R3I)(u,g),M&&M.m(u,null),p=!0,C||(w=(0,n.oLt)(o,"click",(0,n.XET)(h[15])),C=!0)},p:function(k,z){var X=z[0],V={};2&X&&(V.origData=k[1]),4&X&&(V.dataKey=k[2]),16&X&&(V.keyType=k[4]),c.$set(V),k[6]&&k[5]?M?(M.p(k,X),96&X&&(0,n.Ui)(M,1)):((M=ln(k)).c(),(0,n.Ui)(M,1),M.m(u,null)):M&&((0,n.dvw)(),(0,n.etI)(M,1,1,function(){M=null}),(0,n.gbL)()),(!p||8&X)&&(0,n.Ljt)(u,"data-keypath",k[3]),32&X&&(0,n.VHj)(u,"vc-toggle",k[5]),64&X&&(0,n.VHj)(u,"vc-is-tree",k[6])},i:function(k){p||((0,n.Ui)(c.$$.fragment,k),(0,n.Ui)(M),p=!0)},o:function(k){(0,n.etI)(c.$$.fragment,k),(0,n.etI)(M),p=!1},d:function(k){k&&(0,n.ogt)(u),(0,n.vpE)(c),M&&M.d(),C=!1,w()}}}function eA(h,u,o){var c,g,p,C=u.origData,w=u.dataKey,M=w===void 0?void 0:w,k=u.keyPath,z=k===void 0?"":k,X=u.keyType,V=X===void 0?"":X,ot=u.toggle,nt=ot===void 0?{}:ot,Et=!1,Qt=!1,Rt=!1,kt=50,zt=50;(0,l.H3)(function(){Qe.use()}),(0,l.ev)(function(){Qe.unuse()});var pe=function(se){se==="enum"?o(11,kt+=50):se==="nonEnum"&&o(12,zt+=50)};return h.$$set=function(se){"origData"in se&&o(1,C=se.origData),"dataKey"in se&&o(2,M=se.dataKey),"keyPath"in se&&o(3,z=se.keyPath),"keyType"in se&&o(4,V=se.keyType),"toggle"in se&&o(0,nt=se.toggle)},h.$$.update=function(){1003&h.$$.dirty&&(o(5,Et=nt[z]||!1),o(6,Qt=!(C instanceof U.Tg)&&(t.kJ(C)||t.Kn(C))),Qt&&Et&&(o(7,c=c||t.qr(t.MH(C))),o(8,g=g||t.qr(t.QK(C))),o(9,p=p||t._D(C)),o(10,Rt=t.Kn(C)&&g.indexOf("__proto__")===-1)))},[nt,C,M,z,V,Et,Qt,c,g,p,Rt,kt,zt,pe,function(se){return"(..."+se+" Key"+(se>1?"s":"")+" Left)"},function(){o(5,Et=!Et),o(0,nt[z]=Et,nt)},function(se){try{return C[se]}catch{return new U.Tg}},function(){return pe("enum")},function(){return pe("nonEnum")}]}var On=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,eA,Wn,n.AqN,{origData:1,dataKey:2,keyPath:3,keyType:4,toggle:0}),c}return(0,s.Z)(u,h),(0,r.Z)(u,[{key:"origData",get:function(){return this.$$.ctx[1]},set:function(o){this.$$set({origData:o}),(0,n.yl1)()}},{key:"dataKey",get:function(){return this.$$.ctx[2]},set:function(o){this.$$set({dataKey:o}),(0,n.yl1)()}},{key:"keyPath",get:function(){return this.$$.ctx[3]},set:function(o){this.$$set({keyPath:o}),(0,n.yl1)()}},{key:"keyType",get:function(){return this.$$.ctx[4]},set:function(o){this.$$set({keyType:o}),(0,n.yl1)()}},{key:"toggle",get:function(){return this.$$.ctx[0]},set:function(o){this.$$set({toggle:o}),(0,n.yl1)()}}]),u}(n.f_C),nA=On,Nn=__webpack_require__(7147),Un={};Nn.Z&&Nn.Z.locals&&(Un.locals=Nn.Z.locals);var Hn,zn=0,H={};H.styleTagTransform=b(),H.setAttributes=S(),H.insert=y().bind(null,"head"),H.domAPI=I(),H.insertStyleElement=Q(),Un.use=function(h){return H.options=h||{},zn++||(Hn=f()(Nn.Z,H)),Un},Un.unuse=function(){zn>0&&!--zn&&(Hn(),Hn=null)};var st=Un;function _t(h,u,o){var c=h.slice();return c[9]=u[o],c[11]=o,c}function vt(h,u,o){var c=h.slice();return c[12]=u[o],c}function ht(h){for(var u,o,c,g,p,C,w,M,k,z,X,V,ot,nt=[],Et=new Map,Qt=h[0].groupLevel&&Ot(h),Rt=h[2]>0&&ge(),kt=h[1]&&re(h),zt=h[0].repeated&&Be(h),pe=h[0].data,se=function(le){return le[11]},Re=0;Re<pe.length;Re+=1){var Te=_t(h,pe,Re),Ne=se(Te);Et.set(Ne,nt[Re]=Me(Ne,Te))}return k=new Gt({props:{handler:h[6]}}),{c:function(){u=(0,n.bGB)("div"),Qt&&Qt.c(),o=(0,n.DhX)(),Rt&&Rt.c(),c=(0,n.DhX)(),kt&&kt.c(),g=(0,n.DhX)(),zt&&zt.c(),p=(0,n.DhX)(),C=(0,n.bGB)("div");for(var le=0;le<nt.length;le+=1)nt[le].c();w=(0,n.DhX)(),M=(0,n.bGB)("div"),(0,n.YCL)(k.$$.fragment),(0,n.Ljt)(C,"class","vc-log-content"),(0,n.Ljt)(M,"class","vc-logrow-icon"),(0,n.Ljt)(u,"class",z="vc-log-row vc-log-"+h[0].type),(0,n.VHj)(u,"vc-log-input",h[0].cmdType==="input"),(0,n.VHj)(u,"vc-log-output",h[0].cmdType==="output"),(0,n.VHj)(u,"vc-log-group",h[2]>0),(0,n.VHj)(u,"vc-toggle",h[2]===1)},m:function(le,he){(0,n.$Tr)(le,u,he),Qt&&Qt.m(u,null),(0,n.R3I)(u,o),Rt&&Rt.m(u,null),(0,n.R3I)(u,c),kt&&kt.m(u,null),(0,n.R3I)(u,g),zt&&zt.m(u,null),(0,n.R3I)(u,p),(0,n.R3I)(u,C);for(var ke=0;ke<nt.length;ke+=1)nt[ke].m(C,null);(0,n.R3I)(u,w),(0,n.R3I)(u,M),(0,n.yef)(k,M,null),X=!0,V||(ot=(0,n.oLt)(u,"click",h[5]),V=!0)},p:function(le,he){le[0].groupLevel?Qt?Qt.p(le,he):((Qt=Ot(le)).c(),Qt.m(u,o)):Qt&&(Qt.d(1),Qt=null),le[2]>0?Rt||((Rt=ge()).c(),Rt.m(u,c)):Rt&&(Rt.d(1),Rt=null),le[1]?kt?kt.p(le,he):((kt=re(le)).c(),kt.m(u,g)):kt&&(kt.d(1),kt=null),le[0].repeated?zt?zt.p(le,he):((zt=Be(le)).c(),zt.m(u,p)):zt&&(zt.d(1),zt=null),17&he&&(pe=le[0].data,(0,n.dvw)(),nt=(0,n.GQg)(nt,he,se,1,le,pe,Et,C,n.cly,Me,null,_t),(0,n.gbL)()),(!X||1&he&&z!==(z="vc-log-row vc-log-"+le[0].type))&&(0,n.Ljt)(u,"class",z),1&he&&(0,n.VHj)(u,"vc-log-input",le[0].cmdType==="input"),1&he&&(0,n.VHj)(u,"vc-log-output",le[0].cmdType==="output"),5&he&&(0,n.VHj)(u,"vc-log-group",le[2]>0),5&he&&(0,n.VHj)(u,"vc-toggle",le[2]===1)},i:function(le){if(!X){for(var he=0;he<pe.length;he+=1)(0,n.Ui)(nt[he]);(0,n.Ui)(k.$$.fragment,le),X=!0}},o:function(le){for(var he=0;he<nt.length;he+=1)(0,n.etI)(nt[he]);(0,n.etI)(k.$$.fragment,le),X=!1},d:function(le){le&&(0,n.ogt)(u),Qt&&Qt.d(),Rt&&Rt.d(),kt&&kt.d(),zt&&zt.d();for(var he=0;he<nt.length;he+=1)nt[he].d();(0,n.vpE)(k),V=!1,ot()}}}function Ot(h){for(var u,o=new Array(h[0].groupLevel),c=[],g=0;g<o.length;g+=1)c[g]=jt(vt(h,o,g));return{c:function(){for(var p=0;p<c.length;p+=1)c[p].c();u=(0,n.cSb)()},m:function(p,C){for(var w=0;w<c.length;w+=1)c[w].m(p,C);(0,n.$Tr)(p,u,C)},p:function(p,C){if(1&C){var w;for(o=new Array(p[0].groupLevel),w=0;w<o.length;w+=1){var M=vt(p,o,w);c[w]?c[w].p(M,C):(c[w]=jt(),c[w].c(),c[w].m(u.parentNode,u))}for(;w<c.length;w+=1)c[w].d(1);c.length=o.length}},d:function(p){(0,n.RMB)(c,p),p&&(0,n.ogt)(u)}}}function jt(h){var u;return{c:function(){u=(0,n.bGB)("i"),(0,n.Ljt)(u,"class","vc-log-padding")},m:function(o,c){(0,n.$Tr)(o,u,c)},p:n.ZTd,d:function(o){o&&(0,n.ogt)(u)}}}function ge(h){var u;return{c:function(){u=(0,n.bGB)("div"),(0,n.Ljt)(u,"class","vc-log-group-toggle")},m:function(o,c){(0,n.$Tr)(o,u,c)},d:function(o){o&&(0,n.ogt)(u)}}}function re(h){var u,o;return{c:function(){u=(0,n.bGB)("div"),o=(0,n.fLW)(h[3]),(0,n.Ljt)(u,"class","vc-log-time")},m:function(c,g){(0,n.$Tr)(c,u,g),(0,n.R3I)(u,o)},p:function(c,g){8&g&&(0,n.rTO)(o,c[3])},d:function(c){c&&(0,n.ogt)(u)}}}function Be(h){var u,o,c,g=h[0].repeated+"";return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("i"),c=(0,n.fLW)(g),(0,n.Ljt)(u,"class","vc-log-repeat")},m:function(p,C){(0,n.$Tr)(p,u,C),(0,n.R3I)(u,o),(0,n.R3I)(o,c)},p:function(p,C){1&C&&g!==(g=p[0].repeated+"")&&(0,n.rTO)(c,g)},d:function(p){p&&(0,n.ogt)(u)}}}function me(h){var u,o;return u=new j({props:{origData:h[9].origData,style:h[9].style}}),{c:function(){(0,n.YCL)(u.$$.fragment)},m:function(c,g){(0,n.yef)(u,c,g),o=!0},p:function(c,g){var p={};1&g&&(p.origData=c[9].origData),1&g&&(p.style=c[9].style),u.$set(p)},i:function(c){o||((0,n.Ui)(u.$$.fragment,c),o=!0)},o:function(c){(0,n.etI)(u.$$.fragment,c),o=!1},d:function(c){(0,n.vpE)(u,c)}}}function fe(h){var u,o;return u=new nA({props:{origData:h[9].origData,keyPath:String(h[11]),toggle:h[0].toggle}}),{c:function(){(0,n.YCL)(u.$$.fragment)},m:function(c,g){(0,n.yef)(u,c,g),o=!0},p:function(c,g){var p={};1&g&&(p.origData=c[9].origData),1&g&&(p.keyPath=String(c[11])),1&g&&(p.toggle=c[0].toggle),u.$set(p)},i:function(c){o||((0,n.Ui)(u.$$.fragment,c),o=!0)},o:function(c){(0,n.etI)(u.$$.fragment,c),o=!1},d:function(c){(0,n.vpE)(u,c)}}}function Me(h,u){var o,c,g,p,C,w,M=[fe,me],k=[];function z(X,V){return 1&V&&(c=null),c==null&&(c=!!X[4](X[9].origData)),c?0:1}return g=z(u,-1),p=k[g]=M[g](u),{key:h,first:null,c:function(){o=(0,n.cSb)(),p.c(),C=(0,n.cSb)(),this.first=o},m:function(X,V){(0,n.$Tr)(X,o,V),k[g].m(X,V),(0,n.$Tr)(X,C,V),w=!0},p:function(X,V){var ot=g;(g=z(u=X,V))===ot?k[g].p(u,V):((0,n.dvw)(),(0,n.etI)(k[ot],1,1,function(){k[ot]=null}),(0,n.gbL)(),(p=k[g])?p.p(u,V):(p=k[g]=M[g](u)).c(),(0,n.Ui)(p,1),p.m(C.parentNode,C))},i:function(X){w||((0,n.Ui)(p),w=!0)},o:function(X){(0,n.etI)(p),w=!1},d:function(X){X&&(0,n.ogt)(o),k[g].d(X),X&&(0,n.ogt)(C)}}}function Pe(h){var u,o,c=h[0]&&ht(h);return{c:function(){c&&c.c(),u=(0,n.cSb)()},m:function(g,p){c&&c.m(g,p),(0,n.$Tr)(g,u,p),o=!0},p:function(g,p){var C=p[0];g[0]?c?(c.p(g,C),1&C&&(0,n.Ui)(c,1)):((c=ht(g)).c(),(0,n.Ui)(c,1),c.m(u.parentNode,u)):c&&((0,n.dvw)(),(0,n.etI)(c,1,1,function(){c=null}),(0,n.gbL)())},i:function(g){o||((0,n.Ui)(c),o=!0)},o:function(g){(0,n.etI)(c),o=!1},d:function(g){c&&c.d(g),g&&(0,n.ogt)(u)}}}function qe(h,u,o){var c=u.log,g=u.showTimestamps,p=g!==void 0&&g,C=u.groupHeader,w=C===void 0?0:C,M=(0,l.x)(),k="",z=function(X,V){var ot="000"+X;return ot.substring(ot.length-V)};return(0,l.H3)(function(){st.use()}),(0,l.ev)(function(){st.unuse()}),h.$$set=function(X){"log"in X&&o(0,c=X.log),"showTimestamps"in X&&o(1,p=X.showTimestamps),"groupHeader"in X&&o(2,w=X.groupHeader)},h.$$.update=function(){if(3&h.$$.dirty&&p){var X=new Date(c.date);o(3,k=z(X.getHours(),2)+":"+z(X.getMinutes(),2)+":"+z(X.getSeconds(),2)+":"+z(X.getMilliseconds(),3))}},[c,p,w,k,function(X){return!(X instanceof U.Tg)&&(t.kJ(X)||t.Kn(X))},function(){w>0&&M("groupCollapsed",{groupLabel:c.groupLabel,groupHeader:w===1?2:1,isGroupCollapsed:w===1})},function(){var X=[];try{for(var V=0;V<c.data.length;V++)t.HD(c.data[V].origData)||t.hj(c.data[V].origData)?X.push(c.data[V].origData):X.push(t.hZ(c.data[V].origData,{maxDepth:10,keyMaxLen:1e4,pretty:!1,standardJSON:!0}))}catch{}return X.join(" ")}]}var Ke=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,qe,Pe,n.AqN,{log:0,showTimestamps:1,groupHeader:2}),c}return(0,s.Z)(u,h),(0,r.Z)(u,[{key:"log",get:function(){return this.$$.ctx[0]},set:function(o){this.$$set({log:o}),(0,n.yl1)()}},{key:"showTimestamps",get:function(){return this.$$.ctx[1]},set:function(o){this.$$set({showTimestamps:o}),(0,n.yl1)()}},{key:"groupHeader",get:function(){return this.$$.ctx[2]},set:function(o){this.$$set({groupHeader:o}),(0,n.yl1)()}}]),u}(n.f_C),Ue=Ke,Ce=__webpack_require__(3903),Xe=__webpack_require__(3327),Fe={};Xe.Z&&Xe.Z.locals&&(Fe.locals=Xe.Z.locals);var Bn,Yn=0,tn={};tn.styleTagTransform=b(),tn.setAttributes=S(),tn.insert=y().bind(null,"head"),tn.domAPI=I(),tn.insertStyleElement=Q(),Fe.use=function(h){return tn.options=h||{},Yn++||(Bn=f()(Xe.Z,tn)),Fe},Fe.unuse=function(){Yn>0&&!--Yn&&(Bn(),Bn=null)};var Zn=Fe,Ye=__webpack_require__(4264),De=__webpack_require__.n(Ye),xn=function(){function h(o){console.debug("[vConsole] `ResizeObserver` is not supported in the browser, vConsole cannot render correctly."),o([{contentRect:{height:30}}],this)}var u=h.prototype;return u.disconnect=function(){},u.observe=function(o,c){},u.unobserve=function(o){},h}(),sn=function(){return typeof window.ResizeObserver=="function"},hn=function(){return window.ResizeObserver||xn};function cA(h){var u,o,c=h[6].default,g=(0,n.nuO)(c,h,h[5],null);return{c:function(){u=(0,n.bGB)("div"),g&&g.c(),(0,n.Ljt)(u,"class","vc-scroller-item"),(0,n.czc)(u,"display",h[0]?"block":"none",!1),(0,n.czc)(u,"top",h[3]?h[1]+"px":"auto",!1)},m:function(p,C){(0,n.$Tr)(p,u,C),g&&g.m(u,null),h[7](u),o=!0},p:function(p,C){var w=C[0];g&&g.p&&(!o||32&w)&&(0,n.kmG)(g,c,p,p[5],o?(0,n.u2N)(c,p[5],w,null):(0,n.VOJ)(p[5]),null),1&w&&(0,n.czc)(u,"display",p[0]?"block":"none",!1),2&w&&(0,n.czc)(u,"top",p[3]?p[1]+"px":"auto",!1)},i:function(p){o||((0,n.Ui)(g,p),o=!0)},o:function(p){(0,n.etI)(g,p),o=!1},d:function(p){p&&(0,n.ogt)(u),g&&g.d(p),h[7](null)}}}function Kn(h,u,o){var c,g=u.$$slots,p=g===void 0?{}:g,C=u.$$scope,w=u.show,M=w===void 0?!sn():w,k=u.top,z=u.onResize,X=z===void 0?function(){}:z,V=null,ot=sn();return(0,l.H3)(function(){if(M&&X(c.getBoundingClientRect().height),ot){var nt=hn();(V=new nt(function(Et){var Qt=Et[0];M&&X(Qt.contentRect.height)})).observe(c)}}),(0,l.ev)(function(){ot&&V.disconnect()}),h.$$set=function(nt){"show"in nt&&o(0,M=nt.show),"top"in nt&&o(1,k=nt.top),"onResize"in nt&&o(4,X=nt.onResize),"$$scope"in nt&&o(5,C=nt.$$scope)},[M,k,c,ot,X,C,p,function(nt){n.VnY[nt?"unshift":"push"](function(){o(2,c=nt)})}]}var hr=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,Kn,cA,n.N8,{show:0,top:1,onResize:4}),c}return(0,s.Z)(u,h),(0,r.Z)(u,[{key:"show",get:function(){return this.$$.ctx[0]},set:function(o){this.$$set({show:o}),(0,n.yl1)()}},{key:"top",get:function(){return this.$$.ctx[1]},set:function(o){this.$$set({top:o}),(0,n.yl1)()}},{key:"onResize",get:function(){return this.$$.ctx[4]},set:function(o){this.$$set({onResize:o}),(0,n.yl1)()}}]),u}(n.f_C),dr=hr,fr=function(){function h(){this._x=0,this._endX=0,this._v=0,this._startTime=0,this._endTime=0}var u=h.prototype;return u.set=function(o,c,g,p){this._x=o,this._endX=c,this._v=(c-o)/g,this._startTime=p||Date.now(),this._endTime=this._startTime+g},u.x=function(o){if(this.done(o))return this._endX;var c=o-this._startTime;return this._x+this._v*c},u.dx=function(o){return this.done(o)?0:this._v},u.done=function(o){return o>=this._endTime},h}(),pr=function(){function h(o){this._drag=void 0,this._dragLog=void 0,this._x=0,this._v=0,this._startTime=0,this._drag=o,this._dragLog=Math.log(o)}var u=h.prototype;return u.set=function(o,c,g){this._x=o,this._v=c,this._startTime=g||Date.now()},u.x=function(o){var c=(o-this._startTime)/1e3;return this._x+this._v*Math.pow(this._drag,c)/this._dragLog-this._v/this._dragLog},u.dx=function(o){var c=(o-this._startTime)/1e3;return this._v*Math.pow(this._drag,c)},u.done=function(o){return Math.abs(this.dx(o))<3},h}(),ZA=function(h,u){return h>u-.1&&h<u+.1},ti=function(h){return ZA(h,0)},Ir=function(){function h(o,c,g){this._solver=void 0,this._solution=void 0,this._endPosition=void 0,this._startTime=void 0,this._solver=function(p,C,w){var M=w,k=p,z=C,X=M*M-4*k*z;if(X==0){var V=-M/(2*k);return function(Rt,kt){var zt=Rt,pe=kt/(V*Rt);return{x:function(se){return(zt+pe*se)*Math.pow(Math.E,V*se)},dx:function(se){return(V*(zt+pe*se)+pe)*Math.pow(Math.E,V*se)}}}}if(X>0){var ot=(-M-Math.sqrt(X))/(2*k),nt=(-M+Math.sqrt(X))/(2*k);return function(Rt,kt){var zt=(kt-ot*Rt)/(nt-ot),pe=Rt-zt;return{x:function(se){return pe*Math.pow(Math.E,ot*se)+zt*Math.pow(Math.E,nt*se)},dx:function(se){return pe*ot*Math.pow(Math.E,ot*se)+zt*nt*Math.pow(Math.E,nt*se)}}}}var Et=Math.sqrt(4*k*z-M*M)/(2*k),Qt=-M/2*k;return function(Rt,kt){var zt=Rt,pe=(kt-Qt*Rt)/Et;return{x:function(se){return Math.pow(Math.E,Qt*se)*(zt*Math.cos(Et*se)+pe*Math.sin(Et*se))},dx:function(se){var Re=Math.pow(Math.E,Qt*se),Te=Math.cos(Et*se),Ne=Math.sin(Et*se);return Re*(pe*Et*Te-zt*Et*Ne)+Qt*Re*(pe*Ne+zt*Te)}}}}(o,c,g),this._solution=null,this._endPosition=0,this._startTime=0}var u=h.prototype;return u.x=function(o){if(!this._solution)return 0;var c=(o-this._startTime)/1e3;return this._endPosition+this._solution.x(c)},u.dx=function(o){if(!this._solution)return 0;var c=(o-this._startTime)/1e3;return this._solution.dx(c)},u.set=function(o,c,g,p){p||(p=Date.now()),this._endPosition=o,c==o&&ti(g)||(this._solution=this._solver(c-o,g),this._startTime=p)},u.done=function(o){return o||(o=Date.now()),ZA(this.x(o),this._endPosition)&&ti(this.dx(o))},h}(),Er=function(){function h(o,c){this._enableSpring=c,this._getExtend=void 0,this._friction=new pr(.05),this._spring=new Ir(1,90,20),this._toEdge=!1,this._getExtend=o}var u=h.prototype;return u.set=function(o,c,g){if(g===void 0&&(g=Date.now()),this._friction.set(o,c,g),o>0&&c>=0)this._toEdge=!0,this._enableSpring&&this._spring.set(0,o,c,g);else{var p=this._getExtend();o<-p&&c<=0?(this._toEdge=!0,this._enableSpring&&this._spring.set(-p,o,c,g)):this._toEdge=!1}},u.x=function(o){if(this._enableSpring&&this._toEdge)return this._spring.x(o);var c=this._friction.x(o),g=this._friction.dx(o);if(c>0&&g>=0){if(this._toEdge=!0,!this._enableSpring)return 0;this._spring.set(0,c,g,o)}else{var p=this._getExtend();if(c<-p&&g<=0){if(this._toEdge=!0,!this._enableSpring)return-p;this._spring.set(-p,c,g,o)}}return c},u.dx=function(o){return this._toEdge?this._enableSpring?this._spring.dx(o):0:this._friction.dx(o)},u.done=function(o){return this._toEdge?!this._enableSpring||this._spring.done(o):this._friction.done(o)},h}();function FA(h,u){var o,c;return function g(){if(!c){var p=Date.now();u(p),h.done(p)||(o=requestAnimationFrame(g))}}(),{cancel:function(){cancelAnimationFrame(o),c=!0}}}var Cr=function(){function h(o,c){this._updatePosition=c,this._scrollModel=void 0,this._linearModel=void 0,this._startPosition=0,this._position=0,this._animate=null,this._getExtent=void 0,this._getExtent=o,this._scrollModel=new Er(o,!1),this._linearModel=new fr}var u=h.prototype;return u.onTouchStart=function(){var o=this._position;if(o>0)o*=0;else{var c=this._getExtent();o<-c&&(o=0*(o+c)-c)}this._startPosition=this._position=o,this._animate&&(this._animate.cancel(),this._animate=null),this._updatePosition(-o)},u.onTouchMove=function(o,c){var g=c+this._startPosition;if(g>0)g*=0;else{var p=this._getExtent();g<-p&&(g=0*(g+p)-p)}this._position=g,this._updatePosition(-g)},u.onTouchEnd=function(o,c,g,p){var C=this,w=c+this._startPosition;if(w>0)w*=0;else{var M=this._getExtent();w<-M&&(w=0*(w+M)-M)}if(this._position=w,this._updatePosition(-w),!(Math.abs(c)<=.1&&Math.abs(p)<=.1)){var k=this._scrollModel;k.set(w,p),this._animate=FA(k,function(z){var X=C._position=k.x(z);C._updatePosition(-X)})}},u.onTouchCancel=function(){var o=this,c=this._position;if(c>0)c*=0;else{var g=this._getExtent();c<-g&&(c=0*(c+g)-g)}this._position=c;var p=this._scrollModel;p.set(c,0),this._animate=FA(p,function(C){var w=o._position=p.x(C);o._updatePosition(-w)})},u.onWheel=function(o,c){var g=this._position-c;if(this._animate&&(this._animate.cancel(),this._animate=null),g>0)g=0;else{var p=this._getExtent();g<-p&&(g=-p)}this._position=g,this._updatePosition(-g)},u.getPosition=function(){return-this._position},u.updatePosition=function(o){var c=-o-this._position;this._startPosition+=c,this._position+=c;var g=this._position;this._updatePosition(-g);var p=this._scrollModel,C=Date.now();if(!p.done(C)){var w=p.dx(C);p.set(g,w,C)}},u.scrollTo=function(o,c){var g=this;if(this._animate&&(this._animate.cancel(),this._animate=null),c>0){var p=this._linearModel;p.set(this._position,-o,c),this._animate=FA(this._linearModel,function(C){var w=g._position=p.x(C);g._updatePosition(-w)})}else this._updatePosition(o)},h}();function Br(h,u){var o=typeof Symbol<"u"&&h[Symbol.iterator]||h["@@iterator"];if(o)return(o=o.call(h)).next.bind(o);if(Array.isArray(h)||(o=function(g,p){if(g){if(typeof g=="string")return ei(g,p);var C=Object.prototype.toString.call(g).slice(8,-1);if(C==="Object"&&g.constructor&&(C=g.constructor.name),C==="Map"||C==="Set")return Array.from(g);if(C==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C))return ei(g,p)}}(h))||u){o&&(h=o);var c=0;return function(){return c>=h.length?{done:!0}:{done:!1,value:h[c++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function ei(h,u){(u==null||u>h.length)&&(u=h.length);for(var o=0,c=new Array(u);o<u;o++)c[o]=h[o];return c}var mr=function(h){var u=null,o=!1,c=function g(){o=!1,h(),u=requestAnimationFrame(function(){u=null,o&&g()})};return{trigger:function(){u===null?c():o=!0},cancel:function(){u&&(cancelAnimationFrame(u),o=!1,u=null)}}},Qr=function(){function h(u){var o=this;this._handler=u,this._touchId=null,this._startX=0,this._startY=0,this._historyX=[],this._historyY=[],this._historyTime=[],this._wheelDeltaX=0,this._wheelDeltaY=0,this._onTouchMove=function(){var c=o._historyX[o._historyX.length-1],g=o._historyY[o._historyY.length-1];o._handler.onTouchMove(c,g)},this._onWheel=mr(function(){var c=o._wheelDeltaX,g=o._wheelDeltaY;o._wheelDeltaX=0,o._wheelDeltaY=0,o._handler.onWheel(c,g)}),this.handleTouchStart=function(c){var g;if(((g=c.target.dataset)==null?void 0:g.scrollable)!=="1"){c.preventDefault();var p=c.touches[0];o._touchId=p.identifier,o._startX=p.pageX,o._startY=p.pageY,o._historyX=[0],o._historyY=[0],o._historyTime=[Date.now()],o._handler.onTouchStart()}},this.handleTouchMove=function(c){var g;if(((g=c.target.dataset)==null?void 0:g.scrollable)!=="1"){c.preventDefault();var p=o._getTouchDelta(c);p!==null&&(o._historyX.push(p.x),o._historyY.push(p.y),o._historyTime.push(Date.now()),o._onTouchMove())}},this.handleTouchEnd=function(c){var g;if(((g=c.target.dataset)==null?void 0:g.scrollable)!=="1"){c.preventDefault();var p=o._getTouchDelta(c);if(p!==null){for(var C=0,w=0,M=Date.now(),k=p.y,z=p.x,X=o._historyTime,V=X.length-1;V>0;V-=1){var ot=M-X[V];if(ot>30){C=1e3*(z-o._historyX[V])/ot,w=1e3*(k-o._historyY[V])/ot;break}}o._touchId=null,o._handler.onTouchEnd(p.x,p.y,C,w)}}},this.handleTouchCancel=function(c){var g;((g=c.target.dataset)==null?void 0:g.scrollable)!=="1"&&(c.preventDefault(),o._getTouchDelta(c)!==null&&(o._touchId=null,o._handler.onTouchCancel()))},this.handleWheel=function(c){var g;((g=c.target.dataset)==null?void 0:g.scrollable)!=="1"&&(c.preventDefault(),o._wheelDeltaX+=c.deltaX,o._wheelDeltaY+=c.deltaY,o._onWheel.trigger())}}return h.prototype._getTouchDelta=function(u){if(this._touchId===null)return null;for(var o,c=Br(u.changedTouches);!(o=c()).done;){var g=o.value;if(g.identifier===this._touchId)return{x:g.pageX-this._startX,y:g.pageY-this._startY}}return null},h}(),IA=__webpack_require__(1142),lA={};IA.Z&&IA.Z.locals&&(lA.locals=IA.Z.locals);var NA,kA=0,AA={};AA.styleTagTransform=b(),AA.setAttributes=S(),AA.insert=y().bind(null,"head"),AA.domAPI=I(),AA.insertStyleElement=Q(),lA.use=function(h){return AA.options=h||{},kA++||(NA=f()(IA.Z,AA)),lA},lA.unuse=function(){kA>0&&!--kA&&(NA(),NA=null)};var ni=lA,yr=function(){var h=[],u=[],o=0,c=0,g=0,p=0,C=0;return function(w,M,k){if(g===w&&p===M&&C===k)return h;var z=u.length,X=M<=c?Math.max(0,Math.min(M,Math.max(o,Math.min(c-1,k-z)))):M,V=o<=k?Math.max(k,Math.min(w,Math.max(o+1,Math.min(c,X+z)))):k;if(z===0||V-X<z){for(var ot=h.length=u.length=k-M,nt=0;nt<ot;nt+=1)u[nt]=nt,h[nt]={key:nt,index:nt+M,show:!0};return o=M,c=k,g=w,p=M,C=k,h}var Et=0,Qt=0,Rt=0,kt=0;c<X||V<o?(Rt=X,kt=X+z):o<X?(Qt=X-o,Rt=X,kt=X+z):V<c?(Qt=z-(c-V),Rt=V-z,kt=V):X<=o&&c<=V&&(Rt=o,kt=c);for(var zt=X;zt<M;zt+=1,Et+=1){var pe=u[(Qt+Et)%z],se=h[zt-X];se.key=pe,se.index=zt,se.show=!1}for(var Re=M,Te=0;Re<k;Re+=1){var Ne=void 0;Rt<=Re&&Re<kt?(Ne=u[(Qt+Et)%z],Et+=1):(Ne=z+Te,Te+=1);var le=Re-X;if(le<h.length){var he=h[le];he.key=Ne,he.index=Re,he.show=!0}else h.push({key:Ne,index:Re,show:!0})}for(var ke=k;ke<V;ke+=1,Et+=1){var An=u[(Qt+Et)%z],Ge=h[ke-X];Ge.key=An,Ge.index=ke,Ge.show=!1}for(var Le=0;Le<h.length;Le+=1)u[Le]=h[Le].key;return h.sort(function(ye,Yt){return ye.key-Yt.key}),o=X,c=V,g=w,p=M,C=k,h}},_r=n.lig.Map,vr=function(h){return{}},Ai=function(h){return{}},xr=function(h){return{}},ii=function(h){return{}};function ri(h,u,o){var c=h.slice();return c[53]=u[o],c[55]=o,c}var wr=function(h){return{item:1025&h[0]}},ai=function(h){return{item:h[0][h[53].index]}},Sr=function(h){return{}},si=function(h){return{}};function oi(h){var u,o,c=h[24].header,g=(0,n.nuO)(c,h,h[31],si);return{c:function(){u=(0,n.bGB)("div"),g&&g.c(),(0,n.Ljt)(u,"class","vc-scroller-header")},m:function(p,C){(0,n.$Tr)(p,u,C),g&&g.m(u,null),h[25](u),o=!0},p:function(p,C){g&&g.p&&(!o||1&C[1])&&(0,n.kmG)(g,c,p,p[31],o?(0,n.u2N)(c,p[31],C,Sr):(0,n.VOJ)(p[31]),si)},i:function(p){o||((0,n.Ui)(g,p),o=!0)},o:function(p){(0,n.etI)(g,p),o=!1},d:function(p){p&&(0,n.ogt)(u),g&&g.d(p),h[25](null)}}}function Dr(h){var u,o=h[24].empty,c=(0,n.nuO)(o,h,h[31],ii);return{c:function(){c&&c.c()},m:function(g,p){c&&c.m(g,p),u=!0},p:function(g,p){c&&c.p&&(!u||1&p[1])&&(0,n.kmG)(c,o,g,g[31],u?(0,n.u2N)(o,g[31],p,xr):(0,n.VOJ)(g[31]),ii)},i:function(g){u||((0,n.Ui)(c,g),u=!0)},o:function(g){(0,n.etI)(c,g),u=!1},d:function(g){c&&c.d(g)}}}function br(h){for(var u,o,c=[],g=new _r,p=h[10],C=function(z){return z[53].key},w=0;w<p.length;w+=1){var M=ri(h,p,w),k=C(M);g.set(k,c[w]=ci(k,M))}return{c:function(){for(var z=0;z<c.length;z+=1)c[z].c();u=(0,n.cSb)()},m:function(z,X){for(var V=0;V<c.length;V+=1)c[V].m(z,X);(0,n.$Tr)(z,u,X),o=!0},p:function(z,X){17921&X[0]|1&X[1]&&(p=z[10],(0,n.dvw)(),c=(0,n.GQg)(c,X,C,1,z,p,g,u.parentNode,n.cly,ci,u,ri),(0,n.gbL)())},i:function(z){if(!o){for(var X=0;X<p.length;X+=1)(0,n.Ui)(c[X]);o=!0}},o:function(z){for(var X=0;X<c.length;X+=1)(0,n.etI)(c[X]);o=!1},d:function(z){for(var X=0;X<c.length;X+=1)c[X].d(z);z&&(0,n.ogt)(u)}}}function Mr(h){var u,o,c=h[24].item,g=(0,n.nuO)(c,h,h[31],ai),p=g||function(C){var w;return{c:function(){w=(0,n.fLW)("Missing template")},m:function(M,k){(0,n.$Tr)(M,w,k)},d:function(M){M&&(0,n.ogt)(w)}}}();return{c:function(){p&&p.c(),u=(0,n.DhX)()},m:function(C,w){p&&p.m(C,w),(0,n.$Tr)(C,u,w),o=!0},p:function(C,w){g&&g.p&&(!o||1025&w[0]|1&w[1])&&(0,n.kmG)(g,c,C,C[31],o?(0,n.u2N)(c,C[31],w,wr):(0,n.VOJ)(C[31]),ai)},i:function(C){o||((0,n.Ui)(p,C),o=!0)},o:function(C){(0,n.etI)(p,C),o=!1},d:function(C){p&&p.d(C),C&&(0,n.ogt)(u)}}}function ci(h,u){var o,c,g;function p(){for(var C,w=arguments.length,M=new Array(w),k=0;k<w;k++)M[k]=arguments[k];return(C=u)[26].apply(C,[u[53]].concat(M))}return c=new dr({props:{show:u[53].show,top:u[9][u[53].index],onResize:p,$$slots:{default:[Mr]},$$scope:{ctx:u}}}),{key:h,first:null,c:function(){o=(0,n.cSb)(),(0,n.YCL)(c.$$.fragment),this.first=o},m:function(C,w){(0,n.$Tr)(C,o,w),(0,n.yef)(c,C,w),g=!0},p:function(C,w){u=C;var M={};1024&w[0]&&(M.show=u[53].show),1536&w[0]&&(M.top=u[9][u[53].index]),1024&w[0]&&(M.onResize=p),1025&w[0]|1&w[1]&&(M.$$scope={dirty:w,ctx:u}),c.$set(M)},i:function(C){g||((0,n.Ui)(c.$$.fragment,C),g=!0)},o:function(C){(0,n.etI)(c.$$.fragment,C),g=!1},d:function(C){C&&(0,n.ogt)(o),(0,n.vpE)(c,C)}}}function li(h){var u,o,c=h[24].footer,g=(0,n.nuO)(c,h,h[31],Ai);return{c:function(){u=(0,n.bGB)("div"),g&&g.c(),(0,n.Ljt)(u,"class","vc-scroller-footer")},m:function(p,C){(0,n.$Tr)(p,u,C),g&&g.m(u,null),h[28](u),o=!0},p:function(p,C){g&&g.p&&(!o||1&C[1])&&(0,n.kmG)(g,c,p,p[31],o?(0,n.u2N)(c,p[31],C,vr):(0,n.VOJ)(p[31]),Ai)},i:function(p){o||((0,n.Ui)(g,p),o=!0)},o:function(p){(0,n.etI)(g,p),o=!1},d:function(p){p&&(0,n.ogt)(u),g&&g.d(p),h[28](null)}}}function ui(h){var u,o,c=h[7]+"%",g=h[8]+"%";return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("div"),(0,n.Ljt)(o,"class","vc-scroller-scrollbar-thumb"),(0,n.czc)(o,"height",c,!1),(0,n.czc)(o,"top",g,!1),(0,n.Ljt)(u,"class","vc-scroller-scrollbar-track"),(0,n.czc)(u,"display",h[7]<100?"block":"none",!1)},m:function(p,C){(0,n.$Tr)(p,u,C),(0,n.R3I)(u,o)},p:function(p,C){128&C[0]&&c!==(c=p[7]+"%")&&(0,n.czc)(o,"height",c,!1),256&C[0]&&g!==(g=p[8]+"%")&&(0,n.czc)(o,"top",g,!1),128&C[0]&&(0,n.czc)(u,"display",p[7]<100?"block":"none",!1)},d:function(p){p&&(0,n.ogt)(u)}}}function Rr(h){var u,o,c,g,p,C,w,M,k,z,X,V=h[15].header&&oi(h),ot=[br,Dr],nt=[];function Et(kt,zt){return kt[0].length?0:1}p=Et(h),C=nt[p]=ot[p](h);var Qt=h[15].footer&&li(h),Rt=h[1]&&ui(h);return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("div"),V&&V.c(),c=(0,n.DhX)(),g=(0,n.bGB)("div"),C.c(),w=(0,n.DhX)(),Qt&&Qt.c(),M=(0,n.DhX)(),Rt&&Rt.c(),(0,n.Ljt)(g,"class","vc-scroller-items"),(0,n.Ljt)(o,"class","vc-scroller-contents"),(0,n.Ljt)(u,"class","vc-scroller-viewport"),(0,n.VHj)(u,"static",!h[13])},m:function(kt,zt){(0,n.$Tr)(kt,u,zt),(0,n.R3I)(u,o),V&&V.m(o,null),(0,n.R3I)(o,c),(0,n.R3I)(o,g),nt[p].m(g,null),h[27](g),(0,n.R3I)(o,w),Qt&&Qt.m(o,null),h[29](o),(0,n.R3I)(u,M),Rt&&Rt.m(u,null),h[30](u),k=!0,z||(X=[(0,n.oLt)(u,"touchstart",function(){(0,n.sBU)(h[13]?h[11].handleTouchStart:h[12])&&(h[13]?h[11].handleTouchStart:h[12]).apply(this,arguments)}),(0,n.oLt)(u,"touchmove",function(){(0,n.sBU)(h[13]?h[11].handleTouchMove:h[12])&&(h[13]?h[11].handleTouchMove:h[12]).apply(this,arguments)}),(0,n.oLt)(u,"touchend",function(){(0,n.sBU)(h[13]?h[11].handleTouchEnd:h[12])&&(h[13]?h[11].handleTouchEnd:h[12]).apply(this,arguments)}),(0,n.oLt)(u,"touchcancel",function(){(0,n.sBU)(h[13]?h[11].handleTouchCancel:h[12])&&(h[13]?h[11].handleTouchCancel:h[12]).apply(this,arguments)}),(0,n.oLt)(u,"wheel",function(){(0,n.sBU)(h[13]?h[11].handleWheel:h[12])&&(h[13]?h[11].handleWheel:h[12]).apply(this,arguments)})],z=!0)},p:function(kt,zt){(h=kt)[15].header?V?(V.p(h,zt),32768&zt[0]&&(0,n.Ui)(V,1)):((V=oi(h)).c(),(0,n.Ui)(V,1),V.m(o,c)):V&&((0,n.dvw)(),(0,n.etI)(V,1,1,function(){V=null}),(0,n.gbL)());var pe=p;(p=Et(h))===pe?nt[p].p(h,zt):((0,n.dvw)(),(0,n.etI)(nt[pe],1,1,function(){nt[pe]=null}),(0,n.gbL)(),(C=nt[p])?C.p(h,zt):(C=nt[p]=ot[p](h)).c(),(0,n.Ui)(C,1),C.m(g,null)),h[15].footer?Qt?(Qt.p(h,zt),32768&zt[0]&&(0,n.Ui)(Qt,1)):((Qt=li(h)).c(),(0,n.Ui)(Qt,1),Qt.m(o,null)):Qt&&((0,n.dvw)(),(0,n.etI)(Qt,1,1,function(){Qt=null}),(0,n.gbL)()),h[1]?Rt?Rt.p(h,zt):((Rt=ui(h)).c(),Rt.m(u,null)):Rt&&(Rt.d(1),Rt=null)},i:function(kt){k||((0,n.Ui)(V),(0,n.Ui)(C),(0,n.Ui)(Qt),k=!0)},o:function(kt){(0,n.etI)(V),(0,n.etI)(C),(0,n.etI)(Qt),k=!1},d:function(kt){kt&&(0,n.ogt)(u),V&&V.d(),nt[p].d(),h[27](null),Qt&&Qt.d(),h[29](null),Rt&&Rt.d(),h[30](null),z=!1,(0,n.j7q)(X)}}}function Tr(h,u,o){var c,g,p,C,w,M,k,z=u.$$slots,X=z===void 0?{}:z,V=u.$$scope,ot=(0,n.XGm)(X),nt=this&&this.__awaiter||function(Wt,ve,_e,xe){return new(_e||(_e=Promise))(function(Oe,Ve){function Tn(nn){try{bn(xe.next(nn))}catch(Qn){Ve(Qn)}}function Dn(nn){try{bn(xe.throw(nn))}catch(Qn){Ve(Qn)}}function bn(nn){var Qn;nn.done?Oe(nn.value):(Qn=nn.value,Qn instanceof _e?Qn:new _e(function(jn){jn(Qn)})).then(Tn,Dn)}bn((xe=xe.apply(Wt,ve||[])).next())})},Et=u.items,Qt=u.itemKey,Rt=Qt===void 0?void 0:Qt,kt=u.itemHeight,zt=kt===void 0?void 0:kt,pe=u.buffer,se=pe===void 0?200:pe,Re=u.stickToBottom,Te=Re!==void 0&&Re,Ne=u.scrollbar,le=Ne!==void 0&&Ne,he=u.start,ke=he===void 0?0:he,An=u.end,Ge=An===void 0?0:An,Le=0,ye=0,Yt=0,Zt=0,He=100,Pt=0,ce=[],we=[],ae=[],Se=yr(),We=function(){return Math.max(0,Zt+Le+ye-Yt)},en=!0,on=!1,ze=[],wn=!1,cn=!1,Sn=sn(),$e=function(Wt,ve){var _e;(0,l.H3)(function(){var xe=Wt();if(xe){ve(xe.getBoundingClientRect().height),_e&&_e.disconnect();var Oe=hn();(_e=new Oe(function(Ve){var Tn=Ve[0];ve(Tn.contentRect.height)})).observe(xe)}else ve(0),_e&&(_e.disconnect(),_e=null)}),(0,l.ev)(function(){_e&&(_e.disconnect(),_e=null)})},Rn=function(){var Wt=M.getPosition(),ve=100/(Zt+Le+ye);o(8,Pt=Wt*ve),o(7,He=Yt*ve)},rn=function(Wt){var ve=We();(Wt||M.getPosition()>ve)&&M.updatePosition(ve)},Vn=function(Wt){(function(ve,_e,xe){for(var Oe=new Map,Ve=0;Ve<ze.length;Ve+=1){var Tn=ze[Ve],Dn=Rt===void 0?Tn:Tn[Rt];Oe.set(Dn,ce[Ve])}o(9,we.length=ce.length=ve.length,we);for(var bn=0,nn=0;nn<ve.length;nn+=1){var Qn=ve[nn],jn=Rt===void 0?Qn:Qn[Rt];Oe.has(jn)?ce[nn]=Oe.get(jn):ce[nn]=xe,o(9,we[nn]=bn,we),bn+=ce[nn]}Zt=Math.max(bn,_e-Le-ye),ze=ve,Sn?($n(ve,M.getPosition(),_e),o(6,w.style.height=Zt+"px",w),rn(en&&Te),Rn()):$n(ve,0,9e6)})(Wt,Yt,zt)};function $n(Wt,ve,_e){for(var xe=0,Oe=0;xe<Wt.length&&Oe+ce[xe]<ve-se;)Oe+=ce[xe],xe+=1;for(o(16,ke=xe);xe<Wt.length&&_e&&Oe<ve+_e+se;)Oe+=ce[xe],xe+=1;o(17,Ge=xe),o(10,ae=Se(Wt.length,ke,Ge))}var oA=function(Wt,ve){return nt(void 0,void 0,void 0,De().mark(function _e(){var xe,Oe,Ve,Tn;return De().wrap(function(Dn){for(;;)switch(Dn.prev=Dn.next){case 0:if(ce[Wt]!==ve&&Yt!==0){Dn.next=2;break}return Dn.abrupt("return");case 2:for(xe=ce[Wt],ce[Wt]=ve,Oe=Et.length,Ve=Wt;Ve<Oe-1;Ve+=1)o(9,we[Ve+1]=we[Ve]+ce[Ve],we);return Zt=Math.max(we[Oe-1]+ce[Oe-1],Yt-Le-ye),Tn=M.getPosition(),on=!0,we[Wt]+xe<Tn?M.updatePosition(Tn+ve-xe):rn(en&&Te),Dn.next=12,new Promise(function(bn){return setTimeout(bn,0)});case 12:$n(Et,M.getPosition(),Yt),o(6,w.style.height=Zt+"px",w),Rn();case 15:case"end":return Dn.stop()}},_e)}))};(0,l.H3)(function(){o(23,wn=!0),ni.use()}),(0,l.ev)(function(){ni.unuse()}),Sn&&(Sn&&(M=M||new Cr(We,function(Wt){return nt(void 0,void 0,void 0,De().mark(function ve(){var _e;return De().wrap(function(xe){for(;;)switch(xe.prev=xe.next){case 0:if(_e=We(),en=Math.abs(Wt-_e)<=1,o(5,C.style.transform="translateY("+-Wt+"px) translateZ(0)",C),Rn(),!on){xe.next=8;break}on=!1,xe.next=11;break;case 8:return xe.next=10,new Promise(function(Oe){return setTimeout(Oe,0)});case 10:$n(Et,Wt,Yt);case 11:case"end":return xe.stop()}},ve)}))}),o(11,k=k||new Qr(M))),!cn&&Sn&&($e(function(){return p},function(Wt){return nt(void 0,void 0,void 0,De().mark(function ve(){var _e,xe;return De().wrap(function(Oe){for(;;)switch(Oe.prev=Oe.next){case 0:if(Yt!==Wt){Oe.next=2;break}return Oe.abrupt("return");case 2:for(Yt=Wt,_e=0,xe=0;xe<Et.length;xe+=1)_e+=ce[xe];return Zt=Math.max(_e,Yt-ye),o(6,w.style.height=Zt+"px",w),Oe.next=9,new Promise(function(Ve){return setTimeout(Ve,0)});case 9:Vn(Et),$n(Et,M.getPosition(),Yt),Yt!==0&&rn(en&&Te),Rn();case 13:case"end":return Oe.stop()}},ve)}))}),$e(function(){return g},function(Wt){if(ye!==Wt){ye=Wt;for(var ve=0,_e=0;_e<Et.length;_e+=1)ve+=ce[_e];Zt=Math.max(ve,Yt-Le-ye),o(6,w.style.height=Zt+"px",w),Yt!==0&&rn(en&&Te),Rn()}}),$e(function(){return c},function(Wt){Le!==Wt&&(Le=Wt,Vn(Et),Rn())})));var fA={scrollTo:function(Wt){if(Sn){var ve=we[Math.max(0,Math.min(Et.length-1,Wt))],_e=Math.min(We(),ve),xe=Math.min(Math.floor(500*Math.abs(M.getPosition()-_e)/2e3),500);M.scrollTo(_e,xe)}}};return h.$$set=function(Wt){"items"in Wt&&o(0,Et=Wt.items),"itemKey"in Wt&&o(18,Rt=Wt.itemKey),"itemHeight"in Wt&&o(19,zt=Wt.itemHeight),"buffer"in Wt&&o(20,se=Wt.buffer),"stickToBottom"in Wt&&o(21,Te=Wt.stickToBottom),"scrollbar"in Wt&&o(1,le=Wt.scrollbar),"start"in Wt&&o(16,ke=Wt.start),"end"in Wt&&o(17,Ge=Wt.end),"$$scope"in Wt&&o(31,V=Wt.$$scope)},h.$$.update=function(){8388609&h.$$.dirty[0]&&wn&&(Sn||o(4,p.parentElement.style.height="auto",p),Vn(Et),cn=!0)},[Et,le,c,g,p,C,w,He,Pt,we,ae,k,function(){},Sn,oA,ot,ke,Ge,Rt,zt,se,Te,fA,wn,X,function(Wt){n.VnY[Wt?"unshift":"push"](function(){o(2,c=Wt)})},function(Wt,ve){return oA(Wt.index,ve)},function(Wt){n.VnY[Wt?"unshift":"push"](function(){o(6,w=Wt)})},function(Wt){n.VnY[Wt?"unshift":"push"](function(){o(3,g=Wt)})},function(Wt){n.VnY[Wt?"unshift":"push"](function(){o(5,C=Wt)})},function(Wt){n.VnY[Wt?"unshift":"push"](function(){o(4,p=Wt),o(23,wn),o(13,Sn),o(0,Et)})},V]}var Lr=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,Tr,Rr,n.N8,{items:0,itemKey:18,itemHeight:19,buffer:20,stickToBottom:21,scrollbar:1,start:16,end:17,handler:22},null,[-1,-1]),c}return(0,s.Z)(u,h),(0,r.Z)(u,[{key:"items",get:function(){return this.$$.ctx[0]},set:function(o){this.$$set({items:o}),(0,n.yl1)()}},{key:"itemKey",get:function(){return this.$$.ctx[18]},set:function(o){this.$$set({itemKey:o}),(0,n.yl1)()}},{key:"itemHeight",get:function(){return this.$$.ctx[19]},set:function(o){this.$$set({itemHeight:o}),(0,n.yl1)()}},{key:"buffer",get:function(){return this.$$.ctx[20]},set:function(o){this.$$set({buffer:o}),(0,n.yl1)()}},{key:"stickToBottom",get:function(){return this.$$.ctx[21]},set:function(o){this.$$set({stickToBottom:o}),(0,n.yl1)()}},{key:"scrollbar",get:function(){return this.$$.ctx[1]},set:function(o){this.$$set({scrollbar:o}),(0,n.yl1)()}},{key:"start",get:function(){return this.$$.ctx[16]},set:function(o){this.$$set({start:o}),(0,n.yl1)()}},{key:"end",get:function(){return this.$$.ctx[17]},set:function(o){this.$$set({end:o}),(0,n.yl1)()}},{key:"handler",get:function(){return this.$$.ctx[22]}}]),u}(n.f_C),gi=Lr;function Fr(h){var u;return{c:function(){(u=(0,n.bGB)("div")).textContent="Empty",(0,n.Ljt)(u,"slot","empty"),(0,n.Ljt)(u,"class","vc-plugin-empty")},m:function(o,c){(0,n.$Tr)(o,u,c)},p:n.ZTd,d:function(o){o&&(0,n.ogt)(u)}}}function Nr(h){var u,o;return(u=new Ue({props:{slot:"item",log:h[16],showTimestamps:h[1],groupHeader:h[16].groupHeader}})).$on("groupCollapsed",h[6]),{c:function(){(0,n.YCL)(u.$$.fragment)},m:function(c,g){(0,n.yef)(u,c,g),o=!0},p:function(c,g){var p={};65536&g&&(p.log=c[16]),2&g&&(p.showTimestamps=c[1]),65536&g&&(p.groupHeader=c[16].groupHeader),u.$set(p)},i:function(c){o||((0,n.Ui)(u.$$.fragment,c),o=!0)},o:function(c){(0,n.etI)(u.$$.fragment,c),o=!1},d:function(c){(0,n.vpE)(u,c)}}}function hi(h){var u,o;return(u=new Ce.Z({})).$on("filterText",h[5]),{c:function(){(0,n.YCL)(u.$$.fragment)},m:function(c,g){(0,n.yef)(u,c,g),o=!0},p:n.ZTd,i:function(c){o||((0,n.Ui)(u.$$.fragment,c),o=!0)},o:function(c){(0,n.etI)(u.$$.fragment,c),o=!1},d:function(c){(0,n.vpE)(u,c)}}}function kr(h){var u,o,c=h[0]&&hi(h);return{c:function(){c&&c.c(),u=(0,n.cSb)()},m:function(g,p){c&&c.m(g,p),(0,n.$Tr)(g,u,p),o=!0},p:function(g,p){g[0]?c?(c.p(g,p),1&p&&(0,n.Ui)(c,1)):((c=hi(g)).c(),(0,n.Ui)(c,1),c.m(u.parentNode,u)):c&&((0,n.dvw)(),(0,n.etI)(c,1,1,function(){c=null}),(0,n.gbL)())},i:function(g){o||((0,n.Ui)(c),o=!0)},o:function(g){(0,n.etI)(c),o=!1},d:function(g){c&&c.d(g),g&&(0,n.ogt)(u)}}}function Ur(h){var u,o,c,g;function p(w){h[15](w)}var C={items:h[4],itemKey:"_id",itemHeight:30,buffer:100,stickToBottom:!0,scrollbar:!0,$$slots:{footer:[kr],item:[Nr,function(w){return{16:w.item}},function(w){return w.item?65536:0}],empty:[Fr]},$$scope:{ctx:h}};return h[3]!==void 0&&(C.handler=h[3]),o=new gi({props:C}),n.VnY.push(function(){return(0,n.akz)(o,"handler",p)}),{c:function(){u=(0,n.bGB)("div"),(0,n.YCL)(o.$$.fragment),(0,n.Ljt)(u,"class","vc-plugin-content"),(0,n.VHj)(u,"vc-logs-has-cmd",h[0])},m:function(w,M){(0,n.$Tr)(w,u,M),(0,n.yef)(o,u,null),g=!0},p:function(w,M){var k=M[0],z={};16&k&&(z.items=w[4]),196611&k&&(z.$$scope={dirty:k,ctx:w}),!c&&8&k&&(c=!0,z.handler=w[3],(0,n.hjT)(function(){return c=!1})),o.$set(z),1&k&&(0,n.VHj)(u,"vc-logs-has-cmd",w[0])},i:function(w){g||((0,n.Ui)(o.$$.fragment,w),g=!0)},o:function(w){(0,n.etI)(o.$$.fragment,w),g=!1},d:function(w){w&&(0,n.ogt)(u),(0,n.vpE)(o)}}}function Gr(h,u,o){var c,g=n.ZTd;h.$$.on_destroy.push(function(){return g()});var p,C,w=u.pluginId,M=w===void 0?"default":w,k=u.showCmd,z=k!==void 0&&k,X=u.filterType,V=X===void 0?"all":X,ot=u.showTimestamps,nt=ot!==void 0&&ot,Et=!1,Qt="",Rt=[];return(0,l.H3)(function(){Zn.use()}),(0,l.ev)(function(){Zn.unuse()}),h.$$set=function(kt){"pluginId"in kt&&o(7,M=kt.pluginId),"showCmd"in kt&&o(0,z=kt.showCmd),"filterType"in kt&&o(8,V=kt.filterType),"showTimestamps"in kt&&o(1,nt=kt.showTimestamps)},h.$$.update=function(){29056&h.$$.dirty&&(Et||(o(2,p=It.O.get(M)),g(),g=(0,n.LdU)(p,function(kt){return o(14,c=kt)}),o(12,Et=!0)),o(4,Rt=c.logList.filter(function(kt){return(V==="all"||V===kt.type)&&(Qt===""||(0,U.HX)(kt,Qt))&&!kt.groupCollapsed})))},[z,nt,p,C,Rt,function(kt){o(13,Qt=kt.detail.filterText||"")},function(kt){var zt=kt.detail.groupLabel,pe=kt.detail.groupHeader,se=kt.detail.isGroupCollapsed;p.update(function(Re){return Re.logList.forEach(function(Te){Te.groupLabel===zt&&(Te.groupHeader>0?Te.groupHeader=pe:Te.groupCollapsed=se)}),Re})},M,V,function(){C.scrollTo(0)},function(){C.scrollTo(Rt.length-1)},{fixedHeight:!0},Et,Qt,c,function(kt){o(3,C=kt)}]}var Pr=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,Gr,Ur,n.N8,{pluginId:7,showCmd:0,filterType:8,showTimestamps:1,scrollToTop:9,scrollToBottom:10,options:11}),c}return(0,s.Z)(u,h),(0,r.Z)(u,[{key:"pluginId",get:function(){return this.$$.ctx[7]},set:function(o){this.$$set({pluginId:o}),(0,n.yl1)()}},{key:"showCmd",get:function(){return this.$$.ctx[0]},set:function(o){this.$$set({showCmd:o}),(0,n.yl1)()}},{key:"filterType",get:function(){return this.$$.ctx[8]},set:function(o){this.$$set({filterType:o}),(0,n.yl1)()}},{key:"showTimestamps",get:function(){return this.$$.ctx[1]},set:function(o){this.$$set({showTimestamps:o}),(0,n.yl1)()}},{key:"scrollToTop",get:function(){return this.$$.ctx[9]}},{key:"scrollToBottom",get:function(){return this.$$.ctx[10]}},{key:"options",get:function(){return this.$$.ctx[11]}}]),u}(n.f_C),Or=Pr,EA=__webpack_require__(5629),di=function(){function h(u){this.model=void 0,this.pluginId=void 0,this.pluginId=u}return h.prototype.destroy=function(){this.model=void 0},h}(),Hr=function(h){function u(){for(var c,g=arguments.length,p=new Array(g),C=0;C<g;C++)p[C]=arguments[C];return(c=h.call.apply(h,[this].concat(p))||this).model=EA.W.getSingleton(EA.W,"VConsoleLogModel"),c}(0,s.Z)(u,h);var o=u.prototype;return o.log=function(){for(var c=arguments.length,g=new Array(c),p=0;p<c;p++)g[p]=arguments[p];this.addLog.apply(this,["log"].concat(g))},o.info=function(){for(var c=arguments.length,g=new Array(c),p=0;p<c;p++)g[p]=arguments[p];this.addLog.apply(this,["info"].concat(g))},o.debug=function(){for(var c=arguments.length,g=new Array(c),p=0;p<c;p++)g[p]=arguments[p];this.addLog.apply(this,["debug"].concat(g))},o.warn=function(){for(var c=arguments.length,g=new Array(c),p=0;p<c;p++)g[p]=arguments[p];this.addLog.apply(this,["warn"].concat(g))},o.error=function(){for(var c=arguments.length,g=new Array(c),p=0;p<c;p++)g[p]=arguments[p];this.addLog.apply(this,["error"].concat(g))},o.clear=function(){this.model&&this.model.clearPluginLog(this.pluginId)},o.addLog=function(c){if(this.model){for(var g=arguments.length,p=new Array(g>1?g-1:0),C=1;C<g;C++)p[C-1]=arguments[C];p.unshift("["+this.pluginId+"]"),this.model.addLog({type:c,origData:p},{noOrig:!0})}},u}(di),UA=function(h){function u(c,g){var p;return(p=h.call(this,c,g,Or,{pluginId:c,filterType:"all"})||this).model=EA.W.getSingleton(EA.W,"VConsoleLogModel"),p.isReady=!1,p.isShow=!1,p.isInBottom=!0,p.model.bindPlugin(c),p.exporter=new Hr(c),p}(0,s.Z)(u,h);var o=u.prototype;return o.onReady=function(){var c,g;h.prototype.onReady.call(this),this.model.maxLogNumber=Number((c=this.vConsole.option.log)==null?void 0:c.maxLogNumber)||1e3,this.compInstance.showTimestamps=!((g=this.vConsole.option.log)==null||!g.showTimestamps)},o.onRemove=function(){h.prototype.onRemove.call(this),this.model.unbindPlugin(this.id)},o.onAddTopBar=function(c){for(var g=this,p=["All","Log","Info","Warn","Error"],C=[],w=0;w<p.length;w++)C.push({name:p[w],data:{type:p[w].toLowerCase()},actived:w===0,className:"",onClick:function(M,k){if(k.type===g.compInstance.filterType)return!1;g.compInstance.filterType=k.type}});C[0].className="vc-actived",c(C)},o.onAddTool=function(c){var g=this;c([{name:"Clear",global:!1,onClick:function(p){g.model.clearPluginLog(g.id),g.vConsole.triggerEvent("clearLog")}},{name:"Top",global:!1,onClick:function(p){g.compInstance.scrollToTop()}},{name:"Bottom",global:!1,onClick:function(p){g.compInstance.scrollToBottom()}}])},o.onUpdateOption=function(){var c,g,p,C;((c=this.vConsole.option.log)==null?void 0:c.maxLogNumber)!==this.model.maxLogNumber&&(this.model.maxLogNumber=Number((p=this.vConsole.option.log)==null?void 0:p.maxLogNumber)||1e3),!((g=this.vConsole.option.log)==null||!g.showTimestamps)!==this.compInstance.showTimestamps&&(this.compInstance.showTimestamps=!((C=this.vConsole.option.log)==null||!C.showTimestamps))},u}(W),fi=function(h){function u(){for(var c,g=arguments.length,p=new Array(g),C=0;C<g;C++)p[C]=arguments[C];return(c=h.call.apply(h,[this].concat(p))||this).onErrorHandler=void 0,c.resourceErrorHandler=void 0,c.rejectionHandler=void 0,c}(0,s.Z)(u,h);var o=u.prototype;return o.onReady=function(){h.prototype.onReady.call(this),this.bindErrors(),this.compInstance.showCmd=!0},o.onRemove=function(){h.prototype.onRemove.call(this),this.unbindErrors()},o.bindErrors=function(){t.FJ(window)&&t.mf(window.addEventListener)&&(this.catchWindowOnError(),this.catchResourceError(),this.catchUnhandledRejection())},o.unbindErrors=function(){t.FJ(window)&&t.mf(window.addEventListener)&&(window.removeEventListener("error",this.onErrorHandler),window.removeEventListener("error",this.resourceErrorHandler),window.removeEventListener("unhandledrejection",this.rejectionHandler))},o.catchWindowOnError=function(){var c=this;this.onErrorHandler=this.onErrorHandler?this.onErrorHandler:function(g){var p=g.message;g.filename&&(p+="\\n\\t"+g.filename.replace(location.origin,""),(g.lineno||g.colno)&&(p+=":"+g.lineno+":"+g.colno)),p+="\\n"+(!!g.error&&!!g.error.stack&&g.error.stack.toString()||""),c.model.addLog({type:"error",origData:[p]},{noOrig:!0})},window.removeEventListener("error",this.onErrorHandler),window.addEventListener("error",this.onErrorHandler)},o.catchResourceError=function(){var c=this;this.resourceErrorHandler=this.resourceErrorHandler?this.resourceErrorHandler:function(g){var p=g.target;if(["link","video","script","img","audio"].indexOf(p.localName)>-1){var C=p.href||p.src||p.currentSrc;c.model.addLog({type:"error",origData:["GET <"+p.localName+"> error: "+C]},{noOrig:!0})}},window.removeEventListener("error",this.resourceErrorHandler),window.addEventListener("error",this.resourceErrorHandler,!0)},o.catchUnhandledRejection=function(){var c=this;this.rejectionHandler=this.rejectionHandler?this.rejectionHandler:function(g){var p=g&&g.reason,C="Uncaught (in promise) ",w=[C,p];p instanceof Error&&(w=[C,{name:p.name,message:p.message,stack:p.stack}]),c.model.addLog({type:"error",origData:w},{noOrig:!0})},window.removeEventListener("unhandledrejection",this.rejectionHandler),window.addEventListener("unhandledrejection",this.rejectionHandler)},u}(UA),pi=function(h){function u(){return h.apply(this,arguments)||this}(0,s.Z)(u,h);var o=u.prototype;return o.onReady=function(){h.prototype.onReady.call(this),this.printSystemInfo()},o.printSystemInfo=function(){var c=navigator.userAgent,g=[],p=c.match(/MicroMessenger\/([\d\.]+)/i),C=p&&p[1]?p[1]:null;location.host==="servicewechat.com"||console.info("[system]","Location:",location.href);var w=c.match(/(ipod).*\s([\d_]+)/i),M=c.match(/(ipad).*\s([\d_]+)/i),k=c.match(/(iphone)\sos\s([\d_]+)/i),z=c.match(/(android)\s([\d\.]+)/i),X=c.match(/(Mac OS X)\s([\d_]+)/i);g=[],z?g.push("Android "+z[2]):k?g.push("iPhone, iOS "+k[2].replace(/_/g,".")):M?g.push("iPad, iOS "+M[2].replace(/_/g,".")):w?g.push("iPod, iOS "+w[2].replace(/_/g,".")):X&&g.push("Mac, MacOS "+X[2].replace(/_/g,".")),C&&g.push("WeChat "+C),console.info("[system]","Client:",g.length?g.join(", "):"Unknown");var V=c.toLowerCase().match(/ nettype\/([^ ]+)/g);V&&V[0]&&(g=[(V=V[0].split("/"))[1]],console.info("[system]","Network:",g.length?g.join(", "):"Unknown")),console.info("[system]","UA:",c),setTimeout(function(){var ot=window.performance||window.msPerformance||window.webkitPerformance;if(ot&&ot.timing){var nt=ot.timing;nt.navigationStart&&console.info("[system]","navigationStart:",nt.navigationStart),nt.navigationStart&&nt.domainLookupStart&&console.info("[system]","navigation:",nt.domainLookupStart-nt.navigationStart+"ms"),nt.domainLookupEnd&&nt.domainLookupStart&&console.info("[system]","dns:",nt.domainLookupEnd-nt.domainLookupStart+"ms"),nt.connectEnd&&nt.connectStart&&(nt.connectEnd&&nt.secureConnectionStart?console.info("[system]","tcp (ssl):",nt.connectEnd-nt.connectStart+"ms ("+(nt.connectEnd-nt.secureConnectionStart)+"ms)"):console.info("[system]","tcp:",nt.connectEnd-nt.connectStart+"ms")),nt.responseStart&&nt.requestStart&&console.info("[system]","request:",nt.responseStart-nt.requestStart+"ms"),nt.responseEnd&&nt.responseStart&&console.info("[system]","response:",nt.responseEnd-nt.responseStart+"ms"),nt.domComplete&&nt.domLoading&&(nt.domContentLoadedEventStart&&nt.domLoading?console.info("[system]","domComplete (domLoaded):",nt.domComplete-nt.domLoading+"ms ("+(nt.domContentLoadedEventStart-nt.domLoading)+"ms)"):console.info("[system]","domComplete:",nt.domComplete-nt.domLoading+"ms")),nt.loadEventEnd&&nt.loadEventStart&&console.info("[system]","loadEvent:",nt.loadEventEnd-nt.loadEventStart+"ms"),nt.navigationStart&&nt.loadEventEnd&&console.info("[system]","total (DOM):",nt.loadEventEnd-nt.navigationStart+"ms ("+(nt.domComplete-nt.navigationStart)+"ms)")}},0)},u}(UA),un=__webpack_require__(3313),Ii=__webpack_require__(643);function GA(h,u){var o=typeof Symbol<"u"&&h[Symbol.iterator]||h["@@iterator"];if(o)return(o=o.call(h)).next.bind(o);if(Array.isArray(h)||(o=function(g,p){if(g){if(typeof g=="string")return Ei(g,p);var C=Object.prototype.toString.call(g).slice(8,-1);if(C==="Object"&&g.constructor&&(C=g.constructor.name),C==="Map"||C==="Set")return Array.from(g);if(C==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C))return Ei(g,p)}}(h))||u){o&&(h=o);var c=0;return function(){return c>=h.length?{done:!0}:{done:!1,value:h[c++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Ei(h,u){(u==null||u>h.length)&&(u=h.length);for(var o=0,c=new Array(u);o<u;o++)c[o]=h[o];return c}var Ci=function(h,u){u===void 0&&(u={}),t.Kn(u)||(u={});var o=h?h.split("?"):[];if(o.shift(),o.length>0)for(var c,g=GA(o=o.join("?").split("&"));!(c=g()).done;){var p=c.value.split("=");try{u[p[0]]=decodeURIComponent(p[1])}catch{u[p[0]]=p[1]}}return u},aA=function(h,u){var o="";switch(h){case"":case"text":case"json":if(t.HD(u))try{o=JSON.parse(u),o=t.hZ(o,{maxDepth:10,keyMaxLen:1e4,pretty:!0,standardJSON:!0})}catch{o=t.id(String(u),1e4)}else t.Kn(u)||t.kJ(u)?o=t.hZ(u,{maxDepth:10,keyMaxLen:1e4,pretty:!0,standardJSON:!0}):u!==void 0&&(o=Object.prototype.toString.call(u));break;default:u!==void 0&&(o=Object.prototype.toString.call(u))}return o},PA=function(h){if(!h)return null;var u=null;if(typeof h=="string")try{u=JSON.parse(h)}catch{var o=h.split("&");if(o.length===1)u=h;else{u={};for(var c,g=GA(o);!(c=g()).done;){var p=c.value.split("=");u[p[0]]=p[1]===void 0?"undefined":p[1]}}}else if(t.TW(h)){u={};for(var C,w=GA(h);!(C=w()).done;){var M=C.value,k=M[0],z=M[1];u[k]=typeof z=="string"?z:"[object Object]"}}else t.PO(h)?u=h:u="[object "+t.zl(h)+"]";return u},OA=function(h){return h===void 0&&(h=""),h.startsWith("//")&&(h=""+new URL(window.location.href).protocol+h),h.startsWith("http")?new URL(h):new URL(h,window.location.href)},uA=function(){this.id="",this.name="",this.method="",this.url="",this.status=0,this.statusText="",this.cancelState=0,this.readyState=0,this.header=null,this.responseType="",this.requestType=void 0,this.requestHeader=null,this.response=void 0,this.responseSize=0,this.responseSizeText="",this.startTime=0,this.startTimeText="",this.endTime=0,this.costTime=0,this.getData=null,this.postData=null,this.actived=!1,this.noVConsole=!1,this.id=(0,t.QI)()},Bi=function(h){function u(o){var c;return(c=h.call(this)||this)._response=void 0,new Proxy(o,u.Handler)||(0,a.Z)(c)}return(0,s.Z)(u,h),u}(uA);Bi.Handler={get:function(h,u){return u==="response"?h._response:Reflect.get(h,u)},set:function(h,u,o){var c;switch(u){case"response":return h._response=aA(h.responseType,o),!0;case"url":var g=((c=o=String(o))==null?void 0:c.replace(new RegExp("[/]*$"),"").split("/").pop())||"Unknown";Reflect.set(h,"name",g);var p=Ci(o,h.getData);Reflect.set(h,"getData",p);break;case"status":var C=String(o)||"Unknown";Reflect.set(h,"statusText",C);break;case"startTime":if(o&&h.endTime){var w=h.endTime-o;Reflect.set(h,"costTime",w)}break;case"endTime":if(o&&h.startTime){var M=o-h.startTime;Reflect.set(h,"costTime",M)}}return Reflect.set(h,u,o)}};var zr=function(){function h(o,c){var g=this;this.XMLReq=void 0,this.item=void 0,this.onUpdateCallback=void 0,this.XMLReq=o,this.XMLReq.onreadystatechange=function(){g.onReadyStateChange()},this.XMLReq.onabort=function(){g.onAbort()},this.XMLReq.ontimeout=function(){g.onTimeout()},this.item=new uA,this.item.requestType="xhr",this.onUpdateCallback=c}var u=h.prototype;return u.get=function(o,c){switch(c){case"_noVConsole":return this.item.noVConsole;case"open":return this.getOpen(o);case"send":return this.getSend(o);case"setRequestHeader":return this.getSetRequestHeader(o);default:var g=Reflect.get(o,c);return typeof g=="function"?g.bind(o):g}},u.set=function(o,c,g){switch(c){case"_noVConsole":return void(this.item.noVConsole=!!g);case"onreadystatechange":return this.setOnReadyStateChange(o,c,g);case"onabort":return this.setOnAbort(o,c,g);case"ontimeout":return this.setOnTimeout(o,c,g)}return Reflect.set(o,c,g)},u.onReadyStateChange=function(){this.item.readyState=this.XMLReq.readyState,this.item.responseType=this.XMLReq.responseType,this.item.endTime=Date.now(),this.item.costTime=this.item.endTime-this.item.startTime,this.updateItemByReadyState(),this.item.response=aA(this.item.responseType,this.item.response),this.triggerUpdate()},u.onAbort=function(){this.item.cancelState=1,this.item.statusText="Abort",this.triggerUpdate()},u.onTimeout=function(){this.item.cancelState=3,this.item.statusText="Timeout",this.triggerUpdate()},u.triggerUpdate=function(){this.item.noVConsole||this.onUpdateCallback(this.item)},u.getOpen=function(o){var c=this,g=Reflect.get(o,"open");return function(){for(var p=arguments.length,C=new Array(p),w=0;w<p;w++)C[w]=arguments[w];var M=C[0],k=C[1];return c.item.method=M?M.toUpperCase():"GET",c.item.url=k||"",c.item.name=c.item.url.replace(new RegExp("[/]*$"),"").split("/").pop()||"",c.item.getData=Ci(c.item.url,{}),c.triggerUpdate(),g.apply(o,C)}},u.getSend=function(o){var c=this,g=Reflect.get(o,"send");return function(){for(var p=arguments.length,C=new Array(p),w=0;w<p;w++)C[w]=arguments[w];var M=C[0];return c.item.postData=PA(M),c.triggerUpdate(),g.apply(o,C)}},u.getSetRequestHeader=function(o){var c=this,g=Reflect.get(o,"setRequestHeader");return function(){c.item.requestHeader||(c.item.requestHeader={});for(var p=arguments.length,C=new Array(p),w=0;w<p;w++)C[w]=arguments[w];return c.item.requestHeader[C[0]]=C[1],c.triggerUpdate(),g.apply(o,C)}},u.setOnReadyStateChange=function(o,c,g){var p=this;return Reflect.set(o,c,function(){p.onReadyStateChange();for(var C=arguments.length,w=new Array(C),M=0;M<C;M++)w[M]=arguments[M];g.apply(o,w)})},u.setOnAbort=function(o,c,g){var p=this;return Reflect.set(o,c,function(){p.onAbort();for(var C=arguments.length,w=new Array(C),M=0;M<C;M++)w[M]=arguments[M];g.apply(o,w)})},u.setOnTimeout=function(o,c,g){var p=this;return Reflect.set(o,c,function(){p.onTimeout();for(var C=arguments.length,w=new Array(C),M=0;M<C;M++)w[M]=arguments[M];g.apply(o,w)})},u.updateItemByReadyState=function(){switch(this.XMLReq.readyState){case 0:case 1:if(this.item.status=0,this.item.statusText="Pending",!this.item.startTime){this.item.startTime=Date.now();var o=(0,t._3)(this.item.startTime);this.item.startTimeText=o.year+"-"+o.month+"-"+o.day+" "+o.hour+":"+o.minute+":"+o.second+"."+o.millisecond}break;case 2:this.item.status=this.XMLReq.status,this.item.statusText="Loading",this.item.header={};for(var c=(this.XMLReq.getAllResponseHeaders()||"").split(`
`),g=0;g<c.length;g++){var p=c[g];if(p){var C=p.split(": "),w=C[0],M=C.slice(1).join(": ");this.item.header[w]=M}}break;case 3:this.item.status=this.XMLReq.status,this.item.statusText="Loading",this.XMLReq.response&&this.XMLReq.response.length&&(this.item.responseSize=this.XMLReq.response.length,this.item.responseSizeText=(0,t.KL)(this.item.responseSize));break;case 4:this.item.status=this.XMLReq.status||this.item.status||0,this.item.statusText=String(this.item.status),this.item.endTime=Date.now(),this.item.costTime=this.item.endTime-(this.item.startTime||this.item.endTime),this.item.response=this.XMLReq.response,this.XMLReq.response&&this.XMLReq.response.length&&(this.item.responseSize=this.XMLReq.response.length,this.item.responseSizeText=(0,t.KL)(this.item.responseSize));break;default:this.item.status=this.XMLReq.status,this.item.statusText="Unknown"}},h}(),HA=function(){function h(){}return h.create=function(u){return new Proxy(XMLHttpRequest,{construct:function(o){var c=new o;return new Proxy(c,new zr(c,u))}})},h}();function zA(h,u){var o=typeof Symbol<"u"&&h[Symbol.iterator]||h["@@iterator"];if(o)return(o=o.call(h)).next.bind(o);if(Array.isArray(h)||(o=function(g,p){if(g){if(typeof g=="string")return mi(g,p);var C=Object.prototype.toString.call(g).slice(8,-1);if(C==="Object"&&g.constructor&&(C=g.constructor.name),C==="Map"||C==="Set")return Array.from(g);if(C==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C))return mi(g,p)}}(h))||u){o&&(h=o);var c=0;return function(){return c>=h.length?{done:!0}:{done:!1,value:h[c++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function mi(h,u){(u==null||u>h.length)&&(u=h.length);for(var o=0,c=new Array(u);o<u;o++)c[o]=h[o];return c}HA.origXMLHttpRequest=XMLHttpRequest;var Yr=function(){function h(o,c,g){this.resp=void 0,this.item=void 0,this.onUpdateCallback=void 0,this.resp=o,this.item=c,this.onUpdateCallback=g,this.mockReader()}var u=h.prototype;return u.set=function(o,c,g){return Reflect.set(o,c,g)},u.get=function(o,c){var g=this,p=Reflect.get(o,c);switch(c){case"arrayBuffer":case"blob":case"formData":case"json":case"text":return function(){return g.item.responseType=c.toLowerCase(),p.apply(o).then(function(C){return g.item.response=aA(g.item.responseType,C),g.onUpdateCallback(g.item),C})}}return typeof p=="function"?p.bind(o):p},u.mockReader=function(){var o,c=this;if(this.resp.body&&typeof this.resp.body.getReader=="function"){var g=this.resp.body.getReader;this.resp.body.getReader=function(){var p=g.apply(c.resp.body);if(c.item.readyState===4)return p;var C=p.read,w=p.cancel;return c.item.responseType="arraybuffer",p.read=function(){return C.apply(p).then(function(M){if(o){var k=new Uint8Array(o.length+M.value.length);k.set(o),k.set(M.value,o.length),o=k}else o=new Uint8Array(M.value);return c.item.endTime=Date.now(),c.item.costTime=c.item.endTime-(c.item.startTime||c.item.endTime),c.item.readyState=M.done?4:3,c.item.statusText=M.done?String(c.item.status):"Loading",c.item.responseSize=o.length,c.item.responseSizeText=t.KL(c.item.responseSize),M.done&&(c.item.response=aA(c.item.responseType,o)),c.onUpdateCallback(c.item),M})},p.cancel=function(){c.item.cancelState=2,c.item.statusText="Cancel",c.item.endTime=Date.now(),c.item.costTime=c.item.endTime-(c.item.startTime||c.item.endTime),c.item.response=aA(c.item.responseType,o),c.onUpdateCallback(c.item);for(var M=arguments.length,k=new Array(M),z=0;z<M;z++)k[z]=arguments[z];return w.apply(p,k)},p}}},h}(),Vr=function(){function h(o){this.onUpdateCallback=void 0,this.onUpdateCallback=o}var u=h.prototype;return u.apply=function(o,c,g){var p=this,C=g[0],w=g[1],M=new uA;return this.beforeFetch(M,C,w),o.apply(window,g).then(this.afterFetch(M)).catch(function(k){throw M.endTime=Date.now(),M.costTime=M.endTime-(M.startTime||M.endTime),p.onUpdateCallback(M),k})},u.beforeFetch=function(o,c,g){var p,C="GET",w=null;if(t.HD(c)?(C=(g==null?void 0:g.method)||"GET",p=OA(c),w=(g==null?void 0:g.headers)||null):(C=c.method||"GET",p=OA(c.url),w=c.headers),o.method=C,o.requestType="fetch",o.requestHeader=w,o.url=p.toString(),o.name=(p.pathname.split("/").pop()||"")+p.search,o.status=0,o.statusText="Pending",o.readyState=1,!o.startTime){o.startTime=Date.now();var M=t._3(o.startTime);o.startTimeText=M.year+"-"+M.month+"-"+M.day+" "+M.hour+":"+M.minute+":"+M.second+"."+M.millisecond}if(Object.prototype.toString.call(w)==="[object Headers]"){o.requestHeader={};for(var k,z=zA(w);!(k=z()).done;){var X=k.value,V=X[0],ot=X[1];o.requestHeader[V]=ot}}else o.requestHeader=w;if(p.search&&p.searchParams){o.getData={};for(var nt,Et=zA(p.searchParams);!(nt=Et()).done;){var Qt=nt.value,Rt=Qt[0],kt=Qt[1];o.getData[Rt]=kt}}g!=null&&g.body&&(o.postData=PA(g.body)),this.onUpdateCallback(o)},u.afterFetch=function(o){var c=this;return function(g){o.endTime=Date.now(),o.costTime=o.endTime-(o.startTime||o.endTime),o.status=g.status,o.statusText=String(g.status);var p=!1;o.header={};for(var C,w=zA(g.headers);!(C=w()).done;){var M=C.value,k=M[0],z=M[1];o.header[k]=z,p=z.toLowerCase().indexOf("chunked")>-1||p}return p?o.readyState=3:(o.readyState=4,c.handleResponseBody(g.clone(),o).then(function(X){o.responseSize=typeof X=="string"?X.length:X.byteLength,o.responseSizeText=t.KL(o.responseSize),o.response=aA(o.responseType,X),c.onUpdateCallback(o)})),c.onUpdateCallback(o),new Proxy(g,new Yr(g,o,c.onUpdateCallback))}},u.handleResponseBody=function(o,c){var g=o.headers.get("content-type");return g&&g.includes("application/json")?(c.responseType="json",o.text()):g&&(g.includes("text/html")||g.includes("text/plain"))?(c.responseType="text",o.text()):(c.responseType="arraybuffer",o.arrayBuffer())},h}(),YA=function(){function h(){}return h.create=function(u){return new Proxy(fetch,new Vr(u))},h}();function Jr(h,u){var o=typeof Symbol<"u"&&h[Symbol.iterator]||h["@@iterator"];if(o)return(o=o.call(h)).next.bind(o);if(Array.isArray(h)||(o=function(g,p){if(g){if(typeof g=="string")return Qi(g,p);var C=Object.prototype.toString.call(g).slice(8,-1);if(C==="Object"&&g.constructor&&(C=g.constructor.name),C==="Map"||C==="Set")return Array.from(g);if(C==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C))return Qi(g,p)}}(h))||u){o&&(h=o);var c=0;return function(){return c>=h.length?{done:!0}:{done:!1,value:h[c++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Qi(h,u){(u==null||u>h.length)&&(u=h.length);for(var o=0,c=new Array(u);o<u;o++)c[o]=h[o];return c}YA.origFetch=fetch;var qr=function(h){return h instanceof Blob?h.type:h instanceof FormData?"multipart/form-data":h instanceof URLSearchParams?"application/x-www-form-urlencoded;charset=UTF-8":"text/plain;charset=UTF-8"},Wr=function(){function h(u){this.onUpdateCallback=void 0,this.onUpdateCallback=u}return h.prototype.apply=function(u,o,c){var g=c[0],p=c[1],C=new uA,w=OA(g);if(C.method="POST",C.url=g,C.name=(w.pathname.split("/").pop()||"")+w.search,C.requestType="ping",C.requestHeader={"Content-Type":qr(p)},C.status=0,C.statusText="Pending",w.search&&w.searchParams){C.getData={};for(var M,k=Jr(w.searchParams);!(M=k()).done;){var z=M.value,X=z[0],V=z[1];C.getData[X]=V}}C.postData=PA(p),C.startTime||(C.startTime=Date.now()),this.onUpdateCallback(C);var ot=u.apply(o,c);return ot?(C.endTime=Date.now(),C.costTime=C.endTime-(C.startTime||C.endTime),C.status=0,C.statusText="Sent",C.readyState=4):(C.status=500,C.statusText="Unknown"),this.onUpdateCallback(C),ot},h}(),VA=function(){function h(){}return h.create=function(u){return new Proxy(navigator.sendBeacon,new Wr(u))},h}();VA.origSendBeacon=navigator.sendBeacon;var tA=(0,un.fZ)({}),CA=function(h){function u(){var c;return(c=h.call(this)||this).maxNetworkNumber=1e3,c.ignoreUrlRegExp=void 0,c.itemCounter=0,c.mockXHR(),c.mockFetch(),c.mockSendBeacon(),c}(0,s.Z)(u,h);var o=u.prototype;return o.unMock=function(){window.hasOwnProperty("XMLHttpRequest")&&(window.XMLHttpRequest=HA.origXMLHttpRequest),window.hasOwnProperty("fetch")&&(window.fetch=YA.origFetch),window.navigator.sendBeacon&&(window.navigator.sendBeacon=VA.origSendBeacon)},o.clearLog=function(){tA.set({})},o.updateRequest=function(c,g){var p,C=g.url;if(!C||(p=this.ignoreUrlRegExp)==null||!p.test(C)){var w=(0,un.U2)(tA),M=!!w[c];if(M){var k=w[c];for(var z in g)k[z]=g[z];g=k}tA.update(function(X){return X[c]=g,X}),M||(q.x.updateTime(),this.limitListLength())}},o.mockXHR=function(){var c=this;window.hasOwnProperty("XMLHttpRequest")&&(window.XMLHttpRequest=HA.create(function(g){c.updateRequest(g.id,g)}))},o.mockFetch=function(){var c=this;window.hasOwnProperty("fetch")&&(window.fetch=YA.create(function(g){c.updateRequest(g.id,g)}))},o.mockSendBeacon=function(){var c,g,p=this;(c=window)!=null&&(g=c.navigator)!=null&&g.sendBeacon&&(window.navigator.sendBeacon=VA.create(function(C){p.updateRequest(C.id,C)}))},o.limitListLength=function(){var c=this;if(this.itemCounter++,this.itemCounter%10==0){this.itemCounter=0;var g=(0,un.U2)(tA),p=Object.keys(g);p.length>this.maxNetworkNumber-10&&tA.update(function(C){for(var w=p.splice(0,p.length-c.maxNetworkNumber+10),M=0;M<w.length;M++)C[w[M]]=void 0,delete C[w[M]];return C})}},u}(Ii.N),BA=__webpack_require__(8747),gA={};BA.Z&&BA.Z.locals&&(gA.locals=BA.Z.locals);var JA,qA=0,iA={};iA.styleTagTransform=b(),iA.setAttributes=S(),iA.insert=y().bind(null,"head"),iA.domAPI=I(),iA.insertStyleElement=Q(),gA.use=function(h){return iA.options=h||{},qA++||(JA=f()(BA.Z,iA)),gA},gA.unuse=function(){qA>0&&!--qA&&(JA(),JA=null)};var yi=gA;function _i(h,u,o){var c=h.slice();return c[11]=u[o][0],c[12]=u[o][1],c}function vi(h,u,o){var c=h.slice();return c[11]=u[o][0],c[12]=u[o][1],c}function xi(h,u,o){var c=h.slice();return c[11]=u[o][0],c[12]=u[o][1],c}function wi(h,u,o){var c=h.slice();return c[11]=u[o][0],c[12]=u[o][1],c}function Si(h){var u,o,c;return{c:function(){u=(0,n.fLW)("("),o=(0,n.fLW)(h[0]),c=(0,n.fLW)(")")},m:function(g,p){(0,n.$Tr)(g,u,p),(0,n.$Tr)(g,o,p),(0,n.$Tr)(g,c,p)},p:function(g,p){1&p&&(0,n.rTO)(o,g[0])},d:function(g){g&&(0,n.ogt)(u),g&&(0,n.ogt)(o),g&&(0,n.ogt)(c)}}}function Kr(h){var u,o,c,g,p,C,w=h[0]>0&&Si(h);return{c:function(){u=(0,n.bGB)("dl"),o=(0,n.bGB)("dd"),c=(0,n.fLW)("Name "),w&&w.c(),(g=(0,n.bGB)("dd")).textContent="Method",(p=(0,n.bGB)("dd")).textContent="Status",(C=(0,n.bGB)("dd")).textContent="Time",(0,n.Ljt)(o,"class","vc-table-col vc-table-col-4"),(0,n.Ljt)(g,"class","vc-table-col"),(0,n.Ljt)(p,"class","vc-table-col"),(0,n.Ljt)(C,"class","vc-table-col"),(0,n.Ljt)(u,"class","vc-table-row")},m:function(M,k){(0,n.$Tr)(M,u,k),(0,n.R3I)(u,o),(0,n.R3I)(o,c),w&&w.m(o,null),(0,n.R3I)(u,g),(0,n.R3I)(u,p),(0,n.R3I)(u,C)},p:function(M,k){M[0]>0?w?w.p(M,k):((w=Si(M)).c(),w.m(o,null)):w&&(w.d(1),w=null)},d:function(M){M&&(0,n.ogt)(u),w&&w.d()}}}function $r(h){var u;return{c:function(){(u=(0,n.bGB)("div")).textContent="Empty",(0,n.Ljt)(u,"slot","empty"),(0,n.Ljt)(u,"class","vc-plugin-empty")},m:function(o,c){(0,n.$Tr)(o,u,c)},p:n.ZTd,d:function(o){o&&(0,n.ogt)(u)}}}function Di(h){var u,o,c,g,p,C,w,M;C=new Gt({props:{content:h[10].requestHeader}});for(var k=Object.entries(h[10].requestHeader),z=[],X=0;X<k.length;X+=1)z[X]=bi(wi(h,k,X));return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("dl"),c=(0,n.bGB)("dt"),g=(0,n.fLW)(`Request Headers
                `),p=(0,n.bGB)("i"),(0,n.YCL)(C.$$.fragment),w=(0,n.DhX)();for(var V=0;V<z.length;V+=1)z[V].c();(0,n.Ljt)(p,"class","vc-table-row-icon"),(0,n.Ljt)(c,"class","vc-table-col vc-table-col-title"),(0,n.Ljt)(o,"class","vc-table-row vc-left-border")},m:function(V,ot){(0,n.$Tr)(V,u,ot),(0,n.R3I)(u,o),(0,n.R3I)(o,c),(0,n.R3I)(c,g),(0,n.R3I)(c,p),(0,n.yef)(C,p,null),(0,n.R3I)(u,w);for(var nt=0;nt<z.length;nt+=1)z[nt].m(u,null);M=!0},p:function(V,ot){var nt={};if(1024&ot&&(nt.content=V[10].requestHeader),C.$set(nt),1040&ot){var Et;for(k=Object.entries(V[10].requestHeader),Et=0;Et<k.length;Et+=1){var Qt=wi(V,k,Et);z[Et]?z[Et].p(Qt,ot):(z[Et]=bi(Qt),z[Et].c(),z[Et].m(u,null))}for(;Et<z.length;Et+=1)z[Et].d(1);z.length=k.length}},i:function(V){M||((0,n.Ui)(C.$$.fragment,V),M=!0)},o:function(V){(0,n.etI)(C.$$.fragment,V),M=!1},d:function(V){V&&(0,n.ogt)(u),(0,n.vpE)(C),(0,n.RMB)(z,V)}}}function bi(h){var u,o,c,g,p,C,w,M=h[11]+"",k=h[4](h[12])+"";return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("div"),c=(0,n.fLW)(M),g=(0,n.DhX)(),p=(0,n.bGB)("div"),C=(0,n.fLW)(k),w=(0,n.DhX)(),(0,n.Ljt)(o,"class","vc-table-col vc-table-col-2"),(0,n.Ljt)(p,"class","vc-table-col vc-table-col-4 vc-table-col-value vc-max-height-line"),(0,n.Ljt)(u,"class","vc-table-row vc-left-border vc-small")},m:function(z,X){(0,n.$Tr)(z,u,X),(0,n.R3I)(u,o),(0,n.R3I)(o,c),(0,n.R3I)(u,g),(0,n.R3I)(u,p),(0,n.R3I)(p,C),(0,n.R3I)(u,w)},p:function(z,X){1024&X&&M!==(M=z[11]+"")&&(0,n.rTO)(c,M),1024&X&&k!==(k=z[4](z[12])+"")&&(0,n.rTO)(C,k)},d:function(z){z&&(0,n.ogt)(u)}}}function Mi(h){var u,o,c,g,p,C,w,M;C=new Gt({props:{content:h[10].getData}});for(var k=Object.entries(h[10].getData),z=[],X=0;X<k.length;X+=1)z[X]=Ri(xi(h,k,X));return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("dl"),c=(0,n.bGB)("dt"),g=(0,n.fLW)(`Query String Parameters
                `),p=(0,n.bGB)("i"),(0,n.YCL)(C.$$.fragment),w=(0,n.DhX)();for(var V=0;V<z.length;V+=1)z[V].c();(0,n.Ljt)(p,"class","vc-table-row-icon"),(0,n.Ljt)(c,"class","vc-table-col vc-table-col-title"),(0,n.Ljt)(o,"class","vc-table-row vc-left-border")},m:function(V,ot){(0,n.$Tr)(V,u,ot),(0,n.R3I)(u,o),(0,n.R3I)(o,c),(0,n.R3I)(c,g),(0,n.R3I)(c,p),(0,n.yef)(C,p,null),(0,n.R3I)(u,w);for(var nt=0;nt<z.length;nt+=1)z[nt].m(u,null);M=!0},p:function(V,ot){var nt={};if(1024&ot&&(nt.content=V[10].getData),C.$set(nt),1040&ot){var Et;for(k=Object.entries(V[10].getData),Et=0;Et<k.length;Et+=1){var Qt=xi(V,k,Et);z[Et]?z[Et].p(Qt,ot):(z[Et]=Ri(Qt),z[Et].c(),z[Et].m(u,null))}for(;Et<z.length;Et+=1)z[Et].d(1);z.length=k.length}},i:function(V){M||((0,n.Ui)(C.$$.fragment,V),M=!0)},o:function(V){(0,n.etI)(C.$$.fragment,V),M=!1},d:function(V){V&&(0,n.ogt)(u),(0,n.vpE)(C),(0,n.RMB)(z,V)}}}function Ri(h){var u,o,c,g,p,C,w,M=h[11]+"",k=h[4](h[12])+"";return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("div"),c=(0,n.fLW)(M),g=(0,n.DhX)(),p=(0,n.bGB)("div"),C=(0,n.fLW)(k),w=(0,n.DhX)(),(0,n.Ljt)(o,"class","vc-table-col vc-table-col-2"),(0,n.Ljt)(p,"class","vc-table-col vc-table-col-4 vc-table-col-value vc-max-height-line"),(0,n.Ljt)(u,"class","vc-table-row vc-left-border vc-small")},m:function(z,X){(0,n.$Tr)(z,u,X),(0,n.R3I)(u,o),(0,n.R3I)(o,c),(0,n.R3I)(u,g),(0,n.R3I)(u,p),(0,n.R3I)(p,C),(0,n.R3I)(u,w)},p:function(z,X){1024&X&&M!==(M=z[11]+"")&&(0,n.rTO)(c,M),1024&X&&k!==(k=z[4](z[12])+"")&&(0,n.rTO)(C,k)},d:function(z){z&&(0,n.ogt)(u)}}}function Ti(h){var u,o,c,g,p,C,w,M;function k(V,ot){return typeof V[10].postData=="string"?Xr:jr}C=new Gt({props:{content:h[10].postData}});var z=k(h),X=z(h);return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("dl"),c=(0,n.bGB)("dt"),g=(0,n.fLW)(`Request Payload
                `),p=(0,n.bGB)("i"),(0,n.YCL)(C.$$.fragment),w=(0,n.DhX)(),X.c(),(0,n.Ljt)(p,"class","vc-table-row-icon"),(0,n.Ljt)(c,"class","vc-table-col vc-table-col-title"),(0,n.Ljt)(o,"class","vc-table-row vc-left-border")},m:function(V,ot){(0,n.$Tr)(V,u,ot),(0,n.R3I)(u,o),(0,n.R3I)(o,c),(0,n.R3I)(c,g),(0,n.R3I)(c,p),(0,n.yef)(C,p,null),(0,n.R3I)(u,w),X.m(u,null),M=!0},p:function(V,ot){var nt={};1024&ot&&(nt.content=V[10].postData),C.$set(nt),z===(z=k(V))&&X?X.p(V,ot):(X.d(1),(X=z(V))&&(X.c(),X.m(u,null)))},i:function(V){M||((0,n.Ui)(C.$$.fragment,V),M=!0)},o:function(V){(0,n.etI)(C.$$.fragment,V),M=!1},d:function(V){V&&(0,n.ogt)(u),(0,n.vpE)(C),X.d()}}}function jr(h){for(var u,o=Object.entries(h[10].postData),c=[],g=0;g<o.length;g+=1)c[g]=Li(vi(h,o,g));return{c:function(){for(var p=0;p<c.length;p+=1)c[p].c();u=(0,n.cSb)()},m:function(p,C){for(var w=0;w<c.length;w+=1)c[w].m(p,C);(0,n.$Tr)(p,u,C)},p:function(p,C){if(1040&C){var w;for(o=Object.entries(p[10].postData),w=0;w<o.length;w+=1){var M=vi(p,o,w);c[w]?c[w].p(M,C):(c[w]=Li(M),c[w].c(),c[w].m(u.parentNode,u))}for(;w<c.length;w+=1)c[w].d(1);c.length=o.length}},d:function(p){(0,n.RMB)(c,p),p&&(0,n.ogt)(u)}}}function Xr(h){var u,o,c,g=h[10].postData+"";return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("pre"),c=(0,n.fLW)(g),(0,n.Ljt)(o,"class","vc-table-col vc-table-col-value vc-max-height-line"),(0,n.Ljt)(o,"data-scrollable","1"),(0,n.Ljt)(u,"class","vc-table-row vc-left-border vc-small")},m:function(p,C){(0,n.$Tr)(p,u,C),(0,n.R3I)(u,o),(0,n.R3I)(o,c)},p:function(p,C){1024&C&&g!==(g=p[10].postData+"")&&(0,n.rTO)(c,g)},d:function(p){p&&(0,n.ogt)(u)}}}function Li(h){var u,o,c,g,p,C,w,M=h[11]+"",k=h[4](h[12])+"";return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("div"),c=(0,n.fLW)(M),g=(0,n.DhX)(),p=(0,n.bGB)("div"),C=(0,n.fLW)(k),w=(0,n.DhX)(),(0,n.Ljt)(o,"class","vc-table-col vc-table-col-2"),(0,n.Ljt)(p,"class","vc-table-col vc-table-col-4 vc-table-col-value vc-max-height-line"),(0,n.Ljt)(p,"data-scrollable","1"),(0,n.Ljt)(u,"class","vc-table-row vc-left-border vc-small")},m:function(z,X){(0,n.$Tr)(z,u,X),(0,n.R3I)(u,o),(0,n.R3I)(o,c),(0,n.R3I)(u,g),(0,n.R3I)(u,p),(0,n.R3I)(p,C),(0,n.R3I)(u,w)},p:function(z,X){1024&X&&M!==(M=z[11]+"")&&(0,n.rTO)(c,M),1024&X&&k!==(k=z[4](z[12])+"")&&(0,n.rTO)(C,k)},d:function(z){z&&(0,n.ogt)(u)}}}function Fi(h){var u,o,c,g,p,C,w,M;C=new Gt({props:{content:h[10].header}});for(var k=Object.entries(h[10].header),z=[],X=0;X<k.length;X+=1)z[X]=Ni(_i(h,k,X));return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("dl"),c=(0,n.bGB)("dt"),g=(0,n.fLW)(`Response Headers
                `),p=(0,n.bGB)("i"),(0,n.YCL)(C.$$.fragment),w=(0,n.DhX)();for(var V=0;V<z.length;V+=1)z[V].c();(0,n.Ljt)(p,"class","vc-table-row-icon"),(0,n.Ljt)(c,"class","vc-table-col vc-table-col-title"),(0,n.Ljt)(o,"class","vc-table-row vc-left-border")},m:function(V,ot){(0,n.$Tr)(V,u,ot),(0,n.R3I)(u,o),(0,n.R3I)(o,c),(0,n.R3I)(c,g),(0,n.R3I)(c,p),(0,n.yef)(C,p,null),(0,n.R3I)(u,w);for(var nt=0;nt<z.length;nt+=1)z[nt].m(u,null);M=!0},p:function(V,ot){var nt={};if(1024&ot&&(nt.content=V[10].header),C.$set(nt),1040&ot){var Et;for(k=Object.entries(V[10].header),Et=0;Et<k.length;Et+=1){var Qt=_i(V,k,Et);z[Et]?z[Et].p(Qt,ot):(z[Et]=Ni(Qt),z[Et].c(),z[Et].m(u,null))}for(;Et<z.length;Et+=1)z[Et].d(1);z.length=k.length}},i:function(V){M||((0,n.Ui)(C.$$.fragment,V),M=!0)},o:function(V){(0,n.etI)(C.$$.fragment,V),M=!1},d:function(V){V&&(0,n.ogt)(u),(0,n.vpE)(C),(0,n.RMB)(z,V)}}}function Ni(h){var u,o,c,g,p,C,w,M=h[11]+"",k=h[4](h[12])+"";return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("div"),c=(0,n.fLW)(M),g=(0,n.DhX)(),p=(0,n.bGB)("div"),C=(0,n.fLW)(k),w=(0,n.DhX)(),(0,n.Ljt)(o,"class","vc-table-col vc-table-col-2"),(0,n.Ljt)(p,"class","vc-table-col vc-table-col-4 vc-table-col-value vc-max-height-line"),(0,n.Ljt)(u,"class","vc-table-row vc-left-border vc-small")},m:function(z,X){(0,n.$Tr)(z,u,X),(0,n.R3I)(u,o),(0,n.R3I)(o,c),(0,n.R3I)(u,g),(0,n.R3I)(u,p),(0,n.R3I)(p,C),(0,n.R3I)(u,w)},p:function(z,X){1024&X&&M!==(M=z[11]+"")&&(0,n.rTO)(c,M),1024&X&&k!==(k=z[4](z[12])+"")&&(0,n.rTO)(C,k)},d:function(z){z&&(0,n.ogt)(u)}}}function ki(h){var u,o,c,g,p,C=h[10].responseSizeText+"";return{c:function(){u=(0,n.bGB)("div"),(o=(0,n.bGB)("div")).textContent="Size",c=(0,n.DhX)(),g=(0,n.bGB)("div"),p=(0,n.fLW)(C),(0,n.Ljt)(o,"class","vc-table-col vc-table-col-2"),(0,n.Ljt)(g,"class","vc-table-col vc-table-col-4 vc-table-col-value vc-max-height-line"),(0,n.Ljt)(u,"class","vc-table-row vc-left-border vc-small")},m:function(w,M){(0,n.$Tr)(w,u,M),(0,n.R3I)(u,o),(0,n.R3I)(u,c),(0,n.R3I)(u,g),(0,n.R3I)(g,p)},p:function(w,M){1024&M&&C!==(C=w[10].responseSizeText+"")&&(0,n.rTO)(p,C)},d:function(w){w&&(0,n.ogt)(u)}}}function Zr(h){var u,o,c,g,p,C,w,M,k,z,X,V,ot,nt,Et,Qt,Rt,kt,zt,pe,se,Re,Te,Ne,le,he,ke,An,Ge,Le,ye,Yt,Zt,He,Pt,ce,we,ae,Se,We,en,on,ze,wn,cn,Sn,$e,Rn,rn,Vn,$n,oA,fA,Wt,ve,_e,xe,Oe,Ve,Tn,Dn,bn,nn,Qn,jn,yn,$A,cr,_A=h[10].name+"",vA=h[10].method+"",xA=h[10].statusText+"",wA=h[10].costTime+"",SA=h[10].url+"",DA=h[10].method+"",bA=h[10].requestType+"",MA=h[10].status+"",RA=h[10].startTimeText+"",TA=(h[10].response||"")+"";function Ma(){return h[7](h[10])}kt=new Gt({props:{handler:h[3],content:h[10]}});var fn=h[10].requestHeader!==null&&Di(h),pn=h[10].getData!==null&&Mi(h),In=h[10].postData!==null&&Ti(h),En=h[10].header!==null&&Fi(h);Ve=new Gt({props:{content:h[10].response}});var Ln=h[10].responseSize>0&&ki(h);return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("dl"),c=(0,n.bGB)("dd"),g=(0,n.fLW)(_A),p=(0,n.bGB)("dd"),C=(0,n.fLW)(vA),w=(0,n.bGB)("dd"),M=(0,n.fLW)(xA),k=(0,n.bGB)("dd"),z=(0,n.fLW)(wA),X=(0,n.DhX)(),V=(0,n.bGB)("div"),ot=(0,n.bGB)("div"),nt=(0,n.bGB)("dl"),Et=(0,n.bGB)("dt"),Qt=(0,n.fLW)(`General
                `),Rt=(0,n.bGB)("i"),(0,n.YCL)(kt.$$.fragment),zt=(0,n.DhX)(),pe=(0,n.bGB)("div"),(se=(0,n.bGB)("div")).textContent="URL",Re=(0,n.DhX)(),Te=(0,n.bGB)("div"),Ne=(0,n.fLW)(SA),le=(0,n.DhX)(),he=(0,n.bGB)("div"),(ke=(0,n.bGB)("div")).textContent="Method",An=(0,n.DhX)(),Ge=(0,n.bGB)("div"),Le=(0,n.fLW)(DA),ye=(0,n.DhX)(),Yt=(0,n.bGB)("div"),(Zt=(0,n.bGB)("div")).textContent="Request Type",He=(0,n.DhX)(),Pt=(0,n.bGB)("div"),ce=(0,n.fLW)(bA),we=(0,n.DhX)(),ae=(0,n.bGB)("div"),(Se=(0,n.bGB)("div")).textContent="HTTP Status",We=(0,n.DhX)(),en=(0,n.bGB)("div"),on=(0,n.fLW)(MA),ze=(0,n.DhX)(),wn=(0,n.bGB)("div"),(cn=(0,n.bGB)("div")).textContent="Start Time",Sn=(0,n.DhX)(),$e=(0,n.bGB)("div"),Rn=(0,n.fLW)(RA),rn=(0,n.DhX)(),fn&&fn.c(),Vn=(0,n.DhX)(),pn&&pn.c(),$n=(0,n.DhX)(),In&&In.c(),oA=(0,n.DhX)(),En&&En.c(),fA=(0,n.DhX)(),Wt=(0,n.bGB)("div"),ve=(0,n.bGB)("dl"),_e=(0,n.bGB)("dt"),xe=(0,n.fLW)(`Response
                `),Oe=(0,n.bGB)("i"),(0,n.YCL)(Ve.$$.fragment),Tn=(0,n.DhX)(),Ln&&Ln.c(),Dn=(0,n.DhX)(),bn=(0,n.bGB)("div"),nn=(0,n.bGB)("pre"),Qn=(0,n.fLW)(TA),(0,n.Ljt)(c,"class","vc-table-col vc-table-col-4"),(0,n.Ljt)(p,"class","vc-table-col"),(0,n.Ljt)(w,"class","vc-table-col"),(0,n.Ljt)(k,"class","vc-table-col"),(0,n.Ljt)(o,"class","vc-table-row vc-group-preview"),(0,n.VHj)(o,"vc-table-row-error",h[10].status>=400),(0,n.Ljt)(Rt,"class","vc-table-row-icon"),(0,n.Ljt)(Et,"class","vc-table-col vc-table-col-title"),(0,n.Ljt)(nt,"class","vc-table-row vc-left-border"),(0,n.Ljt)(se,"class","vc-table-col vc-table-col-2"),(0,n.Ljt)(Te,"class","vc-table-col vc-table-col-4 vc-table-col-value vc-max-height-line"),(0,n.Ljt)(pe,"class","vc-table-row vc-left-border vc-small"),(0,n.Ljt)(ke,"class","vc-table-col vc-table-col-2"),(0,n.Ljt)(Ge,"class","vc-table-col vc-table-col-4 vc-table-col-value vc-max-height-line"),(0,n.Ljt)(he,"class","vc-table-row vc-left-border vc-small"),(0,n.Ljt)(Zt,"class","vc-table-col vc-table-col-2"),(0,n.Ljt)(Pt,"class","vc-table-col vc-table-col-4 vc-table-col-value vc-max-height-line"),(0,n.Ljt)(Yt,"class","vc-table-row vc-left-border vc-small"),(0,n.Ljt)(Se,"class","vc-table-col vc-table-col-2"),(0,n.Ljt)(en,"class","vc-table-col vc-table-col-4 vc-table-col-value vc-max-height-line"),(0,n.Ljt)(ae,"class","vc-table-row vc-left-border vc-small"),(0,n.Ljt)(cn,"class","vc-table-col vc-table-col-2"),(0,n.Ljt)($e,"class","vc-table-col vc-table-col-4 vc-table-col-value vc-max-height-line"),(0,n.Ljt)(wn,"class","vc-table-row vc-left-border vc-small"),(0,n.Ljt)(Oe,"class","vc-table-row-icon"),(0,n.Ljt)(_e,"class","vc-table-col vc-table-col-title"),(0,n.Ljt)(ve,"class","vc-table-row vc-left-border"),(0,n.Ljt)(nn,"class","vc-table-col vc-max-height vc-min-height"),(0,n.Ljt)(nn,"data-scrollable","1"),(0,n.Ljt)(bn,"class","vc-table-row vc-left-border vc-small"),(0,n.Ljt)(V,"class","vc-group-detail"),(0,n.Ljt)(u,"slot","item"),(0,n.Ljt)(u,"class","vc-group"),(0,n.Ljt)(u,"id",jn=h[10].id),(0,n.VHj)(u,"vc-actived",h[10].actived)},m:function(Gn,Je){(0,n.$Tr)(Gn,u,Je),(0,n.R3I)(u,o),(0,n.R3I)(o,c),(0,n.R3I)(c,g),(0,n.R3I)(o,p),(0,n.R3I)(p,C),(0,n.R3I)(o,w),(0,n.R3I)(w,M),(0,n.R3I)(o,k),(0,n.R3I)(k,z),(0,n.R3I)(u,X),(0,n.R3I)(u,V),(0,n.R3I)(V,ot),(0,n.R3I)(ot,nt),(0,n.R3I)(nt,Et),(0,n.R3I)(Et,Qt),(0,n.R3I)(Et,Rt),(0,n.yef)(kt,Rt,null),(0,n.R3I)(ot,zt),(0,n.R3I)(ot,pe),(0,n.R3I)(pe,se),(0,n.R3I)(pe,Re),(0,n.R3I)(pe,Te),(0,n.R3I)(Te,Ne),(0,n.R3I)(ot,le),(0,n.R3I)(ot,he),(0,n.R3I)(he,ke),(0,n.R3I)(he,An),(0,n.R3I)(he,Ge),(0,n.R3I)(Ge,Le),(0,n.R3I)(ot,ye),(0,n.R3I)(ot,Yt),(0,n.R3I)(Yt,Zt),(0,n.R3I)(Yt,He),(0,n.R3I)(Yt,Pt),(0,n.R3I)(Pt,ce),(0,n.R3I)(ot,we),(0,n.R3I)(ot,ae),(0,n.R3I)(ae,Se),(0,n.R3I)(ae,We),(0,n.R3I)(ae,en),(0,n.R3I)(en,on),(0,n.R3I)(ot,ze),(0,n.R3I)(ot,wn),(0,n.R3I)(wn,cn),(0,n.R3I)(wn,Sn),(0,n.R3I)(wn,$e),(0,n.R3I)($e,Rn),(0,n.R3I)(V,rn),fn&&fn.m(V,null),(0,n.R3I)(V,Vn),pn&&pn.m(V,null),(0,n.R3I)(V,$n),In&&In.m(V,null),(0,n.R3I)(V,oA),En&&En.m(V,null),(0,n.R3I)(V,fA),(0,n.R3I)(V,Wt),(0,n.R3I)(Wt,ve),(0,n.R3I)(ve,_e),(0,n.R3I)(_e,xe),(0,n.R3I)(_e,Oe),(0,n.yef)(Ve,Oe,null),(0,n.R3I)(Wt,Tn),Ln&&Ln.m(Wt,null),(0,n.R3I)(Wt,Dn),(0,n.R3I)(Wt,bn),(0,n.R3I)(bn,nn),(0,n.R3I)(nn,Qn),yn=!0,$A||(cr=(0,n.oLt)(o,"click",Ma),$A=!0)},p:function(Gn,Je){h=Gn,(!yn||1024&Je)&&_A!==(_A=h[10].name+"")&&(0,n.rTO)(g,_A),(!yn||1024&Je)&&vA!==(vA=h[10].method+"")&&(0,n.rTO)(C,vA),(!yn||1024&Je)&&xA!==(xA=h[10].statusText+"")&&(0,n.rTO)(M,xA),(!yn||1024&Je)&&wA!==(wA=h[10].costTime+"")&&(0,n.rTO)(z,wA),1024&Je&&(0,n.VHj)(o,"vc-table-row-error",h[10].status>=400);var lr={};1024&Je&&(lr.content=h[10]),kt.$set(lr),(!yn||1024&Je)&&SA!==(SA=h[10].url+"")&&(0,n.rTO)(Ne,SA),(!yn||1024&Je)&&DA!==(DA=h[10].method+"")&&(0,n.rTO)(Le,DA),(!yn||1024&Je)&&bA!==(bA=h[10].requestType+"")&&(0,n.rTO)(ce,bA),(!yn||1024&Je)&&MA!==(MA=h[10].status+"")&&(0,n.rTO)(on,MA),(!yn||1024&Je)&&RA!==(RA=h[10].startTimeText+"")&&(0,n.rTO)(Rn,RA),h[10].requestHeader!==null?fn?(fn.p(h,Je),1024&Je&&(0,n.Ui)(fn,1)):((fn=Di(h)).c(),(0,n.Ui)(fn,1),fn.m(V,Vn)):fn&&((0,n.dvw)(),(0,n.etI)(fn,1,1,function(){fn=null}),(0,n.gbL)()),h[10].getData!==null?pn?(pn.p(h,Je),1024&Je&&(0,n.Ui)(pn,1)):((pn=Mi(h)).c(),(0,n.Ui)(pn,1),pn.m(V,$n)):pn&&((0,n.dvw)(),(0,n.etI)(pn,1,1,function(){pn=null}),(0,n.gbL)()),h[10].postData!==null?In?(In.p(h,Je),1024&Je&&(0,n.Ui)(In,1)):((In=Ti(h)).c(),(0,n.Ui)(In,1),In.m(V,oA)):In&&((0,n.dvw)(),(0,n.etI)(In,1,1,function(){In=null}),(0,n.gbL)()),h[10].header!==null?En?(En.p(h,Je),1024&Je&&(0,n.Ui)(En,1)):((En=Fi(h)).c(),(0,n.Ui)(En,1),En.m(V,fA)):En&&((0,n.dvw)(),(0,n.etI)(En,1,1,function(){En=null}),(0,n.gbL)());var ur={};1024&Je&&(ur.content=h[10].response),Ve.$set(ur),h[10].responseSize>0?Ln?Ln.p(h,Je):((Ln=ki(h)).c(),Ln.m(Wt,Dn)):Ln&&(Ln.d(1),Ln=null),(!yn||1024&Je)&&TA!==(TA=(h[10].response||"")+"")&&(0,n.rTO)(Qn,TA),(!yn||1024&Je&&jn!==(jn=h[10].id))&&(0,n.Ljt)(u,"id",jn),1024&Je&&(0,n.VHj)(u,"vc-actived",h[10].actived)},i:function(Gn){yn||((0,n.Ui)(kt.$$.fragment,Gn),(0,n.Ui)(fn),(0,n.Ui)(pn),(0,n.Ui)(In),(0,n.Ui)(En),(0,n.Ui)(Ve.$$.fragment,Gn),yn=!0)},o:function(Gn){(0,n.etI)(kt.$$.fragment,Gn),(0,n.etI)(fn),(0,n.etI)(pn),(0,n.etI)(In),(0,n.etI)(En),(0,n.etI)(Ve.$$.fragment,Gn),yn=!1},d:function(Gn){Gn&&(0,n.ogt)(u),(0,n.vpE)(kt),fn&&fn.d(),pn&&pn.d(),In&&In.d(),En&&En.d(),(0,n.vpE)(Ve),Ln&&Ln.d(),$A=!1,cr()}}}function ta(h){var u,o,c,g;return c=new gi({props:{items:h[1],itemKey:"id",itemHeight:30,buffer:100,stickToBottom:!0,scrollbar:!0,$$slots:{item:[Zr,function(p){return{10:p.item}},function(p){return p.item?1024:0}],empty:[$r],header:[Kr]},$$scope:{ctx:h}}}),{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("div"),(0,n.YCL)(c.$$.fragment),(0,n.Ljt)(o,"class","vc-plugin-content"),(0,n.Ljt)(u,"class","vc-table")},m:function(p,C){(0,n.$Tr)(p,u,C),(0,n.R3I)(u,o),(0,n.yef)(c,o,null),g=!0},p:function(p,C){var w=C[0],M={};2&w&&(M.items=p[1]),2098177&w&&(M.$$scope={dirty:w,ctx:p}),c.$set(M)},i:function(p){g||((0,n.Ui)(c.$$.fragment,p),g=!0)},o:function(p){(0,n.etI)(c.$$.fragment,p),g=!1},d:function(p){p&&(0,n.ogt)(u),(0,n.vpE)(c)}}}function ea(h,u,o){var c;(0,n.FIv)(h,tA,function(k){return o(6,c=k)});var g=0,p=function(k){o(0,g=Object.keys(k).length)},C=tA.subscribe(p);p(c);var w=[],M=function(k){(0,n.fxP)(tA,c[k].actived=!c[k].actived,c)};return(0,l.H3)(function(){yi.use()}),(0,l.ev)(function(){C(),yi.unuse()}),h.$$.update=function(){64&h.$$.dirty&&o(1,w=Object.values(c))},[g,w,M,function(k){var z="curl -X "+k.method;return typeof k.postData=="string"?z+=" -d '"+k.postData+"'":typeof k.postData=="object"&&k.postData!==null&&(z+=" -d '"+t.hZ(k.postData)+"'"),z+" '"+k.url+"'"},function(k){return t.Kn(k)||t.kJ(k)?t.hZ(k,{maxDepth:10,keyMaxLen:1e4,pretty:!0}):k},{fixedHeight:!0},c,function(k){return M(k.id)}]}var na=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,ea,ta,n.N8,{options:5}),c}return(0,s.Z)(u,h),(0,r.Z)(u,[{key:"options",get:function(){return this.$$.ctx[5]}}]),u}(n.f_C),Aa=na,ia=function(h){function u(){for(var c,g=arguments.length,p=new Array(g),C=0;C<g;C++)p[C]=arguments[C];return(c=h.call.apply(h,[this].concat(p))||this).model=CA.getSingleton(CA,"VConsoleNetworkModel"),c}(0,s.Z)(u,h);var o=u.prototype;return o.add=function(c){var g=new Bi(new uA);for(var p in c)g[p]=c[p];return g.startTime=g.startTime||Date.now(),g.requestType=g.requestType||"custom",this.model.updateRequest(g.id,g),g},o.update=function(c,g){this.model.updateRequest(c,g)},o.clear=function(){this.model.clearLog()},u}(di),Ui=function(h){function u(c,g,p){var C;return p===void 0&&(p={}),(C=h.call(this,c,g,Aa,p)||this).model=CA.getSingleton(CA,"VConsoleNetworkModel"),C.exporter=void 0,C.exporter=new ia(c),C}(0,s.Z)(u,h);var o=u.prototype;return o.onReady=function(){h.prototype.onReady.call(this),this.onUpdateOption()},o.onAddTool=function(c){var g=this;c([{name:"Clear",global:!1,onClick:function(p){g.model.clearLog()}}])},o.onRemove=function(){h.prototype.onRemove.call(this),this.model&&this.model.unMock()},o.onUpdateOption=function(){var c,g,p;((c=this.vConsole.option.network)==null?void 0:c.maxNetworkNumber)!==this.model.maxNetworkNumber&&(this.model.maxNetworkNumber=Number((p=this.vConsole.option.network)==null?void 0:p.maxNetworkNumber)||1e3),(g=this.vConsole.option.network)!=null&&g.ignoreUrlRegExp&&(this.model.ignoreUrlRegExp=this.vConsole.option.network.ignoreUrlRegExp)},u}(W),ra=__webpack_require__(8679),aa=__webpack_require__.n(ra),mA=(0,un.fZ)(),hA=(0,un.fZ)(),QA=__webpack_require__(5670),dA={};QA.Z&&QA.Z.locals&&(dA.locals=QA.Z.locals);var WA,KA=0,rA={};rA.styleTagTransform=b(),rA.setAttributes=S(),rA.insert=y().bind(null,"head"),rA.domAPI=I(),rA.insertStyleElement=Q(),dA.use=function(h){return rA.options=h||{},KA++||(WA=f()(QA.Z,rA)),dA},dA.unuse=function(){KA>0&&!--KA&&(WA(),WA=null)};var Gi=dA;function Pi(h,u,o){var c=h.slice();return c[8]=u[o],c}function Oi(h,u,o){var c=h.slice();return c[11]=u[o],c}function Hi(h){var u,o,c,g=h[0].nodeType===Node.ELEMENT_NODE&&zi(h),p=h[0].nodeType===Node.TEXT_NODE&&$i(h);return{c:function(){u=(0,n.bGB)("div"),g&&g.c(),o=(0,n.DhX)(),p&&p.c(),(0,n.Ljt)(u,"class","vcelm-l"),(0,n.VHj)(u,"vc-actived",h[0]._isActived),(0,n.VHj)(u,"vc-toggle",h[0]._isExpand),(0,n.VHj)(u,"vcelm-noc",h[0]._isSingleLine)},m:function(C,w){(0,n.$Tr)(C,u,w),g&&g.m(u,null),(0,n.R3I)(u,o),p&&p.m(u,null),c=!0},p:function(C,w){C[0].nodeType===Node.ELEMENT_NODE?g?(g.p(C,w),1&w&&(0,n.Ui)(g,1)):((g=zi(C)).c(),(0,n.Ui)(g,1),g.m(u,o)):g&&((0,n.dvw)(),(0,n.etI)(g,1,1,function(){g=null}),(0,n.gbL)()),C[0].nodeType===Node.TEXT_NODE?p?p.p(C,w):((p=$i(C)).c(),p.m(u,null)):p&&(p.d(1),p=null),1&w&&(0,n.VHj)(u,"vc-actived",C[0]._isActived),1&w&&(0,n.VHj)(u,"vc-toggle",C[0]._isExpand),1&w&&(0,n.VHj)(u,"vcelm-noc",C[0]._isSingleLine)},i:function(C){c||((0,n.Ui)(g),c=!0)},o:function(C){(0,n.etI)(g),c=!1},d:function(C){C&&(0,n.ogt)(u),g&&g.d(),p&&p.d()}}}function zi(h){var u,o,c,g,p,C,w,M,k,z,X=h[0].nodeName+"",V=(h[0].className||h[0].attributes.length)&&Yi(h),ot=h[0]._isNullEndTag&&Ji(),nt=h[0].childNodes.length>0&&qi(h),Et=!h[0]._isNullEndTag&&Ki(h);return{c:function(){u=(0,n.bGB)("span"),o=(0,n.fLW)("<"),c=(0,n.fLW)(X),V&&V.c(),g=(0,n.cSb)(),ot&&ot.c(),p=(0,n.fLW)(">"),nt&&nt.c(),C=(0,n.cSb)(),Et&&Et.c(),w=(0,n.cSb)(),(0,n.Ljt)(u,"class","vcelm-node")},m:function(Qt,Rt){(0,n.$Tr)(Qt,u,Rt),(0,n.R3I)(u,o),(0,n.R3I)(u,c),V&&V.m(u,null),(0,n.R3I)(u,g),ot&&ot.m(u,null),(0,n.R3I)(u,p),nt&&nt.m(Qt,Rt),(0,n.$Tr)(Qt,C,Rt),Et&&Et.m(Qt,Rt),(0,n.$Tr)(Qt,w,Rt),M=!0,k||(z=(0,n.oLt)(u,"click",h[2]),k=!0)},p:function(Qt,Rt){(!M||1&Rt)&&X!==(X=Qt[0].nodeName+"")&&(0,n.rTO)(c,X),Qt[0].className||Qt[0].attributes.length?V?V.p(Qt,Rt):((V=Yi(Qt)).c(),V.m(u,g)):V&&(V.d(1),V=null),Qt[0]._isNullEndTag?ot||((ot=Ji()).c(),ot.m(u,p)):ot&&(ot.d(1),ot=null),Qt[0].childNodes.length>0?nt?(nt.p(Qt,Rt),1&Rt&&(0,n.Ui)(nt,1)):((nt=qi(Qt)).c(),(0,n.Ui)(nt,1),nt.m(C.parentNode,C)):nt&&((0,n.dvw)(),(0,n.etI)(nt,1,1,function(){nt=null}),(0,n.gbL)()),Qt[0]._isNullEndTag?Et&&(Et.d(1),Et=null):Et?Et.p(Qt,Rt):((Et=Ki(Qt)).c(),Et.m(w.parentNode,w))},i:function(Qt){M||((0,n.Ui)(nt),M=!0)},o:function(Qt){(0,n.etI)(nt),M=!1},d:function(Qt){Qt&&(0,n.ogt)(u),V&&V.d(),ot&&ot.d(),nt&&nt.d(Qt),Qt&&(0,n.ogt)(C),Et&&Et.d(Qt),Qt&&(0,n.ogt)(w),k=!1,z()}}}function Yi(h){for(var u,o=h[0].attributes,c=[],g=0;g<o.length;g+=1)c[g]=Vi(Oi(h,o,g));return{c:function(){u=(0,n.bGB)("i");for(var p=0;p<c.length;p+=1)c[p].c();(0,n.Ljt)(u,"class","vcelm-k")},m:function(p,C){(0,n.$Tr)(p,u,C);for(var w=0;w<c.length;w+=1)c[w].m(u,null)},p:function(p,C){if(1&C){var w;for(o=p[0].attributes,w=0;w<o.length;w+=1){var M=Oi(p,o,w);c[w]?c[w].p(M,C):(c[w]=Vi(M),c[w].c(),c[w].m(u,null))}for(;w<c.length;w+=1)c[w].d(1);c.length=o.length}},d:function(p){p&&(0,n.ogt)(u),(0,n.RMB)(c,p)}}}function sa(h){var u,o=h[11].name+"";return{c:function(){u=(0,n.fLW)(o)},m:function(c,g){(0,n.$Tr)(c,u,g)},p:function(c,g){1&g&&o!==(o=c[11].name+"")&&(0,n.rTO)(u,o)},d:function(c){c&&(0,n.ogt)(u)}}}function oa(h){var u,o,c,g,p,C=h[11].name+"",w=h[11].value+"";return{c:function(){u=(0,n.fLW)(C),o=(0,n.fLW)('="'),c=(0,n.bGB)("i"),g=(0,n.fLW)(w),p=(0,n.fLW)('"'),(0,n.Ljt)(c,"class","vcelm-v")},m:function(M,k){(0,n.$Tr)(M,u,k),(0,n.$Tr)(M,o,k),(0,n.$Tr)(M,c,k),(0,n.R3I)(c,g),(0,n.$Tr)(M,p,k)},p:function(M,k){1&k&&C!==(C=M[11].name+"")&&(0,n.rTO)(u,C),1&k&&w!==(w=M[11].value+"")&&(0,n.rTO)(g,w)},d:function(M){M&&(0,n.ogt)(u),M&&(0,n.ogt)(o),M&&(0,n.ogt)(c),M&&(0,n.ogt)(p)}}}function Vi(h){var u,o;function c(C,w){return C[11].value!==""?oa:sa}var g=c(h),p=g(h);return{c:function(){u=(0,n.fLW)(` 
            `),p.c(),o=(0,n.cSb)()},m:function(C,w){(0,n.$Tr)(C,u,w),p.m(C,w),(0,n.$Tr)(C,o,w)},p:function(C,w){g===(g=c(C))&&p?p.p(C,w):(p.d(1),(p=g(C))&&(p.c(),p.m(o.parentNode,o)))},d:function(C){C&&(0,n.ogt)(u),p.d(C),C&&(0,n.ogt)(o)}}}function Ji(h){var u;return{c:function(){u=(0,n.fLW)("/")},m:function(o,c){(0,n.$Tr)(o,u,c)},d:function(o){o&&(0,n.ogt)(u)}}}function qi(h){var u,o,c,g,p=[la,ca],C=[];function w(M,k){return M[0]._isExpand?1:0}return u=w(h),o=C[u]=p[u](h),{c:function(){o.c(),c=(0,n.cSb)()},m:function(M,k){C[u].m(M,k),(0,n.$Tr)(M,c,k),g=!0},p:function(M,k){var z=u;(u=w(M))===z?C[u].p(M,k):((0,n.dvw)(),(0,n.etI)(C[z],1,1,function(){C[z]=null}),(0,n.gbL)(),(o=C[u])?o.p(M,k):(o=C[u]=p[u](M)).c(),(0,n.Ui)(o,1),o.m(c.parentNode,c))},i:function(M){g||((0,n.Ui)(o),g=!0)},o:function(M){(0,n.etI)(o),g=!1},d:function(M){C[u].d(M),M&&(0,n.ogt)(c)}}}function ca(h){for(var u,o,c=h[0].childNodes,g=[],p=0;p<c.length;p+=1)g[p]=Wi(Pi(h,c,p));var C=function(w){return(0,n.etI)(g[w],1,1,function(){g[w]=null})};return{c:function(){for(var w=0;w<g.length;w+=1)g[w].c();u=(0,n.cSb)()},m:function(w,M){for(var k=0;k<g.length;k+=1)g[k].m(w,M);(0,n.$Tr)(w,u,M),o=!0},p:function(w,M){if(1&M){var k;for(c=w[0].childNodes,k=0;k<c.length;k+=1){var z=Pi(w,c,k);g[k]?(g[k].p(z,M),(0,n.Ui)(g[k],1)):(g[k]=Wi(z),g[k].c(),(0,n.Ui)(g[k],1),g[k].m(u.parentNode,u))}for((0,n.dvw)(),k=c.length;k<g.length;k+=1)C(k);(0,n.gbL)()}},i:function(w){if(!o){for(var M=0;M<c.length;M+=1)(0,n.Ui)(g[M]);o=!0}},o:function(w){g=g.filter(Boolean);for(var M=0;M<g.length;M+=1)(0,n.etI)(g[M]);o=!1},d:function(w){(0,n.RMB)(g,w),w&&(0,n.ogt)(u)}}}function la(h){var u;return{c:function(){u=(0,n.fLW)("...")},m:function(o,c){(0,n.$Tr)(o,u,c)},p:n.ZTd,i:n.ZTd,o:n.ZTd,d:function(o){o&&(0,n.ogt)(u)}}}function Wi(h){var u,o,c;return(u=new ji({props:{node:h[8]}})).$on("toggleNode",h[4]),{c:function(){(0,n.YCL)(u.$$.fragment),o=(0,n.DhX)()},m:function(g,p){(0,n.yef)(u,g,p),(0,n.$Tr)(g,o,p),c=!0},p:function(g,p){var C={};1&p&&(C.node=g[8]),u.$set(C)},i:function(g){c||((0,n.Ui)(u.$$.fragment,g),c=!0)},o:function(g){(0,n.etI)(u.$$.fragment,g),c=!1},d:function(g){(0,n.vpE)(u,g),g&&(0,n.ogt)(o)}}}function Ki(h){var u,o,c,g,p=h[0].nodeName+"";return{c:function(){u=(0,n.bGB)("span"),o=(0,n.fLW)("</"),c=(0,n.fLW)(p),g=(0,n.fLW)(">"),(0,n.Ljt)(u,"class","vcelm-node")},m:function(C,w){(0,n.$Tr)(C,u,w),(0,n.R3I)(u,o),(0,n.R3I)(u,c),(0,n.R3I)(u,g)},p:function(C,w){1&w&&p!==(p=C[0].nodeName+"")&&(0,n.rTO)(c,p)},d:function(C){C&&(0,n.ogt)(u)}}}function $i(h){var u,o,c=h[1](h[0].textContent)+"";return{c:function(){u=(0,n.bGB)("span"),o=(0,n.fLW)(c),(0,n.Ljt)(u,"class","vcelm-t vcelm-noc")},m:function(g,p){(0,n.$Tr)(g,u,p),(0,n.R3I)(u,o)},p:function(g,p){1&p&&c!==(c=g[1](g[0].textContent)+"")&&(0,n.rTO)(o,c)},d:function(g){g&&(0,n.ogt)(u)}}}function ua(h){var u,o,c=h[0]&&Hi(h);return{c:function(){c&&c.c(),u=(0,n.cSb)()},m:function(g,p){c&&c.m(g,p),(0,n.$Tr)(g,u,p),o=!0},p:function(g,p){var C=p[0];g[0]?c?(c.p(g,C),1&C&&(0,n.Ui)(c,1)):((c=Hi(g)).c(),(0,n.Ui)(c,1),c.m(u.parentNode,u)):c&&((0,n.dvw)(),(0,n.etI)(c,1,1,function(){c=null}),(0,n.gbL)())},i:function(g){o||((0,n.Ui)(c),o=!0)},o:function(g){(0,n.etI)(c),o=!1},d:function(g){c&&c.d(g),g&&(0,n.ogt)(u)}}}function ga(h,u,o){var c;(0,n.FIv)(h,hA,function(w){return o(3,c=w)});var g=u.node,p=(0,l.x)(),C=["br","hr","img","input","link","meta"];return(0,l.H3)(function(){Gi.use()}),(0,l.ev)(function(){Gi.unuse()}),h.$$set=function(w){"node"in w&&o(0,g=w.node)},h.$$.update=function(){9&h.$$.dirty&&g&&(o(0,g._isActived=g===c,g),o(0,g._isNullEndTag=function(w){return C.indexOf(w.nodeName)>-1}(g),g),o(0,g._isSingleLine=g.childNodes.length===0||g._isNullEndTag,g))},[g,function(w){return w.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")},function(){g._isNullEndTag||(o(0,g._isExpand=!g._isExpand,g),p("toggleNode",{node:g}))},c,function(w){n.cKT.call(this,h,w)}]}var ji=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,ga,ua,n.N8,{node:0}),c}return(0,s.Z)(u,h),(0,r.Z)(u,[{key:"node",get:function(){return this.$$.ctx[0]},set:function(o){this.$$set({node:o}),(0,n.yl1)()}}]),u}(n.f_C),ha=ji;function da(h){var u,o,c;return(o=new ha({props:{node:h[0]}})).$on("toggleNode",h[1]),{c:function(){u=(0,n.bGB)("div"),(0,n.YCL)(o.$$.fragment),(0,n.Ljt)(u,"class","vc-plugin-content")},m:function(g,p){(0,n.$Tr)(g,u,p),(0,n.yef)(o,u,null),c=!0},p:function(g,p){var C={};1&p[0]&&(C.node=g[0]),o.$set(C)},i:function(g){c||((0,n.Ui)(o.$$.fragment,g),c=!0)},o:function(g){(0,n.etI)(o.$$.fragment,g),c=!1},d:function(g){g&&(0,n.ogt)(u),(0,n.vpE)(o)}}}function fa(h,u,o){var c;return(0,n.FIv)(h,mA,function(g){return o(0,c=g)}),[c,function(g){n.cKT.call(this,h,g)}]}var pa=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,fa,da,n.N8,{}),c}return(0,s.Z)(u,h),u}(n.f_C),Ia=pa,Xi=function(h){function u(c,g,p){var C;return p===void 0&&(p={}),(C=h.call(this,c,g,Ia,p)||this).isInited=!1,C.observer=void 0,C.nodeMap=void 0,C}(0,s.Z)(u,h);var o=u.prototype;return o.onShow=function(){this.isInited||this._init()},o.onRemove=function(){h.prototype.onRemove.call(this),this.isInited&&(this.observer.disconnect(),this.isInited=!1,this.nodeMap=void 0,mA.set(void 0))},o.onAddTool=function(c){var g=this;c([{name:"Expand",global:!1,onClick:function(p){g._expandActivedNode()}},{name:"Collapse",global:!1,onClick:function(p){g._collapseActivedNode()}}])},o._init=function(){var c=this;this.isInited=!0,this.nodeMap=new WeakMap;var g=this._generateVNode(document.documentElement);g._isExpand=!0,hA.set(g),mA.set(g),this.compInstance.$on("toggleNode",function(p){hA.set(p.detail.node)}),this.observer=new(aa())(function(p){for(var C=0;C<p.length;C++){var w=p[C];c._isInVConsole(w.target)||c._handleMutation(w)}}),this.observer.observe(document.documentElement,{attributes:!0,childList:!0,characterData:!0,subtree:!0})},o._handleMutation=function(c){switch(c.type){case"childList":c.removedNodes.length>0&&this._onChildRemove(c),c.addedNodes.length>0&&this._onChildAdd(c);break;case"attributes":this._onAttributesChange(c);break;case"characterData":this._onCharacterDataChange(c)}},o._onChildRemove=function(c){var g=this.nodeMap.get(c.target);if(g){for(var p=0;p<c.removedNodes.length;p++){var C=this.nodeMap.get(c.removedNodes[p]);if(C){for(var w=0;w<g.childNodes.length;w++)if(g.childNodes[w]===C){g.childNodes.splice(w,1);break}this.nodeMap.delete(c.removedNodes[p])}}this._refreshStore()}},o._onChildAdd=function(c){var g=this.nodeMap.get(c.target);if(g){for(var p=0;p<c.addedNodes.length;p++){var C=c.addedNodes[p],w=this._generateVNode(C);if(w){var M=void 0,k=C;do{if(k.nextSibling===null)break;k.nodeType===Node.ELEMENT_NODE&&(M=this.nodeMap.get(k.nextSibling)||void 0),k=k.nextSibling}while(M===void 0);if(M===void 0)g.childNodes.push(w);else for(var z=0;z<g.childNodes.length;z++)if(g.childNodes[z]===M){g.childNodes.splice(z,0,w);break}}}this._refreshStore()}},o._onAttributesChange=function(c){this._updateVNodeAttributes(c.target),this._refreshStore()},o._onCharacterDataChange=function(c){var g=this.nodeMap.get(c.target);g&&(g.textContent=c.target.textContent,this._refreshStore())},o._generateVNode=function(c){if(!this._isIgnoredNode(c)){var g={nodeType:c.nodeType,nodeName:c.nodeName.toLowerCase(),textContent:"",id:"",className:"",attributes:[],childNodes:[]};if(this.nodeMap.set(c,g),g.nodeType!=c.TEXT_NODE&&g.nodeType!=c.DOCUMENT_TYPE_NODE||(g.textContent=c.textContent),c.childNodes.length>0){g.childNodes=[];for(var p=0;p<c.childNodes.length;p++){var C=this._generateVNode(c.childNodes[p]);C&&g.childNodes.push(C)}}return this._updateVNodeAttributes(c),g}},o._updateVNodeAttributes=function(c){var g=this.nodeMap.get(c);if(g&&c instanceof Element&&(g.id=c.id||"",g.className=c.className||"",c.hasAttributes&&c.hasAttributes())){g.attributes=[];for(var p=0;p<c.attributes.length;p++)g.attributes.push({name:c.attributes[p].name,value:c.attributes[p].value||""})}},o._expandActivedNode=function(){var c=(0,un.U2)(hA);if(c._isExpand)for(var g=0;g<c.childNodes.length;g++)c.childNodes[g]._isExpand=!0;else c._isExpand=!0;this._refreshStore()},o._collapseActivedNode=function(){var c=(0,un.U2)(hA);if(c._isExpand){for(var g=!1,p=0;p<c.childNodes.length;p++)c.childNodes[p]._isExpand&&(g=!0,c.childNodes[p]._isExpand=!1);g||(c._isExpand=!1),this._refreshStore()}},o._isIgnoredNode=function(c){if(c.nodeType===c.TEXT_NODE){if(c.textContent.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$|\n+/g,"")==="")return!0}else if(c.nodeType===c.COMMENT_NODE)return!0;return!1},o._isInVConsole=function(c){for(var g=c;g!==void 0;){if(g.id=="__vconsole")return!0;g=g.parentElement||void 0}return!1},o._refreshStore=function(){mA.update(function(c){return c})},u}(W);function Zi(h,u,o,c,g,p,C){try{var w=h[p](C),M=w.value}catch(k){return void o(k)}w.done?u(M):Promise.resolve(M).then(c,g)}function sA(h){return function(){var u=this,o=arguments;return new Promise(function(c,g){var p=h.apply(u,o);function C(M){Zi(p,c,g,C,w,"next",M)}function w(M){Zi(p,c,g,C,w,"throw",M)}C(void 0)})}}var Ea=__webpack_require__(8270);function tr(h,u){var o=Object.keys(h);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(h);u&&(c=c.filter(function(g){return Object.getOwnPropertyDescriptor(h,g).enumerable})),o.push.apply(o,c)}return o}function er(h){for(var u=1;u<arguments.length;u++){var o=arguments[u]!=null?arguments[u]:{};u%2?tr(Object(o),!0).forEach(function(c){(0,Ea.Z)(h,c,o[c])}):Object.getOwnPropertyDescriptors?Object.defineProperties(h,Object.getOwnPropertyDescriptors(o)):tr(Object(o)).forEach(function(c){Object.defineProperty(h,c,Object.getOwnPropertyDescriptor(o,c))})}return h}var nr=function(h){if(!h||h.length===0)return{};for(var u={},o=h.split(";"),c=0;c<o.length;c++){var g=o[c].indexOf("=");if(!(g<0)){var p=o[c].substring(0,g).replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),C=o[c].substring(g+1,o[c].length);try{p=decodeURIComponent(p)}catch{}try{C=decodeURIComponent(C)}catch{}u[p]=C}}return u},Ar=function(h,u,o){typeof document<"u"&&document.cookie!==void 0&&(document.cookie=encodeURIComponent(h)+"="+encodeURIComponent(u)+function(c){c===void 0&&(c={});var g=c,p=g.path,C=g.domain,w=g.expires,M=g.secure,k=g.sameSite,z=["none","lax","strict"].indexOf((k||"").toLowerCase())>-1?k:null;return[p==null?"":";path="+p,C==null?"":";domain="+C,w==null?"":";expires="+w.toUTCString(),M===void 0||M===!1?"":";secure",z===null?"":";SameSite="+z].join("")}(o))},ir=function(){return typeof document>"u"||document.cookie===void 0?"":document.cookie},Ca=function(){function h(){}var u=h.prototype;return u.key=function(o){return o<this.keys.length?this.keys[o]:null},u.setItem=function(o,c,g){Ar(o,c,g)},u.getItem=function(o){var c=nr(ir());return Object.prototype.hasOwnProperty.call(c,o)?c[o]:null},u.removeItem=function(o,c){for(var g,p,C=["","/"],w=((g=location)==null||(p=g.hostname)==null?void 0:p.split("."))||[];w.length>1;)C.push(w.join(".")),w.shift();for(var M=0;M<C.length;M++)for(var k,z,X=((k=location)==null||(z=k.pathname)==null?void 0:z.split("/"))||[],V="";X.length>0;){V+=(V==="/"?"":"/")+X.shift();var ot=er(er({},c),{},{path:V,domain:C[M],expires:new Date(0)});Ar(o,"",ot)}},u.clear=function(){for(var o=[].concat(this.keys),c=0;c<o.length;c++)this.removeItem(o[c])},(0,r.Z)(h,[{key:"length",get:function(){return this.keys.length}},{key:"keys",get:function(){var o=nr(ir());return Object.keys(o).sort()}}]),h}(),Ba=function(){function h(){this.keys=[],this.currentSize=0,this.limitSize=0}var u=h.prototype;return u.key=function(o){return o<this.keys.length?this.keys[o]:null},u.prepare=function(){var o=sA(De().mark(function c(){var g=this;return De().wrap(function(p){for(;;)switch(p.prev=p.next){case 0:return p.abrupt("return",new Promise(function(C,w){(0,t.qt)("getStorageInfo",{success:function(M){g.keys=M?M.keys.sort():[],g.currentSize=M?M.currentSize:0,g.limitSize=M?M.limitSize:0,C(!0)},fail:function(){w(!1)}})}));case 1:case"end":return p.stop()}},c)}));return function(){return o.apply(this,arguments)}}(),u.getItem=function(o){return new Promise(function(c,g){(0,t.qt)("getStorage",{key:o,success:function(p){var C=p.data;if(typeof p.data=="object")try{C=JSON.stringify(p.data)}catch{}c(C)},fail:function(p){g(p)}})})},u.setItem=function(o,c){return new Promise(function(g,p){(0,t.qt)("setStorage",{key:o,data:c,success:function(C){g(C)},fail:function(C){p(C)}})})},u.removeItem=function(o){return new Promise(function(c,g){(0,t.qt)("removeStorage",{key:o,success:function(p){c(p)},fail:function(p){g(p)}})})},u.clear=function(){return new Promise(function(o,c){(0,t.qt)("clearStorage",{success:function(g){o(g)},fail:function(g){c(g)}})})},(0,r.Z)(h,[{key:"length",get:function(){return this.keys.length}}]),h}(),dn={updateTime:(0,un.fZ)(0),activedName:(0,un.fZ)(null),defaultStorages:(0,un.fZ)(["cookies","localStorage","sessionStorage"])},yA=function(h){function u(){var c;return(c=h.call(this)||this).storage=new Map,dn.activedName.subscribe(function(g){var p=(0,un.U2)(dn.defaultStorages);p.length>0&&p.indexOf(g)===-1&&dn.activedName.set(p[0])}),dn.defaultStorages.subscribe(function(g){g.indexOf((0,un.U2)(dn.activedName))===-1&&dn.activedName.set(g[0]),c.updateEnabledStorages()}),c}(0,s.Z)(u,h);var o=u.prototype;return o.getItem=function(){var c=sA(De().mark(function g(p){return De().wrap(function(C){for(;;)switch(C.prev=C.next){case 0:if(this.activedStorage){C.next=2;break}return C.abrupt("return","");case 2:return C.next=4,this.promisify(this.activedStorage.getItem(p));case 4:return C.abrupt("return",C.sent);case 5:case"end":return C.stop()}},g,this)}));return function(g){return c.apply(this,arguments)}}(),o.setItem=function(){var c=sA(De().mark(function g(p,C){var w;return De().wrap(function(M){for(;;)switch(M.prev=M.next){case 0:if(this.activedStorage){M.next=2;break}return M.abrupt("return");case 2:return M.next=4,this.promisify(this.activedStorage.setItem(p,C));case 4:return w=M.sent,this.refresh(),M.abrupt("return",w);case 7:case"end":return M.stop()}},g,this)}));return function(g,p){return c.apply(this,arguments)}}(),o.removeItem=function(){var c=sA(De().mark(function g(p){var C;return De().wrap(function(w){for(;;)switch(w.prev=w.next){case 0:if(this.activedStorage){w.next=2;break}return w.abrupt("return");case 2:return w.next=4,this.promisify(this.activedStorage.removeItem(p));case 4:return C=w.sent,this.refresh(),w.abrupt("return",C);case 7:case"end":return w.stop()}},g,this)}));return function(g){return c.apply(this,arguments)}}(),o.clear=function(){var c=sA(De().mark(function g(){var p;return De().wrap(function(C){for(;;)switch(C.prev=C.next){case 0:if(this.activedStorage){C.next=2;break}return C.abrupt("return");case 2:return C.next=4,this.promisify(this.activedStorage.clear());case 4:return p=C.sent,this.refresh(),C.abrupt("return",p);case 7:case"end":return C.stop()}},g,this)}));return function(){return c.apply(this,arguments)}}(),o.refresh=function(){dn.updateTime.set(Date.now())},o.getEntries=function(){var c=sA(De().mark(function g(){var p,C,w,M,k;return De().wrap(function(z){for(;;)switch(z.prev=z.next){case 0:if(p=this.activedStorage){z.next=3;break}return z.abrupt("return",[]);case 3:if(typeof p.prepare!="function"){z.next=6;break}return z.next=6,p.prepare();case 6:C=[],w=0;case 8:if(!(w<p.length)){z.next=17;break}return M=p.key(w),z.next=12,this.getItem(M);case 12:k=z.sent,C.push([M,k]);case 14:w++,z.next=8;break;case 17:return z.abrupt("return",C);case 18:case"end":return z.stop()}},g,this)}));return function(){return c.apply(this,arguments)}}(),o.updateEnabledStorages=function(){var c=(0,un.U2)(dn.defaultStorages);c.indexOf("cookies")>-1?document.cookie!==void 0&&this.storage.set("cookies",new Ca):this.deleteStorage("cookies"),c.indexOf("localStorage")>-1?window.localStorage&&this.storage.set("localStorage",window.localStorage):this.deleteStorage("localStorage"),c.indexOf("sessionStorage")>-1?window.sessionStorage&&this.storage.set("sessionStorage",window.sessionStorage):this.deleteStorage("sessionStorage"),c.indexOf("wxStorage")>-1?(0,t.H_)()&&this.storage.set("wxStorage",new Ba):this.deleteStorage("wxStorage")},o.promisify=function(c){return typeof c=="string"||c==null?Promise.resolve(c):c},o.deleteStorage=function(c){this.storage.has(c)&&this.storage.delete(c)},(0,r.Z)(u,[{key:"activedStorage",get:function(){return this.storage.get((0,un.U2)(dn.activedName))}}]),u}(Ii.N);function rr(h,u,o){var c=h.slice();return c[20]=u[o][0],c[21]=u[o][1],c[23]=o,c}function ar(h){var u;return{c:function(){(u=(0,n.bGB)("div")).textContent="Empty",(0,n.Ljt)(u,"class","vc-plugin-empty")},m:function(o,c){(0,n.$Tr)(o,u,c)},p:n.ZTd,d:function(o){o&&(0,n.ogt)(u)}}}function ma(h){var u,o,c,g,p,C=h[20]+"",w=h[5](h[21])+"";return{c:function(){u=(0,n.bGB)("div"),o=(0,n.fLW)(C),c=(0,n.DhX)(),g=(0,n.bGB)("div"),p=(0,n.fLW)(w),(0,n.Ljt)(u,"class","vc-table-col"),(0,n.Ljt)(g,"class","vc-table-col vc-table-col-2")},m:function(M,k){(0,n.$Tr)(M,u,k),(0,n.R3I)(u,o),(0,n.$Tr)(M,c,k),(0,n.$Tr)(M,g,k),(0,n.R3I)(g,p)},p:function(M,k){1&k&&C!==(C=M[20]+"")&&(0,n.rTO)(o,C),1&k&&w!==(w=M[5](M[21])+"")&&(0,n.rTO)(p,w)},d:function(M){M&&(0,n.ogt)(u),M&&(0,n.ogt)(c),M&&(0,n.ogt)(g)}}}function Qa(h){var u,o,c,g,p,C,w;return{c:function(){u=(0,n.bGB)("div"),o=(0,n.bGB)("textarea"),c=(0,n.DhX)(),g=(0,n.bGB)("div"),p=(0,n.bGB)("textarea"),(0,n.Ljt)(o,"class","vc-table-input"),(0,n.Ljt)(u,"class","vc-table-col"),(0,n.Ljt)(p,"class","vc-table-input"),(0,n.Ljt)(g,"class","vc-table-col vc-table-col-2")},m:function(M,k){(0,n.$Tr)(M,u,k),(0,n.R3I)(u,o),(0,n.BmG)(o,h[2]),(0,n.$Tr)(M,c,k),(0,n.$Tr)(M,g,k),(0,n.R3I)(g,p),(0,n.BmG)(p,h[3]),C||(w=[(0,n.oLt)(o,"input",h[11]),(0,n.oLt)(p,"input",h[12])],C=!0)},p:function(M,k){4&k&&(0,n.BmG)(o,M[2]),8&k&&(0,n.BmG)(p,M[3])},d:function(M){M&&(0,n.ogt)(u),M&&(0,n.ogt)(c),M&&(0,n.ogt)(g),C=!1,(0,n.j7q)(w)}}}function ya(h){var u,o,c,g,p,C;return(u=new St.Z({props:{name:"delete"}})).$on("click",function(){return h[14](h[20])}),c=new Gt({props:{content:[h[20],h[21]].join("=")}}),(p=new St.Z({props:{name:"edit"}})).$on("click",function(){return h[15](h[20],h[21],h[23])}),{c:function(){(0,n.YCL)(u.$$.fragment),o=(0,n.DhX)(),(0,n.YCL)(c.$$.fragment),g=(0,n.DhX)(),(0,n.YCL)(p.$$.fragment)},m:function(w,M){(0,n.yef)(u,w,M),(0,n.$Tr)(w,o,M),(0,n.yef)(c,w,M),(0,n.$Tr)(w,g,M),(0,n.yef)(p,w,M),C=!0},p:function(w,M){h=w;var k={};1&M&&(k.content=[h[20],h[21]].join("=")),c.$set(k)},i:function(w){C||((0,n.Ui)(u.$$.fragment,w),(0,n.Ui)(c.$$.fragment,w),(0,n.Ui)(p.$$.fragment,w),C=!0)},o:function(w){(0,n.etI)(u.$$.fragment,w),(0,n.etI)(c.$$.fragment,w),(0,n.etI)(p.$$.fragment,w),C=!1},d:function(w){(0,n.vpE)(u,w),w&&(0,n.ogt)(o),(0,n.vpE)(c,w),w&&(0,n.ogt)(g),(0,n.vpE)(p,w)}}}function va(h){var u,o,c,g;return(u=new St.Z({props:{name:"cancel"}})).$on("click",h[9]),(c=new St.Z({props:{name:"done"}})).$on("click",function(){return h[13](h[20])}),{c:function(){(0,n.YCL)(u.$$.fragment),o=(0,n.DhX)(),(0,n.YCL)(c.$$.fragment)},m:function(p,C){(0,n.yef)(u,p,C),(0,n.$Tr)(p,o,C),(0,n.yef)(c,p,C),g=!0},p:function(p,C){h=p},i:function(p){g||((0,n.Ui)(u.$$.fragment,p),(0,n.Ui)(c.$$.fragment,p),g=!0)},o:function(p){(0,n.etI)(u.$$.fragment,p),(0,n.etI)(c.$$.fragment,p),g=!1},d:function(p){(0,n.vpE)(u,p),p&&(0,n.ogt)(o),(0,n.vpE)(c,p)}}}function sr(h){var u,o,c,g,p,C,w;function M(nt,Et){return nt[1]===nt[23]?Qa:ma}var k=M(h),z=k(h),X=[va,ya],V=[];function ot(nt,Et){return nt[1]===nt[23]?0:1}return g=ot(h),p=V[g]=X[g](h),{c:function(){u=(0,n.bGB)("div"),z.c(),o=(0,n.DhX)(),c=(0,n.bGB)("div"),p.c(),C=(0,n.DhX)(),(0,n.Ljt)(c,"class","vc-table-col vc-table-col-1 vc-table-action"),(0,n.Ljt)(u,"class","vc-table-row")},m:function(nt,Et){(0,n.$Tr)(nt,u,Et),z.m(u,null),(0,n.R3I)(u,o),(0,n.R3I)(u,c),V[g].m(c,null),(0,n.R3I)(u,C),w=!0},p:function(nt,Et){k===(k=M(nt))&&z?z.p(nt,Et):(z.d(1),(z=k(nt))&&(z.c(),z.m(u,o)));var Qt=g;(g=ot(nt))===Qt?V[g].p(nt,Et):((0,n.dvw)(),(0,n.etI)(V[Qt],1,1,function(){V[Qt]=null}),(0,n.gbL)(),(p=V[g])?p.p(nt,Et):(p=V[g]=X[g](nt)).c(),(0,n.Ui)(p,1),p.m(c,null))},i:function(nt){w||((0,n.Ui)(p),w=!0)},o:function(nt){(0,n.etI)(p),w=!1},d:function(nt){nt&&(0,n.ogt)(u),z.d(),V[g].d()}}}function xa(h){for(var u,o,c,g,p=h[0],C=[],w=0;w<p.length;w+=1)C[w]=sr(rr(h,p,w));var M=function(z){return(0,n.etI)(C[z],1,1,function(){C[z]=null})},k=null;return p.length||(k=ar()),{c:function(){u=(0,n.bGB)("div"),(o=(0,n.bGB)("div")).innerHTML=`<div class="vc-table-col">Key</div> 
    <div class="vc-table-col vc-table-col-2">Value</div> 
    <div class="vc-table-col vc-table-col-1 vc-table-action"></div>`,c=(0,n.DhX)();for(var z=0;z<C.length;z+=1)C[z].c();k&&k.c(),(0,n.Ljt)(o,"class","vc-table-row"),(0,n.Ljt)(u,"class","vc-table")},m:function(z,X){(0,n.$Tr)(z,u,X),(0,n.R3I)(u,o),(0,n.R3I)(u,c);for(var V=0;V<C.length;V+=1)C[V].m(u,null);k&&k.m(u,null),g=!0},p:function(z,X){var V=X[0];if(1007&V){var ot;for(p=z[0],ot=0;ot<p.length;ot+=1){var nt=rr(z,p,ot);C[ot]?(C[ot].p(nt,V),(0,n.Ui)(C[ot],1)):(C[ot]=sr(nt),C[ot].c(),(0,n.Ui)(C[ot],1),C[ot].m(u,null))}for((0,n.dvw)(),ot=p.length;ot<C.length;ot+=1)M(ot);(0,n.gbL)(),!p.length&&k?k.p(z,V):p.length?k&&(k.d(1),k=null):((k=ar()).c(),k.m(u,null))}},i:function(z){if(!g){for(var X=0;X<p.length;X+=1)(0,n.Ui)(C[X]);g=!0}},o:function(z){C=C.filter(Boolean);for(var X=0;X<C.length;X+=1)(0,n.etI)(C[X]);g=!1},d:function(z){z&&(0,n.ogt)(u),(0,n.RMB)(C,z),k&&k.d()}}}function wa(h,u,o){var c,g=this&&this.__awaiter||function(Et,Qt,Rt,kt){return new(Rt||(Rt=Promise))(function(zt,pe){function se(Ne){try{Te(kt.next(Ne))}catch(le){pe(le)}}function Re(Ne){try{Te(kt.throw(Ne))}catch(le){pe(le)}}function Te(Ne){var le;Ne.done?zt(Ne.value):(le=Ne.value,le instanceof Rt?le:new Rt(function(he){he(le)})).then(se,Re)}Te((kt=kt.apply(Et,Qt||[])).next())})},p=yA.getSingleton(yA,"VConsoleStorageModel"),C=dn.updateTime;(0,n.FIv)(h,C,function(Et){return o(10,c=Et)});var w=[],M=-1,k="",z="",X=function(){o(1,M=-1),o(2,k=""),o(3,z="")},V=function(Et){return g(void 0,void 0,void 0,De().mark(function Qt(){return De().wrap(function(Rt){for(;;)switch(Rt.prev=Rt.next){case 0:return Rt.next=2,p.removeItem(Et);case 2:case"end":return Rt.stop()}},Qt)}))},ot=function(Et){return g(void 0,void 0,void 0,De().mark(function Qt(){return De().wrap(function(Rt){for(;;)switch(Rt.prev=Rt.next){case 0:if(k===Et){Rt.next=3;break}return Rt.next=3,p.removeItem(Et);case 3:p.setItem(k,z),X();case 5:case"end":return Rt.stop()}},Qt)}))},nt=function(Et,Qt,Rt){return g(void 0,void 0,void 0,De().mark(function kt(){return De().wrap(function(zt){for(;;)switch(zt.prev=zt.next){case 0:o(2,k=Et),o(3,z=Qt),o(1,M=Rt);case 3:case"end":return zt.stop()}},kt)}))};return h.$$.update=function(){1024&h.$$.dirty&&c&&g(void 0,void 0,void 0,De().mark(function Et(){return De().wrap(function(Qt){for(;;)switch(Qt.prev=Qt.next){case 0:return X(),Qt.t0=o,Qt.next=4,p.getEntries();case 4:Qt.t1=w=Qt.sent,(0,Qt.t0)(0,Qt.t1);case 6:case"end":return Qt.stop()}},Et)}))},[w,M,k,z,C,function(Et){return(0,t.id)(Et,1024)},V,ot,nt,function(){X()},c,function(){k=this.value,o(2,k)},function(){z=this.value,o(3,z)},function(Et){return ot(Et)},function(Et){return V(Et)},function(Et,Qt,Rt){return nt(Et,Qt,Rt)}]}var Sa=function(h){function u(o){var c;return c=h.call(this)||this,(0,n.S1n)((0,a.Z)(c),o,wa,xa,n.N8,{}),c}return(0,s.Z)(u,h),u}(n.f_C),Da=Sa,or=function(h){function u(c,g,p){var C;return p===void 0&&(p={}),(C=h.call(this,c,g,Da,p)||this).model=yA.getSingleton(yA,"VConsoleStorageModel"),C.onAddTopBarCallback=void 0,C}(0,s.Z)(u,h);var o=u.prototype;return o.onReady=function(){h.prototype.onReady.call(this),this.onUpdateOption()},o.onShow=function(){this.model.refresh()},o.onAddTopBar=function(c){this.onAddTopBarCallback=c,this.updateTopBar()},o.onAddTool=function(c){var g=this;c([{name:"Add",global:!1,onClick:function(){g.model.setItem("new_"+Date.now(),"new_value")}},{name:"Refresh",global:!1,onClick:function(){g.model.refresh()}},{name:"Clear",global:!1,onClick:function(){g.model.clear()}}])},o.onUpdateOption=function(){var c,g=(c=this.vConsole.option.storage)==null?void 0:c.defaultStorages;(0,t.kJ)(g)&&(g=g.length>0?g:["cookies"])!==(0,un.U2)(dn.defaultStorages)&&(dn.defaultStorages.set(g),dn.activedName.set(g[0]),this.updateTopBar())},o.updateTopBar=function(){var c=this;if(typeof this.onAddTopBarCallback=="function"){for(var g=(0,un.U2)(dn.defaultStorages),p=[],C=0;C<g.length;C++){var w=g[C];p.push({name:w[0].toUpperCase()+w.substring(1),data:{name:w},actived:w===(0,un.U2)(dn.activedName),onClick:function(M,k){var z=(0,un.U2)(dn.activedName);if(k.name===z)return!1;dn.activedName.set(k.name),c.model.refresh()}})}this.onAddTopBarCallback(p)}},u}(W),mn=function(){function h(o){var c=this;if(this.version="3.15.1",this.isInited=!1,this.option={},this.compInstance=void 0,this.pluginList={},this.log=void 0,this.system=void 0,this.network=void 0,h.instance&&h.instance instanceof h)return console.debug("[vConsole] vConsole is already exists."),h.instance;if(h.instance=this,this.isInited=!1,this.option={defaultPlugins:["system","network","element","storage"],log:{},network:{},storage:{}},t.Kn(o))for(var g in o)this.option[g]=o[g];this.option.maxLogNumber!==void 0&&(this.option.log.maxLogNumber=this.option.maxLogNumber,console.debug("[vConsole] Deprecated option: `maxLogNumber`, use `log.maxLogNumber` instead.")),this.option.onClearLog!==void 0&&console.debug("[vConsole] Deprecated option: `onClearLog`."),this.option.maxNetworkNumber!==void 0&&(this.option.network.maxNetworkNumber=this.option.maxNetworkNumber,console.debug("[vConsole] Deprecated option: `maxNetworkNumber`, use `network.maxNetworkNumber` instead.")),this._addBuiltInPlugins();var p=function(){c.isInited||(c._initComponent(),c._autoRun())};if(document!==void 0)document.readyState==="loading"?A.bind(window,"DOMContentLoaded",p):p();else{var C;C=setTimeout(function w(){document&&document.readyState=="complete"?(C&&clearTimeout(C),p()):C=setTimeout(w,1)},1)}}var u=h.prototype;return u._addBuiltInPlugins=function(){this.addPlugin(new fi("default","Log"));var o=this.option.defaultPlugins,c={system:{proto:pi,name:"System"}};if(c.network={proto:Ui,name:"Network"},c.element={proto:Xi,name:"Element"},c.storage={proto:or,name:"Storage"},o&&t.kJ(o))for(var g=0;g<o.length;g++){var p=c[o[g]];p?this.addPlugin(new p.proto(o[g],p.name)):console.debug("[vConsole] Unrecognized default plugin ID:",o[g])}},u._initComponent=function(){var o=this;if(!A.one("#__vconsole")){var c,g=1*t.cF("switch_x"),p=1*t.cF("switch_y");typeof this.option.target=="string"?c=document.querySelector(this.option.target):this.option.target instanceof HTMLElement&&(c=this.option.target),c instanceof HTMLElement||(c=document.documentElement),this.compInstance=new Ee({target:c,props:{switchButtonPosition:{x:g,y:p}}}),this.compInstance.$on("show",function(C){C.detail.show?o.show():o.hide()}),this.compInstance.$on("changePanel",function(C){var w=C.detail.pluginId;o.showPlugin(w)})}this._updateComponentByOptions()},u._updateComponentByOptions=function(){if(this.compInstance){if(this.compInstance.theme!==this.option.theme){var o=this.option.theme;o=o!=="light"&&o!=="dark"?"":o,this.compInstance.theme=o}this.compInstance.disableScrolling!==this.option.disableLogScrolling&&(this.compInstance.disableScrolling=!!this.option.disableLogScrolling)}},u.setSwitchPosition=function(o,c){this.compInstance.switchButtonPosition={x:o,y:c}},u._autoRun=function(){for(var o in this.isInited=!0,this.pluginList)this._initPlugin(this.pluginList[o]);this._showFirstPluginWhenEmpty(),this.triggerEvent("ready")},u._showFirstPluginWhenEmpty=function(){var o=Object.keys(this.pluginList);this.compInstance.activedPluginId===""&&o.length>0&&this.showPlugin(o[0])},u.triggerEvent=function(o,c){var g=this;o="on"+o.charAt(0).toUpperCase()+o.slice(1),t.mf(this.option[o])&&setTimeout(function(){g.option[o].apply(g,c)},0)},u._initPlugin=function(o){var c=this;o.vConsole=this,this.compInstance.pluginList[o.id]={id:o.id,name:o.name,hasTabPanel:!1,tabOptions:void 0,topbarList:[],toolbarList:[],content:void 0,contentContainer:void 0},this.compInstance.pluginList=this._reorderPluginList(this.compInstance.pluginList),o.trigger("init"),o.trigger("renderTab",function(g,p){p===void 0&&(p={});var C=c.compInstance.pluginList[o.id];C.hasTabPanel=!0,C.tabOptions=p,g&&(c.compInstance.pluginList[o.id].content=g),c.compInstance.pluginList=c.compInstance.pluginList}),o.trigger("addTopBar",function(g){if(g){for(var p=[],C=0;C<g.length;C++){var w=g[C];p.push({name:w.name||"Undefined",className:w.className||"",actived:!!w.actived,data:w.data,onClick:w.onClick})}c.compInstance.pluginList[o.id].topbarList=p,c.compInstance.pluginList=c.compInstance.pluginList}}),o.trigger("addTool",function(g){if(g){for(var p=[],C=0;C<g.length;C++){var w=g[C];p.push({name:w.name||"Undefined",global:!!w.global,data:w.data,onClick:w.onClick})}c.compInstance.pluginList[o.id].toolbarList=p,c.compInstance.pluginList=c.compInstance.pluginList}}),o.isReady=!0,o.trigger("ready")},u._triggerPluginsEvent=function(o){for(var c in this.pluginList)this.pluginList[c].isReady&&this.pluginList[c].trigger(o)},u._triggerPluginEvent=function(o,c){var g=this.pluginList[o];g&&g.isReady&&g.trigger(c)},u._reorderPluginList=function(o){var c=this;if(!t.kJ(this.option.pluginOrder))return o;for(var g=Object.keys(o).sort(function(w,M){var k=c.option.pluginOrder.indexOf(w),z=c.option.pluginOrder.indexOf(M);return k===z?0:k===-1?1:z===-1?-1:k-z}),p={},C=0;C<g.length;C++)p[g[C]]=o[g[C]];return p},u.addPlugin=function(o){return this.pluginList[o.id]!==void 0?(console.debug("[vConsole] Plugin `"+o.id+"` has already been added."),!1):(this.pluginList[o.id]=o,this.isInited&&(this._initPlugin(o),this._showFirstPluginWhenEmpty()),!0)},u.removePlugin=function(o){o=(o+"").toLowerCase();var c=this.pluginList[o];if(c===void 0)return console.debug("[vConsole] Plugin `"+o+"` does not exist."),!1;c.trigger("remove");try{delete this.pluginList[o],delete this.compInstance.pluginList[o]}catch{this.pluginList[o]=void 0,this.compInstance.pluginList[o]=void 0}return this.compInstance.pluginList=this.compInstance.pluginList,this.compInstance.activedPluginId==o&&(this.compInstance.activedPluginId="",this._showFirstPluginWhenEmpty()),!0},u.show=function(){this.isInited&&(this.compInstance.show=!0,this._triggerPluginsEvent("showConsole"))},u.hide=function(){this.isInited&&(this.compInstance.show=!1,this._triggerPluginsEvent("hideConsole"))},u.showSwitch=function(){this.isInited&&(this.compInstance.showSwitchButton=!0)},u.hideSwitch=function(){this.isInited&&(this.compInstance.showSwitchButton=!1)},u.showPlugin=function(o){this.isInited&&(this.pluginList[o]||console.debug("[vConsole] Plugin `"+o+"` does not exist."),this.compInstance.activedPluginId&&this._triggerPluginEvent(this.compInstance.activedPluginId,"hide"),this.compInstance.activedPluginId=o,this._triggerPluginEvent(this.compInstance.activedPluginId,"show"))},u.setOption=function(o,c){if(typeof o=="string"){for(var g=o.split("."),p=this.option,C=0;C<g.length;C++){if(g[C]==="__proto__"||g[C]==="constructor"||g[C]==="prototype")return void console.debug("[vConsole] Cannot set `"+g[C]+"` in `vConsole.setOption()`.");p[g[C]]===void 0&&(p[g[C]]={}),C===g.length-1&&(p[g[C]]=c),p=p[g[C]]}this._triggerPluginsEvent("updateOption"),this._updateComponentByOptions()}else if(t.Kn(o)){for(var w in o)w!=="__proto__"&&w!=="constructor"&&w!=="prototype"?this.option[w]=o[w]:console.debug("[vConsole] Cannot set `"+w+"` in `vConsole.setOption()`.");this._triggerPluginsEvent("updateOption"),this._updateComponentByOptions()}else console.debug("[vConsole] The first parameter of `vConsole.setOption()` must be a string or an object.")},u.destroy=function(){if(this.isInited){this.isInited=!1,h.instance=void 0;for(var o=Object.keys(this.pluginList),c=o.length-1;c>=0;c--)this.removePlugin(o[c]);this.compInstance.$destroy()}},(0,r.Z)(h,null,[{key:"instance",get:function(){return window.__VCONSOLE_INSTANCE},set:function(o){o===void 0||o instanceof h?window.__VCONSOLE_INSTANCE=o:console.debug("[vConsole] Cannot set `VConsole.instance` because the value is not the instance of VConsole.")}}]),h}();mn.VConsolePlugin=void 0,mn.VConsoleLogPlugin=void 0,mn.VConsoleDefaultPlugin=void 0,mn.VConsoleSystemPlugin=void 0,mn.VConsoleNetworkPlugin=void 0,mn.VConsoleElementPlugin=void 0,mn.VConsoleStoragePlugin=void 0,mn.VConsolePlugin=be,mn.VConsoleLogPlugin=UA,mn.VConsoleDefaultPlugin=fi,mn.VConsoleSystemPlugin=pi,mn.VConsoleNetworkPlugin=Ui,mn.VConsoleElementPlugin=Xi,mn.VConsoleStoragePlugin=or;var ba=mn}(),__webpack_exports__=__webpack_exports__.default,__webpack_exports__}()})}(vconsole_min$1)),vconsole_min$1.exports}var vconsole_minExports=requireVconsole_min();const VConsole=getDefaultExportFromCjs(vconsole_minExports);var stats_min$1={exports:{}},stats_min=stats_min$1.exports,hasRequiredStats_min;function requireStats_min(){return hasRequiredStats_min||(hasRequiredStats_min=1,function(r,t){(function(e,A){r.exports=A()})(stats_min,function(){var e=function(){function A(y){return n.appendChild(y.dom),y}function a(y){for(var v=0;v<n.children.length;v++)n.children[v].style.display=v===y?"block":"none";s=y}var s=0,n=document.createElement("div");n.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",n.addEventListener("click",function(y){y.preventDefault(),a(++s%n.children.length)},!1);var l=(performance||Date).now(),d=l,f=0,E=A(new e.Panel("FPS","#0ff","#002")),I=A(new e.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var B=A(new e.Panel("MB","#f08","#201"));return a(0),{REVISION:16,dom:n,addPanel:A,showPanel:a,begin:function(){l=(performance||Date).now()},end:function(){f++;var y=(performance||Date).now();if(I.update(y-l,200),y>d+1e3&&(E.update(1e3*f/(y-d),100),d=y,f=0,B)){var v=performance.memory;B.update(v.usedJSHeapSize/1048576,v.jsHeapSizeLimit/1048576)}return y},update:function(){l=this.end()},domElement:n,setMode:a}};return e.Panel=function(A,a,s){var n=1/0,l=0,d=Math.round,f=d(window.devicePixelRatio||1),E=80*f,I=48*f,B=3*f,y=2*f,v=3*f,S=15*f,_=74*f,Q=30*f,D=document.createElement("canvas");D.width=E,D.height=I,D.style.cssText="width:80px;height:48px";var b=D.getContext("2d");return b.font="bold "+9*f+"px Helvetica,Arial,sans-serif",b.textBaseline="top",b.fillStyle=s,b.fillRect(0,0,E,I),b.fillStyle=a,b.fillText(A,B,y),b.fillRect(v,S,_,Q),b.fillStyle=s,b.globalAlpha=.9,b.fillRect(v,S,_,Q),{dom:D,update:function(T,P){n=Math.min(n,T),l=Math.max(l,T),b.fillStyle=s,b.globalAlpha=1,b.fillRect(0,0,E,S),b.fillStyle=a,b.fillText(d(T)+" "+A+" ("+d(n)+"-"+d(l)+")",B,y),b.drawImage(D,v+f,S,_-f,Q,v,S,_-f,Q),b.fillRect(v+_-f,S,f,Q),b.fillStyle=s,b.globalAlpha=.9,b.fillRect(v+_-f,S,f,d((1-T/P)*Q))}}},e})}(stats_min$1)),stats_min$1.exports}var stats_minExports=requireStats_min();const Stats=getDefaultExportFromCjs(stats_minExports);export{PerspectiveCamera as P,Stats as S,VConsole as V,WebGLRenderer as W,Scene as a,SplatMesh as b};
